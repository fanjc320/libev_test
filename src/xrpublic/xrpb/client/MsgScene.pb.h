// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/MsgScene.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_2fMsgScene_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_2fMsgScene_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client/Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_2fMsgScene_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_2fMsgScene_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_2fMsgScene_2eproto;
namespace XrPb {
class MsgMod_Scene;
struct MsgMod_SceneDefaultTypeInternal;
extern MsgMod_SceneDefaultTypeInternal _MsgMod_Scene_default_instance_;
class Msg_Battle_Error_Push;
struct Msg_Battle_Error_PushDefaultTypeInternal;
extern Msg_Battle_Error_PushDefaultTypeInternal _Msg_Battle_Error_Push_default_instance_;
class Msg_EnterRoom_CS;
struct Msg_EnterRoom_CSDefaultTypeInternal;
extern Msg_EnterRoom_CSDefaultTypeInternal _Msg_EnterRoom_CS_default_instance_;
class Msg_EnterRoom_SC;
struct Msg_EnterRoom_SCDefaultTypeInternal;
extern Msg_EnterRoom_SCDefaultTypeInternal _Msg_EnterRoom_SC_default_instance_;
class Msg_Move_CS;
struct Msg_Move_CSDefaultTypeInternal;
extern Msg_Move_CSDefaultTypeInternal _Msg_Move_CS_default_instance_;
class Msg_RoomQuit_CS;
struct Msg_RoomQuit_CSDefaultTypeInternal;
extern Msg_RoomQuit_CSDefaultTypeInternal _Msg_RoomQuit_CS_default_instance_;
class Msg_RoomQuit_SC;
struct Msg_RoomQuit_SCDefaultTypeInternal;
extern Msg_RoomQuit_SCDefaultTypeInternal _Msg_RoomQuit_SC_default_instance_;
class Msg_SceneBeat_CS;
struct Msg_SceneBeat_CSDefaultTypeInternal;
extern Msg_SceneBeat_CSDefaultTypeInternal _Msg_SceneBeat_CS_default_instance_;
class Msg_SceneBeat_SC;
struct Msg_SceneBeat_SCDefaultTypeInternal;
extern Msg_SceneBeat_SCDefaultTypeInternal _Msg_SceneBeat_SC_default_instance_;
class SceneRoomData;
struct SceneRoomDataDefaultTypeInternal;
extern SceneRoomDataDefaultTypeInternal _SceneRoomData_default_instance_;
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> ::XrPb::MsgMod_Scene* Arena::CreateMaybeMessage<::XrPb::MsgMod_Scene>(Arena*);
template<> ::XrPb::Msg_Battle_Error_Push* Arena::CreateMaybeMessage<::XrPb::Msg_Battle_Error_Push>(Arena*);
template<> ::XrPb::Msg_EnterRoom_CS* Arena::CreateMaybeMessage<::XrPb::Msg_EnterRoom_CS>(Arena*);
template<> ::XrPb::Msg_EnterRoom_SC* Arena::CreateMaybeMessage<::XrPb::Msg_EnterRoom_SC>(Arena*);
template<> ::XrPb::Msg_Move_CS* Arena::CreateMaybeMessage<::XrPb::Msg_Move_CS>(Arena*);
template<> ::XrPb::Msg_RoomQuit_CS* Arena::CreateMaybeMessage<::XrPb::Msg_RoomQuit_CS>(Arena*);
template<> ::XrPb::Msg_RoomQuit_SC* Arena::CreateMaybeMessage<::XrPb::Msg_RoomQuit_SC>(Arena*);
template<> ::XrPb::Msg_SceneBeat_CS* Arena::CreateMaybeMessage<::XrPb::Msg_SceneBeat_CS>(Arena*);
template<> ::XrPb::Msg_SceneBeat_SC* Arena::CreateMaybeMessage<::XrPb::Msg_SceneBeat_SC>(Arena*);
template<> ::XrPb::SceneRoomData* Arena::CreateMaybeMessage<::XrPb::SceneRoomData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XrPb {

enum MsgMod_Scene_MsgId : int {
  MsgMod_Scene_MsgId_Msg_None = 0,
  MsgMod_Scene_MsgId_Msg_Scene_Error_Push = 1,
  MsgMod_Scene_MsgId_Msg_EnterRoom_CS = 2,
  MsgMod_Scene_MsgId_Msg_EnterRoom_SC = 3,
  MsgMod_Scene_MsgId_Msg_Move_CS = 4,
  MsgMod_Scene_MsgId_Msg_Move_SC = 5,
  MsgMod_Scene_MsgId_Msg_RoomQuit_CS = 6,
  MsgMod_Scene_MsgId_Msg_RoomQuit_SC = 7,
  MsgMod_Scene_MsgId_Msg_SceneBeat_CS = 8,
  MsgMod_Scene_MsgId_Msg_SceneBeat_SC = 9,
  MsgMod_Scene_MsgId_MsgMod_Scene_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgMod_Scene_MsgId_MsgMod_Scene_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgMod_Scene_MsgId_IsValid(int value);
constexpr MsgMod_Scene_MsgId MsgMod_Scene_MsgId_MsgId_MIN = MsgMod_Scene_MsgId_Msg_None;
constexpr MsgMod_Scene_MsgId MsgMod_Scene_MsgId_MsgId_MAX = MsgMod_Scene_MsgId_Msg_SceneBeat_SC;
constexpr int MsgMod_Scene_MsgId_MsgId_ARRAYSIZE = MsgMod_Scene_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgMod_Scene_MsgId_descriptor();
template<typename T>
inline const std::string& MsgMod_Scene_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgMod_Scene_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgMod_Scene_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgMod_Scene_MsgId_descriptor(), enum_t_value);
}
inline bool MsgMod_Scene_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgMod_Scene_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgMod_Scene_MsgId>(
    MsgMod_Scene_MsgId_descriptor(), name, value);
}
// ===================================================================

class MsgMod_Scene final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.MsgMod_Scene) */ {
 public:
  inline MsgMod_Scene() : MsgMod_Scene(nullptr) {}
  explicit constexpr MsgMod_Scene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgMod_Scene(const MsgMod_Scene& from);
  MsgMod_Scene(MsgMod_Scene&& from) noexcept
    : MsgMod_Scene() {
    *this = ::std::move(from);
  }

  inline MsgMod_Scene& operator=(const MsgMod_Scene& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgMod_Scene& operator=(MsgMod_Scene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgMod_Scene& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgMod_Scene* internal_default_instance() {
    return reinterpret_cast<const MsgMod_Scene*>(
               &_MsgMod_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgMod_Scene& a, MsgMod_Scene& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgMod_Scene* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgMod_Scene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgMod_Scene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgMod_Scene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgMod_Scene& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgMod_Scene& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.MsgMod_Scene";
  }
  protected:
  explicit MsgMod_Scene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgMod_Scene_MsgId MsgId;
  static constexpr MsgId Msg_None =
    MsgMod_Scene_MsgId_Msg_None;
  static constexpr MsgId Msg_Scene_Error_Push =
    MsgMod_Scene_MsgId_Msg_Scene_Error_Push;
  static constexpr MsgId Msg_EnterRoom_CS =
    MsgMod_Scene_MsgId_Msg_EnterRoom_CS;
  static constexpr MsgId Msg_EnterRoom_SC =
    MsgMod_Scene_MsgId_Msg_EnterRoom_SC;
  static constexpr MsgId Msg_Move_CS =
    MsgMod_Scene_MsgId_Msg_Move_CS;
  static constexpr MsgId Msg_Move_SC =
    MsgMod_Scene_MsgId_Msg_Move_SC;
  static constexpr MsgId Msg_RoomQuit_CS =
    MsgMod_Scene_MsgId_Msg_RoomQuit_CS;
  static constexpr MsgId Msg_RoomQuit_SC =
    MsgMod_Scene_MsgId_Msg_RoomQuit_SC;
  static constexpr MsgId Msg_SceneBeat_CS =
    MsgMod_Scene_MsgId_Msg_SceneBeat_CS;
  static constexpr MsgId Msg_SceneBeat_SC =
    MsgMod_Scene_MsgId_Msg_SceneBeat_SC;
  static inline bool MsgId_IsValid(int value) {
    return MsgMod_Scene_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    MsgMod_Scene_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    MsgMod_Scene_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    MsgMod_Scene_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return MsgMod_Scene_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return MsgMod_Scene_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return MsgMod_Scene_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.MsgMod_Scene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_Battle_Error_Push final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_Battle_Error_Push) */ {
 public:
  inline Msg_Battle_Error_Push() : Msg_Battle_Error_Push(nullptr) {}
  ~Msg_Battle_Error_Push() override;
  explicit constexpr Msg_Battle_Error_Push(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Battle_Error_Push(const Msg_Battle_Error_Push& from);
  Msg_Battle_Error_Push(Msg_Battle_Error_Push&& from) noexcept
    : Msg_Battle_Error_Push() {
    *this = ::std::move(from);
  }

  inline Msg_Battle_Error_Push& operator=(const Msg_Battle_Error_Push& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Battle_Error_Push& operator=(Msg_Battle_Error_Push&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Battle_Error_Push& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Battle_Error_Push* internal_default_instance() {
    return reinterpret_cast<const Msg_Battle_Error_Push*>(
               &_Msg_Battle_Error_Push_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Msg_Battle_Error_Push& a, Msg_Battle_Error_Push& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Battle_Error_Push* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Battle_Error_Push* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Battle_Error_Push* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Battle_Error_Push>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Battle_Error_Push& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Battle_Error_Push& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Battle_Error_Push* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_Battle_Error_Push";
  }
  protected:
  explicit Msg_Battle_Error_Push(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolIDFieldNumber = 1,
    kModuleidFieldNumber = 2,
    kErrorCodeFieldNumber = 3,
  };
  // optional uint32 protocolID = 1;
  bool has_protocolid() const;
  private:
  bool _internal_has_protocolid() const;
  public:
  void clear_protocolid();
  uint32_t protocolid() const;
  void set_protocolid(uint32_t value);
  private:
  uint32_t _internal_protocolid() const;
  void _internal_set_protocolid(uint32_t value);
  public:

  // optional uint32 moduleid = 2;
  bool has_moduleid() const;
  private:
  bool _internal_has_moduleid() const;
  public:
  void clear_moduleid();
  uint32_t moduleid() const;
  void set_moduleid(uint32_t value);
  private:
  uint32_t _internal_moduleid() const;
  void _internal_set_moduleid(uint32_t value);
  public:

  // .XrPb.ResultCode ErrorCode = 3;
  void clear_errorcode();
  ::XrPb::ResultCode errorcode() const;
  void set_errorcode(::XrPb::ResultCode value);
  private:
  ::XrPb::ResultCode _internal_errorcode() const;
  void _internal_set_errorcode(::XrPb::ResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_Battle_Error_Push)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t protocolid_;
  uint32_t moduleid_;
  int errorcode_;
  friend struct ::TableStruct_client_2fMsgScene_2eproto;
};
// -------------------------------------------------------------------

class SceneRoomData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.SceneRoomData) */ {
 public:
  inline SceneRoomData() : SceneRoomData(nullptr) {}
  ~SceneRoomData() override;
  explicit constexpr SceneRoomData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneRoomData(const SceneRoomData& from);
  SceneRoomData(SceneRoomData&& from) noexcept
    : SceneRoomData() {
    *this = ::std::move(from);
  }

  inline SceneRoomData& operator=(const SceneRoomData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneRoomData& operator=(SceneRoomData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneRoomData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneRoomData* internal_default_instance() {
    return reinterpret_cast<const SceneRoomData*>(
               &_SceneRoomData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SceneRoomData& a, SceneRoomData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneRoomData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneRoomData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneRoomData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneRoomData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SceneRoomData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SceneRoomData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneRoomData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.SceneRoomData";
  }
  protected:
  explicit SceneRoomData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 4,
    kSessionFieldNumber = 1,
    kMapNameFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // repeated .XrPb.ScenePlayerData players = 4;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::XrPb::ScenePlayerData* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ScenePlayerData >*
      mutable_players();
  private:
  const ::XrPb::ScenePlayerData& _internal_players(int index) const;
  ::XrPb::ScenePlayerData* _internal_add_players();
  public:
  const ::XrPb::ScenePlayerData& players(int index) const;
  ::XrPb::ScenePlayerData* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ScenePlayerData >&
      players() const;

  // string Session = 1;
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // string mapName = 3;
  void clear_mapname();
  const std::string& mapname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapname();
  PROTOBUF_NODISCARD std::string* release_mapname();
  void set_allocated_mapname(std::string* mapname);
  private:
  const std::string& _internal_mapname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapname(const std::string& value);
  std::string* _internal_mutable_mapname();
  public:

  // .XrPb.RoomType type = 2;
  void clear_type();
  ::XrPb::RoomType type() const;
  void set_type(::XrPb::RoomType value);
  private:
  ::XrPb::RoomType _internal_type() const;
  void _internal_set_type(::XrPb::RoomType value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.SceneRoomData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ScenePlayerData > players_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapname_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SceneBeat_CS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_SceneBeat_CS) */ {
 public:
  inline Msg_SceneBeat_CS() : Msg_SceneBeat_CS(nullptr) {}
  explicit constexpr Msg_SceneBeat_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SceneBeat_CS(const Msg_SceneBeat_CS& from);
  Msg_SceneBeat_CS(Msg_SceneBeat_CS&& from) noexcept
    : Msg_SceneBeat_CS() {
    *this = ::std::move(from);
  }

  inline Msg_SceneBeat_CS& operator=(const Msg_SceneBeat_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SceneBeat_CS& operator=(Msg_SceneBeat_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SceneBeat_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SceneBeat_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_SceneBeat_CS*>(
               &_Msg_SceneBeat_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Msg_SceneBeat_CS& a, Msg_SceneBeat_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SceneBeat_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SceneBeat_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SceneBeat_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SceneBeat_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_SceneBeat_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_SceneBeat_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SceneBeat_CS";
  }
  protected:
  explicit Msg_SceneBeat_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SceneBeat_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SceneBeat_SC final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_SceneBeat_SC) */ {
 public:
  inline Msg_SceneBeat_SC() : Msg_SceneBeat_SC(nullptr) {}
  explicit constexpr Msg_SceneBeat_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SceneBeat_SC(const Msg_SceneBeat_SC& from);
  Msg_SceneBeat_SC(Msg_SceneBeat_SC&& from) noexcept
    : Msg_SceneBeat_SC() {
    *this = ::std::move(from);
  }

  inline Msg_SceneBeat_SC& operator=(const Msg_SceneBeat_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SceneBeat_SC& operator=(Msg_SceneBeat_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SceneBeat_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SceneBeat_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_SceneBeat_SC*>(
               &_Msg_SceneBeat_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Msg_SceneBeat_SC& a, Msg_SceneBeat_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SceneBeat_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SceneBeat_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SceneBeat_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SceneBeat_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_SceneBeat_SC& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_SceneBeat_SC& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SceneBeat_SC";
  }
  protected:
  explicit Msg_SceneBeat_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SceneBeat_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_EnterRoom_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_EnterRoom_CS) */ {
 public:
  inline Msg_EnterRoom_CS() : Msg_EnterRoom_CS(nullptr) {}
  ~Msg_EnterRoom_CS() override;
  explicit constexpr Msg_EnterRoom_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_EnterRoom_CS(const Msg_EnterRoom_CS& from);
  Msg_EnterRoom_CS(Msg_EnterRoom_CS&& from) noexcept
    : Msg_EnterRoom_CS() {
    *this = ::std::move(from);
  }

  inline Msg_EnterRoom_CS& operator=(const Msg_EnterRoom_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_EnterRoom_CS& operator=(Msg_EnterRoom_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_EnterRoom_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_EnterRoom_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_EnterRoom_CS*>(
               &_Msg_EnterRoom_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Msg_EnterRoom_CS& a, Msg_EnterRoom_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_EnterRoom_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_EnterRoom_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_EnterRoom_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_EnterRoom_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_EnterRoom_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_EnterRoom_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_EnterRoom_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_EnterRoom_CS";
  }
  protected:
  explicit Msg_EnterRoom_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomSessionIdFieldNumber = 1,
    kPlayerSessionIdFieldNumber = 2,
    kConvidFieldNumber = 3,
  };
  // string roomSessionId = 1;
  void clear_roomsessionid();
  const std::string& roomsessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomsessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomsessionid();
  PROTOBUF_NODISCARD std::string* release_roomsessionid();
  void set_allocated_roomsessionid(std::string* roomsessionid);
  private:
  const std::string& _internal_roomsessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomsessionid(const std::string& value);
  std::string* _internal_mutable_roomsessionid();
  public:

  // string PlayerSessionId = 2;
  void clear_playersessionid();
  const std::string& playersessionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playersessionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playersessionid();
  PROTOBUF_NODISCARD std::string* release_playersessionid();
  void set_allocated_playersessionid(std::string* playersessionid);
  private:
  const std::string& _internal_playersessionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playersessionid(const std::string& value);
  std::string* _internal_mutable_playersessionid();
  public:

  // uint32 convid = 3;
  void clear_convid();
  uint32_t convid() const;
  void set_convid(uint32_t value);
  private:
  uint32_t _internal_convid() const;
  void _internal_set_convid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_EnterRoom_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomsessionid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playersessionid_;
  uint32_t convid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_EnterRoom_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_EnterRoom_SC) */ {
 public:
  inline Msg_EnterRoom_SC() : Msg_EnterRoom_SC(nullptr) {}
  ~Msg_EnterRoom_SC() override;
  explicit constexpr Msg_EnterRoom_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_EnterRoom_SC(const Msg_EnterRoom_SC& from);
  Msg_EnterRoom_SC(Msg_EnterRoom_SC&& from) noexcept
    : Msg_EnterRoom_SC() {
    *this = ::std::move(from);
  }

  inline Msg_EnterRoom_SC& operator=(const Msg_EnterRoom_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_EnterRoom_SC& operator=(Msg_EnterRoom_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_EnterRoom_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_EnterRoom_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_EnterRoom_SC*>(
               &_Msg_EnterRoom_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Msg_EnterRoom_SC& a, Msg_EnterRoom_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_EnterRoom_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_EnterRoom_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_EnterRoom_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_EnterRoom_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_EnterRoom_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_EnterRoom_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_EnterRoom_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_EnterRoom_SC";
  }
  protected:
  explicit Msg_EnterRoom_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapNameFieldNumber = 2,
    kTypeFieldNumber = 1,
    kRandSeedFieldNumber = 3,
    kStartedFieldNumber = 4,
    kRoomTimeFieldNumber = 5,
    kStartTimeFieldNumber = 6,
  };
  // string mapName = 2;
  void clear_mapname();
  const std::string& mapname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapname();
  PROTOBUF_NODISCARD std::string* release_mapname();
  void set_allocated_mapname(std::string* mapname);
  private:
  const std::string& _internal_mapname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapname(const std::string& value);
  std::string* _internal_mutable_mapname();
  public:

  // .XrPb.RoomType type = 1;
  void clear_type();
  ::XrPb::RoomType type() const;
  void set_type(::XrPb::RoomType value);
  private:
  ::XrPb::RoomType _internal_type() const;
  void _internal_set_type(::XrPb::RoomType value);
  public:

  // uint32 randSeed = 3;
  void clear_randseed();
  uint32_t randseed() const;
  void set_randseed(uint32_t value);
  private:
  uint32_t _internal_randseed() const;
  void _internal_set_randseed(uint32_t value);
  public:

  // optional bool started = 4;
  bool has_started() const;
  private:
  bool _internal_has_started() const;
  public:
  void clear_started();
  bool started() const;
  void set_started(bool value);
  private:
  bool _internal_started() const;
  void _internal_set_started(bool value);
  public:

  // optional uint32 roomTime = 5;
  bool has_roomtime() const;
  private:
  bool _internal_has_roomtime() const;
  public:
  void clear_roomtime();
  uint32_t roomtime() const;
  void set_roomtime(uint32_t value);
  private:
  uint32_t _internal_roomtime() const;
  void _internal_set_roomtime(uint32_t value);
  public:

  // optional uint32 startTime = 6;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  uint32_t starttime() const;
  void set_starttime(uint32_t value);
  private:
  uint32_t _internal_starttime() const;
  void _internal_set_starttime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_EnterRoom_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapname_;
  int type_;
  uint32_t randseed_;
  bool started_;
  uint32_t roomtime_;
  uint32_t starttime_;
  friend struct ::TableStruct_client_2fMsgScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_Move_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_Move_CS) */ {
 public:
  inline Msg_Move_CS() : Msg_Move_CS(nullptr) {}
  ~Msg_Move_CS() override;
  explicit constexpr Msg_Move_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Move_CS(const Msg_Move_CS& from);
  Msg_Move_CS(Msg_Move_CS&& from) noexcept
    : Msg_Move_CS() {
    *this = ::std::move(from);
  }

  inline Msg_Move_CS& operator=(const Msg_Move_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Move_CS& operator=(Msg_Move_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Move_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Move_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_Move_CS*>(
               &_Msg_Move_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Msg_Move_CS& a, Msg_Move_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Move_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Move_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Move_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Move_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Move_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Move_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Move_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_Move_CS";
  }
  protected:
  explicit Msg_Move_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
  };
  // repeated .XrPb.V3_POS pos = 1;
  int pos_size() const;
  private:
  int _internal_pos_size() const;
  public:
  void clear_pos();
  ::XrPb::V3_POS* mutable_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::V3_POS >*
      mutable_pos();
  private:
  const ::XrPb::V3_POS& _internal_pos(int index) const;
  ::XrPb::V3_POS* _internal_add_pos();
  public:
  const ::XrPb::V3_POS& pos(int index) const;
  ::XrPb::V3_POS* add_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::V3_POS >&
      pos() const;

  // @@protoc_insertion_point(class_scope:XrPb.Msg_Move_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::V3_POS > pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_RoomQuit_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_RoomQuit_CS) */ {
 public:
  inline Msg_RoomQuit_CS() : Msg_RoomQuit_CS(nullptr) {}
  ~Msg_RoomQuit_CS() override;
  explicit constexpr Msg_RoomQuit_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_RoomQuit_CS(const Msg_RoomQuit_CS& from);
  Msg_RoomQuit_CS(Msg_RoomQuit_CS&& from) noexcept
    : Msg_RoomQuit_CS() {
    *this = ::std::move(from);
  }

  inline Msg_RoomQuit_CS& operator=(const Msg_RoomQuit_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_RoomQuit_CS& operator=(Msg_RoomQuit_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_RoomQuit_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_RoomQuit_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_RoomQuit_CS*>(
               &_Msg_RoomQuit_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Msg_RoomQuit_CS& a, Msg_RoomQuit_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_RoomQuit_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_RoomQuit_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_RoomQuit_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_RoomQuit_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_RoomQuit_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_RoomQuit_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_RoomQuit_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_RoomQuit_CS";
  }
  protected:
  explicit Msg_RoomQuit_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
  };
  // repeated .XrPb.V3_POS pos = 1;
  int pos_size() const;
  private:
  int _internal_pos_size() const;
  public:
  void clear_pos();
  ::XrPb::V3_POS* mutable_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::V3_POS >*
      mutable_pos();
  private:
  const ::XrPb::V3_POS& _internal_pos(int index) const;
  ::XrPb::V3_POS* _internal_add_pos();
  public:
  const ::XrPb::V3_POS& pos(int index) const;
  ::XrPb::V3_POS* add_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::V3_POS >&
      pos() const;

  // @@protoc_insertion_point(class_scope:XrPb.Msg_RoomQuit_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::V3_POS > pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_RoomQuit_SC final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_RoomQuit_SC) */ {
 public:
  inline Msg_RoomQuit_SC() : Msg_RoomQuit_SC(nullptr) {}
  explicit constexpr Msg_RoomQuit_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_RoomQuit_SC(const Msg_RoomQuit_SC& from);
  Msg_RoomQuit_SC(Msg_RoomQuit_SC&& from) noexcept
    : Msg_RoomQuit_SC() {
    *this = ::std::move(from);
  }

  inline Msg_RoomQuit_SC& operator=(const Msg_RoomQuit_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_RoomQuit_SC& operator=(Msg_RoomQuit_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_RoomQuit_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_RoomQuit_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_RoomQuit_SC*>(
               &_Msg_RoomQuit_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Msg_RoomQuit_SC& a, Msg_RoomQuit_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_RoomQuit_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_RoomQuit_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_RoomQuit_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_RoomQuit_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_RoomQuit_SC& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_RoomQuit_SC& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_RoomQuit_SC";
  }
  protected:
  explicit Msg_RoomQuit_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_RoomQuit_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgScene_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgMod_Scene

// -------------------------------------------------------------------

// Msg_Battle_Error_Push

// optional uint32 protocolID = 1;
inline bool Msg_Battle_Error_Push::_internal_has_protocolid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_Battle_Error_Push::has_protocolid() const {
  return _internal_has_protocolid();
}
inline void Msg_Battle_Error_Push::clear_protocolid() {
  protocolid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Msg_Battle_Error_Push::_internal_protocolid() const {
  return protocolid_;
}
inline uint32_t Msg_Battle_Error_Push::protocolid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Battle_Error_Push.protocolID)
  return _internal_protocolid();
}
inline void Msg_Battle_Error_Push::_internal_set_protocolid(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  protocolid_ = value;
}
inline void Msg_Battle_Error_Push::set_protocolid(uint32_t value) {
  _internal_set_protocolid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Battle_Error_Push.protocolID)
}

// optional uint32 moduleid = 2;
inline bool Msg_Battle_Error_Push::_internal_has_moduleid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_Battle_Error_Push::has_moduleid() const {
  return _internal_has_moduleid();
}
inline void Msg_Battle_Error_Push::clear_moduleid() {
  moduleid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Msg_Battle_Error_Push::_internal_moduleid() const {
  return moduleid_;
}
inline uint32_t Msg_Battle_Error_Push::moduleid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Battle_Error_Push.moduleid)
  return _internal_moduleid();
}
inline void Msg_Battle_Error_Push::_internal_set_moduleid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  moduleid_ = value;
}
inline void Msg_Battle_Error_Push::set_moduleid(uint32_t value) {
  _internal_set_moduleid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Battle_Error_Push.moduleid)
}

// .XrPb.ResultCode ErrorCode = 3;
inline void Msg_Battle_Error_Push::clear_errorcode() {
  errorcode_ = 0;
}
inline ::XrPb::ResultCode Msg_Battle_Error_Push::_internal_errorcode() const {
  return static_cast< ::XrPb::ResultCode >(errorcode_);
}
inline ::XrPb::ResultCode Msg_Battle_Error_Push::errorcode() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Battle_Error_Push.ErrorCode)
  return _internal_errorcode();
}
inline void Msg_Battle_Error_Push::_internal_set_errorcode(::XrPb::ResultCode value) {
  
  errorcode_ = value;
}
inline void Msg_Battle_Error_Push::set_errorcode(::XrPb::ResultCode value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Battle_Error_Push.ErrorCode)
}

// -------------------------------------------------------------------

// SceneRoomData

// string Session = 1;
inline void SceneRoomData::clear_session() {
  session_.ClearToEmpty();
}
inline const std::string& SceneRoomData::session() const {
  // @@protoc_insertion_point(field_get:XrPb.SceneRoomData.Session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneRoomData::set_session(ArgT0&& arg0, ArgT... args) {
 
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.SceneRoomData.Session)
}
inline std::string* SceneRoomData::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:XrPb.SceneRoomData.Session)
  return _s;
}
inline const std::string& SceneRoomData::_internal_session() const {
  return session_.Get();
}
inline void SceneRoomData::_internal_set_session(const std::string& value) {
  
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SceneRoomData::_internal_mutable_session() {
  
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SceneRoomData::release_session() {
  // @@protoc_insertion_point(field_release:XrPb.SceneRoomData.Session)
  return session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SceneRoomData::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.SceneRoomData.Session)
}

// .XrPb.RoomType type = 2;
inline void SceneRoomData::clear_type() {
  type_ = 0;
}
inline ::XrPb::RoomType SceneRoomData::_internal_type() const {
  return static_cast< ::XrPb::RoomType >(type_);
}
inline ::XrPb::RoomType SceneRoomData::type() const {
  // @@protoc_insertion_point(field_get:XrPb.SceneRoomData.type)
  return _internal_type();
}
inline void SceneRoomData::_internal_set_type(::XrPb::RoomType value) {
  
  type_ = value;
}
inline void SceneRoomData::set_type(::XrPb::RoomType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:XrPb.SceneRoomData.type)
}

// string mapName = 3;
inline void SceneRoomData::clear_mapname() {
  mapname_.ClearToEmpty();
}
inline const std::string& SceneRoomData::mapname() const {
  // @@protoc_insertion_point(field_get:XrPb.SceneRoomData.mapName)
  return _internal_mapname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SceneRoomData::set_mapname(ArgT0&& arg0, ArgT... args) {
 
 mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.SceneRoomData.mapName)
}
inline std::string* SceneRoomData::mutable_mapname() {
  std::string* _s = _internal_mutable_mapname();
  // @@protoc_insertion_point(field_mutable:XrPb.SceneRoomData.mapName)
  return _s;
}
inline const std::string& SceneRoomData::_internal_mapname() const {
  return mapname_.Get();
}
inline void SceneRoomData::_internal_set_mapname(const std::string& value) {
  
  mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SceneRoomData::_internal_mutable_mapname() {
  
  return mapname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SceneRoomData::release_mapname() {
  // @@protoc_insertion_point(field_release:XrPb.SceneRoomData.mapName)
  return mapname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SceneRoomData::set_allocated_mapname(std::string* mapname) {
  if (mapname != nullptr) {
    
  } else {
    
  }
  mapname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mapname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.SceneRoomData.mapName)
}

// repeated .XrPb.ScenePlayerData players = 4;
inline int SceneRoomData::_internal_players_size() const {
  return players_.size();
}
inline int SceneRoomData::players_size() const {
  return _internal_players_size();
}
inline ::XrPb::ScenePlayerData* SceneRoomData::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.SceneRoomData.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ScenePlayerData >*
SceneRoomData::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.SceneRoomData.players)
  return &players_;
}
inline const ::XrPb::ScenePlayerData& SceneRoomData::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::XrPb::ScenePlayerData& SceneRoomData::players(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.SceneRoomData.players)
  return _internal_players(index);
}
inline ::XrPb::ScenePlayerData* SceneRoomData::_internal_add_players() {
  return players_.Add();
}
inline ::XrPb::ScenePlayerData* SceneRoomData::add_players() {
  ::XrPb::ScenePlayerData* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:XrPb.SceneRoomData.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ScenePlayerData >&
SceneRoomData::players() const {
  // @@protoc_insertion_point(field_list:XrPb.SceneRoomData.players)
  return players_;
}

// -------------------------------------------------------------------

// Msg_SceneBeat_CS

// -------------------------------------------------------------------

// Msg_SceneBeat_SC

// -------------------------------------------------------------------

// Msg_EnterRoom_CS

// string roomSessionId = 1;
inline void Msg_EnterRoom_CS::clear_roomsessionid() {
  roomsessionid_.ClearToEmpty();
}
inline const std::string& Msg_EnterRoom_CS::roomsessionid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_EnterRoom_CS.roomSessionId)
  return _internal_roomsessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_EnterRoom_CS::set_roomsessionid(ArgT0&& arg0, ArgT... args) {
 
 roomsessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_EnterRoom_CS.roomSessionId)
}
inline std::string* Msg_EnterRoom_CS::mutable_roomsessionid() {
  std::string* _s = _internal_mutable_roomsessionid();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_EnterRoom_CS.roomSessionId)
  return _s;
}
inline const std::string& Msg_EnterRoom_CS::_internal_roomsessionid() const {
  return roomsessionid_.Get();
}
inline void Msg_EnterRoom_CS::_internal_set_roomsessionid(const std::string& value) {
  
  roomsessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_EnterRoom_CS::_internal_mutable_roomsessionid() {
  
  return roomsessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_EnterRoom_CS::release_roomsessionid() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_EnterRoom_CS.roomSessionId)
  return roomsessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_EnterRoom_CS::set_allocated_roomsessionid(std::string* roomsessionid) {
  if (roomsessionid != nullptr) {
    
  } else {
    
  }
  roomsessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomsessionid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomsessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomsessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_EnterRoom_CS.roomSessionId)
}

// string PlayerSessionId = 2;
inline void Msg_EnterRoom_CS::clear_playersessionid() {
  playersessionid_.ClearToEmpty();
}
inline const std::string& Msg_EnterRoom_CS::playersessionid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_EnterRoom_CS.PlayerSessionId)
  return _internal_playersessionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_EnterRoom_CS::set_playersessionid(ArgT0&& arg0, ArgT... args) {
 
 playersessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_EnterRoom_CS.PlayerSessionId)
}
inline std::string* Msg_EnterRoom_CS::mutable_playersessionid() {
  std::string* _s = _internal_mutable_playersessionid();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_EnterRoom_CS.PlayerSessionId)
  return _s;
}
inline const std::string& Msg_EnterRoom_CS::_internal_playersessionid() const {
  return playersessionid_.Get();
}
inline void Msg_EnterRoom_CS::_internal_set_playersessionid(const std::string& value) {
  
  playersessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_EnterRoom_CS::_internal_mutable_playersessionid() {
  
  return playersessionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_EnterRoom_CS::release_playersessionid() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_EnterRoom_CS.PlayerSessionId)
  return playersessionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_EnterRoom_CS::set_allocated_playersessionid(std::string* playersessionid) {
  if (playersessionid != nullptr) {
    
  } else {
    
  }
  playersessionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playersessionid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (playersessionid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    playersessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_EnterRoom_CS.PlayerSessionId)
}

// uint32 convid = 3;
inline void Msg_EnterRoom_CS::clear_convid() {
  convid_ = 0u;
}
inline uint32_t Msg_EnterRoom_CS::_internal_convid() const {
  return convid_;
}
inline uint32_t Msg_EnterRoom_CS::convid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_EnterRoom_CS.convid)
  return _internal_convid();
}
inline void Msg_EnterRoom_CS::_internal_set_convid(uint32_t value) {
  
  convid_ = value;
}
inline void Msg_EnterRoom_CS::set_convid(uint32_t value) {
  _internal_set_convid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_EnterRoom_CS.convid)
}

// -------------------------------------------------------------------

// Msg_EnterRoom_SC

// .XrPb.RoomType type = 1;
inline void Msg_EnterRoom_SC::clear_type() {
  type_ = 0;
}
inline ::XrPb::RoomType Msg_EnterRoom_SC::_internal_type() const {
  return static_cast< ::XrPb::RoomType >(type_);
}
inline ::XrPb::RoomType Msg_EnterRoom_SC::type() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_EnterRoom_SC.type)
  return _internal_type();
}
inline void Msg_EnterRoom_SC::_internal_set_type(::XrPb::RoomType value) {
  
  type_ = value;
}
inline void Msg_EnterRoom_SC::set_type(::XrPb::RoomType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_EnterRoom_SC.type)
}

// string mapName = 2;
inline void Msg_EnterRoom_SC::clear_mapname() {
  mapname_.ClearToEmpty();
}
inline const std::string& Msg_EnterRoom_SC::mapname() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_EnterRoom_SC.mapName)
  return _internal_mapname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_EnterRoom_SC::set_mapname(ArgT0&& arg0, ArgT... args) {
 
 mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_EnterRoom_SC.mapName)
}
inline std::string* Msg_EnterRoom_SC::mutable_mapname() {
  std::string* _s = _internal_mutable_mapname();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_EnterRoom_SC.mapName)
  return _s;
}
inline const std::string& Msg_EnterRoom_SC::_internal_mapname() const {
  return mapname_.Get();
}
inline void Msg_EnterRoom_SC::_internal_set_mapname(const std::string& value) {
  
  mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_EnterRoom_SC::_internal_mutable_mapname() {
  
  return mapname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_EnterRoom_SC::release_mapname() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_EnterRoom_SC.mapName)
  return mapname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_EnterRoom_SC::set_allocated_mapname(std::string* mapname) {
  if (mapname != nullptr) {
    
  } else {
    
  }
  mapname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mapname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_EnterRoom_SC.mapName)
}

// uint32 randSeed = 3;
inline void Msg_EnterRoom_SC::clear_randseed() {
  randseed_ = 0u;
}
inline uint32_t Msg_EnterRoom_SC::_internal_randseed() const {
  return randseed_;
}
inline uint32_t Msg_EnterRoom_SC::randseed() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_EnterRoom_SC.randSeed)
  return _internal_randseed();
}
inline void Msg_EnterRoom_SC::_internal_set_randseed(uint32_t value) {
  
  randseed_ = value;
}
inline void Msg_EnterRoom_SC::set_randseed(uint32_t value) {
  _internal_set_randseed(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_EnterRoom_SC.randSeed)
}

// optional bool started = 4;
inline bool Msg_EnterRoom_SC::_internal_has_started() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_EnterRoom_SC::has_started() const {
  return _internal_has_started();
}
inline void Msg_EnterRoom_SC::clear_started() {
  started_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Msg_EnterRoom_SC::_internal_started() const {
  return started_;
}
inline bool Msg_EnterRoom_SC::started() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_EnterRoom_SC.started)
  return _internal_started();
}
inline void Msg_EnterRoom_SC::_internal_set_started(bool value) {
  _has_bits_[0] |= 0x00000001u;
  started_ = value;
}
inline void Msg_EnterRoom_SC::set_started(bool value) {
  _internal_set_started(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_EnterRoom_SC.started)
}

// optional uint32 roomTime = 5;
inline bool Msg_EnterRoom_SC::_internal_has_roomtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_EnterRoom_SC::has_roomtime() const {
  return _internal_has_roomtime();
}
inline void Msg_EnterRoom_SC::clear_roomtime() {
  roomtime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Msg_EnterRoom_SC::_internal_roomtime() const {
  return roomtime_;
}
inline uint32_t Msg_EnterRoom_SC::roomtime() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_EnterRoom_SC.roomTime)
  return _internal_roomtime();
}
inline void Msg_EnterRoom_SC::_internal_set_roomtime(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  roomtime_ = value;
}
inline void Msg_EnterRoom_SC::set_roomtime(uint32_t value) {
  _internal_set_roomtime(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_EnterRoom_SC.roomTime)
}

// optional uint32 startTime = 6;
inline bool Msg_EnterRoom_SC::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Msg_EnterRoom_SC::has_starttime() const {
  return _internal_has_starttime();
}
inline void Msg_EnterRoom_SC::clear_starttime() {
  starttime_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Msg_EnterRoom_SC::_internal_starttime() const {
  return starttime_;
}
inline uint32_t Msg_EnterRoom_SC::starttime() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_EnterRoom_SC.startTime)
  return _internal_starttime();
}
inline void Msg_EnterRoom_SC::_internal_set_starttime(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  starttime_ = value;
}
inline void Msg_EnterRoom_SC::set_starttime(uint32_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_EnterRoom_SC.startTime)
}

// -------------------------------------------------------------------

// Msg_Move_CS

// repeated .XrPb.V3_POS pos = 1;
inline int Msg_Move_CS::_internal_pos_size() const {
  return pos_.size();
}
inline int Msg_Move_CS::pos_size() const {
  return _internal_pos_size();
}
inline ::XrPb::V3_POS* Msg_Move_CS::mutable_pos(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_Move_CS.pos)
  return pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::V3_POS >*
Msg_Move_CS::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_Move_CS.pos)
  return &pos_;
}
inline const ::XrPb::V3_POS& Msg_Move_CS::_internal_pos(int index) const {
  return pos_.Get(index);
}
inline const ::XrPb::V3_POS& Msg_Move_CS::pos(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Move_CS.pos)
  return _internal_pos(index);
}
inline ::XrPb::V3_POS* Msg_Move_CS::_internal_add_pos() {
  return pos_.Add();
}
inline ::XrPb::V3_POS* Msg_Move_CS::add_pos() {
  ::XrPb::V3_POS* _add = _internal_add_pos();
  // @@protoc_insertion_point(field_add:XrPb.Msg_Move_CS.pos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::V3_POS >&
Msg_Move_CS::pos() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_Move_CS.pos)
  return pos_;
}

// -------------------------------------------------------------------

// Msg_RoomQuit_CS

// repeated .XrPb.V3_POS pos = 1;
inline int Msg_RoomQuit_CS::_internal_pos_size() const {
  return pos_.size();
}
inline int Msg_RoomQuit_CS::pos_size() const {
  return _internal_pos_size();
}
inline ::XrPb::V3_POS* Msg_RoomQuit_CS::mutable_pos(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_RoomQuit_CS.pos)
  return pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::V3_POS >*
Msg_RoomQuit_CS::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_RoomQuit_CS.pos)
  return &pos_;
}
inline const ::XrPb::V3_POS& Msg_RoomQuit_CS::_internal_pos(int index) const {
  return pos_.Get(index);
}
inline const ::XrPb::V3_POS& Msg_RoomQuit_CS::pos(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_RoomQuit_CS.pos)
  return _internal_pos(index);
}
inline ::XrPb::V3_POS* Msg_RoomQuit_CS::_internal_add_pos() {
  return pos_.Add();
}
inline ::XrPb::V3_POS* Msg_RoomQuit_CS::add_pos() {
  ::XrPb::V3_POS* _add = _internal_add_pos();
  // @@protoc_insertion_point(field_add:XrPb.Msg_RoomQuit_CS.pos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::V3_POS >&
Msg_RoomQuit_CS::pos() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_RoomQuit_CS.pos)
  return pos_;
}

// -------------------------------------------------------------------

// Msg_RoomQuit_SC

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XrPb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::XrPb::MsgMod_Scene_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::MsgMod_Scene_MsgId>() {
  return ::XrPb::MsgMod_Scene_MsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_2fMsgScene_2eproto
