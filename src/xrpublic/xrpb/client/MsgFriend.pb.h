// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/MsgFriend.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_2fMsgFriend_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_2fMsgFriend_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client/Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_2fMsgFriend_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_2fMsgFriend_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[49]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_2fMsgFriend_2eproto;
namespace XrPb {
class BeAppliedInfo;
struct BeAppliedInfoDefaultTypeInternal;
extern BeAppliedInfoDefaultTypeInternal _BeAppliedInfo_default_instance_;
class FriendInfo;
struct FriendInfoDefaultTypeInternal;
extern FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
class FriendInviteAwardInfo;
struct FriendInviteAwardInfoDefaultTypeInternal;
extern FriendInviteAwardInfoDefaultTypeInternal _FriendInviteAwardInfo_default_instance_;
class FriendOfflineMsg;
struct FriendOfflineMsgDefaultTypeInternal;
extern FriendOfflineMsgDefaultTypeInternal _FriendOfflineMsg_default_instance_;
class MsgMod_Friend;
struct MsgMod_FriendDefaultTypeInternal;
extern MsgMod_FriendDefaultTypeInternal _MsgMod_Friend_default_instance_;
class Msg_AddAllFriend_CS;
struct Msg_AddAllFriend_CSDefaultTypeInternal;
extern Msg_AddAllFriend_CSDefaultTypeInternal _Msg_AddAllFriend_CS_default_instance_;
class Msg_AddAllFriend_SC;
struct Msg_AddAllFriend_SCDefaultTypeInternal;
extern Msg_AddAllFriend_SCDefaultTypeInternal _Msg_AddAllFriend_SC_default_instance_;
class Msg_AddBlackList_CS;
struct Msg_AddBlackList_CSDefaultTypeInternal;
extern Msg_AddBlackList_CSDefaultTypeInternal _Msg_AddBlackList_CS_default_instance_;
class Msg_AddBlackList_SC;
struct Msg_AddBlackList_SCDefaultTypeInternal;
extern Msg_AddBlackList_SCDefaultTypeInternal _Msg_AddBlackList_SC_default_instance_;
class Msg_AddFriendApply_CS;
struct Msg_AddFriendApply_CSDefaultTypeInternal;
extern Msg_AddFriendApply_CSDefaultTypeInternal _Msg_AddFriendApply_CS_default_instance_;
class Msg_AddFriendApply_PUSH;
struct Msg_AddFriendApply_PUSHDefaultTypeInternal;
extern Msg_AddFriendApply_PUSHDefaultTypeInternal _Msg_AddFriendApply_PUSH_default_instance_;
class Msg_AddFriendApply_SC;
struct Msg_AddFriendApply_SCDefaultTypeInternal;
extern Msg_AddFriendApply_SCDefaultTypeInternal _Msg_AddFriendApply_SC_default_instance_;
class Msg_AddFriendReply_CS;
struct Msg_AddFriendReply_CSDefaultTypeInternal;
extern Msg_AddFriendReply_CSDefaultTypeInternal _Msg_AddFriendReply_CS_default_instance_;
class Msg_AddFriendReply_PUSH;
struct Msg_AddFriendReply_PUSHDefaultTypeInternal;
extern Msg_AddFriendReply_PUSHDefaultTypeInternal _Msg_AddFriendReply_PUSH_default_instance_;
class Msg_AddFriendReply_SC;
struct Msg_AddFriendReply_SCDefaultTypeInternal;
extern Msg_AddFriendReply_SCDefaultTypeInternal _Msg_AddFriendReply_SC_default_instance_;
class Msg_ChatMsg_CS;
struct Msg_ChatMsg_CSDefaultTypeInternal;
extern Msg_ChatMsg_CSDefaultTypeInternal _Msg_ChatMsg_CS_default_instance_;
class Msg_ChatMsg_PUSH;
struct Msg_ChatMsg_PUSHDefaultTypeInternal;
extern Msg_ChatMsg_PUSHDefaultTypeInternal _Msg_ChatMsg_PUSH_default_instance_;
class Msg_ChatMsg_SC;
struct Msg_ChatMsg_SCDefaultTypeInternal;
extern Msg_ChatMsg_SCDefaultTypeInternal _Msg_ChatMsg_SC_default_instance_;
class Msg_DelBlackList_CS;
struct Msg_DelBlackList_CSDefaultTypeInternal;
extern Msg_DelBlackList_CSDefaultTypeInternal _Msg_DelBlackList_CS_default_instance_;
class Msg_DelBlackList_SC;
struct Msg_DelBlackList_SCDefaultTypeInternal;
extern Msg_DelBlackList_SCDefaultTypeInternal _Msg_DelBlackList_SC_default_instance_;
class Msg_DelFriend_CS;
struct Msg_DelFriend_CSDefaultTypeInternal;
extern Msg_DelFriend_CSDefaultTypeInternal _Msg_DelFriend_CS_default_instance_;
class Msg_DelFriend_SC;
struct Msg_DelFriend_SCDefaultTypeInternal;
extern Msg_DelFriend_SCDefaultTypeInternal _Msg_DelFriend_SC_default_instance_;
class Msg_DeleteLastChatFriend_CS;
struct Msg_DeleteLastChatFriend_CSDefaultTypeInternal;
extern Msg_DeleteLastChatFriend_CSDefaultTypeInternal _Msg_DeleteLastChatFriend_CS_default_instance_;
class Msg_DeleteLastChatFriend_SC;
struct Msg_DeleteLastChatFriend_SCDefaultTypeInternal;
extern Msg_DeleteLastChatFriend_SCDefaultTypeInternal _Msg_DeleteLastChatFriend_SC_default_instance_;
class Msg_FriendInfoUpdate_PUSH;
struct Msg_FriendInfoUpdate_PUSHDefaultTypeInternal;
extern Msg_FriendInfoUpdate_PUSHDefaultTypeInternal _Msg_FriendInfoUpdate_PUSH_default_instance_;
class Msg_FriendInfoUpdate_PUSH_AttrInt64Pair;
struct Msg_FriendInfoUpdate_PUSH_AttrInt64PairDefaultTypeInternal;
extern Msg_FriendInfoUpdate_PUSH_AttrInt64PairDefaultTypeInternal _Msg_FriendInfoUpdate_PUSH_AttrInt64Pair_default_instance_;
class Msg_FriendInfoUpdate_PUSH_AttrStringPair;
struct Msg_FriendInfoUpdate_PUSH_AttrStringPairDefaultTypeInternal;
extern Msg_FriendInfoUpdate_PUSH_AttrStringPairDefaultTypeInternal _Msg_FriendInfoUpdate_PUSH_AttrStringPair_default_instance_;
class Msg_FriendInviteAward_PUSH;
struct Msg_FriendInviteAward_PUSHDefaultTypeInternal;
extern Msg_FriendInviteAward_PUSHDefaultTypeInternal _Msg_FriendInviteAward_PUSH_default_instance_;
class Msg_GainInviteCodeAward_CS;
struct Msg_GainInviteCodeAward_CSDefaultTypeInternal;
extern Msg_GainInviteCodeAward_CSDefaultTypeInternal _Msg_GainInviteCodeAward_CS_default_instance_;
class Msg_GainInviteCodeAward_SC;
struct Msg_GainInviteCodeAward_SCDefaultTypeInternal;
extern Msg_GainInviteCodeAward_SCDefaultTypeInternal _Msg_GainInviteCodeAward_SC_default_instance_;
class Msg_GetBlackList_CS;
struct Msg_GetBlackList_CSDefaultTypeInternal;
extern Msg_GetBlackList_CSDefaultTypeInternal _Msg_GetBlackList_CS_default_instance_;
class Msg_GetBlackList_SC;
struct Msg_GetBlackList_SCDefaultTypeInternal;
extern Msg_GetBlackList_SCDefaultTypeInternal _Msg_GetBlackList_SC_default_instance_;
class Msg_GetFriApplyList_CS;
struct Msg_GetFriApplyList_CSDefaultTypeInternal;
extern Msg_GetFriApplyList_CSDefaultTypeInternal _Msg_GetFriApplyList_CS_default_instance_;
class Msg_GetFriApplyList_SC;
struct Msg_GetFriApplyList_SCDefaultTypeInternal;
extern Msg_GetFriApplyList_SCDefaultTypeInternal _Msg_GetFriApplyList_SC_default_instance_;
class Msg_GetFriendInviteAward_CS;
struct Msg_GetFriendInviteAward_CSDefaultTypeInternal;
extern Msg_GetFriendInviteAward_CSDefaultTypeInternal _Msg_GetFriendInviteAward_CS_default_instance_;
class Msg_GetFriendInviteAward_SC;
struct Msg_GetFriendInviteAward_SCDefaultTypeInternal;
extern Msg_GetFriendInviteAward_SCDefaultTypeInternal _Msg_GetFriendInviteAward_SC_default_instance_;
class Msg_GetFriendList_CS;
struct Msg_GetFriendList_CSDefaultTypeInternal;
extern Msg_GetFriendList_CSDefaultTypeInternal _Msg_GetFriendList_CS_default_instance_;
class Msg_GetFriendList_SC;
struct Msg_GetFriendList_SCDefaultTypeInternal;
extern Msg_GetFriendList_SCDefaultTypeInternal _Msg_GetFriendList_SC_default_instance_;
class Msg_GetFriendMsgs_CS;
struct Msg_GetFriendMsgs_CSDefaultTypeInternal;
extern Msg_GetFriendMsgs_CSDefaultTypeInternal _Msg_GetFriendMsgs_CS_default_instance_;
class Msg_GetFriendMsgs_SC;
struct Msg_GetFriendMsgs_SCDefaultTypeInternal;
extern Msg_GetFriendMsgs_SCDefaultTypeInternal _Msg_GetFriendMsgs_SC_default_instance_;
class Msg_GetSelfApplyList_CS;
struct Msg_GetSelfApplyList_CSDefaultTypeInternal;
extern Msg_GetSelfApplyList_CSDefaultTypeInternal _Msg_GetSelfApplyList_CS_default_instance_;
class Msg_GetSelfApplyList_SC;
struct Msg_GetSelfApplyList_SCDefaultTypeInternal;
extern Msg_GetSelfApplyList_SCDefaultTypeInternal _Msg_GetSelfApplyList_SC_default_instance_;
class Msg_NotifyDelFriend_PUSH;
struct Msg_NotifyDelFriend_PUSHDefaultTypeInternal;
extern Msg_NotifyDelFriend_PUSHDefaultTypeInternal _Msg_NotifyDelFriend_PUSH_default_instance_;
class Msg_RefuseAllFriend_CS;
struct Msg_RefuseAllFriend_CSDefaultTypeInternal;
extern Msg_RefuseAllFriend_CSDefaultTypeInternal _Msg_RefuseAllFriend_CS_default_instance_;
class Msg_RefuseAllFriend_SC;
struct Msg_RefuseAllFriend_SCDefaultTypeInternal;
extern Msg_RefuseAllFriend_SCDefaultTypeInternal _Msg_RefuseAllFriend_SC_default_instance_;
class Msg_SearchFriend_CS;
struct Msg_SearchFriend_CSDefaultTypeInternal;
extern Msg_SearchFriend_CSDefaultTypeInternal _Msg_SearchFriend_CS_default_instance_;
class Msg_SearchFriend_SC;
struct Msg_SearchFriend_SCDefaultTypeInternal;
extern Msg_SearchFriend_SCDefaultTypeInternal _Msg_SearchFriend_SC_default_instance_;
class Msg_UseInviteCodeAck;
struct Msg_UseInviteCodeAckDefaultTypeInternal;
extern Msg_UseInviteCodeAckDefaultTypeInternal _Msg_UseInviteCodeAck_default_instance_;
class Msg_UseInviteCodeReq;
struct Msg_UseInviteCodeReqDefaultTypeInternal;
extern Msg_UseInviteCodeReqDefaultTypeInternal _Msg_UseInviteCodeReq_default_instance_;
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> ::XrPb::BeAppliedInfo* Arena::CreateMaybeMessage<::XrPb::BeAppliedInfo>(Arena*);
template<> ::XrPb::FriendInfo* Arena::CreateMaybeMessage<::XrPb::FriendInfo>(Arena*);
template<> ::XrPb::FriendInviteAwardInfo* Arena::CreateMaybeMessage<::XrPb::FriendInviteAwardInfo>(Arena*);
template<> ::XrPb::FriendOfflineMsg* Arena::CreateMaybeMessage<::XrPb::FriendOfflineMsg>(Arena*);
template<> ::XrPb::MsgMod_Friend* Arena::CreateMaybeMessage<::XrPb::MsgMod_Friend>(Arena*);
template<> ::XrPb::Msg_AddAllFriend_CS* Arena::CreateMaybeMessage<::XrPb::Msg_AddAllFriend_CS>(Arena*);
template<> ::XrPb::Msg_AddAllFriend_SC* Arena::CreateMaybeMessage<::XrPb::Msg_AddAllFriend_SC>(Arena*);
template<> ::XrPb::Msg_AddBlackList_CS* Arena::CreateMaybeMessage<::XrPb::Msg_AddBlackList_CS>(Arena*);
template<> ::XrPb::Msg_AddBlackList_SC* Arena::CreateMaybeMessage<::XrPb::Msg_AddBlackList_SC>(Arena*);
template<> ::XrPb::Msg_AddFriendApply_CS* Arena::CreateMaybeMessage<::XrPb::Msg_AddFriendApply_CS>(Arena*);
template<> ::XrPb::Msg_AddFriendApply_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_AddFriendApply_PUSH>(Arena*);
template<> ::XrPb::Msg_AddFriendApply_SC* Arena::CreateMaybeMessage<::XrPb::Msg_AddFriendApply_SC>(Arena*);
template<> ::XrPb::Msg_AddFriendReply_CS* Arena::CreateMaybeMessage<::XrPb::Msg_AddFriendReply_CS>(Arena*);
template<> ::XrPb::Msg_AddFriendReply_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_AddFriendReply_PUSH>(Arena*);
template<> ::XrPb::Msg_AddFriendReply_SC* Arena::CreateMaybeMessage<::XrPb::Msg_AddFriendReply_SC>(Arena*);
template<> ::XrPb::Msg_ChatMsg_CS* Arena::CreateMaybeMessage<::XrPb::Msg_ChatMsg_CS>(Arena*);
template<> ::XrPb::Msg_ChatMsg_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_ChatMsg_PUSH>(Arena*);
template<> ::XrPb::Msg_ChatMsg_SC* Arena::CreateMaybeMessage<::XrPb::Msg_ChatMsg_SC>(Arena*);
template<> ::XrPb::Msg_DelBlackList_CS* Arena::CreateMaybeMessage<::XrPb::Msg_DelBlackList_CS>(Arena*);
template<> ::XrPb::Msg_DelBlackList_SC* Arena::CreateMaybeMessage<::XrPb::Msg_DelBlackList_SC>(Arena*);
template<> ::XrPb::Msg_DelFriend_CS* Arena::CreateMaybeMessage<::XrPb::Msg_DelFriend_CS>(Arena*);
template<> ::XrPb::Msg_DelFriend_SC* Arena::CreateMaybeMessage<::XrPb::Msg_DelFriend_SC>(Arena*);
template<> ::XrPb::Msg_DeleteLastChatFriend_CS* Arena::CreateMaybeMessage<::XrPb::Msg_DeleteLastChatFriend_CS>(Arena*);
template<> ::XrPb::Msg_DeleteLastChatFriend_SC* Arena::CreateMaybeMessage<::XrPb::Msg_DeleteLastChatFriend_SC>(Arena*);
template<> ::XrPb::Msg_FriendInfoUpdate_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_FriendInfoUpdate_PUSH>(Arena*);
template<> ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair* Arena::CreateMaybeMessage<::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair>(Arena*);
template<> ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair* Arena::CreateMaybeMessage<::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair>(Arena*);
template<> ::XrPb::Msg_FriendInviteAward_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_FriendInviteAward_PUSH>(Arena*);
template<> ::XrPb::Msg_GainInviteCodeAward_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GainInviteCodeAward_CS>(Arena*);
template<> ::XrPb::Msg_GainInviteCodeAward_SC* Arena::CreateMaybeMessage<::XrPb::Msg_GainInviteCodeAward_SC>(Arena*);
template<> ::XrPb::Msg_GetBlackList_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GetBlackList_CS>(Arena*);
template<> ::XrPb::Msg_GetBlackList_SC* Arena::CreateMaybeMessage<::XrPb::Msg_GetBlackList_SC>(Arena*);
template<> ::XrPb::Msg_GetFriApplyList_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GetFriApplyList_CS>(Arena*);
template<> ::XrPb::Msg_GetFriApplyList_SC* Arena::CreateMaybeMessage<::XrPb::Msg_GetFriApplyList_SC>(Arena*);
template<> ::XrPb::Msg_GetFriendInviteAward_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GetFriendInviteAward_CS>(Arena*);
template<> ::XrPb::Msg_GetFriendInviteAward_SC* Arena::CreateMaybeMessage<::XrPb::Msg_GetFriendInviteAward_SC>(Arena*);
template<> ::XrPb::Msg_GetFriendList_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GetFriendList_CS>(Arena*);
template<> ::XrPb::Msg_GetFriendList_SC* Arena::CreateMaybeMessage<::XrPb::Msg_GetFriendList_SC>(Arena*);
template<> ::XrPb::Msg_GetFriendMsgs_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GetFriendMsgs_CS>(Arena*);
template<> ::XrPb::Msg_GetFriendMsgs_SC* Arena::CreateMaybeMessage<::XrPb::Msg_GetFriendMsgs_SC>(Arena*);
template<> ::XrPb::Msg_GetSelfApplyList_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GetSelfApplyList_CS>(Arena*);
template<> ::XrPb::Msg_GetSelfApplyList_SC* Arena::CreateMaybeMessage<::XrPb::Msg_GetSelfApplyList_SC>(Arena*);
template<> ::XrPb::Msg_NotifyDelFriend_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_NotifyDelFriend_PUSH>(Arena*);
template<> ::XrPb::Msg_RefuseAllFriend_CS* Arena::CreateMaybeMessage<::XrPb::Msg_RefuseAllFriend_CS>(Arena*);
template<> ::XrPb::Msg_RefuseAllFriend_SC* Arena::CreateMaybeMessage<::XrPb::Msg_RefuseAllFriend_SC>(Arena*);
template<> ::XrPb::Msg_SearchFriend_CS* Arena::CreateMaybeMessage<::XrPb::Msg_SearchFriend_CS>(Arena*);
template<> ::XrPb::Msg_SearchFriend_SC* Arena::CreateMaybeMessage<::XrPb::Msg_SearchFriend_SC>(Arena*);
template<> ::XrPb::Msg_UseInviteCodeAck* Arena::CreateMaybeMessage<::XrPb::Msg_UseInviteCodeAck>(Arena*);
template<> ::XrPb::Msg_UseInviteCodeReq* Arena::CreateMaybeMessage<::XrPb::Msg_UseInviteCodeReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XrPb {

enum MsgMod_Friend_MsgId : int {
  MsgMod_Friend_MsgId_Msg_None = 0,
  MsgMod_Friend_MsgId_Msg_ChatMsg_CS = 1,
  MsgMod_Friend_MsgId_Msg_ChatMsg_SC = 2,
  MsgMod_Friend_MsgId_Msg_ChatMsg_PUSH = 3,
  MsgMod_Friend_MsgId_Msg_GetFriendList_CS = 4,
  MsgMod_Friend_MsgId_Msg_GetFriendList_SC = 5,
  MsgMod_Friend_MsgId_Msg_AddFriendApply_CS = 6,
  MsgMod_Friend_MsgId_Msg_AddFriendApply_SC = 7,
  MsgMod_Friend_MsgId_Msg_AddFriendApply_PUSH = 8,
  MsgMod_Friend_MsgId_Msg_AddFriendReply_CS = 9,
  MsgMod_Friend_MsgId_Msg_AddFriendReply_SC = 10,
  MsgMod_Friend_MsgId_Msg_AddFriendReply_PUSH = 11,
  MsgMod_Friend_MsgId_Msg_GetFriApplyList_CS = 12,
  MsgMod_Friend_MsgId_Msg_GetFriApplyList_SC = 13,
  MsgMod_Friend_MsgId_Msg_DelFriend_CS = 14,
  MsgMod_Friend_MsgId_Msg_DelFriend_SC = 15,
  MsgMod_Friend_MsgId_Msg_NotifyDelFriend_PUSH = 16,
  MsgMod_Friend_MsgId_Msg_AddAllFriend_CS = 17,
  MsgMod_Friend_MsgId_Msg_AddAllFriend_SC = 18,
  MsgMod_Friend_MsgId_Msg_FriendInfoUpdate_PUSH = 19,
  MsgMod_Friend_MsgId_Msg_GetFriendMsgs_CS = 20,
  MsgMod_Friend_MsgId_Msg_GetFriendMsgs_SC = 21,
  MsgMod_Friend_MsgId_Msg_SearchFriend_CS = 22,
  MsgMod_Friend_MsgId_Msg_SearchFriend_SC = 23,
  MsgMod_Friend_MsgId_Msg_GetSelfApplyList_CS = 24,
  MsgMod_Friend_MsgId_Msg_GetSelfApplyList_SC = 25,
  MsgMod_Friend_MsgId_Msg_AddBlackList_CS = 26,
  MsgMod_Friend_MsgId_Msg_AddBlackList_SC = 27,
  MsgMod_Friend_MsgId_Msg_DelBlackList_CS = 28,
  MsgMod_Friend_MsgId_Msg_DelBlackList_SC = 29,
  MsgMod_Friend_MsgId_Msg_GetBlackList_CS = 30,
  MsgMod_Friend_MsgId_Msg_GetBlackList_SC = 31,
  MsgMod_Friend_MsgId_Msg_RefuseAllFriend_CS = 32,
  MsgMod_Friend_MsgId_Msg_RefuseAllFriend_SC = 33,
  MsgMod_Friend_MsgId_Msg_DeleteLastChatFriend_CS = 34,
  MsgMod_Friend_MsgId_Msg_DeleteLastChatFriend_SC = 35,
  MsgMod_Friend_MsgId_Msg_GetFriendInviteAward_CS = 50,
  MsgMod_Friend_MsgId_Msg_GetFriendInviteAward_SC = 51,
  MsgMod_Friend_MsgId_Msg_GainInviteCodeAward_CS = 52,
  MsgMod_Friend_MsgId_Msg_GainInviteCodeAward_SC = 53,
  MsgMod_Friend_MsgId_Msg_UseInviteCodeReq = 54,
  MsgMod_Friend_MsgId_Msg_UseInviteCodeAck = 55,
  MsgMod_Friend_MsgId_Msg_FriendInviteAward_PUSH = 56,
  MsgMod_Friend_MsgId_MsgMod_Friend_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgMod_Friend_MsgId_MsgMod_Friend_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgMod_Friend_MsgId_IsValid(int value);
constexpr MsgMod_Friend_MsgId MsgMod_Friend_MsgId_MsgId_MIN = MsgMod_Friend_MsgId_Msg_None;
constexpr MsgMod_Friend_MsgId MsgMod_Friend_MsgId_MsgId_MAX = MsgMod_Friend_MsgId_Msg_FriendInviteAward_PUSH;
constexpr int MsgMod_Friend_MsgId_MsgId_ARRAYSIZE = MsgMod_Friend_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgMod_Friend_MsgId_descriptor();
template<typename T>
inline const std::string& MsgMod_Friend_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgMod_Friend_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgMod_Friend_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgMod_Friend_MsgId_descriptor(), enum_t_value);
}
inline bool MsgMod_Friend_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgMod_Friend_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgMod_Friend_MsgId>(
    MsgMod_Friend_MsgId_descriptor(), name, value);
}
enum Msg_FriendInfoUpdate_PUSH_AttrType : int {
  Msg_FriendInfoUpdate_PUSH_AttrType_Attr_None = 0,
  Msg_FriendInfoUpdate_PUSH_AttrType_Attr_Level = 1,
  Msg_FriendInfoUpdate_PUSH_AttrType_Attr_RoleName = 2,
  Msg_FriendInfoUpdate_PUSH_AttrType_Attr_LeftTime = 4,
  Msg_FriendInfoUpdate_PUSH_AttrType_Attr_PlayerStaus = 7,
  Msg_FriendInfoUpdate_PUSH_AttrType_Attr_ChatTime = 11,
  Msg_FriendInfoUpdate_PUSH_AttrType_Msg_FriendInfoUpdate_PUSH_AttrType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Msg_FriendInfoUpdate_PUSH_AttrType_Msg_FriendInfoUpdate_PUSH_AttrType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Msg_FriendInfoUpdate_PUSH_AttrType_IsValid(int value);
constexpr Msg_FriendInfoUpdate_PUSH_AttrType Msg_FriendInfoUpdate_PUSH_AttrType_AttrType_MIN = Msg_FriendInfoUpdate_PUSH_AttrType_Attr_None;
constexpr Msg_FriendInfoUpdate_PUSH_AttrType Msg_FriendInfoUpdate_PUSH_AttrType_AttrType_MAX = Msg_FriendInfoUpdate_PUSH_AttrType_Attr_ChatTime;
constexpr int Msg_FriendInfoUpdate_PUSH_AttrType_AttrType_ARRAYSIZE = Msg_FriendInfoUpdate_PUSH_AttrType_AttrType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Msg_FriendInfoUpdate_PUSH_AttrType_descriptor();
template<typename T>
inline const std::string& Msg_FriendInfoUpdate_PUSH_AttrType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Msg_FriendInfoUpdate_PUSH_AttrType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Msg_FriendInfoUpdate_PUSH_AttrType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Msg_FriendInfoUpdate_PUSH_AttrType_descriptor(), enum_t_value);
}
inline bool Msg_FriendInfoUpdate_PUSH_AttrType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Msg_FriendInfoUpdate_PUSH_AttrType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Msg_FriendInfoUpdate_PUSH_AttrType>(
    Msg_FriendInfoUpdate_PUSH_AttrType_descriptor(), name, value);
}
enum EFriendReplyType : int {
  eReplyAccept = 0,
  eReplyRefuse = 1,
  EFriendReplyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EFriendReplyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EFriendReplyType_IsValid(int value);
constexpr EFriendReplyType EFriendReplyType_MIN = eReplyAccept;
constexpr EFriendReplyType EFriendReplyType_MAX = eReplyRefuse;
constexpr int EFriendReplyType_ARRAYSIZE = EFriendReplyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EFriendReplyType_descriptor();
template<typename T>
inline const std::string& EFriendReplyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EFriendReplyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EFriendReplyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EFriendReplyType_descriptor(), enum_t_value);
}
inline bool EFriendReplyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EFriendReplyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EFriendReplyType>(
    EFriendReplyType_descriptor(), name, value);
}
enum EInviteCodeAwardType : int {
  eInviteCodeAward_New = 0,
  eInviteCodeAward_Old = 1,
  EInviteCodeAwardType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EInviteCodeAwardType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EInviteCodeAwardType_IsValid(int value);
constexpr EInviteCodeAwardType EInviteCodeAwardType_MIN = eInviteCodeAward_New;
constexpr EInviteCodeAwardType EInviteCodeAwardType_MAX = eInviteCodeAward_Old;
constexpr int EInviteCodeAwardType_ARRAYSIZE = EInviteCodeAwardType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EInviteCodeAwardType_descriptor();
template<typename T>
inline const std::string& EInviteCodeAwardType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EInviteCodeAwardType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EInviteCodeAwardType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EInviteCodeAwardType_descriptor(), enum_t_value);
}
inline bool EInviteCodeAwardType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EInviteCodeAwardType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EInviteCodeAwardType>(
    EInviteCodeAwardType_descriptor(), name, value);
}
// ===================================================================

class MsgMod_Friend final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.MsgMod_Friend) */ {
 public:
  inline MsgMod_Friend() : MsgMod_Friend(nullptr) {}
  explicit constexpr MsgMod_Friend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgMod_Friend(const MsgMod_Friend& from);
  MsgMod_Friend(MsgMod_Friend&& from) noexcept
    : MsgMod_Friend() {
    *this = ::std::move(from);
  }

  inline MsgMod_Friend& operator=(const MsgMod_Friend& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgMod_Friend& operator=(MsgMod_Friend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgMod_Friend& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgMod_Friend* internal_default_instance() {
    return reinterpret_cast<const MsgMod_Friend*>(
               &_MsgMod_Friend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgMod_Friend& a, MsgMod_Friend& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgMod_Friend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgMod_Friend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgMod_Friend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgMod_Friend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgMod_Friend& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgMod_Friend& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.MsgMod_Friend";
  }
  protected:
  explicit MsgMod_Friend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgMod_Friend_MsgId MsgId;
  static constexpr MsgId Msg_None =
    MsgMod_Friend_MsgId_Msg_None;
  static constexpr MsgId Msg_ChatMsg_CS =
    MsgMod_Friend_MsgId_Msg_ChatMsg_CS;
  static constexpr MsgId Msg_ChatMsg_SC =
    MsgMod_Friend_MsgId_Msg_ChatMsg_SC;
  static constexpr MsgId Msg_ChatMsg_PUSH =
    MsgMod_Friend_MsgId_Msg_ChatMsg_PUSH;
  static constexpr MsgId Msg_GetFriendList_CS =
    MsgMod_Friend_MsgId_Msg_GetFriendList_CS;
  static constexpr MsgId Msg_GetFriendList_SC =
    MsgMod_Friend_MsgId_Msg_GetFriendList_SC;
  static constexpr MsgId Msg_AddFriendApply_CS =
    MsgMod_Friend_MsgId_Msg_AddFriendApply_CS;
  static constexpr MsgId Msg_AddFriendApply_SC =
    MsgMod_Friend_MsgId_Msg_AddFriendApply_SC;
  static constexpr MsgId Msg_AddFriendApply_PUSH =
    MsgMod_Friend_MsgId_Msg_AddFriendApply_PUSH;
  static constexpr MsgId Msg_AddFriendReply_CS =
    MsgMod_Friend_MsgId_Msg_AddFriendReply_CS;
  static constexpr MsgId Msg_AddFriendReply_SC =
    MsgMod_Friend_MsgId_Msg_AddFriendReply_SC;
  static constexpr MsgId Msg_AddFriendReply_PUSH =
    MsgMod_Friend_MsgId_Msg_AddFriendReply_PUSH;
  static constexpr MsgId Msg_GetFriApplyList_CS =
    MsgMod_Friend_MsgId_Msg_GetFriApplyList_CS;
  static constexpr MsgId Msg_GetFriApplyList_SC =
    MsgMod_Friend_MsgId_Msg_GetFriApplyList_SC;
  static constexpr MsgId Msg_DelFriend_CS =
    MsgMod_Friend_MsgId_Msg_DelFriend_CS;
  static constexpr MsgId Msg_DelFriend_SC =
    MsgMod_Friend_MsgId_Msg_DelFriend_SC;
  static constexpr MsgId Msg_NotifyDelFriend_PUSH =
    MsgMod_Friend_MsgId_Msg_NotifyDelFriend_PUSH;
  static constexpr MsgId Msg_AddAllFriend_CS =
    MsgMod_Friend_MsgId_Msg_AddAllFriend_CS;
  static constexpr MsgId Msg_AddAllFriend_SC =
    MsgMod_Friend_MsgId_Msg_AddAllFriend_SC;
  static constexpr MsgId Msg_FriendInfoUpdate_PUSH =
    MsgMod_Friend_MsgId_Msg_FriendInfoUpdate_PUSH;
  static constexpr MsgId Msg_GetFriendMsgs_CS =
    MsgMod_Friend_MsgId_Msg_GetFriendMsgs_CS;
  static constexpr MsgId Msg_GetFriendMsgs_SC =
    MsgMod_Friend_MsgId_Msg_GetFriendMsgs_SC;
  static constexpr MsgId Msg_SearchFriend_CS =
    MsgMod_Friend_MsgId_Msg_SearchFriend_CS;
  static constexpr MsgId Msg_SearchFriend_SC =
    MsgMod_Friend_MsgId_Msg_SearchFriend_SC;
  static constexpr MsgId Msg_GetSelfApplyList_CS =
    MsgMod_Friend_MsgId_Msg_GetSelfApplyList_CS;
  static constexpr MsgId Msg_GetSelfApplyList_SC =
    MsgMod_Friend_MsgId_Msg_GetSelfApplyList_SC;
  static constexpr MsgId Msg_AddBlackList_CS =
    MsgMod_Friend_MsgId_Msg_AddBlackList_CS;
  static constexpr MsgId Msg_AddBlackList_SC =
    MsgMod_Friend_MsgId_Msg_AddBlackList_SC;
  static constexpr MsgId Msg_DelBlackList_CS =
    MsgMod_Friend_MsgId_Msg_DelBlackList_CS;
  static constexpr MsgId Msg_DelBlackList_SC =
    MsgMod_Friend_MsgId_Msg_DelBlackList_SC;
  static constexpr MsgId Msg_GetBlackList_CS =
    MsgMod_Friend_MsgId_Msg_GetBlackList_CS;
  static constexpr MsgId Msg_GetBlackList_SC =
    MsgMod_Friend_MsgId_Msg_GetBlackList_SC;
  static constexpr MsgId Msg_RefuseAllFriend_CS =
    MsgMod_Friend_MsgId_Msg_RefuseAllFriend_CS;
  static constexpr MsgId Msg_RefuseAllFriend_SC =
    MsgMod_Friend_MsgId_Msg_RefuseAllFriend_SC;
  static constexpr MsgId Msg_DeleteLastChatFriend_CS =
    MsgMod_Friend_MsgId_Msg_DeleteLastChatFriend_CS;
  static constexpr MsgId Msg_DeleteLastChatFriend_SC =
    MsgMod_Friend_MsgId_Msg_DeleteLastChatFriend_SC;
  static constexpr MsgId Msg_GetFriendInviteAward_CS =
    MsgMod_Friend_MsgId_Msg_GetFriendInviteAward_CS;
  static constexpr MsgId Msg_GetFriendInviteAward_SC =
    MsgMod_Friend_MsgId_Msg_GetFriendInviteAward_SC;
  static constexpr MsgId Msg_GainInviteCodeAward_CS =
    MsgMod_Friend_MsgId_Msg_GainInviteCodeAward_CS;
  static constexpr MsgId Msg_GainInviteCodeAward_SC =
    MsgMod_Friend_MsgId_Msg_GainInviteCodeAward_SC;
  static constexpr MsgId Msg_UseInviteCodeReq =
    MsgMod_Friend_MsgId_Msg_UseInviteCodeReq;
  static constexpr MsgId Msg_UseInviteCodeAck =
    MsgMod_Friend_MsgId_Msg_UseInviteCodeAck;
  static constexpr MsgId Msg_FriendInviteAward_PUSH =
    MsgMod_Friend_MsgId_Msg_FriendInviteAward_PUSH;
  static inline bool MsgId_IsValid(int value) {
    return MsgMod_Friend_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    MsgMod_Friend_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    MsgMod_Friend_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    MsgMod_Friend_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return MsgMod_Friend_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return MsgMod_Friend_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return MsgMod_Friend_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.MsgMod_Friend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_ChatMsg_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_ChatMsg_CS) */ {
 public:
  inline Msg_ChatMsg_CS() : Msg_ChatMsg_CS(nullptr) {}
  ~Msg_ChatMsg_CS() override;
  explicit constexpr Msg_ChatMsg_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_ChatMsg_CS(const Msg_ChatMsg_CS& from);
  Msg_ChatMsg_CS(Msg_ChatMsg_CS&& from) noexcept
    : Msg_ChatMsg_CS() {
    *this = ::std::move(from);
  }

  inline Msg_ChatMsg_CS& operator=(const Msg_ChatMsg_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_ChatMsg_CS& operator=(Msg_ChatMsg_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_ChatMsg_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_ChatMsg_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_ChatMsg_CS*>(
               &_Msg_ChatMsg_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Msg_ChatMsg_CS& a, Msg_ChatMsg_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_ChatMsg_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_ChatMsg_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_ChatMsg_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_ChatMsg_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_ChatMsg_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_ChatMsg_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_ChatMsg_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_ChatMsg_CS";
  }
  protected:
  explicit Msg_ChatMsg_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 4,
    kRecvIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kMsgTypeFieldNumber = 3,
    kChatUpidFieldNumber = 6,
    kSeqIdFieldNumber = 5,
  };
  // string msg = 4;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int64 recv_id = 1;
  void clear_recv_id();
  int64_t recv_id() const;
  void set_recv_id(int64_t value);
  private:
  int64_t _internal_recv_id() const;
  void _internal_set_recv_id(int64_t value);
  public:

  // .XrPb.EChatType type = 2;
  void clear_type();
  ::XrPb::EChatType type() const;
  void set_type(::XrPb::EChatType value);
  private:
  ::XrPb::EChatType _internal_type() const;
  void _internal_set_type(::XrPb::EChatType value);
  public:

  // .XrPb.EChatMsgType msg_type = 3;
  void clear_msg_type();
  ::XrPb::EChatMsgType msg_type() const;
  void set_msg_type(::XrPb::EChatMsgType value);
  private:
  ::XrPb::EChatMsgType _internal_msg_type() const;
  void _internal_set_msg_type(::XrPb::EChatMsgType value);
  public:

  // optional int64 chat_upid = 6;
  bool has_chat_upid() const;
  private:
  bool _internal_has_chat_upid() const;
  public:
  void clear_chat_upid();
  int64_t chat_upid() const;
  void set_chat_upid(int64_t value);
  private:
  int64_t _internal_chat_upid() const;
  void _internal_set_chat_upid(int64_t value);
  public:

  // int32 seq_id = 5;
  void clear_seq_id();
  int32_t seq_id() const;
  void set_seq_id(int32_t value);
  private:
  int32_t _internal_seq_id() const;
  void _internal_set_seq_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_ChatMsg_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int64_t recv_id_;
  int type_;
  int msg_type_;
  int64_t chat_upid_;
  int32_t seq_id_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_ChatMsg_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_ChatMsg_SC) */ {
 public:
  inline Msg_ChatMsg_SC() : Msg_ChatMsg_SC(nullptr) {}
  ~Msg_ChatMsg_SC() override;
  explicit constexpr Msg_ChatMsg_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_ChatMsg_SC(const Msg_ChatMsg_SC& from);
  Msg_ChatMsg_SC(Msg_ChatMsg_SC&& from) noexcept
    : Msg_ChatMsg_SC() {
    *this = ::std::move(from);
  }

  inline Msg_ChatMsg_SC& operator=(const Msg_ChatMsg_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_ChatMsg_SC& operator=(Msg_ChatMsg_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_ChatMsg_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_ChatMsg_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_ChatMsg_SC*>(
               &_Msg_ChatMsg_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Msg_ChatMsg_SC& a, Msg_ChatMsg_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_ChatMsg_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_ChatMsg_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_ChatMsg_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_ChatMsg_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_ChatMsg_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_ChatMsg_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_ChatMsg_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_ChatMsg_SC";
  }
  protected:
  explicit Msg_ChatMsg_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvIdFieldNumber = 1,
    kChatIdFieldNumber = 3,
    kSendtimeFieldNumber = 4,
    kSeqIdFieldNumber = 2,
  };
  // optional int64 recv_id = 1;
  bool has_recv_id() const;
  private:
  bool _internal_has_recv_id() const;
  public:
  void clear_recv_id();
  int64_t recv_id() const;
  void set_recv_id(int64_t value);
  private:
  int64_t _internal_recv_id() const;
  void _internal_set_recv_id(int64_t value);
  public:

  // optional int64 chat_id = 3;
  bool has_chat_id() const;
  private:
  bool _internal_has_chat_id() const;
  public:
  void clear_chat_id();
  int64_t chat_id() const;
  void set_chat_id(int64_t value);
  private:
  int64_t _internal_chat_id() const;
  void _internal_set_chat_id(int64_t value);
  public:

  // optional int64 sendtime = 4;
  bool has_sendtime() const;
  private:
  bool _internal_has_sendtime() const;
  public:
  void clear_sendtime();
  int64_t sendtime() const;
  void set_sendtime(int64_t value);
  private:
  int64_t _internal_sendtime() const;
  void _internal_set_sendtime(int64_t value);
  public:

  // optional int32 seq_id = 2;
  bool has_seq_id() const;
  private:
  bool _internal_has_seq_id() const;
  public:
  void clear_seq_id();
  int32_t seq_id() const;
  void set_seq_id(int32_t value);
  private:
  int32_t _internal_seq_id() const;
  void _internal_set_seq_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_ChatMsg_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t recv_id_;
  int64_t chat_id_;
  int64_t sendtime_;
  int32_t seq_id_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_ChatMsg_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_ChatMsg_PUSH) */ {
 public:
  inline Msg_ChatMsg_PUSH() : Msg_ChatMsg_PUSH(nullptr) {}
  ~Msg_ChatMsg_PUSH() override;
  explicit constexpr Msg_ChatMsg_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_ChatMsg_PUSH(const Msg_ChatMsg_PUSH& from);
  Msg_ChatMsg_PUSH(Msg_ChatMsg_PUSH&& from) noexcept
    : Msg_ChatMsg_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_ChatMsg_PUSH& operator=(const Msg_ChatMsg_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_ChatMsg_PUSH& operator=(Msg_ChatMsg_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_ChatMsg_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_ChatMsg_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_ChatMsg_PUSH*>(
               &_Msg_ChatMsg_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Msg_ChatMsg_PUSH& a, Msg_ChatMsg_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_ChatMsg_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_ChatMsg_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_ChatMsg_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_ChatMsg_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_ChatMsg_PUSH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_ChatMsg_PUSH& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_ChatMsg_PUSH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_ChatMsg_PUSH";
  }
  protected:
  explicit Msg_ChatMsg_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatMsgFieldNumber = 1,
  };
  // .XrPb.ChatMsgData chatMsg = 1;
  bool has_chatmsg() const;
  private:
  bool _internal_has_chatmsg() const;
  public:
  void clear_chatmsg();
  const ::XrPb::ChatMsgData& chatmsg() const;
  PROTOBUF_NODISCARD ::XrPb::ChatMsgData* release_chatmsg();
  ::XrPb::ChatMsgData* mutable_chatmsg();
  void set_allocated_chatmsg(::XrPb::ChatMsgData* chatmsg);
  private:
  const ::XrPb::ChatMsgData& _internal_chatmsg() const;
  ::XrPb::ChatMsgData* _internal_mutable_chatmsg();
  public:
  void unsafe_arena_set_allocated_chatmsg(
      ::XrPb::ChatMsgData* chatmsg);
  ::XrPb::ChatMsgData* unsafe_arena_release_chatmsg();

  // @@protoc_insertion_point(class_scope:XrPb.Msg_ChatMsg_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::XrPb::ChatMsgData* chatmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_GetFriendList_CS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_GetFriendList_CS) */ {
 public:
  inline Msg_GetFriendList_CS() : Msg_GetFriendList_CS(nullptr) {}
  explicit constexpr Msg_GetFriendList_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GetFriendList_CS(const Msg_GetFriendList_CS& from);
  Msg_GetFriendList_CS(Msg_GetFriendList_CS&& from) noexcept
    : Msg_GetFriendList_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GetFriendList_CS& operator=(const Msg_GetFriendList_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GetFriendList_CS& operator=(Msg_GetFriendList_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GetFriendList_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GetFriendList_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GetFriendList_CS*>(
               &_Msg_GetFriendList_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Msg_GetFriendList_CS& a, Msg_GetFriendList_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GetFriendList_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GetFriendList_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GetFriendList_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GetFriendList_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_GetFriendList_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_GetFriendList_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GetFriendList_CS";
  }
  protected:
  explicit Msg_GetFriendList_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GetFriendList_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class FriendInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.FriendInfo) */ {
 public:
  inline FriendInfo() : FriendInfo(nullptr) {}
  ~FriendInfo() override;
  explicit constexpr FriendInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendInfo(const FriendInfo& from);
  FriendInfo(FriendInfo&& from) noexcept
    : FriendInfo() {
    *this = ::std::move(from);
  }

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInfo& operator=(FriendInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendInfo* internal_default_instance() {
    return reinterpret_cast<const FriendInfo*>(
               &_FriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FriendInfo& a, FriendInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FriendInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.FriendInfo";
  }
  protected:
  explicit FriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 3,
    kFormFieldNumber = 8,
    kAccIdFieldNumber = 1,
    kPlayerStatusFieldNumber = 2,
    kLevelFieldNumber = 4,
    kEndTimeFieldNumber = 6,
    kLeaveTimeFieldNumber = 7,
    kMsgCountFieldNumber = 5,
    kGenderFieldNumber = 9,
    kLastChatTimeFieldNumber = 10,
    kGameIdFieldNumber = 11,
  };
  // string role_name = 3;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_NODISCARD std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // .XrPb.FormData form = 8;
  bool has_form() const;
  private:
  bool _internal_has_form() const;
  public:
  void clear_form();
  const ::XrPb::FormData& form() const;
  PROTOBUF_NODISCARD ::XrPb::FormData* release_form();
  ::XrPb::FormData* mutable_form();
  void set_allocated_form(::XrPb::FormData* form);
  private:
  const ::XrPb::FormData& _internal_form() const;
  ::XrPb::FormData* _internal_mutable_form();
  public:
  void unsafe_arena_set_allocated_form(
      ::XrPb::FormData* form);
  ::XrPb::FormData* unsafe_arena_release_form();

  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // .XrPb.PlayerStatus player_status = 2;
  void clear_player_status();
  ::XrPb::PlayerStatus player_status() const;
  void set_player_status(::XrPb::PlayerStatus value);
  private:
  ::XrPb::PlayerStatus _internal_player_status() const;
  void _internal_set_player_status(::XrPb::PlayerStatus value);
  public:

  // uint32 level = 4;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional int64 end_time = 6;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  int64_t end_time() const;
  void set_end_time(int64_t value);
  private:
  int64_t _internal_end_time() const;
  void _internal_set_end_time(int64_t value);
  public:

  // int64 leave_time = 7;
  void clear_leave_time();
  int64_t leave_time() const;
  void set_leave_time(int64_t value);
  private:
  int64_t _internal_leave_time() const;
  void _internal_set_leave_time(int64_t value);
  public:

  // optional uint32 msg_count = 5;
  bool has_msg_count() const;
  private:
  bool _internal_has_msg_count() const;
  public:
  void clear_msg_count();
  uint32_t msg_count() const;
  void set_msg_count(uint32_t value);
  private:
  uint32_t _internal_msg_count() const;
  void _internal_set_msg_count(uint32_t value);
  public:

  // uint32 gender = 9;
  void clear_gender();
  uint32_t gender() const;
  void set_gender(uint32_t value);
  private:
  uint32_t _internal_gender() const;
  void _internal_set_gender(uint32_t value);
  public:

  // optional int64 lastChatTime = 10;
  bool has_lastchattime() const;
  private:
  bool _internal_has_lastchattime() const;
  public:
  void clear_lastchattime();
  int64_t lastchattime() const;
  void set_lastchattime(int64_t value);
  private:
  int64_t _internal_lastchattime() const;
  void _internal_set_lastchattime(int64_t value);
  public:

  // optional uint32 game_id = 11;
  bool has_game_id() const;
  private:
  bool _internal_has_game_id() const;
  public:
  void clear_game_id();
  uint32_t game_id() const;
  void set_game_id(uint32_t value);
  private:
  uint32_t _internal_game_id() const;
  void _internal_set_game_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.FriendInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
  ::XrPb::FormData* form_;
  int64_t acc_id_;
  int player_status_;
  uint32_t level_;
  int64_t end_time_;
  int64_t leave_time_;
  uint32_t msg_count_;
  uint32_t gender_;
  int64_t lastchattime_;
  uint32_t game_id_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_GetFriendList_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GetFriendList_SC) */ {
 public:
  inline Msg_GetFriendList_SC() : Msg_GetFriendList_SC(nullptr) {}
  ~Msg_GetFriendList_SC() override;
  explicit constexpr Msg_GetFriendList_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GetFriendList_SC(const Msg_GetFriendList_SC& from);
  Msg_GetFriendList_SC(Msg_GetFriendList_SC&& from) noexcept
    : Msg_GetFriendList_SC() {
    *this = ::std::move(from);
  }

  inline Msg_GetFriendList_SC& operator=(const Msg_GetFriendList_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GetFriendList_SC& operator=(Msg_GetFriendList_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GetFriendList_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GetFriendList_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_GetFriendList_SC*>(
               &_Msg_GetFriendList_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Msg_GetFriendList_SC& a, Msg_GetFriendList_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GetFriendList_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GetFriendList_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GetFriendList_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GetFriendList_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GetFriendList_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GetFriendList_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GetFriendList_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GetFriendList_SC";
  }
  protected:
  explicit Msg_GetFriendList_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
  };
  // repeated .XrPb.FriendInfo friends = 1;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::XrPb::FriendInfo* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >*
      mutable_friends();
  private:
  const ::XrPb::FriendInfo& _internal_friends(int index) const;
  ::XrPb::FriendInfo* _internal_add_friends();
  public:
  const ::XrPb::FriendInfo& friends(int index) const;
  ::XrPb::FriendInfo* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >&
      friends() const;

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GetFriendList_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo > friends_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_AddFriendApply_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_AddFriendApply_CS) */ {
 public:
  inline Msg_AddFriendApply_CS() : Msg_AddFriendApply_CS(nullptr) {}
  ~Msg_AddFriendApply_CS() override;
  explicit constexpr Msg_AddFriendApply_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_AddFriendApply_CS(const Msg_AddFriendApply_CS& from);
  Msg_AddFriendApply_CS(Msg_AddFriendApply_CS&& from) noexcept
    : Msg_AddFriendApply_CS() {
    *this = ::std::move(from);
  }

  inline Msg_AddFriendApply_CS& operator=(const Msg_AddFriendApply_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_AddFriendApply_CS& operator=(Msg_AddFriendApply_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_AddFriendApply_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_AddFriendApply_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_AddFriendApply_CS*>(
               &_Msg_AddFriendApply_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Msg_AddFriendApply_CS& a, Msg_AddFriendApply_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_AddFriendApply_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_AddFriendApply_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_AddFriendApply_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_AddFriendApply_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_AddFriendApply_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_AddFriendApply_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_AddFriendApply_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_AddFriendApply_CS";
  }
  protected:
  explicit Msg_AddFriendApply_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendAccIdFieldNumber = 1,
  };
  // int64 friend_acc_id = 1;
  void clear_friend_acc_id();
  int64_t friend_acc_id() const;
  void set_friend_acc_id(int64_t value);
  private:
  int64_t _internal_friend_acc_id() const;
  void _internal_set_friend_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_AddFriendApply_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t friend_acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_AddFriendApply_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_AddFriendApply_SC) */ {
 public:
  inline Msg_AddFriendApply_SC() : Msg_AddFriendApply_SC(nullptr) {}
  ~Msg_AddFriendApply_SC() override;
  explicit constexpr Msg_AddFriendApply_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_AddFriendApply_SC(const Msg_AddFriendApply_SC& from);
  Msg_AddFriendApply_SC(Msg_AddFriendApply_SC&& from) noexcept
    : Msg_AddFriendApply_SC() {
    *this = ::std::move(from);
  }

  inline Msg_AddFriendApply_SC& operator=(const Msg_AddFriendApply_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_AddFriendApply_SC& operator=(Msg_AddFriendApply_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_AddFriendApply_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_AddFriendApply_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_AddFriendApply_SC*>(
               &_Msg_AddFriendApply_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Msg_AddFriendApply_SC& a, Msg_AddFriendApply_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_AddFriendApply_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_AddFriendApply_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_AddFriendApply_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_AddFriendApply_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_AddFriendApply_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_AddFriendApply_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_AddFriendApply_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_AddFriendApply_SC";
  }
  protected:
  explicit Msg_AddFriendApply_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppliedFieldNumber = 1,
  };
  // optional .XrPb.BeAppliedInfo applied = 1;
  bool has_applied() const;
  private:
  bool _internal_has_applied() const;
  public:
  void clear_applied();
  const ::XrPb::BeAppliedInfo& applied() const;
  PROTOBUF_NODISCARD ::XrPb::BeAppliedInfo* release_applied();
  ::XrPb::BeAppliedInfo* mutable_applied();
  void set_allocated_applied(::XrPb::BeAppliedInfo* applied);
  private:
  const ::XrPb::BeAppliedInfo& _internal_applied() const;
  ::XrPb::BeAppliedInfo* _internal_mutable_applied();
  public:
  void unsafe_arena_set_allocated_applied(
      ::XrPb::BeAppliedInfo* applied);
  ::XrPb::BeAppliedInfo* unsafe_arena_release_applied();

  // @@protoc_insertion_point(class_scope:XrPb.Msg_AddFriendApply_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::XrPb::BeAppliedInfo* applied_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_AddFriendApply_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_AddFriendApply_PUSH) */ {
 public:
  inline Msg_AddFriendApply_PUSH() : Msg_AddFriendApply_PUSH(nullptr) {}
  ~Msg_AddFriendApply_PUSH() override;
  explicit constexpr Msg_AddFriendApply_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_AddFriendApply_PUSH(const Msg_AddFriendApply_PUSH& from);
  Msg_AddFriendApply_PUSH(Msg_AddFriendApply_PUSH&& from) noexcept
    : Msg_AddFriendApply_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_AddFriendApply_PUSH& operator=(const Msg_AddFriendApply_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_AddFriendApply_PUSH& operator=(Msg_AddFriendApply_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_AddFriendApply_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_AddFriendApply_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_AddFriendApply_PUSH*>(
               &_Msg_AddFriendApply_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Msg_AddFriendApply_PUSH& a, Msg_AddFriendApply_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_AddFriendApply_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_AddFriendApply_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_AddFriendApply_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_AddFriendApply_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_AddFriendApply_PUSH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_AddFriendApply_PUSH& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_AddFriendApply_PUSH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_AddFriendApply_PUSH";
  }
  protected:
  explicit Msg_AddFriendApply_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplyFieldNumber = 1,
  };
  // optional .XrPb.FriendInfo apply = 1;
  bool has_apply() const;
  private:
  bool _internal_has_apply() const;
  public:
  void clear_apply();
  const ::XrPb::FriendInfo& apply() const;
  PROTOBUF_NODISCARD ::XrPb::FriendInfo* release_apply();
  ::XrPb::FriendInfo* mutable_apply();
  void set_allocated_apply(::XrPb::FriendInfo* apply);
  private:
  const ::XrPb::FriendInfo& _internal_apply() const;
  ::XrPb::FriendInfo* _internal_mutable_apply();
  public:
  void unsafe_arena_set_allocated_apply(
      ::XrPb::FriendInfo* apply);
  ::XrPb::FriendInfo* unsafe_arena_release_apply();

  // @@protoc_insertion_point(class_scope:XrPb.Msg_AddFriendApply_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::XrPb::FriendInfo* apply_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_AddFriendReply_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_AddFriendReply_CS) */ {
 public:
  inline Msg_AddFriendReply_CS() : Msg_AddFriendReply_CS(nullptr) {}
  ~Msg_AddFriendReply_CS() override;
  explicit constexpr Msg_AddFriendReply_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_AddFriendReply_CS(const Msg_AddFriendReply_CS& from);
  Msg_AddFriendReply_CS(Msg_AddFriendReply_CS&& from) noexcept
    : Msg_AddFriendReply_CS() {
    *this = ::std::move(from);
  }

  inline Msg_AddFriendReply_CS& operator=(const Msg_AddFriendReply_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_AddFriendReply_CS& operator=(Msg_AddFriendReply_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_AddFriendReply_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_AddFriendReply_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_AddFriendReply_CS*>(
               &_Msg_AddFriendReply_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Msg_AddFriendReply_CS& a, Msg_AddFriendReply_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_AddFriendReply_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_AddFriendReply_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_AddFriendReply_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_AddFriendReply_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_AddFriendReply_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_AddFriendReply_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_AddFriendReply_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_AddFriendReply_CS";
  }
  protected:
  explicit Msg_AddFriendReply_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendAccIdFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // int64 friend_acc_id = 2;
  void clear_friend_acc_id();
  int64_t friend_acc_id() const;
  void set_friend_acc_id(int64_t value);
  private:
  int64_t _internal_friend_acc_id() const;
  void _internal_set_friend_acc_id(int64_t value);
  public:

  // .XrPb.EFriendReplyType result = 1;
  void clear_result();
  ::XrPb::EFriendReplyType result() const;
  void set_result(::XrPb::EFriendReplyType value);
  private:
  ::XrPb::EFriendReplyType _internal_result() const;
  void _internal_set_result(::XrPb::EFriendReplyType value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_AddFriendReply_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t friend_acc_id_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_AddFriendReply_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_AddFriendReply_SC) */ {
 public:
  inline Msg_AddFriendReply_SC() : Msg_AddFriendReply_SC(nullptr) {}
  ~Msg_AddFriendReply_SC() override;
  explicit constexpr Msg_AddFriendReply_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_AddFriendReply_SC(const Msg_AddFriendReply_SC& from);
  Msg_AddFriendReply_SC(Msg_AddFriendReply_SC&& from) noexcept
    : Msg_AddFriendReply_SC() {
    *this = ::std::move(from);
  }

  inline Msg_AddFriendReply_SC& operator=(const Msg_AddFriendReply_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_AddFriendReply_SC& operator=(Msg_AddFriendReply_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_AddFriendReply_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_AddFriendReply_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_AddFriendReply_SC*>(
               &_Msg_AddFriendReply_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Msg_AddFriendReply_SC& a, Msg_AddFriendReply_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_AddFriendReply_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_AddFriendReply_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_AddFriendReply_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_AddFriendReply_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_AddFriendReply_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_AddFriendReply_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_AddFriendReply_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_AddFriendReply_SC";
  }
  protected:
  explicit Msg_AddFriendReply_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional .XrPb.FriendInfo friend = 2;
  bool has_friend_() const;
  private:
  bool _internal_has_friend_() const;
  public:
  void clear_friend_();
  const ::XrPb::FriendInfo& friend_() const;
  PROTOBUF_NODISCARD ::XrPb::FriendInfo* release_friend_();
  ::XrPb::FriendInfo* mutable_friend_();
  void set_allocated_friend_(::XrPb::FriendInfo* friend_);
  private:
  const ::XrPb::FriendInfo& _internal_friend_() const;
  ::XrPb::FriendInfo* _internal_mutable_friend_();
  public:
  void unsafe_arena_set_allocated_friend_(
      ::XrPb::FriendInfo* friend_);
  ::XrPb::FriendInfo* unsafe_arena_release_friend_();

  // .XrPb.EFriendReplyType result = 1;
  void clear_result();
  ::XrPb::EFriendReplyType result() const;
  void set_result(::XrPb::EFriendReplyType value);
  private:
  ::XrPb::EFriendReplyType _internal_result() const;
  void _internal_set_result(::XrPb::EFriendReplyType value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_AddFriendReply_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::XrPb::FriendInfo* friend__;
  int result_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_AddFriendReply_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_AddFriendReply_PUSH) */ {
 public:
  inline Msg_AddFriendReply_PUSH() : Msg_AddFriendReply_PUSH(nullptr) {}
  ~Msg_AddFriendReply_PUSH() override;
  explicit constexpr Msg_AddFriendReply_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_AddFriendReply_PUSH(const Msg_AddFriendReply_PUSH& from);
  Msg_AddFriendReply_PUSH(Msg_AddFriendReply_PUSH&& from) noexcept
    : Msg_AddFriendReply_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_AddFriendReply_PUSH& operator=(const Msg_AddFriendReply_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_AddFriendReply_PUSH& operator=(Msg_AddFriendReply_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_AddFriendReply_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_AddFriendReply_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_AddFriendReply_PUSH*>(
               &_Msg_AddFriendReply_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Msg_AddFriendReply_PUSH& a, Msg_AddFriendReply_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_AddFriendReply_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_AddFriendReply_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_AddFriendReply_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_AddFriendReply_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_AddFriendReply_PUSH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_AddFriendReply_PUSH& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_AddFriendReply_PUSH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_AddFriendReply_PUSH";
  }
  protected:
  explicit Msg_AddFriendReply_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // optional .XrPb.FriendInfo friend = 2;
  bool has_friend_() const;
  private:
  bool _internal_has_friend_() const;
  public:
  void clear_friend_();
  const ::XrPb::FriendInfo& friend_() const;
  PROTOBUF_NODISCARD ::XrPb::FriendInfo* release_friend_();
  ::XrPb::FriendInfo* mutable_friend_();
  void set_allocated_friend_(::XrPb::FriendInfo* friend_);
  private:
  const ::XrPb::FriendInfo& _internal_friend_() const;
  ::XrPb::FriendInfo* _internal_mutable_friend_();
  public:
  void unsafe_arena_set_allocated_friend_(
      ::XrPb::FriendInfo* friend_);
  ::XrPb::FriendInfo* unsafe_arena_release_friend_();

  // .XrPb.EFriendReplyType result = 1;
  void clear_result();
  ::XrPb::EFriendReplyType result() const;
  void set_result(::XrPb::EFriendReplyType value);
  private:
  ::XrPb::EFriendReplyType _internal_result() const;
  void _internal_set_result(::XrPb::EFriendReplyType value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_AddFriendReply_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::XrPb::FriendInfo* friend__;
  int result_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_GetFriApplyList_CS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_GetFriApplyList_CS) */ {
 public:
  inline Msg_GetFriApplyList_CS() : Msg_GetFriApplyList_CS(nullptr) {}
  explicit constexpr Msg_GetFriApplyList_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GetFriApplyList_CS(const Msg_GetFriApplyList_CS& from);
  Msg_GetFriApplyList_CS(Msg_GetFriApplyList_CS&& from) noexcept
    : Msg_GetFriApplyList_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GetFriApplyList_CS& operator=(const Msg_GetFriApplyList_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GetFriApplyList_CS& operator=(Msg_GetFriApplyList_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GetFriApplyList_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GetFriApplyList_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GetFriApplyList_CS*>(
               &_Msg_GetFriApplyList_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Msg_GetFriApplyList_CS& a, Msg_GetFriApplyList_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GetFriApplyList_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GetFriApplyList_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GetFriApplyList_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GetFriApplyList_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_GetFriApplyList_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_GetFriApplyList_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GetFriApplyList_CS";
  }
  protected:
  explicit Msg_GetFriApplyList_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GetFriApplyList_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_GetFriApplyList_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GetFriApplyList_SC) */ {
 public:
  inline Msg_GetFriApplyList_SC() : Msg_GetFriApplyList_SC(nullptr) {}
  ~Msg_GetFriApplyList_SC() override;
  explicit constexpr Msg_GetFriApplyList_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GetFriApplyList_SC(const Msg_GetFriApplyList_SC& from);
  Msg_GetFriApplyList_SC(Msg_GetFriApplyList_SC&& from) noexcept
    : Msg_GetFriApplyList_SC() {
    *this = ::std::move(from);
  }

  inline Msg_GetFriApplyList_SC& operator=(const Msg_GetFriApplyList_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GetFriApplyList_SC& operator=(Msg_GetFriApplyList_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GetFriApplyList_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GetFriApplyList_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_GetFriApplyList_SC*>(
               &_Msg_GetFriApplyList_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Msg_GetFriApplyList_SC& a, Msg_GetFriApplyList_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GetFriApplyList_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GetFriApplyList_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GetFriApplyList_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GetFriApplyList_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GetFriApplyList_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GetFriApplyList_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GetFriApplyList_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GetFriApplyList_SC";
  }
  protected:
  explicit Msg_GetFriApplyList_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplyListFieldNumber = 1,
  };
  // repeated .XrPb.FriendInfo apply_list = 1;
  int apply_list_size() const;
  private:
  int _internal_apply_list_size() const;
  public:
  void clear_apply_list();
  ::XrPb::FriendInfo* mutable_apply_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >*
      mutable_apply_list();
  private:
  const ::XrPb::FriendInfo& _internal_apply_list(int index) const;
  ::XrPb::FriendInfo* _internal_add_apply_list();
  public:
  const ::XrPb::FriendInfo& apply_list(int index) const;
  ::XrPb::FriendInfo* add_apply_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >&
      apply_list() const;

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GetFriApplyList_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo > apply_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_DelFriend_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DelFriend_CS) */ {
 public:
  inline Msg_DelFriend_CS() : Msg_DelFriend_CS(nullptr) {}
  ~Msg_DelFriend_CS() override;
  explicit constexpr Msg_DelFriend_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DelFriend_CS(const Msg_DelFriend_CS& from);
  Msg_DelFriend_CS(Msg_DelFriend_CS&& from) noexcept
    : Msg_DelFriend_CS() {
    *this = ::std::move(from);
  }

  inline Msg_DelFriend_CS& operator=(const Msg_DelFriend_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DelFriend_CS& operator=(Msg_DelFriend_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DelFriend_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DelFriend_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_DelFriend_CS*>(
               &_Msg_DelFriend_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Msg_DelFriend_CS& a, Msg_DelFriend_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DelFriend_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DelFriend_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DelFriend_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DelFriend_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DelFriend_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DelFriend_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DelFriend_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DelFriend_CS";
  }
  protected:
  explicit Msg_DelFriend_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendAccIdFieldNumber = 1,
  };
  // int64 friend_acc_id = 1;
  void clear_friend_acc_id();
  int64_t friend_acc_id() const;
  void set_friend_acc_id(int64_t value);
  private:
  int64_t _internal_friend_acc_id() const;
  void _internal_set_friend_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DelFriend_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t friend_acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_DelFriend_SC final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_DelFriend_SC) */ {
 public:
  inline Msg_DelFriend_SC() : Msg_DelFriend_SC(nullptr) {}
  explicit constexpr Msg_DelFriend_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DelFriend_SC(const Msg_DelFriend_SC& from);
  Msg_DelFriend_SC(Msg_DelFriend_SC&& from) noexcept
    : Msg_DelFriend_SC() {
    *this = ::std::move(from);
  }

  inline Msg_DelFriend_SC& operator=(const Msg_DelFriend_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DelFriend_SC& operator=(Msg_DelFriend_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DelFriend_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DelFriend_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_DelFriend_SC*>(
               &_Msg_DelFriend_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Msg_DelFriend_SC& a, Msg_DelFriend_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DelFriend_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DelFriend_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DelFriend_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DelFriend_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_DelFriend_SC& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_DelFriend_SC& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DelFriend_SC";
  }
  protected:
  explicit Msg_DelFriend_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DelFriend_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_NotifyDelFriend_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_NotifyDelFriend_PUSH) */ {
 public:
  inline Msg_NotifyDelFriend_PUSH() : Msg_NotifyDelFriend_PUSH(nullptr) {}
  ~Msg_NotifyDelFriend_PUSH() override;
  explicit constexpr Msg_NotifyDelFriend_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_NotifyDelFriend_PUSH(const Msg_NotifyDelFriend_PUSH& from);
  Msg_NotifyDelFriend_PUSH(Msg_NotifyDelFriend_PUSH&& from) noexcept
    : Msg_NotifyDelFriend_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_NotifyDelFriend_PUSH& operator=(const Msg_NotifyDelFriend_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_NotifyDelFriend_PUSH& operator=(Msg_NotifyDelFriend_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_NotifyDelFriend_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_NotifyDelFriend_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_NotifyDelFriend_PUSH*>(
               &_Msg_NotifyDelFriend_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Msg_NotifyDelFriend_PUSH& a, Msg_NotifyDelFriend_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_NotifyDelFriend_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_NotifyDelFriend_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_NotifyDelFriend_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_NotifyDelFriend_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_NotifyDelFriend_PUSH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_NotifyDelFriend_PUSH& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_NotifyDelFriend_PUSH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_NotifyDelFriend_PUSH";
  }
  protected:
  explicit Msg_NotifyDelFriend_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendAccIdFieldNumber = 1,
  };
  // int64 friend_acc_id = 1;
  void clear_friend_acc_id();
  int64_t friend_acc_id() const;
  void set_friend_acc_id(int64_t value);
  private:
  int64_t _internal_friend_acc_id() const;
  void _internal_set_friend_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_NotifyDelFriend_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t friend_acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_AddAllFriend_CS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_AddAllFriend_CS) */ {
 public:
  inline Msg_AddAllFriend_CS() : Msg_AddAllFriend_CS(nullptr) {}
  explicit constexpr Msg_AddAllFriend_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_AddAllFriend_CS(const Msg_AddAllFriend_CS& from);
  Msg_AddAllFriend_CS(Msg_AddAllFriend_CS&& from) noexcept
    : Msg_AddAllFriend_CS() {
    *this = ::std::move(from);
  }

  inline Msg_AddAllFriend_CS& operator=(const Msg_AddAllFriend_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_AddAllFriend_CS& operator=(Msg_AddAllFriend_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_AddAllFriend_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_AddAllFriend_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_AddAllFriend_CS*>(
               &_Msg_AddAllFriend_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Msg_AddAllFriend_CS& a, Msg_AddAllFriend_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_AddAllFriend_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_AddAllFriend_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_AddAllFriend_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_AddAllFriend_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_AddAllFriend_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_AddAllFriend_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_AddAllFriend_CS";
  }
  protected:
  explicit Msg_AddAllFriend_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_AddAllFriend_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_AddAllFriend_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_AddAllFriend_SC) */ {
 public:
  inline Msg_AddAllFriend_SC() : Msg_AddAllFriend_SC(nullptr) {}
  ~Msg_AddAllFriend_SC() override;
  explicit constexpr Msg_AddAllFriend_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_AddAllFriend_SC(const Msg_AddAllFriend_SC& from);
  Msg_AddAllFriend_SC(Msg_AddAllFriend_SC&& from) noexcept
    : Msg_AddAllFriend_SC() {
    *this = ::std::move(from);
  }

  inline Msg_AddAllFriend_SC& operator=(const Msg_AddAllFriend_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_AddAllFriend_SC& operator=(Msg_AddAllFriend_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_AddAllFriend_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_AddAllFriend_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_AddAllFriend_SC*>(
               &_Msg_AddAllFriend_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Msg_AddAllFriend_SC& a, Msg_AddAllFriend_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_AddAllFriend_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_AddAllFriend_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_AddAllFriend_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_AddAllFriend_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_AddAllFriend_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_AddAllFriend_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_AddAllFriend_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_AddAllFriend_SC";
  }
  protected:
  explicit Msg_AddAllFriend_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
  };
  // repeated .XrPb.FriendInfo friends = 1;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::XrPb::FriendInfo* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >*
      mutable_friends();
  private:
  const ::XrPb::FriendInfo& _internal_friends(int index) const;
  ::XrPb::FriendInfo* _internal_add_friends();
  public:
  const ::XrPb::FriendInfo& friends(int index) const;
  ::XrPb::FriendInfo* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >&
      friends() const;

  // @@protoc_insertion_point(class_scope:XrPb.Msg_AddAllFriend_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo > friends_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_GetFriendMsgs_CS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_GetFriendMsgs_CS) */ {
 public:
  inline Msg_GetFriendMsgs_CS() : Msg_GetFriendMsgs_CS(nullptr) {}
  explicit constexpr Msg_GetFriendMsgs_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GetFriendMsgs_CS(const Msg_GetFriendMsgs_CS& from);
  Msg_GetFriendMsgs_CS(Msg_GetFriendMsgs_CS&& from) noexcept
    : Msg_GetFriendMsgs_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GetFriendMsgs_CS& operator=(const Msg_GetFriendMsgs_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GetFriendMsgs_CS& operator=(Msg_GetFriendMsgs_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GetFriendMsgs_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GetFriendMsgs_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GetFriendMsgs_CS*>(
               &_Msg_GetFriendMsgs_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Msg_GetFriendMsgs_CS& a, Msg_GetFriendMsgs_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GetFriendMsgs_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GetFriendMsgs_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GetFriendMsgs_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GetFriendMsgs_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_GetFriendMsgs_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_GetFriendMsgs_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GetFriendMsgs_CS";
  }
  protected:
  explicit Msg_GetFriendMsgs_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GetFriendMsgs_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class FriendOfflineMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.FriendOfflineMsg) */ {
 public:
  inline FriendOfflineMsg() : FriendOfflineMsg(nullptr) {}
  ~FriendOfflineMsg() override;
  explicit constexpr FriendOfflineMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendOfflineMsg(const FriendOfflineMsg& from);
  FriendOfflineMsg(FriendOfflineMsg&& from) noexcept
    : FriendOfflineMsg() {
    *this = ::std::move(from);
  }

  inline FriendOfflineMsg& operator=(const FriendOfflineMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendOfflineMsg& operator=(FriendOfflineMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendOfflineMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendOfflineMsg* internal_default_instance() {
    return reinterpret_cast<const FriendOfflineMsg*>(
               &_FriendOfflineMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(FriendOfflineMsg& a, FriendOfflineMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendOfflineMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendOfflineMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendOfflineMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendOfflineMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendOfflineMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FriendOfflineMsg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendOfflineMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.FriendOfflineMsg";
  }
  protected:
  explicit FriendOfflineMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kFriendIdFieldNumber = 1,
  };
  // repeated .XrPb.ChatMsgData msg = 2;
  int msg_size() const;
  private:
  int _internal_msg_size() const;
  public:
  void clear_msg();
  ::XrPb::ChatMsgData* mutable_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ChatMsgData >*
      mutable_msg();
  private:
  const ::XrPb::ChatMsgData& _internal_msg(int index) const;
  ::XrPb::ChatMsgData* _internal_add_msg();
  public:
  const ::XrPb::ChatMsgData& msg(int index) const;
  ::XrPb::ChatMsgData* add_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ChatMsgData >&
      msg() const;

  // int64 friend_id = 1;
  void clear_friend_id();
  int64_t friend_id() const;
  void set_friend_id(int64_t value);
  private:
  int64_t _internal_friend_id() const;
  void _internal_set_friend_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.FriendOfflineMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ChatMsgData > msg_;
  int64_t friend_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_GetFriendMsgs_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GetFriendMsgs_SC) */ {
 public:
  inline Msg_GetFriendMsgs_SC() : Msg_GetFriendMsgs_SC(nullptr) {}
  ~Msg_GetFriendMsgs_SC() override;
  explicit constexpr Msg_GetFriendMsgs_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GetFriendMsgs_SC(const Msg_GetFriendMsgs_SC& from);
  Msg_GetFriendMsgs_SC(Msg_GetFriendMsgs_SC&& from) noexcept
    : Msg_GetFriendMsgs_SC() {
    *this = ::std::move(from);
  }

  inline Msg_GetFriendMsgs_SC& operator=(const Msg_GetFriendMsgs_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GetFriendMsgs_SC& operator=(Msg_GetFriendMsgs_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GetFriendMsgs_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GetFriendMsgs_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_GetFriendMsgs_SC*>(
               &_Msg_GetFriendMsgs_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Msg_GetFriendMsgs_SC& a, Msg_GetFriendMsgs_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GetFriendMsgs_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GetFriendMsgs_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GetFriendMsgs_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GetFriendMsgs_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GetFriendMsgs_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GetFriendMsgs_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GetFriendMsgs_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GetFriendMsgs_SC";
  }
  protected:
  explicit Msg_GetFriendMsgs_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendFieldNumber = 1,
    kFinishFieldNumber = 2,
  };
  // repeated .XrPb.FriendOfflineMsg friend = 1;
  int friend__size() const;
  private:
  int _internal_friend__size() const;
  public:
  void clear_friend_();
  ::XrPb::FriendOfflineMsg* mutable_friend_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendOfflineMsg >*
      mutable_friend_();
  private:
  const ::XrPb::FriendOfflineMsg& _internal_friend_(int index) const;
  ::XrPb::FriendOfflineMsg* _internal_add_friend_();
  public:
  const ::XrPb::FriendOfflineMsg& friend_(int index) const;
  ::XrPb::FriendOfflineMsg* add_friend_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendOfflineMsg >&
      friend_() const;

  // bool finish = 2;
  void clear_finish();
  bool finish() const;
  void set_finish(bool value);
  private:
  bool _internal_finish() const;
  void _internal_set_finish(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GetFriendMsgs_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendOfflineMsg > friend__;
  bool finish_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_FriendInfoUpdate_PUSH_AttrInt64Pair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_FriendInfoUpdate_PUSH.AttrInt64Pair) */ {
 public:
  inline Msg_FriendInfoUpdate_PUSH_AttrInt64Pair() : Msg_FriendInfoUpdate_PUSH_AttrInt64Pair(nullptr) {}
  ~Msg_FriendInfoUpdate_PUSH_AttrInt64Pair() override;
  explicit constexpr Msg_FriendInfoUpdate_PUSH_AttrInt64Pair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_FriendInfoUpdate_PUSH_AttrInt64Pair(const Msg_FriendInfoUpdate_PUSH_AttrInt64Pair& from);
  Msg_FriendInfoUpdate_PUSH_AttrInt64Pair(Msg_FriendInfoUpdate_PUSH_AttrInt64Pair&& from) noexcept
    : Msg_FriendInfoUpdate_PUSH_AttrInt64Pair() {
    *this = ::std::move(from);
  }

  inline Msg_FriendInfoUpdate_PUSH_AttrInt64Pair& operator=(const Msg_FriendInfoUpdate_PUSH_AttrInt64Pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_FriendInfoUpdate_PUSH_AttrInt64Pair& operator=(Msg_FriendInfoUpdate_PUSH_AttrInt64Pair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_FriendInfoUpdate_PUSH_AttrInt64Pair& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_FriendInfoUpdate_PUSH_AttrInt64Pair* internal_default_instance() {
    return reinterpret_cast<const Msg_FriendInfoUpdate_PUSH_AttrInt64Pair*>(
               &_Msg_FriendInfoUpdate_PUSH_AttrInt64Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Msg_FriendInfoUpdate_PUSH_AttrInt64Pair& a, Msg_FriendInfoUpdate_PUSH_AttrInt64Pair& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_FriendInfoUpdate_PUSH_AttrInt64Pair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_FriendInfoUpdate_PUSH_AttrInt64Pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_FriendInfoUpdate_PUSH_AttrInt64Pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_FriendInfoUpdate_PUSH_AttrInt64Pair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_FriendInfoUpdate_PUSH_AttrInt64Pair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_FriendInfoUpdate_PUSH_AttrInt64Pair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_FriendInfoUpdate_PUSH_AttrInt64Pair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_FriendInfoUpdate_PUSH.AttrInt64Pair";
  }
  protected:
  explicit Msg_FriendInfoUpdate_PUSH_AttrInt64Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // int64 value = 2;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // .XrPb.Msg_FriendInfoUpdate_PUSH.AttrType type = 1;
  void clear_type();
  ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType type() const;
  void set_type(::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType value);
  private:
  ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType _internal_type() const;
  void _internal_set_type(::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_FriendInfoUpdate_PUSH.AttrInt64Pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t value_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_FriendInfoUpdate_PUSH_AttrStringPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_FriendInfoUpdate_PUSH.AttrStringPair) */ {
 public:
  inline Msg_FriendInfoUpdate_PUSH_AttrStringPair() : Msg_FriendInfoUpdate_PUSH_AttrStringPair(nullptr) {}
  ~Msg_FriendInfoUpdate_PUSH_AttrStringPair() override;
  explicit constexpr Msg_FriendInfoUpdate_PUSH_AttrStringPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_FriendInfoUpdate_PUSH_AttrStringPair(const Msg_FriendInfoUpdate_PUSH_AttrStringPair& from);
  Msg_FriendInfoUpdate_PUSH_AttrStringPair(Msg_FriendInfoUpdate_PUSH_AttrStringPair&& from) noexcept
    : Msg_FriendInfoUpdate_PUSH_AttrStringPair() {
    *this = ::std::move(from);
  }

  inline Msg_FriendInfoUpdate_PUSH_AttrStringPair& operator=(const Msg_FriendInfoUpdate_PUSH_AttrStringPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_FriendInfoUpdate_PUSH_AttrStringPair& operator=(Msg_FriendInfoUpdate_PUSH_AttrStringPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_FriendInfoUpdate_PUSH_AttrStringPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_FriendInfoUpdate_PUSH_AttrStringPair* internal_default_instance() {
    return reinterpret_cast<const Msg_FriendInfoUpdate_PUSH_AttrStringPair*>(
               &_Msg_FriendInfoUpdate_PUSH_AttrStringPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Msg_FriendInfoUpdate_PUSH_AttrStringPair& a, Msg_FriendInfoUpdate_PUSH_AttrStringPair& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_FriendInfoUpdate_PUSH_AttrStringPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_FriendInfoUpdate_PUSH_AttrStringPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_FriendInfoUpdate_PUSH_AttrStringPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_FriendInfoUpdate_PUSH_AttrStringPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_FriendInfoUpdate_PUSH_AttrStringPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_FriendInfoUpdate_PUSH_AttrStringPair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_FriendInfoUpdate_PUSH_AttrStringPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_FriendInfoUpdate_PUSH.AttrStringPair";
  }
  protected:
  explicit Msg_FriendInfoUpdate_PUSH_AttrStringPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .XrPb.Msg_FriendInfoUpdate_PUSH.AttrType type = 1;
  void clear_type();
  ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType type() const;
  void set_type(::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType value);
  private:
  ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType _internal_type() const;
  void _internal_set_type(::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_FriendInfoUpdate_PUSH.AttrStringPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_FriendInfoUpdate_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_FriendInfoUpdate_PUSH) */ {
 public:
  inline Msg_FriendInfoUpdate_PUSH() : Msg_FriendInfoUpdate_PUSH(nullptr) {}
  ~Msg_FriendInfoUpdate_PUSH() override;
  explicit constexpr Msg_FriendInfoUpdate_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_FriendInfoUpdate_PUSH(const Msg_FriendInfoUpdate_PUSH& from);
  Msg_FriendInfoUpdate_PUSH(Msg_FriendInfoUpdate_PUSH&& from) noexcept
    : Msg_FriendInfoUpdate_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_FriendInfoUpdate_PUSH& operator=(const Msg_FriendInfoUpdate_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_FriendInfoUpdate_PUSH& operator=(Msg_FriendInfoUpdate_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_FriendInfoUpdate_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_FriendInfoUpdate_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_FriendInfoUpdate_PUSH*>(
               &_Msg_FriendInfoUpdate_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Msg_FriendInfoUpdate_PUSH& a, Msg_FriendInfoUpdate_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_FriendInfoUpdate_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_FriendInfoUpdate_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_FriendInfoUpdate_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_FriendInfoUpdate_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_FriendInfoUpdate_PUSH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_FriendInfoUpdate_PUSH& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_FriendInfoUpdate_PUSH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_FriendInfoUpdate_PUSH";
  }
  protected:
  explicit Msg_FriendInfoUpdate_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Msg_FriendInfoUpdate_PUSH_AttrInt64Pair AttrInt64Pair;
  typedef Msg_FriendInfoUpdate_PUSH_AttrStringPair AttrStringPair;

  typedef Msg_FriendInfoUpdate_PUSH_AttrType AttrType;
  static constexpr AttrType Attr_None =
    Msg_FriendInfoUpdate_PUSH_AttrType_Attr_None;
  static constexpr AttrType Attr_Level =
    Msg_FriendInfoUpdate_PUSH_AttrType_Attr_Level;
  static constexpr AttrType Attr_RoleName =
    Msg_FriendInfoUpdate_PUSH_AttrType_Attr_RoleName;
  static constexpr AttrType Attr_LeftTime =
    Msg_FriendInfoUpdate_PUSH_AttrType_Attr_LeftTime;
  static constexpr AttrType Attr_PlayerStaus =
    Msg_FriendInfoUpdate_PUSH_AttrType_Attr_PlayerStaus;
  static constexpr AttrType Attr_ChatTime =
    Msg_FriendInfoUpdate_PUSH_AttrType_Attr_ChatTime;
  static inline bool AttrType_IsValid(int value) {
    return Msg_FriendInfoUpdate_PUSH_AttrType_IsValid(value);
  }
  static constexpr AttrType AttrType_MIN =
    Msg_FriendInfoUpdate_PUSH_AttrType_AttrType_MIN;
  static constexpr AttrType AttrType_MAX =
    Msg_FriendInfoUpdate_PUSH_AttrType_AttrType_MAX;
  static constexpr int AttrType_ARRAYSIZE =
    Msg_FriendInfoUpdate_PUSH_AttrType_AttrType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AttrType_descriptor() {
    return Msg_FriendInfoUpdate_PUSH_AttrType_descriptor();
  }
  template<typename T>
  static inline const std::string& AttrType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AttrType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AttrType_Name.");
    return Msg_FriendInfoUpdate_PUSH_AttrType_Name(enum_t_value);
  }
  static inline bool AttrType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AttrType* value) {
    return Msg_FriendInfoUpdate_PUSH_AttrType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAttrInt64PairsFieldNumber = 2,
    kAttrStringPairsFieldNumber = 3,
    kFriendAccIdFieldNumber = 1,
    kIsFriendFieldNumber = 4,
  };
  // repeated .XrPb.Msg_FriendInfoUpdate_PUSH.AttrInt64Pair attrInt64Pairs = 2;
  int attrint64pairs_size() const;
  private:
  int _internal_attrint64pairs_size() const;
  public:
  void clear_attrint64pairs();
  ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair* mutable_attrint64pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair >*
      mutable_attrint64pairs();
  private:
  const ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair& _internal_attrint64pairs(int index) const;
  ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair* _internal_add_attrint64pairs();
  public:
  const ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair& attrint64pairs(int index) const;
  ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair* add_attrint64pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair >&
      attrint64pairs() const;

  // repeated .XrPb.Msg_FriendInfoUpdate_PUSH.AttrStringPair attrStringPairs = 3;
  int attrstringpairs_size() const;
  private:
  int _internal_attrstringpairs_size() const;
  public:
  void clear_attrstringpairs();
  ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair* mutable_attrstringpairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair >*
      mutable_attrstringpairs();
  private:
  const ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair& _internal_attrstringpairs(int index) const;
  ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair* _internal_add_attrstringpairs();
  public:
  const ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair& attrstringpairs(int index) const;
  ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair* add_attrstringpairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair >&
      attrstringpairs() const;

  // int64 friend_acc_id = 1;
  void clear_friend_acc_id();
  int64_t friend_acc_id() const;
  void set_friend_acc_id(int64_t value);
  private:
  int64_t _internal_friend_acc_id() const;
  void _internal_set_friend_acc_id(int64_t value);
  public:

  // optional bool is_friend = 4;
  bool has_is_friend() const;
  private:
  bool _internal_has_is_friend() const;
  public:
  void clear_is_friend();
  bool is_friend() const;
  void set_is_friend(bool value);
  private:
  bool _internal_is_friend() const;
  void _internal_set_is_friend(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_FriendInfoUpdate_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair > attrint64pairs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair > attrstringpairs_;
  int64_t friend_acc_id_;
  bool is_friend_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_SearchFriend_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_SearchFriend_CS) */ {
 public:
  inline Msg_SearchFriend_CS() : Msg_SearchFriend_CS(nullptr) {}
  ~Msg_SearchFriend_CS() override;
  explicit constexpr Msg_SearchFriend_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SearchFriend_CS(const Msg_SearchFriend_CS& from);
  Msg_SearchFriend_CS(Msg_SearchFriend_CS&& from) noexcept
    : Msg_SearchFriend_CS() {
    *this = ::std::move(from);
  }

  inline Msg_SearchFriend_CS& operator=(const Msg_SearchFriend_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SearchFriend_CS& operator=(Msg_SearchFriend_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SearchFriend_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SearchFriend_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_SearchFriend_CS*>(
               &_Msg_SearchFriend_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Msg_SearchFriend_CS& a, Msg_SearchFriend_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SearchFriend_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SearchFriend_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SearchFriend_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SearchFriend_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_SearchFriend_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_SearchFriend_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SearchFriend_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SearchFriend_CS";
  }
  protected:
  explicit Msg_SearchFriend_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchFieldNumber = 1,
  };
  // optional string search = 1;
  bool has_search() const;
  private:
  bool _internal_has_search() const;
  public:
  void clear_search();
  const std::string& search() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_search(ArgT0&& arg0, ArgT... args);
  std::string* mutable_search();
  PROTOBUF_NODISCARD std::string* release_search();
  void set_allocated_search(std::string* search);
  private:
  const std::string& _internal_search() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search(const std::string& value);
  std::string* _internal_mutable_search();
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SearchFriend_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_SearchFriend_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_SearchFriend_SC) */ {
 public:
  inline Msg_SearchFriend_SC() : Msg_SearchFriend_SC(nullptr) {}
  ~Msg_SearchFriend_SC() override;
  explicit constexpr Msg_SearchFriend_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SearchFriend_SC(const Msg_SearchFriend_SC& from);
  Msg_SearchFriend_SC(Msg_SearchFriend_SC&& from) noexcept
    : Msg_SearchFriend_SC() {
    *this = ::std::move(from);
  }

  inline Msg_SearchFriend_SC& operator=(const Msg_SearchFriend_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SearchFriend_SC& operator=(Msg_SearchFriend_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SearchFriend_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SearchFriend_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_SearchFriend_SC*>(
               &_Msg_SearchFriend_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Msg_SearchFriend_SC& a, Msg_SearchFriend_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SearchFriend_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SearchFriend_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SearchFriend_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SearchFriend_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_SearchFriend_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_SearchFriend_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SearchFriend_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SearchFriend_SC";
  }
  protected:
  explicit Msg_SearchFriend_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
  };
  // repeated .XrPb.FriendInfo friends = 1;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::XrPb::FriendInfo* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >*
      mutable_friends();
  private:
  const ::XrPb::FriendInfo& _internal_friends(int index) const;
  ::XrPb::FriendInfo* _internal_add_friends();
  public:
  const ::XrPb::FriendInfo& friends(int index) const;
  ::XrPb::FriendInfo* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >&
      friends() const;

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SearchFriend_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo > friends_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_GetSelfApplyList_CS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_GetSelfApplyList_CS) */ {
 public:
  inline Msg_GetSelfApplyList_CS() : Msg_GetSelfApplyList_CS(nullptr) {}
  explicit constexpr Msg_GetSelfApplyList_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GetSelfApplyList_CS(const Msg_GetSelfApplyList_CS& from);
  Msg_GetSelfApplyList_CS(Msg_GetSelfApplyList_CS&& from) noexcept
    : Msg_GetSelfApplyList_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GetSelfApplyList_CS& operator=(const Msg_GetSelfApplyList_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GetSelfApplyList_CS& operator=(Msg_GetSelfApplyList_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GetSelfApplyList_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GetSelfApplyList_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GetSelfApplyList_CS*>(
               &_Msg_GetSelfApplyList_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Msg_GetSelfApplyList_CS& a, Msg_GetSelfApplyList_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GetSelfApplyList_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GetSelfApplyList_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GetSelfApplyList_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GetSelfApplyList_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_GetSelfApplyList_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_GetSelfApplyList_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GetSelfApplyList_CS";
  }
  protected:
  explicit Msg_GetSelfApplyList_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GetSelfApplyList_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class BeAppliedInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.BeAppliedInfo) */ {
 public:
  inline BeAppliedInfo() : BeAppliedInfo(nullptr) {}
  ~BeAppliedInfo() override;
  explicit constexpr BeAppliedInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BeAppliedInfo(const BeAppliedInfo& from);
  BeAppliedInfo(BeAppliedInfo&& from) noexcept
    : BeAppliedInfo() {
    *this = ::std::move(from);
  }

  inline BeAppliedInfo& operator=(const BeAppliedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeAppliedInfo& operator=(BeAppliedInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BeAppliedInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BeAppliedInfo* internal_default_instance() {
    return reinterpret_cast<const BeAppliedInfo*>(
               &_BeAppliedInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(BeAppliedInfo& a, BeAppliedInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BeAppliedInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeAppliedInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BeAppliedInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BeAppliedInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BeAppliedInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BeAppliedInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeAppliedInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.BeAppliedInfo";
  }
  protected:
  explicit BeAppliedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccIdFieldNumber = 1,
    kEndTimeFieldNumber = 2,
  };
  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // int64 end_time = 2;
  void clear_end_time();
  int64_t end_time() const;
  void set_end_time(int64_t value);
  private:
  int64_t _internal_end_time() const;
  void _internal_set_end_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.BeAppliedInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t acc_id_;
  int64_t end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_GetSelfApplyList_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GetSelfApplyList_SC) */ {
 public:
  inline Msg_GetSelfApplyList_SC() : Msg_GetSelfApplyList_SC(nullptr) {}
  ~Msg_GetSelfApplyList_SC() override;
  explicit constexpr Msg_GetSelfApplyList_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GetSelfApplyList_SC(const Msg_GetSelfApplyList_SC& from);
  Msg_GetSelfApplyList_SC(Msg_GetSelfApplyList_SC&& from) noexcept
    : Msg_GetSelfApplyList_SC() {
    *this = ::std::move(from);
  }

  inline Msg_GetSelfApplyList_SC& operator=(const Msg_GetSelfApplyList_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GetSelfApplyList_SC& operator=(Msg_GetSelfApplyList_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GetSelfApplyList_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GetSelfApplyList_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_GetSelfApplyList_SC*>(
               &_Msg_GetSelfApplyList_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Msg_GetSelfApplyList_SC& a, Msg_GetSelfApplyList_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GetSelfApplyList_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GetSelfApplyList_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GetSelfApplyList_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GetSelfApplyList_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GetSelfApplyList_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GetSelfApplyList_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GetSelfApplyList_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GetSelfApplyList_SC";
  }
  protected:
  explicit Msg_GetSelfApplyList_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppliedFieldNumber = 1,
  };
  // repeated .XrPb.BeAppliedInfo applied = 1;
  int applied_size() const;
  private:
  int _internal_applied_size() const;
  public:
  void clear_applied();
  ::XrPb::BeAppliedInfo* mutable_applied(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::BeAppliedInfo >*
      mutable_applied();
  private:
  const ::XrPb::BeAppliedInfo& _internal_applied(int index) const;
  ::XrPb::BeAppliedInfo* _internal_add_applied();
  public:
  const ::XrPb::BeAppliedInfo& applied(int index) const;
  ::XrPb::BeAppliedInfo* add_applied();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::BeAppliedInfo >&
      applied() const;

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GetSelfApplyList_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::BeAppliedInfo > applied_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_AddBlackList_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_AddBlackList_CS) */ {
 public:
  inline Msg_AddBlackList_CS() : Msg_AddBlackList_CS(nullptr) {}
  ~Msg_AddBlackList_CS() override;
  explicit constexpr Msg_AddBlackList_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_AddBlackList_CS(const Msg_AddBlackList_CS& from);
  Msg_AddBlackList_CS(Msg_AddBlackList_CS&& from) noexcept
    : Msg_AddBlackList_CS() {
    *this = ::std::move(from);
  }

  inline Msg_AddBlackList_CS& operator=(const Msg_AddBlackList_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_AddBlackList_CS& operator=(Msg_AddBlackList_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_AddBlackList_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_AddBlackList_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_AddBlackList_CS*>(
               &_Msg_AddBlackList_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Msg_AddBlackList_CS& a, Msg_AddBlackList_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_AddBlackList_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_AddBlackList_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_AddBlackList_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_AddBlackList_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_AddBlackList_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_AddBlackList_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_AddBlackList_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_AddBlackList_CS";
  }
  protected:
  explicit Msg_AddBlackList_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccIdFieldNumber = 1,
  };
  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_AddBlackList_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_AddBlackList_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_AddBlackList_SC) */ {
 public:
  inline Msg_AddBlackList_SC() : Msg_AddBlackList_SC(nullptr) {}
  ~Msg_AddBlackList_SC() override;
  explicit constexpr Msg_AddBlackList_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_AddBlackList_SC(const Msg_AddBlackList_SC& from);
  Msg_AddBlackList_SC(Msg_AddBlackList_SC&& from) noexcept
    : Msg_AddBlackList_SC() {
    *this = ::std::move(from);
  }

  inline Msg_AddBlackList_SC& operator=(const Msg_AddBlackList_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_AddBlackList_SC& operator=(Msg_AddBlackList_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_AddBlackList_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_AddBlackList_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_AddBlackList_SC*>(
               &_Msg_AddBlackList_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Msg_AddBlackList_SC& a, Msg_AddBlackList_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_AddBlackList_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_AddBlackList_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_AddBlackList_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_AddBlackList_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_AddBlackList_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_AddBlackList_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_AddBlackList_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_AddBlackList_SC";
  }
  protected:
  explicit Msg_AddBlackList_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // optional .XrPb.FriendInfo player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::XrPb::FriendInfo& player() const;
  PROTOBUF_NODISCARD ::XrPb::FriendInfo* release_player();
  ::XrPb::FriendInfo* mutable_player();
  void set_allocated_player(::XrPb::FriendInfo* player);
  private:
  const ::XrPb::FriendInfo& _internal_player() const;
  ::XrPb::FriendInfo* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::XrPb::FriendInfo* player);
  ::XrPb::FriendInfo* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:XrPb.Msg_AddBlackList_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::XrPb::FriendInfo* player_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_DelBlackList_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DelBlackList_CS) */ {
 public:
  inline Msg_DelBlackList_CS() : Msg_DelBlackList_CS(nullptr) {}
  ~Msg_DelBlackList_CS() override;
  explicit constexpr Msg_DelBlackList_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DelBlackList_CS(const Msg_DelBlackList_CS& from);
  Msg_DelBlackList_CS(Msg_DelBlackList_CS&& from) noexcept
    : Msg_DelBlackList_CS() {
    *this = ::std::move(from);
  }

  inline Msg_DelBlackList_CS& operator=(const Msg_DelBlackList_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DelBlackList_CS& operator=(Msg_DelBlackList_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DelBlackList_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DelBlackList_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_DelBlackList_CS*>(
               &_Msg_DelBlackList_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Msg_DelBlackList_CS& a, Msg_DelBlackList_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DelBlackList_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DelBlackList_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DelBlackList_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DelBlackList_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DelBlackList_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DelBlackList_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DelBlackList_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DelBlackList_CS";
  }
  protected:
  explicit Msg_DelBlackList_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccIdFieldNumber = 1,
  };
  // optional int64 acc_id = 1;
  bool has_acc_id() const;
  private:
  bool _internal_has_acc_id() const;
  public:
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DelBlackList_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t acc_id_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_DelBlackList_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DelBlackList_SC) */ {
 public:
  inline Msg_DelBlackList_SC() : Msg_DelBlackList_SC(nullptr) {}
  ~Msg_DelBlackList_SC() override;
  explicit constexpr Msg_DelBlackList_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DelBlackList_SC(const Msg_DelBlackList_SC& from);
  Msg_DelBlackList_SC(Msg_DelBlackList_SC&& from) noexcept
    : Msg_DelBlackList_SC() {
    *this = ::std::move(from);
  }

  inline Msg_DelBlackList_SC& operator=(const Msg_DelBlackList_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DelBlackList_SC& operator=(Msg_DelBlackList_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DelBlackList_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DelBlackList_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_DelBlackList_SC*>(
               &_Msg_DelBlackList_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Msg_DelBlackList_SC& a, Msg_DelBlackList_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DelBlackList_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DelBlackList_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DelBlackList_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DelBlackList_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DelBlackList_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DelBlackList_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DelBlackList_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DelBlackList_SC";
  }
  protected:
  explicit Msg_DelBlackList_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccIdFieldNumber = 1,
  };
  // optional int64 acc_id = 1;
  bool has_acc_id() const;
  private:
  bool _internal_has_acc_id() const;
  public:
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DelBlackList_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t acc_id_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_GetBlackList_CS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_GetBlackList_CS) */ {
 public:
  inline Msg_GetBlackList_CS() : Msg_GetBlackList_CS(nullptr) {}
  explicit constexpr Msg_GetBlackList_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GetBlackList_CS(const Msg_GetBlackList_CS& from);
  Msg_GetBlackList_CS(Msg_GetBlackList_CS&& from) noexcept
    : Msg_GetBlackList_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GetBlackList_CS& operator=(const Msg_GetBlackList_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GetBlackList_CS& operator=(Msg_GetBlackList_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GetBlackList_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GetBlackList_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GetBlackList_CS*>(
               &_Msg_GetBlackList_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Msg_GetBlackList_CS& a, Msg_GetBlackList_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GetBlackList_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GetBlackList_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GetBlackList_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GetBlackList_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_GetBlackList_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_GetBlackList_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GetBlackList_CS";
  }
  protected:
  explicit Msg_GetBlackList_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GetBlackList_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_GetBlackList_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GetBlackList_SC) */ {
 public:
  inline Msg_GetBlackList_SC() : Msg_GetBlackList_SC(nullptr) {}
  ~Msg_GetBlackList_SC() override;
  explicit constexpr Msg_GetBlackList_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GetBlackList_SC(const Msg_GetBlackList_SC& from);
  Msg_GetBlackList_SC(Msg_GetBlackList_SC&& from) noexcept
    : Msg_GetBlackList_SC() {
    *this = ::std::move(from);
  }

  inline Msg_GetBlackList_SC& operator=(const Msg_GetBlackList_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GetBlackList_SC& operator=(Msg_GetBlackList_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GetBlackList_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GetBlackList_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_GetBlackList_SC*>(
               &_Msg_GetBlackList_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Msg_GetBlackList_SC& a, Msg_GetBlackList_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GetBlackList_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GetBlackList_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GetBlackList_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GetBlackList_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GetBlackList_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GetBlackList_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GetBlackList_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GetBlackList_SC";
  }
  protected:
  explicit Msg_GetBlackList_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlackListFieldNumber = 1,
  };
  // repeated .XrPb.FriendInfo black_list = 1;
  int black_list_size() const;
  private:
  int _internal_black_list_size() const;
  public:
  void clear_black_list();
  ::XrPb::FriendInfo* mutable_black_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >*
      mutable_black_list();
  private:
  const ::XrPb::FriendInfo& _internal_black_list(int index) const;
  ::XrPb::FriendInfo* _internal_add_black_list();
  public:
  const ::XrPb::FriendInfo& black_list(int index) const;
  ::XrPb::FriendInfo* add_black_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >&
      black_list() const;

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GetBlackList_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo > black_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_RefuseAllFriend_CS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_RefuseAllFriend_CS) */ {
 public:
  inline Msg_RefuseAllFriend_CS() : Msg_RefuseAllFriend_CS(nullptr) {}
  explicit constexpr Msg_RefuseAllFriend_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_RefuseAllFriend_CS(const Msg_RefuseAllFriend_CS& from);
  Msg_RefuseAllFriend_CS(Msg_RefuseAllFriend_CS&& from) noexcept
    : Msg_RefuseAllFriend_CS() {
    *this = ::std::move(from);
  }

  inline Msg_RefuseAllFriend_CS& operator=(const Msg_RefuseAllFriend_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_RefuseAllFriend_CS& operator=(Msg_RefuseAllFriend_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_RefuseAllFriend_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_RefuseAllFriend_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_RefuseAllFriend_CS*>(
               &_Msg_RefuseAllFriend_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Msg_RefuseAllFriend_CS& a, Msg_RefuseAllFriend_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_RefuseAllFriend_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_RefuseAllFriend_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_RefuseAllFriend_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_RefuseAllFriend_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_RefuseAllFriend_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_RefuseAllFriend_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_RefuseAllFriend_CS";
  }
  protected:
  explicit Msg_RefuseAllFriend_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_RefuseAllFriend_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_RefuseAllFriend_SC final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_RefuseAllFriend_SC) */ {
 public:
  inline Msg_RefuseAllFriend_SC() : Msg_RefuseAllFriend_SC(nullptr) {}
  explicit constexpr Msg_RefuseAllFriend_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_RefuseAllFriend_SC(const Msg_RefuseAllFriend_SC& from);
  Msg_RefuseAllFriend_SC(Msg_RefuseAllFriend_SC&& from) noexcept
    : Msg_RefuseAllFriend_SC() {
    *this = ::std::move(from);
  }

  inline Msg_RefuseAllFriend_SC& operator=(const Msg_RefuseAllFriend_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_RefuseAllFriend_SC& operator=(Msg_RefuseAllFriend_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_RefuseAllFriend_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_RefuseAllFriend_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_RefuseAllFriend_SC*>(
               &_Msg_RefuseAllFriend_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Msg_RefuseAllFriend_SC& a, Msg_RefuseAllFriend_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_RefuseAllFriend_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_RefuseAllFriend_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_RefuseAllFriend_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_RefuseAllFriend_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_RefuseAllFriend_SC& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_RefuseAllFriend_SC& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_RefuseAllFriend_SC";
  }
  protected:
  explicit Msg_RefuseAllFriend_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_RefuseAllFriend_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_DeleteLastChatFriend_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DeleteLastChatFriend_CS) */ {
 public:
  inline Msg_DeleteLastChatFriend_CS() : Msg_DeleteLastChatFriend_CS(nullptr) {}
  ~Msg_DeleteLastChatFriend_CS() override;
  explicit constexpr Msg_DeleteLastChatFriend_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DeleteLastChatFriend_CS(const Msg_DeleteLastChatFriend_CS& from);
  Msg_DeleteLastChatFriend_CS(Msg_DeleteLastChatFriend_CS&& from) noexcept
    : Msg_DeleteLastChatFriend_CS() {
    *this = ::std::move(from);
  }

  inline Msg_DeleteLastChatFriend_CS& operator=(const Msg_DeleteLastChatFriend_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DeleteLastChatFriend_CS& operator=(Msg_DeleteLastChatFriend_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DeleteLastChatFriend_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DeleteLastChatFriend_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_DeleteLastChatFriend_CS*>(
               &_Msg_DeleteLastChatFriend_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(Msg_DeleteLastChatFriend_CS& a, Msg_DeleteLastChatFriend_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DeleteLastChatFriend_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DeleteLastChatFriend_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DeleteLastChatFriend_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DeleteLastChatFriend_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DeleteLastChatFriend_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DeleteLastChatFriend_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DeleteLastChatFriend_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DeleteLastChatFriend_CS";
  }
  protected:
  explicit Msg_DeleteLastChatFriend_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiAccIdFieldNumber = 1,
  };
  // int64 uiAccId = 1;
  void clear_uiaccid();
  int64_t uiaccid() const;
  void set_uiaccid(int64_t value);
  private:
  int64_t _internal_uiaccid() const;
  void _internal_set_uiaccid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DeleteLastChatFriend_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t uiaccid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_DeleteLastChatFriend_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DeleteLastChatFriend_SC) */ {
 public:
  inline Msg_DeleteLastChatFriend_SC() : Msg_DeleteLastChatFriend_SC(nullptr) {}
  ~Msg_DeleteLastChatFriend_SC() override;
  explicit constexpr Msg_DeleteLastChatFriend_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DeleteLastChatFriend_SC(const Msg_DeleteLastChatFriend_SC& from);
  Msg_DeleteLastChatFriend_SC(Msg_DeleteLastChatFriend_SC&& from) noexcept
    : Msg_DeleteLastChatFriend_SC() {
    *this = ::std::move(from);
  }

  inline Msg_DeleteLastChatFriend_SC& operator=(const Msg_DeleteLastChatFriend_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DeleteLastChatFriend_SC& operator=(Msg_DeleteLastChatFriend_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DeleteLastChatFriend_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DeleteLastChatFriend_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_DeleteLastChatFriend_SC*>(
               &_Msg_DeleteLastChatFriend_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Msg_DeleteLastChatFriend_SC& a, Msg_DeleteLastChatFriend_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DeleteLastChatFriend_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DeleteLastChatFriend_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DeleteLastChatFriend_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DeleteLastChatFriend_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DeleteLastChatFriend_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DeleteLastChatFriend_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DeleteLastChatFriend_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DeleteLastChatFriend_SC";
  }
  protected:
  explicit Msg_DeleteLastChatFriend_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiAccIdFieldNumber = 1,
  };
  // int64 uiAccId = 1;
  void clear_uiaccid();
  int64_t uiaccid() const;
  void set_uiaccid(int64_t value);
  private:
  int64_t _internal_uiaccid() const;
  void _internal_set_uiaccid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DeleteLastChatFriend_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t uiaccid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_GetFriendInviteAward_CS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_GetFriendInviteAward_CS) */ {
 public:
  inline Msg_GetFriendInviteAward_CS() : Msg_GetFriendInviteAward_CS(nullptr) {}
  explicit constexpr Msg_GetFriendInviteAward_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GetFriendInviteAward_CS(const Msg_GetFriendInviteAward_CS& from);
  Msg_GetFriendInviteAward_CS(Msg_GetFriendInviteAward_CS&& from) noexcept
    : Msg_GetFriendInviteAward_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GetFriendInviteAward_CS& operator=(const Msg_GetFriendInviteAward_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GetFriendInviteAward_CS& operator=(Msg_GetFriendInviteAward_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GetFriendInviteAward_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GetFriendInviteAward_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GetFriendInviteAward_CS*>(
               &_Msg_GetFriendInviteAward_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(Msg_GetFriendInviteAward_CS& a, Msg_GetFriendInviteAward_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GetFriendInviteAward_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GetFriendInviteAward_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GetFriendInviteAward_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GetFriendInviteAward_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_GetFriendInviteAward_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_GetFriendInviteAward_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GetFriendInviteAward_CS";
  }
  protected:
  explicit Msg_GetFriendInviteAward_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GetFriendInviteAward_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class FriendInviteAwardInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.FriendInviteAwardInfo) */ {
 public:
  inline FriendInviteAwardInfo() : FriendInviteAwardInfo(nullptr) {}
  ~FriendInviteAwardInfo() override;
  explicit constexpr FriendInviteAwardInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendInviteAwardInfo(const FriendInviteAwardInfo& from);
  FriendInviteAwardInfo(FriendInviteAwardInfo&& from) noexcept
    : FriendInviteAwardInfo() {
    *this = ::std::move(from);
  }

  inline FriendInviteAwardInfo& operator=(const FriendInviteAwardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInviteAwardInfo& operator=(FriendInviteAwardInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendInviteAwardInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendInviteAwardInfo* internal_default_instance() {
    return reinterpret_cast<const FriendInviteAwardInfo*>(
               &_FriendInviteAwardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(FriendInviteAwardInfo& a, FriendInviteAwardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendInviteAwardInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendInviteAwardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendInviteAwardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendInviteAwardInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendInviteAwardInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FriendInviteAwardInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInviteAwardInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.FriendInviteAwardInfo";
  }
  protected:
  explicit FriendInviteAwardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 1,
    kValueFieldNumber = 2,
    kNumFieldNumber = 3,
    kGainedNumFieldNumber = 4,
  };
  // uint32 condition = 1;
  void clear_condition();
  uint32_t condition() const;
  void set_condition(uint32_t value);
  private:
  uint32_t _internal_condition() const;
  void _internal_set_condition(uint32_t value);
  public:

  // uint32 value = 2;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // uint32 num = 3;
  void clear_num();
  uint32_t num() const;
  void set_num(uint32_t value);
  private:
  uint32_t _internal_num() const;
  void _internal_set_num(uint32_t value);
  public:

  // uint32 gained_num = 4;
  void clear_gained_num();
  uint32_t gained_num() const;
  void set_gained_num(uint32_t value);
  private:
  uint32_t _internal_gained_num() const;
  void _internal_set_gained_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.FriendInviteAwardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t condition_;
  uint32_t value_;
  uint32_t num_;
  uint32_t gained_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_GetFriendInviteAward_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GetFriendInviteAward_SC) */ {
 public:
  inline Msg_GetFriendInviteAward_SC() : Msg_GetFriendInviteAward_SC(nullptr) {}
  ~Msg_GetFriendInviteAward_SC() override;
  explicit constexpr Msg_GetFriendInviteAward_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GetFriendInviteAward_SC(const Msg_GetFriendInviteAward_SC& from);
  Msg_GetFriendInviteAward_SC(Msg_GetFriendInviteAward_SC&& from) noexcept
    : Msg_GetFriendInviteAward_SC() {
    *this = ::std::move(from);
  }

  inline Msg_GetFriendInviteAward_SC& operator=(const Msg_GetFriendInviteAward_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GetFriendInviteAward_SC& operator=(Msg_GetFriendInviteAward_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GetFriendInviteAward_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GetFriendInviteAward_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_GetFriendInviteAward_SC*>(
               &_Msg_GetFriendInviteAward_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(Msg_GetFriendInviteAward_SC& a, Msg_GetFriendInviteAward_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GetFriendInviteAward_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GetFriendInviteAward_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GetFriendInviteAward_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GetFriendInviteAward_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GetFriendInviteAward_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GetFriendInviteAward_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GetFriendInviteAward_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GetFriendInviteAward_SC";
  }
  protected:
  explicit Msg_GetFriendInviteAward_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewAwardFieldNumber = 2,
    kOldAwardFieldNumber = 3,
    kOtherInviteCodeFieldNumber = 4,
    kSelfInviteCodeFieldNumber = 5,
    kUsedCountFieldNumber = 1,
  };
  // repeated .XrPb.FriendInviteAwardInfo new_award = 2;
  int new_award_size() const;
  private:
  int _internal_new_award_size() const;
  public:
  void clear_new_award();
  ::XrPb::FriendInviteAwardInfo* mutable_new_award(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInviteAwardInfo >*
      mutable_new_award();
  private:
  const ::XrPb::FriendInviteAwardInfo& _internal_new_award(int index) const;
  ::XrPb::FriendInviteAwardInfo* _internal_add_new_award();
  public:
  const ::XrPb::FriendInviteAwardInfo& new_award(int index) const;
  ::XrPb::FriendInviteAwardInfo* add_new_award();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInviteAwardInfo >&
      new_award() const;

  // repeated .XrPb.FriendInviteAwardInfo old_award = 3;
  int old_award_size() const;
  private:
  int _internal_old_award_size() const;
  public:
  void clear_old_award();
  ::XrPb::FriendInviteAwardInfo* mutable_old_award(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInviteAwardInfo >*
      mutable_old_award();
  private:
  const ::XrPb::FriendInviteAwardInfo& _internal_old_award(int index) const;
  ::XrPb::FriendInviteAwardInfo* _internal_add_old_award();
  public:
  const ::XrPb::FriendInviteAwardInfo& old_award(int index) const;
  ::XrPb::FriendInviteAwardInfo* add_old_award();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInviteAwardInfo >&
      old_award() const;

  // optional string other_invite_code = 4;
  bool has_other_invite_code() const;
  private:
  bool _internal_has_other_invite_code() const;
  public:
  void clear_other_invite_code();
  const std::string& other_invite_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_other_invite_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_other_invite_code();
  PROTOBUF_NODISCARD std::string* release_other_invite_code();
  void set_allocated_other_invite_code(std::string* other_invite_code);
  private:
  const std::string& _internal_other_invite_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_other_invite_code(const std::string& value);
  std::string* _internal_mutable_other_invite_code();
  public:

  // optional string self_invite_code = 5;
  bool has_self_invite_code() const;
  private:
  bool _internal_has_self_invite_code() const;
  public:
  void clear_self_invite_code();
  const std::string& self_invite_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_invite_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_invite_code();
  PROTOBUF_NODISCARD std::string* release_self_invite_code();
  void set_allocated_self_invite_code(std::string* self_invite_code);
  private:
  const std::string& _internal_self_invite_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_invite_code(const std::string& value);
  std::string* _internal_mutable_self_invite_code();
  public:

  // uint32 used_count = 1;
  void clear_used_count();
  uint32_t used_count() const;
  void set_used_count(uint32_t value);
  private:
  uint32_t _internal_used_count() const;
  void _internal_set_used_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GetFriendInviteAward_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInviteAwardInfo > new_award_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInviteAwardInfo > old_award_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr other_invite_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_invite_code_;
  uint32_t used_count_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_GainInviteCodeAward_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GainInviteCodeAward_CS) */ {
 public:
  inline Msg_GainInviteCodeAward_CS() : Msg_GainInviteCodeAward_CS(nullptr) {}
  ~Msg_GainInviteCodeAward_CS() override;
  explicit constexpr Msg_GainInviteCodeAward_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GainInviteCodeAward_CS(const Msg_GainInviteCodeAward_CS& from);
  Msg_GainInviteCodeAward_CS(Msg_GainInviteCodeAward_CS&& from) noexcept
    : Msg_GainInviteCodeAward_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GainInviteCodeAward_CS& operator=(const Msg_GainInviteCodeAward_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GainInviteCodeAward_CS& operator=(Msg_GainInviteCodeAward_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GainInviteCodeAward_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GainInviteCodeAward_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GainInviteCodeAward_CS*>(
               &_Msg_GainInviteCodeAward_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Msg_GainInviteCodeAward_CS& a, Msg_GainInviteCodeAward_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GainInviteCodeAward_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GainInviteCodeAward_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GainInviteCodeAward_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GainInviteCodeAward_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GainInviteCodeAward_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GainInviteCodeAward_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GainInviteCodeAward_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GainInviteCodeAward_CS";
  }
  protected:
  explicit Msg_GainInviteCodeAward_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kConditionFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // .XrPb.EInviteCodeAwardType type = 1;
  void clear_type();
  ::XrPb::EInviteCodeAwardType type() const;
  void set_type(::XrPb::EInviteCodeAwardType value);
  private:
  ::XrPb::EInviteCodeAwardType _internal_type() const;
  void _internal_set_type(::XrPb::EInviteCodeAwardType value);
  public:

  // uint32 condition = 2;
  void clear_condition();
  uint32_t condition() const;
  void set_condition(uint32_t value);
  private:
  uint32_t _internal_condition() const;
  void _internal_set_condition(uint32_t value);
  public:

  // uint32 value = 3;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GainInviteCodeAward_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  uint32_t condition_;
  uint32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_GainInviteCodeAward_SC final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_GainInviteCodeAward_SC) */ {
 public:
  inline Msg_GainInviteCodeAward_SC() : Msg_GainInviteCodeAward_SC(nullptr) {}
  explicit constexpr Msg_GainInviteCodeAward_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GainInviteCodeAward_SC(const Msg_GainInviteCodeAward_SC& from);
  Msg_GainInviteCodeAward_SC(Msg_GainInviteCodeAward_SC&& from) noexcept
    : Msg_GainInviteCodeAward_SC() {
    *this = ::std::move(from);
  }

  inline Msg_GainInviteCodeAward_SC& operator=(const Msg_GainInviteCodeAward_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GainInviteCodeAward_SC& operator=(Msg_GainInviteCodeAward_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GainInviteCodeAward_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GainInviteCodeAward_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_GainInviteCodeAward_SC*>(
               &_Msg_GainInviteCodeAward_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(Msg_GainInviteCodeAward_SC& a, Msg_GainInviteCodeAward_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GainInviteCodeAward_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GainInviteCodeAward_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GainInviteCodeAward_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GainInviteCodeAward_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_GainInviteCodeAward_SC& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_GainInviteCodeAward_SC& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GainInviteCodeAward_SC";
  }
  protected:
  explicit Msg_GainInviteCodeAward_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GainInviteCodeAward_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_UseInviteCodeReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_UseInviteCodeReq) */ {
 public:
  inline Msg_UseInviteCodeReq() : Msg_UseInviteCodeReq(nullptr) {}
  ~Msg_UseInviteCodeReq() override;
  explicit constexpr Msg_UseInviteCodeReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_UseInviteCodeReq(const Msg_UseInviteCodeReq& from);
  Msg_UseInviteCodeReq(Msg_UseInviteCodeReq&& from) noexcept
    : Msg_UseInviteCodeReq() {
    *this = ::std::move(from);
  }

  inline Msg_UseInviteCodeReq& operator=(const Msg_UseInviteCodeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_UseInviteCodeReq& operator=(Msg_UseInviteCodeReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_UseInviteCodeReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_UseInviteCodeReq* internal_default_instance() {
    return reinterpret_cast<const Msg_UseInviteCodeReq*>(
               &_Msg_UseInviteCodeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(Msg_UseInviteCodeReq& a, Msg_UseInviteCodeReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_UseInviteCodeReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_UseInviteCodeReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_UseInviteCodeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_UseInviteCodeReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_UseInviteCodeReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_UseInviteCodeReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_UseInviteCodeReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_UseInviteCodeReq";
  }
  protected:
  explicit Msg_UseInviteCodeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteCodeFieldNumber = 1,
  };
  // string invite_code = 1;
  void clear_invite_code();
  const std::string& invite_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_invite_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_invite_code();
  PROTOBUF_NODISCARD std::string* release_invite_code();
  void set_allocated_invite_code(std::string* invite_code);
  private:
  const std::string& _internal_invite_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_invite_code(const std::string& value);
  std::string* _internal_mutable_invite_code();
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_UseInviteCodeReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invite_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_UseInviteCodeAck final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_UseInviteCodeAck) */ {
 public:
  inline Msg_UseInviteCodeAck() : Msg_UseInviteCodeAck(nullptr) {}
  explicit constexpr Msg_UseInviteCodeAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_UseInviteCodeAck(const Msg_UseInviteCodeAck& from);
  Msg_UseInviteCodeAck(Msg_UseInviteCodeAck&& from) noexcept
    : Msg_UseInviteCodeAck() {
    *this = ::std::move(from);
  }

  inline Msg_UseInviteCodeAck& operator=(const Msg_UseInviteCodeAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_UseInviteCodeAck& operator=(Msg_UseInviteCodeAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_UseInviteCodeAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_UseInviteCodeAck* internal_default_instance() {
    return reinterpret_cast<const Msg_UseInviteCodeAck*>(
               &_Msg_UseInviteCodeAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(Msg_UseInviteCodeAck& a, Msg_UseInviteCodeAck& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_UseInviteCodeAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_UseInviteCodeAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_UseInviteCodeAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_UseInviteCodeAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_UseInviteCodeAck& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_UseInviteCodeAck& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_UseInviteCodeAck";
  }
  protected:
  explicit Msg_UseInviteCodeAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_UseInviteCodeAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// -------------------------------------------------------------------

class Msg_FriendInviteAward_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_FriendInviteAward_PUSH) */ {
 public:
  inline Msg_FriendInviteAward_PUSH() : Msg_FriendInviteAward_PUSH(nullptr) {}
  explicit constexpr Msg_FriendInviteAward_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_FriendInviteAward_PUSH(const Msg_FriendInviteAward_PUSH& from);
  Msg_FriendInviteAward_PUSH(Msg_FriendInviteAward_PUSH&& from) noexcept
    : Msg_FriendInviteAward_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_FriendInviteAward_PUSH& operator=(const Msg_FriendInviteAward_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_FriendInviteAward_PUSH& operator=(Msg_FriendInviteAward_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_FriendInviteAward_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_FriendInviteAward_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_FriendInviteAward_PUSH*>(
               &_Msg_FriendInviteAward_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(Msg_FriendInviteAward_PUSH& a, Msg_FriendInviteAward_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_FriendInviteAward_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_FriendInviteAward_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_FriendInviteAward_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_FriendInviteAward_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_FriendInviteAward_PUSH& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_FriendInviteAward_PUSH& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_FriendInviteAward_PUSH";
  }
  protected:
  explicit Msg_FriendInviteAward_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_FriendInviteAward_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgFriend_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgMod_Friend

// -------------------------------------------------------------------

// Msg_ChatMsg_CS

// int64 recv_id = 1;
inline void Msg_ChatMsg_CS::clear_recv_id() {
  recv_id_ = int64_t{0};
}
inline int64_t Msg_ChatMsg_CS::_internal_recv_id() const {
  return recv_id_;
}
inline int64_t Msg_ChatMsg_CS::recv_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_ChatMsg_CS.recv_id)
  return _internal_recv_id();
}
inline void Msg_ChatMsg_CS::_internal_set_recv_id(int64_t value) {
  
  recv_id_ = value;
}
inline void Msg_ChatMsg_CS::set_recv_id(int64_t value) {
  _internal_set_recv_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_ChatMsg_CS.recv_id)
}

// .XrPb.EChatType type = 2;
inline void Msg_ChatMsg_CS::clear_type() {
  type_ = 0;
}
inline ::XrPb::EChatType Msg_ChatMsg_CS::_internal_type() const {
  return static_cast< ::XrPb::EChatType >(type_);
}
inline ::XrPb::EChatType Msg_ChatMsg_CS::type() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_ChatMsg_CS.type)
  return _internal_type();
}
inline void Msg_ChatMsg_CS::_internal_set_type(::XrPb::EChatType value) {
  
  type_ = value;
}
inline void Msg_ChatMsg_CS::set_type(::XrPb::EChatType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_ChatMsg_CS.type)
}

// .XrPb.EChatMsgType msg_type = 3;
inline void Msg_ChatMsg_CS::clear_msg_type() {
  msg_type_ = 0;
}
inline ::XrPb::EChatMsgType Msg_ChatMsg_CS::_internal_msg_type() const {
  return static_cast< ::XrPb::EChatMsgType >(msg_type_);
}
inline ::XrPb::EChatMsgType Msg_ChatMsg_CS::msg_type() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_ChatMsg_CS.msg_type)
  return _internal_msg_type();
}
inline void Msg_ChatMsg_CS::_internal_set_msg_type(::XrPb::EChatMsgType value) {
  
  msg_type_ = value;
}
inline void Msg_ChatMsg_CS::set_msg_type(::XrPb::EChatMsgType value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_ChatMsg_CS.msg_type)
}

// string msg = 4;
inline void Msg_ChatMsg_CS::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& Msg_ChatMsg_CS::msg() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_ChatMsg_CS.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_ChatMsg_CS::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_ChatMsg_CS.msg)
}
inline std::string* Msg_ChatMsg_CS::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_ChatMsg_CS.msg)
  return _s;
}
inline const std::string& Msg_ChatMsg_CS::_internal_msg() const {
  return msg_.Get();
}
inline void Msg_ChatMsg_CS::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_ChatMsg_CS::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_ChatMsg_CS::release_msg() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_ChatMsg_CS.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_ChatMsg_CS::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_ChatMsg_CS.msg)
}

// int32 seq_id = 5;
inline void Msg_ChatMsg_CS::clear_seq_id() {
  seq_id_ = 0;
}
inline int32_t Msg_ChatMsg_CS::_internal_seq_id() const {
  return seq_id_;
}
inline int32_t Msg_ChatMsg_CS::seq_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_ChatMsg_CS.seq_id)
  return _internal_seq_id();
}
inline void Msg_ChatMsg_CS::_internal_set_seq_id(int32_t value) {
  
  seq_id_ = value;
}
inline void Msg_ChatMsg_CS::set_seq_id(int32_t value) {
  _internal_set_seq_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_ChatMsg_CS.seq_id)
}

// optional int64 chat_upid = 6;
inline bool Msg_ChatMsg_CS::_internal_has_chat_upid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_ChatMsg_CS::has_chat_upid() const {
  return _internal_has_chat_upid();
}
inline void Msg_ChatMsg_CS::clear_chat_upid() {
  chat_upid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Msg_ChatMsg_CS::_internal_chat_upid() const {
  return chat_upid_;
}
inline int64_t Msg_ChatMsg_CS::chat_upid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_ChatMsg_CS.chat_upid)
  return _internal_chat_upid();
}
inline void Msg_ChatMsg_CS::_internal_set_chat_upid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  chat_upid_ = value;
}
inline void Msg_ChatMsg_CS::set_chat_upid(int64_t value) {
  _internal_set_chat_upid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_ChatMsg_CS.chat_upid)
}

// -------------------------------------------------------------------

// Msg_ChatMsg_SC

// optional int64 recv_id = 1;
inline bool Msg_ChatMsg_SC::_internal_has_recv_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_ChatMsg_SC::has_recv_id() const {
  return _internal_has_recv_id();
}
inline void Msg_ChatMsg_SC::clear_recv_id() {
  recv_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Msg_ChatMsg_SC::_internal_recv_id() const {
  return recv_id_;
}
inline int64_t Msg_ChatMsg_SC::recv_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_ChatMsg_SC.recv_id)
  return _internal_recv_id();
}
inline void Msg_ChatMsg_SC::_internal_set_recv_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  recv_id_ = value;
}
inline void Msg_ChatMsg_SC::set_recv_id(int64_t value) {
  _internal_set_recv_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_ChatMsg_SC.recv_id)
}

// optional int32 seq_id = 2;
inline bool Msg_ChatMsg_SC::_internal_has_seq_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Msg_ChatMsg_SC::has_seq_id() const {
  return _internal_has_seq_id();
}
inline void Msg_ChatMsg_SC::clear_seq_id() {
  seq_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t Msg_ChatMsg_SC::_internal_seq_id() const {
  return seq_id_;
}
inline int32_t Msg_ChatMsg_SC::seq_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_ChatMsg_SC.seq_id)
  return _internal_seq_id();
}
inline void Msg_ChatMsg_SC::_internal_set_seq_id(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  seq_id_ = value;
}
inline void Msg_ChatMsg_SC::set_seq_id(int32_t value) {
  _internal_set_seq_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_ChatMsg_SC.seq_id)
}

// optional int64 chat_id = 3;
inline bool Msg_ChatMsg_SC::_internal_has_chat_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_ChatMsg_SC::has_chat_id() const {
  return _internal_has_chat_id();
}
inline void Msg_ChatMsg_SC::clear_chat_id() {
  chat_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t Msg_ChatMsg_SC::_internal_chat_id() const {
  return chat_id_;
}
inline int64_t Msg_ChatMsg_SC::chat_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_ChatMsg_SC.chat_id)
  return _internal_chat_id();
}
inline void Msg_ChatMsg_SC::_internal_set_chat_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  chat_id_ = value;
}
inline void Msg_ChatMsg_SC::set_chat_id(int64_t value) {
  _internal_set_chat_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_ChatMsg_SC.chat_id)
}

// optional int64 sendtime = 4;
inline bool Msg_ChatMsg_SC::_internal_has_sendtime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Msg_ChatMsg_SC::has_sendtime() const {
  return _internal_has_sendtime();
}
inline void Msg_ChatMsg_SC::clear_sendtime() {
  sendtime_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t Msg_ChatMsg_SC::_internal_sendtime() const {
  return sendtime_;
}
inline int64_t Msg_ChatMsg_SC::sendtime() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_ChatMsg_SC.sendtime)
  return _internal_sendtime();
}
inline void Msg_ChatMsg_SC::_internal_set_sendtime(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  sendtime_ = value;
}
inline void Msg_ChatMsg_SC::set_sendtime(int64_t value) {
  _internal_set_sendtime(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_ChatMsg_SC.sendtime)
}

// -------------------------------------------------------------------

// Msg_ChatMsg_PUSH

// .XrPb.ChatMsgData chatMsg = 1;
inline bool Msg_ChatMsg_PUSH::_internal_has_chatmsg() const {
  return this != internal_default_instance() && chatmsg_ != nullptr;
}
inline bool Msg_ChatMsg_PUSH::has_chatmsg() const {
  return _internal_has_chatmsg();
}
inline const ::XrPb::ChatMsgData& Msg_ChatMsg_PUSH::_internal_chatmsg() const {
  const ::XrPb::ChatMsgData* p = chatmsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::ChatMsgData&>(
      ::XrPb::_ChatMsgData_default_instance_);
}
inline const ::XrPb::ChatMsgData& Msg_ChatMsg_PUSH::chatmsg() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_ChatMsg_PUSH.chatMsg)
  return _internal_chatmsg();
}
inline void Msg_ChatMsg_PUSH::unsafe_arena_set_allocated_chatmsg(
    ::XrPb::ChatMsgData* chatmsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chatmsg_);
  }
  chatmsg_ = chatmsg;
  if (chatmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_ChatMsg_PUSH.chatMsg)
}
inline ::XrPb::ChatMsgData* Msg_ChatMsg_PUSH::release_chatmsg() {
  
  ::XrPb::ChatMsgData* temp = chatmsg_;
  chatmsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::ChatMsgData* Msg_ChatMsg_PUSH::unsafe_arena_release_chatmsg() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_ChatMsg_PUSH.chatMsg)
  
  ::XrPb::ChatMsgData* temp = chatmsg_;
  chatmsg_ = nullptr;
  return temp;
}
inline ::XrPb::ChatMsgData* Msg_ChatMsg_PUSH::_internal_mutable_chatmsg() {
  
  if (chatmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::ChatMsgData>(GetArenaForAllocation());
    chatmsg_ = p;
  }
  return chatmsg_;
}
inline ::XrPb::ChatMsgData* Msg_ChatMsg_PUSH::mutable_chatmsg() {
  ::XrPb::ChatMsgData* _msg = _internal_mutable_chatmsg();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_ChatMsg_PUSH.chatMsg)
  return _msg;
}
inline void Msg_ChatMsg_PUSH::set_allocated_chatmsg(::XrPb::ChatMsgData* chatmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chatmsg_);
  }
  if (chatmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chatmsg));
    if (message_arena != submessage_arena) {
      chatmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chatmsg, submessage_arena);
    }
    
  } else {
    
  }
  chatmsg_ = chatmsg;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_ChatMsg_PUSH.chatMsg)
}

// -------------------------------------------------------------------

// Msg_GetFriendList_CS

// -------------------------------------------------------------------

// FriendInfo

// int64 acc_id = 1;
inline void FriendInfo::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t FriendInfo::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t FriendInfo::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendInfo.acc_id)
  return _internal_acc_id();
}
inline void FriendInfo::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void FriendInfo::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.FriendInfo.acc_id)
}

// .XrPb.PlayerStatus player_status = 2;
inline void FriendInfo::clear_player_status() {
  player_status_ = 0;
}
inline ::XrPb::PlayerStatus FriendInfo::_internal_player_status() const {
  return static_cast< ::XrPb::PlayerStatus >(player_status_);
}
inline ::XrPb::PlayerStatus FriendInfo::player_status() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendInfo.player_status)
  return _internal_player_status();
}
inline void FriendInfo::_internal_set_player_status(::XrPb::PlayerStatus value) {
  
  player_status_ = value;
}
inline void FriendInfo::set_player_status(::XrPb::PlayerStatus value) {
  _internal_set_player_status(value);
  // @@protoc_insertion_point(field_set:XrPb.FriendInfo.player_status)
}

// string role_name = 3;
inline void FriendInfo::clear_role_name() {
  role_name_.ClearToEmpty();
}
inline const std::string& FriendInfo::role_name() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendInfo.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendInfo::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.FriendInfo.role_name)
}
inline std::string* FriendInfo::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:XrPb.FriendInfo.role_name)
  return _s;
}
inline const std::string& FriendInfo::_internal_role_name() const {
  return role_name_.Get();
}
inline void FriendInfo::_internal_set_role_name(const std::string& value) {
  
  role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FriendInfo::_internal_mutable_role_name() {
  
  return role_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FriendInfo::release_role_name() {
  // @@protoc_insertion_point(field_release:XrPb.FriendInfo.role_name)
  return role_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FriendInfo::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  role_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (role_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    role_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.FriendInfo.role_name)
}

// uint32 level = 4;
inline void FriendInfo::clear_level() {
  level_ = 0u;
}
inline uint32_t FriendInfo::_internal_level() const {
  return level_;
}
inline uint32_t FriendInfo::level() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendInfo.level)
  return _internal_level();
}
inline void FriendInfo::_internal_set_level(uint32_t value) {
  
  level_ = value;
}
inline void FriendInfo::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:XrPb.FriendInfo.level)
}

// optional uint32 msg_count = 5;
inline bool FriendInfo::_internal_has_msg_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FriendInfo::has_msg_count() const {
  return _internal_has_msg_count();
}
inline void FriendInfo::clear_msg_count() {
  msg_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FriendInfo::_internal_msg_count() const {
  return msg_count_;
}
inline uint32_t FriendInfo::msg_count() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendInfo.msg_count)
  return _internal_msg_count();
}
inline void FriendInfo::_internal_set_msg_count(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  msg_count_ = value;
}
inline void FriendInfo::set_msg_count(uint32_t value) {
  _internal_set_msg_count(value);
  // @@protoc_insertion_point(field_set:XrPb.FriendInfo.msg_count)
}

// optional int64 end_time = 6;
inline bool FriendInfo::_internal_has_end_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FriendInfo::has_end_time() const {
  return _internal_has_end_time();
}
inline void FriendInfo::clear_end_time() {
  end_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t FriendInfo::_internal_end_time() const {
  return end_time_;
}
inline int64_t FriendInfo::end_time() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendInfo.end_time)
  return _internal_end_time();
}
inline void FriendInfo::_internal_set_end_time(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  end_time_ = value;
}
inline void FriendInfo::set_end_time(int64_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:XrPb.FriendInfo.end_time)
}

// int64 leave_time = 7;
inline void FriendInfo::clear_leave_time() {
  leave_time_ = int64_t{0};
}
inline int64_t FriendInfo::_internal_leave_time() const {
  return leave_time_;
}
inline int64_t FriendInfo::leave_time() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendInfo.leave_time)
  return _internal_leave_time();
}
inline void FriendInfo::_internal_set_leave_time(int64_t value) {
  
  leave_time_ = value;
}
inline void FriendInfo::set_leave_time(int64_t value) {
  _internal_set_leave_time(value);
  // @@protoc_insertion_point(field_set:XrPb.FriendInfo.leave_time)
}

// .XrPb.FormData form = 8;
inline bool FriendInfo::_internal_has_form() const {
  return this != internal_default_instance() && form_ != nullptr;
}
inline bool FriendInfo::has_form() const {
  return _internal_has_form();
}
inline const ::XrPb::FormData& FriendInfo::_internal_form() const {
  const ::XrPb::FormData* p = form_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::FormData&>(
      ::XrPb::_FormData_default_instance_);
}
inline const ::XrPb::FormData& FriendInfo::form() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendInfo.form)
  return _internal_form();
}
inline void FriendInfo::unsafe_arena_set_allocated_form(
    ::XrPb::FormData* form) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(form_);
  }
  form_ = form;
  if (form) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.FriendInfo.form)
}
inline ::XrPb::FormData* FriendInfo::release_form() {
  
  ::XrPb::FormData* temp = form_;
  form_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::FormData* FriendInfo::unsafe_arena_release_form() {
  // @@protoc_insertion_point(field_release:XrPb.FriendInfo.form)
  
  ::XrPb::FormData* temp = form_;
  form_ = nullptr;
  return temp;
}
inline ::XrPb::FormData* FriendInfo::_internal_mutable_form() {
  
  if (form_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::FormData>(GetArenaForAllocation());
    form_ = p;
  }
  return form_;
}
inline ::XrPb::FormData* FriendInfo::mutable_form() {
  ::XrPb::FormData* _msg = _internal_mutable_form();
  // @@protoc_insertion_point(field_mutable:XrPb.FriendInfo.form)
  return _msg;
}
inline void FriendInfo::set_allocated_form(::XrPb::FormData* form) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(form_);
  }
  if (form) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(form));
    if (message_arena != submessage_arena) {
      form = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, form, submessage_arena);
    }
    
  } else {
    
  }
  form_ = form;
  // @@protoc_insertion_point(field_set_allocated:XrPb.FriendInfo.form)
}

// uint32 gender = 9;
inline void FriendInfo::clear_gender() {
  gender_ = 0u;
}
inline uint32_t FriendInfo::_internal_gender() const {
  return gender_;
}
inline uint32_t FriendInfo::gender() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendInfo.gender)
  return _internal_gender();
}
inline void FriendInfo::_internal_set_gender(uint32_t value) {
  
  gender_ = value;
}
inline void FriendInfo::set_gender(uint32_t value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:XrPb.FriendInfo.gender)
}

// optional int64 lastChatTime = 10;
inline bool FriendInfo::_internal_has_lastchattime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FriendInfo::has_lastchattime() const {
  return _internal_has_lastchattime();
}
inline void FriendInfo::clear_lastchattime() {
  lastchattime_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t FriendInfo::_internal_lastchattime() const {
  return lastchattime_;
}
inline int64_t FriendInfo::lastchattime() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendInfo.lastChatTime)
  return _internal_lastchattime();
}
inline void FriendInfo::_internal_set_lastchattime(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  lastchattime_ = value;
}
inline void FriendInfo::set_lastchattime(int64_t value) {
  _internal_set_lastchattime(value);
  // @@protoc_insertion_point(field_set:XrPb.FriendInfo.lastChatTime)
}

// optional uint32 game_id = 11;
inline bool FriendInfo::_internal_has_game_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FriendInfo::has_game_id() const {
  return _internal_has_game_id();
}
inline void FriendInfo::clear_game_id() {
  game_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t FriendInfo::_internal_game_id() const {
  return game_id_;
}
inline uint32_t FriendInfo::game_id() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendInfo.game_id)
  return _internal_game_id();
}
inline void FriendInfo::_internal_set_game_id(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  game_id_ = value;
}
inline void FriendInfo::set_game_id(uint32_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:XrPb.FriendInfo.game_id)
}

// -------------------------------------------------------------------

// Msg_GetFriendList_SC

// repeated .XrPb.FriendInfo friends = 1;
inline int Msg_GetFriendList_SC::_internal_friends_size() const {
  return friends_.size();
}
inline int Msg_GetFriendList_SC::friends_size() const {
  return _internal_friends_size();
}
inline void Msg_GetFriendList_SC::clear_friends() {
  friends_.Clear();
}
inline ::XrPb::FriendInfo* Msg_GetFriendList_SC::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GetFriendList_SC.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >*
Msg_GetFriendList_SC::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_GetFriendList_SC.friends)
  return &friends_;
}
inline const ::XrPb::FriendInfo& Msg_GetFriendList_SC::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::XrPb::FriendInfo& Msg_GetFriendList_SC::friends(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetFriendList_SC.friends)
  return _internal_friends(index);
}
inline ::XrPb::FriendInfo* Msg_GetFriendList_SC::_internal_add_friends() {
  return friends_.Add();
}
inline ::XrPb::FriendInfo* Msg_GetFriendList_SC::add_friends() {
  ::XrPb::FriendInfo* _add = _internal_add_friends();
  // @@protoc_insertion_point(field_add:XrPb.Msg_GetFriendList_SC.friends)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >&
Msg_GetFriendList_SC::friends() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_GetFriendList_SC.friends)
  return friends_;
}

// -------------------------------------------------------------------

// Msg_AddFriendApply_CS

// int64 friend_acc_id = 1;
inline void Msg_AddFriendApply_CS::clear_friend_acc_id() {
  friend_acc_id_ = int64_t{0};
}
inline int64_t Msg_AddFriendApply_CS::_internal_friend_acc_id() const {
  return friend_acc_id_;
}
inline int64_t Msg_AddFriendApply_CS::friend_acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_AddFriendApply_CS.friend_acc_id)
  return _internal_friend_acc_id();
}
inline void Msg_AddFriendApply_CS::_internal_set_friend_acc_id(int64_t value) {
  
  friend_acc_id_ = value;
}
inline void Msg_AddFriendApply_CS::set_friend_acc_id(int64_t value) {
  _internal_set_friend_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_AddFriendApply_CS.friend_acc_id)
}

// -------------------------------------------------------------------

// Msg_AddFriendApply_SC

// optional .XrPb.BeAppliedInfo applied = 1;
inline bool Msg_AddFriendApply_SC::_internal_has_applied() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || applied_ != nullptr);
  return value;
}
inline bool Msg_AddFriendApply_SC::has_applied() const {
  return _internal_has_applied();
}
inline void Msg_AddFriendApply_SC::clear_applied() {
  if (applied_ != nullptr) applied_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::XrPb::BeAppliedInfo& Msg_AddFriendApply_SC::_internal_applied() const {
  const ::XrPb::BeAppliedInfo* p = applied_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::BeAppliedInfo&>(
      ::XrPb::_BeAppliedInfo_default_instance_);
}
inline const ::XrPb::BeAppliedInfo& Msg_AddFriendApply_SC::applied() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_AddFriendApply_SC.applied)
  return _internal_applied();
}
inline void Msg_AddFriendApply_SC::unsafe_arena_set_allocated_applied(
    ::XrPb::BeAppliedInfo* applied) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applied_);
  }
  applied_ = applied;
  if (applied) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_AddFriendApply_SC.applied)
}
inline ::XrPb::BeAppliedInfo* Msg_AddFriendApply_SC::release_applied() {
  _has_bits_[0] &= ~0x00000001u;
  ::XrPb::BeAppliedInfo* temp = applied_;
  applied_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::BeAppliedInfo* Msg_AddFriendApply_SC::unsafe_arena_release_applied() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_AddFriendApply_SC.applied)
  _has_bits_[0] &= ~0x00000001u;
  ::XrPb::BeAppliedInfo* temp = applied_;
  applied_ = nullptr;
  return temp;
}
inline ::XrPb::BeAppliedInfo* Msg_AddFriendApply_SC::_internal_mutable_applied() {
  _has_bits_[0] |= 0x00000001u;
  if (applied_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::BeAppliedInfo>(GetArenaForAllocation());
    applied_ = p;
  }
  return applied_;
}
inline ::XrPb::BeAppliedInfo* Msg_AddFriendApply_SC::mutable_applied() {
  ::XrPb::BeAppliedInfo* _msg = _internal_mutable_applied();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_AddFriendApply_SC.applied)
  return _msg;
}
inline void Msg_AddFriendApply_SC::set_allocated_applied(::XrPb::BeAppliedInfo* applied) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete applied_;
  }
  if (applied) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::BeAppliedInfo>::GetOwningArena(applied);
    if (message_arena != submessage_arena) {
      applied = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applied, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  applied_ = applied;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_AddFriendApply_SC.applied)
}

// -------------------------------------------------------------------

// Msg_AddFriendApply_PUSH

// optional .XrPb.FriendInfo apply = 1;
inline bool Msg_AddFriendApply_PUSH::_internal_has_apply() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || apply_ != nullptr);
  return value;
}
inline bool Msg_AddFriendApply_PUSH::has_apply() const {
  return _internal_has_apply();
}
inline void Msg_AddFriendApply_PUSH::clear_apply() {
  if (apply_ != nullptr) apply_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::XrPb::FriendInfo& Msg_AddFriendApply_PUSH::_internal_apply() const {
  const ::XrPb::FriendInfo* p = apply_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::FriendInfo&>(
      ::XrPb::_FriendInfo_default_instance_);
}
inline const ::XrPb::FriendInfo& Msg_AddFriendApply_PUSH::apply() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_AddFriendApply_PUSH.apply)
  return _internal_apply();
}
inline void Msg_AddFriendApply_PUSH::unsafe_arena_set_allocated_apply(
    ::XrPb::FriendInfo* apply) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(apply_);
  }
  apply_ = apply;
  if (apply) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_AddFriendApply_PUSH.apply)
}
inline ::XrPb::FriendInfo* Msg_AddFriendApply_PUSH::release_apply() {
  _has_bits_[0] &= ~0x00000001u;
  ::XrPb::FriendInfo* temp = apply_;
  apply_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::FriendInfo* Msg_AddFriendApply_PUSH::unsafe_arena_release_apply() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_AddFriendApply_PUSH.apply)
  _has_bits_[0] &= ~0x00000001u;
  ::XrPb::FriendInfo* temp = apply_;
  apply_ = nullptr;
  return temp;
}
inline ::XrPb::FriendInfo* Msg_AddFriendApply_PUSH::_internal_mutable_apply() {
  _has_bits_[0] |= 0x00000001u;
  if (apply_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::FriendInfo>(GetArenaForAllocation());
    apply_ = p;
  }
  return apply_;
}
inline ::XrPb::FriendInfo* Msg_AddFriendApply_PUSH::mutable_apply() {
  ::XrPb::FriendInfo* _msg = _internal_mutable_apply();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_AddFriendApply_PUSH.apply)
  return _msg;
}
inline void Msg_AddFriendApply_PUSH::set_allocated_apply(::XrPb::FriendInfo* apply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete apply_;
  }
  if (apply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::FriendInfo>::GetOwningArena(apply);
    if (message_arena != submessage_arena) {
      apply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  apply_ = apply;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_AddFriendApply_PUSH.apply)
}

// -------------------------------------------------------------------

// Msg_AddFriendReply_CS

// .XrPb.EFriendReplyType result = 1;
inline void Msg_AddFriendReply_CS::clear_result() {
  result_ = 0;
}
inline ::XrPb::EFriendReplyType Msg_AddFriendReply_CS::_internal_result() const {
  return static_cast< ::XrPb::EFriendReplyType >(result_);
}
inline ::XrPb::EFriendReplyType Msg_AddFriendReply_CS::result() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_AddFriendReply_CS.result)
  return _internal_result();
}
inline void Msg_AddFriendReply_CS::_internal_set_result(::XrPb::EFriendReplyType value) {
  
  result_ = value;
}
inline void Msg_AddFriendReply_CS::set_result(::XrPb::EFriendReplyType value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_AddFriendReply_CS.result)
}

// int64 friend_acc_id = 2;
inline void Msg_AddFriendReply_CS::clear_friend_acc_id() {
  friend_acc_id_ = int64_t{0};
}
inline int64_t Msg_AddFriendReply_CS::_internal_friend_acc_id() const {
  return friend_acc_id_;
}
inline int64_t Msg_AddFriendReply_CS::friend_acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_AddFriendReply_CS.friend_acc_id)
  return _internal_friend_acc_id();
}
inline void Msg_AddFriendReply_CS::_internal_set_friend_acc_id(int64_t value) {
  
  friend_acc_id_ = value;
}
inline void Msg_AddFriendReply_CS::set_friend_acc_id(int64_t value) {
  _internal_set_friend_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_AddFriendReply_CS.friend_acc_id)
}

// -------------------------------------------------------------------

// Msg_AddFriendReply_SC

// .XrPb.EFriendReplyType result = 1;
inline void Msg_AddFriendReply_SC::clear_result() {
  result_ = 0;
}
inline ::XrPb::EFriendReplyType Msg_AddFriendReply_SC::_internal_result() const {
  return static_cast< ::XrPb::EFriendReplyType >(result_);
}
inline ::XrPb::EFriendReplyType Msg_AddFriendReply_SC::result() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_AddFriendReply_SC.result)
  return _internal_result();
}
inline void Msg_AddFriendReply_SC::_internal_set_result(::XrPb::EFriendReplyType value) {
  
  result_ = value;
}
inline void Msg_AddFriendReply_SC::set_result(::XrPb::EFriendReplyType value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_AddFriendReply_SC.result)
}

// optional .XrPb.FriendInfo friend = 2;
inline bool Msg_AddFriendReply_SC::_internal_has_friend_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || friend__ != nullptr);
  return value;
}
inline bool Msg_AddFriendReply_SC::has_friend_() const {
  return _internal_has_friend_();
}
inline void Msg_AddFriendReply_SC::clear_friend_() {
  if (friend__ != nullptr) friend__->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::XrPb::FriendInfo& Msg_AddFriendReply_SC::_internal_friend_() const {
  const ::XrPb::FriendInfo* p = friend__;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::FriendInfo&>(
      ::XrPb::_FriendInfo_default_instance_);
}
inline const ::XrPb::FriendInfo& Msg_AddFriendReply_SC::friend_() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_AddFriendReply_SC.friend)
  return _internal_friend_();
}
inline void Msg_AddFriendReply_SC::unsafe_arena_set_allocated_friend_(
    ::XrPb::FriendInfo* friend_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friend__);
  }
  friend__ = friend_;
  if (friend_) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_AddFriendReply_SC.friend)
}
inline ::XrPb::FriendInfo* Msg_AddFriendReply_SC::release_friend_() {
  _has_bits_[0] &= ~0x00000001u;
  ::XrPb::FriendInfo* temp = friend__;
  friend__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::FriendInfo* Msg_AddFriendReply_SC::unsafe_arena_release_friend_() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_AddFriendReply_SC.friend)
  _has_bits_[0] &= ~0x00000001u;
  ::XrPb::FriendInfo* temp = friend__;
  friend__ = nullptr;
  return temp;
}
inline ::XrPb::FriendInfo* Msg_AddFriendReply_SC::_internal_mutable_friend_() {
  _has_bits_[0] |= 0x00000001u;
  if (friend__ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::FriendInfo>(GetArenaForAllocation());
    friend__ = p;
  }
  return friend__;
}
inline ::XrPb::FriendInfo* Msg_AddFriendReply_SC::mutable_friend_() {
  ::XrPb::FriendInfo* _msg = _internal_mutable_friend_();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_AddFriendReply_SC.friend)
  return _msg;
}
inline void Msg_AddFriendReply_SC::set_allocated_friend_(::XrPb::FriendInfo* friend_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete friend__;
  }
  if (friend_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::FriendInfo>::GetOwningArena(friend_);
    if (message_arena != submessage_arena) {
      friend_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friend_, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  friend__ = friend_;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_AddFriendReply_SC.friend)
}

// -------------------------------------------------------------------

// Msg_AddFriendReply_PUSH

// .XrPb.EFriendReplyType result = 1;
inline void Msg_AddFriendReply_PUSH::clear_result() {
  result_ = 0;
}
inline ::XrPb::EFriendReplyType Msg_AddFriendReply_PUSH::_internal_result() const {
  return static_cast< ::XrPb::EFriendReplyType >(result_);
}
inline ::XrPb::EFriendReplyType Msg_AddFriendReply_PUSH::result() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_AddFriendReply_PUSH.result)
  return _internal_result();
}
inline void Msg_AddFriendReply_PUSH::_internal_set_result(::XrPb::EFriendReplyType value) {
  
  result_ = value;
}
inline void Msg_AddFriendReply_PUSH::set_result(::XrPb::EFriendReplyType value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_AddFriendReply_PUSH.result)
}

// optional .XrPb.FriendInfo friend = 2;
inline bool Msg_AddFriendReply_PUSH::_internal_has_friend_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || friend__ != nullptr);
  return value;
}
inline bool Msg_AddFriendReply_PUSH::has_friend_() const {
  return _internal_has_friend_();
}
inline void Msg_AddFriendReply_PUSH::clear_friend_() {
  if (friend__ != nullptr) friend__->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::XrPb::FriendInfo& Msg_AddFriendReply_PUSH::_internal_friend_() const {
  const ::XrPb::FriendInfo* p = friend__;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::FriendInfo&>(
      ::XrPb::_FriendInfo_default_instance_);
}
inline const ::XrPb::FriendInfo& Msg_AddFriendReply_PUSH::friend_() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_AddFriendReply_PUSH.friend)
  return _internal_friend_();
}
inline void Msg_AddFriendReply_PUSH::unsafe_arena_set_allocated_friend_(
    ::XrPb::FriendInfo* friend_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friend__);
  }
  friend__ = friend_;
  if (friend_) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_AddFriendReply_PUSH.friend)
}
inline ::XrPb::FriendInfo* Msg_AddFriendReply_PUSH::release_friend_() {
  _has_bits_[0] &= ~0x00000001u;
  ::XrPb::FriendInfo* temp = friend__;
  friend__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::FriendInfo* Msg_AddFriendReply_PUSH::unsafe_arena_release_friend_() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_AddFriendReply_PUSH.friend)
  _has_bits_[0] &= ~0x00000001u;
  ::XrPb::FriendInfo* temp = friend__;
  friend__ = nullptr;
  return temp;
}
inline ::XrPb::FriendInfo* Msg_AddFriendReply_PUSH::_internal_mutable_friend_() {
  _has_bits_[0] |= 0x00000001u;
  if (friend__ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::FriendInfo>(GetArenaForAllocation());
    friend__ = p;
  }
  return friend__;
}
inline ::XrPb::FriendInfo* Msg_AddFriendReply_PUSH::mutable_friend_() {
  ::XrPb::FriendInfo* _msg = _internal_mutable_friend_();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_AddFriendReply_PUSH.friend)
  return _msg;
}
inline void Msg_AddFriendReply_PUSH::set_allocated_friend_(::XrPb::FriendInfo* friend_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete friend__;
  }
  if (friend_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::FriendInfo>::GetOwningArena(friend_);
    if (message_arena != submessage_arena) {
      friend_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friend_, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  friend__ = friend_;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_AddFriendReply_PUSH.friend)
}

// -------------------------------------------------------------------

// Msg_GetFriApplyList_CS

// -------------------------------------------------------------------

// Msg_GetFriApplyList_SC

// repeated .XrPb.FriendInfo apply_list = 1;
inline int Msg_GetFriApplyList_SC::_internal_apply_list_size() const {
  return apply_list_.size();
}
inline int Msg_GetFriApplyList_SC::apply_list_size() const {
  return _internal_apply_list_size();
}
inline void Msg_GetFriApplyList_SC::clear_apply_list() {
  apply_list_.Clear();
}
inline ::XrPb::FriendInfo* Msg_GetFriApplyList_SC::mutable_apply_list(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GetFriApplyList_SC.apply_list)
  return apply_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >*
Msg_GetFriApplyList_SC::mutable_apply_list() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_GetFriApplyList_SC.apply_list)
  return &apply_list_;
}
inline const ::XrPb::FriendInfo& Msg_GetFriApplyList_SC::_internal_apply_list(int index) const {
  return apply_list_.Get(index);
}
inline const ::XrPb::FriendInfo& Msg_GetFriApplyList_SC::apply_list(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetFriApplyList_SC.apply_list)
  return _internal_apply_list(index);
}
inline ::XrPb::FriendInfo* Msg_GetFriApplyList_SC::_internal_add_apply_list() {
  return apply_list_.Add();
}
inline ::XrPb::FriendInfo* Msg_GetFriApplyList_SC::add_apply_list() {
  ::XrPb::FriendInfo* _add = _internal_add_apply_list();
  // @@protoc_insertion_point(field_add:XrPb.Msg_GetFriApplyList_SC.apply_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >&
Msg_GetFriApplyList_SC::apply_list() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_GetFriApplyList_SC.apply_list)
  return apply_list_;
}

// -------------------------------------------------------------------

// Msg_DelFriend_CS

// int64 friend_acc_id = 1;
inline void Msg_DelFriend_CS::clear_friend_acc_id() {
  friend_acc_id_ = int64_t{0};
}
inline int64_t Msg_DelFriend_CS::_internal_friend_acc_id() const {
  return friend_acc_id_;
}
inline int64_t Msg_DelFriend_CS::friend_acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DelFriend_CS.friend_acc_id)
  return _internal_friend_acc_id();
}
inline void Msg_DelFriend_CS::_internal_set_friend_acc_id(int64_t value) {
  
  friend_acc_id_ = value;
}
inline void Msg_DelFriend_CS::set_friend_acc_id(int64_t value) {
  _internal_set_friend_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DelFriend_CS.friend_acc_id)
}

// -------------------------------------------------------------------

// Msg_DelFriend_SC

// -------------------------------------------------------------------

// Msg_NotifyDelFriend_PUSH

// int64 friend_acc_id = 1;
inline void Msg_NotifyDelFriend_PUSH::clear_friend_acc_id() {
  friend_acc_id_ = int64_t{0};
}
inline int64_t Msg_NotifyDelFriend_PUSH::_internal_friend_acc_id() const {
  return friend_acc_id_;
}
inline int64_t Msg_NotifyDelFriend_PUSH::friend_acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_NotifyDelFriend_PUSH.friend_acc_id)
  return _internal_friend_acc_id();
}
inline void Msg_NotifyDelFriend_PUSH::_internal_set_friend_acc_id(int64_t value) {
  
  friend_acc_id_ = value;
}
inline void Msg_NotifyDelFriend_PUSH::set_friend_acc_id(int64_t value) {
  _internal_set_friend_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_NotifyDelFriend_PUSH.friend_acc_id)
}

// -------------------------------------------------------------------

// Msg_AddAllFriend_CS

// -------------------------------------------------------------------

// Msg_AddAllFriend_SC

// repeated .XrPb.FriendInfo friends = 1;
inline int Msg_AddAllFriend_SC::_internal_friends_size() const {
  return friends_.size();
}
inline int Msg_AddAllFriend_SC::friends_size() const {
  return _internal_friends_size();
}
inline void Msg_AddAllFriend_SC::clear_friends() {
  friends_.Clear();
}
inline ::XrPb::FriendInfo* Msg_AddAllFriend_SC::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_AddAllFriend_SC.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >*
Msg_AddAllFriend_SC::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_AddAllFriend_SC.friends)
  return &friends_;
}
inline const ::XrPb::FriendInfo& Msg_AddAllFriend_SC::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::XrPb::FriendInfo& Msg_AddAllFriend_SC::friends(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_AddAllFriend_SC.friends)
  return _internal_friends(index);
}
inline ::XrPb::FriendInfo* Msg_AddAllFriend_SC::_internal_add_friends() {
  return friends_.Add();
}
inline ::XrPb::FriendInfo* Msg_AddAllFriend_SC::add_friends() {
  ::XrPb::FriendInfo* _add = _internal_add_friends();
  // @@protoc_insertion_point(field_add:XrPb.Msg_AddAllFriend_SC.friends)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >&
Msg_AddAllFriend_SC::friends() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_AddAllFriend_SC.friends)
  return friends_;
}

// -------------------------------------------------------------------

// Msg_GetFriendMsgs_CS

// -------------------------------------------------------------------

// FriendOfflineMsg

// int64 friend_id = 1;
inline void FriendOfflineMsg::clear_friend_id() {
  friend_id_ = int64_t{0};
}
inline int64_t FriendOfflineMsg::_internal_friend_id() const {
  return friend_id_;
}
inline int64_t FriendOfflineMsg::friend_id() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendOfflineMsg.friend_id)
  return _internal_friend_id();
}
inline void FriendOfflineMsg::_internal_set_friend_id(int64_t value) {
  
  friend_id_ = value;
}
inline void FriendOfflineMsg::set_friend_id(int64_t value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:XrPb.FriendOfflineMsg.friend_id)
}

// repeated .XrPb.ChatMsgData msg = 2;
inline int FriendOfflineMsg::_internal_msg_size() const {
  return msg_.size();
}
inline int FriendOfflineMsg::msg_size() const {
  return _internal_msg_size();
}
inline ::XrPb::ChatMsgData* FriendOfflineMsg::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.FriendOfflineMsg.msg)
  return msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ChatMsgData >*
FriendOfflineMsg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.FriendOfflineMsg.msg)
  return &msg_;
}
inline const ::XrPb::ChatMsgData& FriendOfflineMsg::_internal_msg(int index) const {
  return msg_.Get(index);
}
inline const ::XrPb::ChatMsgData& FriendOfflineMsg::msg(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.FriendOfflineMsg.msg)
  return _internal_msg(index);
}
inline ::XrPb::ChatMsgData* FriendOfflineMsg::_internal_add_msg() {
  return msg_.Add();
}
inline ::XrPb::ChatMsgData* FriendOfflineMsg::add_msg() {
  ::XrPb::ChatMsgData* _add = _internal_add_msg();
  // @@protoc_insertion_point(field_add:XrPb.FriendOfflineMsg.msg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ChatMsgData >&
FriendOfflineMsg::msg() const {
  // @@protoc_insertion_point(field_list:XrPb.FriendOfflineMsg.msg)
  return msg_;
}

// -------------------------------------------------------------------

// Msg_GetFriendMsgs_SC

// repeated .XrPb.FriendOfflineMsg friend = 1;
inline int Msg_GetFriendMsgs_SC::_internal_friend__size() const {
  return friend__.size();
}
inline int Msg_GetFriendMsgs_SC::friend__size() const {
  return _internal_friend__size();
}
inline void Msg_GetFriendMsgs_SC::clear_friend_() {
  friend__.Clear();
}
inline ::XrPb::FriendOfflineMsg* Msg_GetFriendMsgs_SC::mutable_friend_(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GetFriendMsgs_SC.friend)
  return friend__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendOfflineMsg >*
Msg_GetFriendMsgs_SC::mutable_friend_() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_GetFriendMsgs_SC.friend)
  return &friend__;
}
inline const ::XrPb::FriendOfflineMsg& Msg_GetFriendMsgs_SC::_internal_friend_(int index) const {
  return friend__.Get(index);
}
inline const ::XrPb::FriendOfflineMsg& Msg_GetFriendMsgs_SC::friend_(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetFriendMsgs_SC.friend)
  return _internal_friend_(index);
}
inline ::XrPb::FriendOfflineMsg* Msg_GetFriendMsgs_SC::_internal_add_friend_() {
  return friend__.Add();
}
inline ::XrPb::FriendOfflineMsg* Msg_GetFriendMsgs_SC::add_friend_() {
  ::XrPb::FriendOfflineMsg* _add = _internal_add_friend_();
  // @@protoc_insertion_point(field_add:XrPb.Msg_GetFriendMsgs_SC.friend)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendOfflineMsg >&
Msg_GetFriendMsgs_SC::friend_() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_GetFriendMsgs_SC.friend)
  return friend__;
}

// bool finish = 2;
inline void Msg_GetFriendMsgs_SC::clear_finish() {
  finish_ = false;
}
inline bool Msg_GetFriendMsgs_SC::_internal_finish() const {
  return finish_;
}
inline bool Msg_GetFriendMsgs_SC::finish() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetFriendMsgs_SC.finish)
  return _internal_finish();
}
inline void Msg_GetFriendMsgs_SC::_internal_set_finish(bool value) {
  
  finish_ = value;
}
inline void Msg_GetFriendMsgs_SC::set_finish(bool value) {
  _internal_set_finish(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetFriendMsgs_SC.finish)
}

// -------------------------------------------------------------------

// Msg_FriendInfoUpdate_PUSH_AttrInt64Pair

// .XrPb.Msg_FriendInfoUpdate_PUSH.AttrType type = 1;
inline void Msg_FriendInfoUpdate_PUSH_AttrInt64Pair::clear_type() {
  type_ = 0;
}
inline ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType Msg_FriendInfoUpdate_PUSH_AttrInt64Pair::_internal_type() const {
  return static_cast< ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType >(type_);
}
inline ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType Msg_FriendInfoUpdate_PUSH_AttrInt64Pair::type() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_FriendInfoUpdate_PUSH.AttrInt64Pair.type)
  return _internal_type();
}
inline void Msg_FriendInfoUpdate_PUSH_AttrInt64Pair::_internal_set_type(::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType value) {
  
  type_ = value;
}
inline void Msg_FriendInfoUpdate_PUSH_AttrInt64Pair::set_type(::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_FriendInfoUpdate_PUSH.AttrInt64Pair.type)
}

// int64 value = 2;
inline void Msg_FriendInfoUpdate_PUSH_AttrInt64Pair::clear_value() {
  value_ = int64_t{0};
}
inline int64_t Msg_FriendInfoUpdate_PUSH_AttrInt64Pair::_internal_value() const {
  return value_;
}
inline int64_t Msg_FriendInfoUpdate_PUSH_AttrInt64Pair::value() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_FriendInfoUpdate_PUSH.AttrInt64Pair.value)
  return _internal_value();
}
inline void Msg_FriendInfoUpdate_PUSH_AttrInt64Pair::_internal_set_value(int64_t value) {
  
  value_ = value;
}
inline void Msg_FriendInfoUpdate_PUSH_AttrInt64Pair::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_FriendInfoUpdate_PUSH.AttrInt64Pair.value)
}

// -------------------------------------------------------------------

// Msg_FriendInfoUpdate_PUSH_AttrStringPair

// .XrPb.Msg_FriendInfoUpdate_PUSH.AttrType type = 1;
inline void Msg_FriendInfoUpdate_PUSH_AttrStringPair::clear_type() {
  type_ = 0;
}
inline ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType Msg_FriendInfoUpdate_PUSH_AttrStringPair::_internal_type() const {
  return static_cast< ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType >(type_);
}
inline ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType Msg_FriendInfoUpdate_PUSH_AttrStringPair::type() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_FriendInfoUpdate_PUSH.AttrStringPair.type)
  return _internal_type();
}
inline void Msg_FriendInfoUpdate_PUSH_AttrStringPair::_internal_set_type(::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType value) {
  
  type_ = value;
}
inline void Msg_FriendInfoUpdate_PUSH_AttrStringPair::set_type(::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_FriendInfoUpdate_PUSH.AttrStringPair.type)
}

// string value = 2;
inline void Msg_FriendInfoUpdate_PUSH_AttrStringPair::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Msg_FriendInfoUpdate_PUSH_AttrStringPair::value() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_FriendInfoUpdate_PUSH.AttrStringPair.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_FriendInfoUpdate_PUSH_AttrStringPair::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_FriendInfoUpdate_PUSH.AttrStringPair.value)
}
inline std::string* Msg_FriendInfoUpdate_PUSH_AttrStringPair::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_FriendInfoUpdate_PUSH.AttrStringPair.value)
  return _s;
}
inline const std::string& Msg_FriendInfoUpdate_PUSH_AttrStringPair::_internal_value() const {
  return value_.Get();
}
inline void Msg_FriendInfoUpdate_PUSH_AttrStringPair::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_FriendInfoUpdate_PUSH_AttrStringPair::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_FriendInfoUpdate_PUSH_AttrStringPair::release_value() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_FriendInfoUpdate_PUSH.AttrStringPair.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_FriendInfoUpdate_PUSH_AttrStringPair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_FriendInfoUpdate_PUSH.AttrStringPair.value)
}

// -------------------------------------------------------------------

// Msg_FriendInfoUpdate_PUSH

// int64 friend_acc_id = 1;
inline void Msg_FriendInfoUpdate_PUSH::clear_friend_acc_id() {
  friend_acc_id_ = int64_t{0};
}
inline int64_t Msg_FriendInfoUpdate_PUSH::_internal_friend_acc_id() const {
  return friend_acc_id_;
}
inline int64_t Msg_FriendInfoUpdate_PUSH::friend_acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_FriendInfoUpdate_PUSH.friend_acc_id)
  return _internal_friend_acc_id();
}
inline void Msg_FriendInfoUpdate_PUSH::_internal_set_friend_acc_id(int64_t value) {
  
  friend_acc_id_ = value;
}
inline void Msg_FriendInfoUpdate_PUSH::set_friend_acc_id(int64_t value) {
  _internal_set_friend_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_FriendInfoUpdate_PUSH.friend_acc_id)
}

// repeated .XrPb.Msg_FriendInfoUpdate_PUSH.AttrInt64Pair attrInt64Pairs = 2;
inline int Msg_FriendInfoUpdate_PUSH::_internal_attrint64pairs_size() const {
  return attrint64pairs_.size();
}
inline int Msg_FriendInfoUpdate_PUSH::attrint64pairs_size() const {
  return _internal_attrint64pairs_size();
}
inline void Msg_FriendInfoUpdate_PUSH::clear_attrint64pairs() {
  attrint64pairs_.Clear();
}
inline ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair* Msg_FriendInfoUpdate_PUSH::mutable_attrint64pairs(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_FriendInfoUpdate_PUSH.attrInt64Pairs)
  return attrint64pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair >*
Msg_FriendInfoUpdate_PUSH::mutable_attrint64pairs() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_FriendInfoUpdate_PUSH.attrInt64Pairs)
  return &attrint64pairs_;
}
inline const ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair& Msg_FriendInfoUpdate_PUSH::_internal_attrint64pairs(int index) const {
  return attrint64pairs_.Get(index);
}
inline const ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair& Msg_FriendInfoUpdate_PUSH::attrint64pairs(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_FriendInfoUpdate_PUSH.attrInt64Pairs)
  return _internal_attrint64pairs(index);
}
inline ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair* Msg_FriendInfoUpdate_PUSH::_internal_add_attrint64pairs() {
  return attrint64pairs_.Add();
}
inline ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair* Msg_FriendInfoUpdate_PUSH::add_attrint64pairs() {
  ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair* _add = _internal_add_attrint64pairs();
  // @@protoc_insertion_point(field_add:XrPb.Msg_FriendInfoUpdate_PUSH.attrInt64Pairs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrInt64Pair >&
Msg_FriendInfoUpdate_PUSH::attrint64pairs() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_FriendInfoUpdate_PUSH.attrInt64Pairs)
  return attrint64pairs_;
}

// repeated .XrPb.Msg_FriendInfoUpdate_PUSH.AttrStringPair attrStringPairs = 3;
inline int Msg_FriendInfoUpdate_PUSH::_internal_attrstringpairs_size() const {
  return attrstringpairs_.size();
}
inline int Msg_FriendInfoUpdate_PUSH::attrstringpairs_size() const {
  return _internal_attrstringpairs_size();
}
inline void Msg_FriendInfoUpdate_PUSH::clear_attrstringpairs() {
  attrstringpairs_.Clear();
}
inline ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair* Msg_FriendInfoUpdate_PUSH::mutable_attrstringpairs(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_FriendInfoUpdate_PUSH.attrStringPairs)
  return attrstringpairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair >*
Msg_FriendInfoUpdate_PUSH::mutable_attrstringpairs() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_FriendInfoUpdate_PUSH.attrStringPairs)
  return &attrstringpairs_;
}
inline const ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair& Msg_FriendInfoUpdate_PUSH::_internal_attrstringpairs(int index) const {
  return attrstringpairs_.Get(index);
}
inline const ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair& Msg_FriendInfoUpdate_PUSH::attrstringpairs(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_FriendInfoUpdate_PUSH.attrStringPairs)
  return _internal_attrstringpairs(index);
}
inline ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair* Msg_FriendInfoUpdate_PUSH::_internal_add_attrstringpairs() {
  return attrstringpairs_.Add();
}
inline ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair* Msg_FriendInfoUpdate_PUSH::add_attrstringpairs() {
  ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair* _add = _internal_add_attrstringpairs();
  // @@protoc_insertion_point(field_add:XrPb.Msg_FriendInfoUpdate_PUSH.attrStringPairs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrStringPair >&
Msg_FriendInfoUpdate_PUSH::attrstringpairs() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_FriendInfoUpdate_PUSH.attrStringPairs)
  return attrstringpairs_;
}

// optional bool is_friend = 4;
inline bool Msg_FriendInfoUpdate_PUSH::_internal_has_is_friend() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_FriendInfoUpdate_PUSH::has_is_friend() const {
  return _internal_has_is_friend();
}
inline void Msg_FriendInfoUpdate_PUSH::clear_is_friend() {
  is_friend_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Msg_FriendInfoUpdate_PUSH::_internal_is_friend() const {
  return is_friend_;
}
inline bool Msg_FriendInfoUpdate_PUSH::is_friend() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_FriendInfoUpdate_PUSH.is_friend)
  return _internal_is_friend();
}
inline void Msg_FriendInfoUpdate_PUSH::_internal_set_is_friend(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_friend_ = value;
}
inline void Msg_FriendInfoUpdate_PUSH::set_is_friend(bool value) {
  _internal_set_is_friend(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_FriendInfoUpdate_PUSH.is_friend)
}

// -------------------------------------------------------------------

// Msg_SearchFriend_CS

// optional string search = 1;
inline bool Msg_SearchFriend_CS::_internal_has_search() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_SearchFriend_CS::has_search() const {
  return _internal_has_search();
}
inline void Msg_SearchFriend_CS::clear_search() {
  search_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Msg_SearchFriend_CS::search() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SearchFriend_CS.search)
  return _internal_search();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_SearchFriend_CS::set_search(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 search_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_SearchFriend_CS.search)
}
inline std::string* Msg_SearchFriend_CS::mutable_search() {
  std::string* _s = _internal_mutable_search();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SearchFriend_CS.search)
  return _s;
}
inline const std::string& Msg_SearchFriend_CS::_internal_search() const {
  return search_.Get();
}
inline void Msg_SearchFriend_CS::_internal_set_search(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  search_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_SearchFriend_CS::_internal_mutable_search() {
  _has_bits_[0] |= 0x00000001u;
  return search_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_SearchFriend_CS::release_search() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_SearchFriend_CS.search)
  if (!_internal_has_search()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = search_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (search_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    search_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_SearchFriend_CS::set_allocated_search(std::string* search) {
  if (search != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  search_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (search_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    search_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_SearchFriend_CS.search)
}

// -------------------------------------------------------------------

// Msg_SearchFriend_SC

// repeated .XrPb.FriendInfo friends = 1;
inline int Msg_SearchFriend_SC::_internal_friends_size() const {
  return friends_.size();
}
inline int Msg_SearchFriend_SC::friends_size() const {
  return _internal_friends_size();
}
inline void Msg_SearchFriend_SC::clear_friends() {
  friends_.Clear();
}
inline ::XrPb::FriendInfo* Msg_SearchFriend_SC::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SearchFriend_SC.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >*
Msg_SearchFriend_SC::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_SearchFriend_SC.friends)
  return &friends_;
}
inline const ::XrPb::FriendInfo& Msg_SearchFriend_SC::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::XrPb::FriendInfo& Msg_SearchFriend_SC::friends(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SearchFriend_SC.friends)
  return _internal_friends(index);
}
inline ::XrPb::FriendInfo* Msg_SearchFriend_SC::_internal_add_friends() {
  return friends_.Add();
}
inline ::XrPb::FriendInfo* Msg_SearchFriend_SC::add_friends() {
  ::XrPb::FriendInfo* _add = _internal_add_friends();
  // @@protoc_insertion_point(field_add:XrPb.Msg_SearchFriend_SC.friends)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >&
Msg_SearchFriend_SC::friends() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_SearchFriend_SC.friends)
  return friends_;
}

// -------------------------------------------------------------------

// Msg_GetSelfApplyList_CS

// -------------------------------------------------------------------

// BeAppliedInfo

// int64 acc_id = 1;
inline void BeAppliedInfo::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t BeAppliedInfo::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t BeAppliedInfo::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.BeAppliedInfo.acc_id)
  return _internal_acc_id();
}
inline void BeAppliedInfo::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void BeAppliedInfo::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.BeAppliedInfo.acc_id)
}

// int64 end_time = 2;
inline void BeAppliedInfo::clear_end_time() {
  end_time_ = int64_t{0};
}
inline int64_t BeAppliedInfo::_internal_end_time() const {
  return end_time_;
}
inline int64_t BeAppliedInfo::end_time() const {
  // @@protoc_insertion_point(field_get:XrPb.BeAppliedInfo.end_time)
  return _internal_end_time();
}
inline void BeAppliedInfo::_internal_set_end_time(int64_t value) {
  
  end_time_ = value;
}
inline void BeAppliedInfo::set_end_time(int64_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:XrPb.BeAppliedInfo.end_time)
}

// -------------------------------------------------------------------

// Msg_GetSelfApplyList_SC

// repeated .XrPb.BeAppliedInfo applied = 1;
inline int Msg_GetSelfApplyList_SC::_internal_applied_size() const {
  return applied_.size();
}
inline int Msg_GetSelfApplyList_SC::applied_size() const {
  return _internal_applied_size();
}
inline void Msg_GetSelfApplyList_SC::clear_applied() {
  applied_.Clear();
}
inline ::XrPb::BeAppliedInfo* Msg_GetSelfApplyList_SC::mutable_applied(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GetSelfApplyList_SC.applied)
  return applied_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::BeAppliedInfo >*
Msg_GetSelfApplyList_SC::mutable_applied() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_GetSelfApplyList_SC.applied)
  return &applied_;
}
inline const ::XrPb::BeAppliedInfo& Msg_GetSelfApplyList_SC::_internal_applied(int index) const {
  return applied_.Get(index);
}
inline const ::XrPb::BeAppliedInfo& Msg_GetSelfApplyList_SC::applied(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetSelfApplyList_SC.applied)
  return _internal_applied(index);
}
inline ::XrPb::BeAppliedInfo* Msg_GetSelfApplyList_SC::_internal_add_applied() {
  return applied_.Add();
}
inline ::XrPb::BeAppliedInfo* Msg_GetSelfApplyList_SC::add_applied() {
  ::XrPb::BeAppliedInfo* _add = _internal_add_applied();
  // @@protoc_insertion_point(field_add:XrPb.Msg_GetSelfApplyList_SC.applied)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::BeAppliedInfo >&
Msg_GetSelfApplyList_SC::applied() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_GetSelfApplyList_SC.applied)
  return applied_;
}

// -------------------------------------------------------------------

// Msg_AddBlackList_CS

// int64 acc_id = 1;
inline void Msg_AddBlackList_CS::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_AddBlackList_CS::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_AddBlackList_CS::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_AddBlackList_CS.acc_id)
  return _internal_acc_id();
}
inline void Msg_AddBlackList_CS::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_AddBlackList_CS::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_AddBlackList_CS.acc_id)
}

// -------------------------------------------------------------------

// Msg_AddBlackList_SC

// optional .XrPb.FriendInfo player = 1;
inline bool Msg_AddBlackList_SC::_internal_has_player() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || player_ != nullptr);
  return value;
}
inline bool Msg_AddBlackList_SC::has_player() const {
  return _internal_has_player();
}
inline void Msg_AddBlackList_SC::clear_player() {
  if (player_ != nullptr) player_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::XrPb::FriendInfo& Msg_AddBlackList_SC::_internal_player() const {
  const ::XrPb::FriendInfo* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::FriendInfo&>(
      ::XrPb::_FriendInfo_default_instance_);
}
inline const ::XrPb::FriendInfo& Msg_AddBlackList_SC::player() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_AddBlackList_SC.player)
  return _internal_player();
}
inline void Msg_AddBlackList_SC::unsafe_arena_set_allocated_player(
    ::XrPb::FriendInfo* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_AddBlackList_SC.player)
}
inline ::XrPb::FriendInfo* Msg_AddBlackList_SC::release_player() {
  _has_bits_[0] &= ~0x00000001u;
  ::XrPb::FriendInfo* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::FriendInfo* Msg_AddBlackList_SC::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_AddBlackList_SC.player)
  _has_bits_[0] &= ~0x00000001u;
  ::XrPb::FriendInfo* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::XrPb::FriendInfo* Msg_AddBlackList_SC::_internal_mutable_player() {
  _has_bits_[0] |= 0x00000001u;
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::FriendInfo>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::XrPb::FriendInfo* Msg_AddBlackList_SC::mutable_player() {
  ::XrPb::FriendInfo* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_AddBlackList_SC.player)
  return _msg;
}
inline void Msg_AddBlackList_SC::set_allocated_player(::XrPb::FriendInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::FriendInfo>::GetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_AddBlackList_SC.player)
}

// -------------------------------------------------------------------

// Msg_DelBlackList_CS

// optional int64 acc_id = 1;
inline bool Msg_DelBlackList_CS::_internal_has_acc_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_DelBlackList_CS::has_acc_id() const {
  return _internal_has_acc_id();
}
inline void Msg_DelBlackList_CS::clear_acc_id() {
  acc_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Msg_DelBlackList_CS::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_DelBlackList_CS::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DelBlackList_CS.acc_id)
  return _internal_acc_id();
}
inline void Msg_DelBlackList_CS::_internal_set_acc_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  acc_id_ = value;
}
inline void Msg_DelBlackList_CS::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DelBlackList_CS.acc_id)
}

// -------------------------------------------------------------------

// Msg_DelBlackList_SC

// optional int64 acc_id = 1;
inline bool Msg_DelBlackList_SC::_internal_has_acc_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_DelBlackList_SC::has_acc_id() const {
  return _internal_has_acc_id();
}
inline void Msg_DelBlackList_SC::clear_acc_id() {
  acc_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Msg_DelBlackList_SC::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_DelBlackList_SC::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DelBlackList_SC.acc_id)
  return _internal_acc_id();
}
inline void Msg_DelBlackList_SC::_internal_set_acc_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  acc_id_ = value;
}
inline void Msg_DelBlackList_SC::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DelBlackList_SC.acc_id)
}

// -------------------------------------------------------------------

// Msg_GetBlackList_CS

// -------------------------------------------------------------------

// Msg_GetBlackList_SC

// repeated .XrPb.FriendInfo black_list = 1;
inline int Msg_GetBlackList_SC::_internal_black_list_size() const {
  return black_list_.size();
}
inline int Msg_GetBlackList_SC::black_list_size() const {
  return _internal_black_list_size();
}
inline void Msg_GetBlackList_SC::clear_black_list() {
  black_list_.Clear();
}
inline ::XrPb::FriendInfo* Msg_GetBlackList_SC::mutable_black_list(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GetBlackList_SC.black_list)
  return black_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >*
Msg_GetBlackList_SC::mutable_black_list() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_GetBlackList_SC.black_list)
  return &black_list_;
}
inline const ::XrPb::FriendInfo& Msg_GetBlackList_SC::_internal_black_list(int index) const {
  return black_list_.Get(index);
}
inline const ::XrPb::FriendInfo& Msg_GetBlackList_SC::black_list(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetBlackList_SC.black_list)
  return _internal_black_list(index);
}
inline ::XrPb::FriendInfo* Msg_GetBlackList_SC::_internal_add_black_list() {
  return black_list_.Add();
}
inline ::XrPb::FriendInfo* Msg_GetBlackList_SC::add_black_list() {
  ::XrPb::FriendInfo* _add = _internal_add_black_list();
  // @@protoc_insertion_point(field_add:XrPb.Msg_GetBlackList_SC.black_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInfo >&
Msg_GetBlackList_SC::black_list() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_GetBlackList_SC.black_list)
  return black_list_;
}

// -------------------------------------------------------------------

// Msg_RefuseAllFriend_CS

// -------------------------------------------------------------------

// Msg_RefuseAllFriend_SC

// -------------------------------------------------------------------

// Msg_DeleteLastChatFriend_CS

// int64 uiAccId = 1;
inline void Msg_DeleteLastChatFriend_CS::clear_uiaccid() {
  uiaccid_ = int64_t{0};
}
inline int64_t Msg_DeleteLastChatFriend_CS::_internal_uiaccid() const {
  return uiaccid_;
}
inline int64_t Msg_DeleteLastChatFriend_CS::uiaccid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DeleteLastChatFriend_CS.uiAccId)
  return _internal_uiaccid();
}
inline void Msg_DeleteLastChatFriend_CS::_internal_set_uiaccid(int64_t value) {
  
  uiaccid_ = value;
}
inline void Msg_DeleteLastChatFriend_CS::set_uiaccid(int64_t value) {
  _internal_set_uiaccid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DeleteLastChatFriend_CS.uiAccId)
}

// -------------------------------------------------------------------

// Msg_DeleteLastChatFriend_SC

// int64 uiAccId = 1;
inline void Msg_DeleteLastChatFriend_SC::clear_uiaccid() {
  uiaccid_ = int64_t{0};
}
inline int64_t Msg_DeleteLastChatFriend_SC::_internal_uiaccid() const {
  return uiaccid_;
}
inline int64_t Msg_DeleteLastChatFriend_SC::uiaccid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DeleteLastChatFriend_SC.uiAccId)
  return _internal_uiaccid();
}
inline void Msg_DeleteLastChatFriend_SC::_internal_set_uiaccid(int64_t value) {
  
  uiaccid_ = value;
}
inline void Msg_DeleteLastChatFriend_SC::set_uiaccid(int64_t value) {
  _internal_set_uiaccid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DeleteLastChatFriend_SC.uiAccId)
}

// -------------------------------------------------------------------

// Msg_GetFriendInviteAward_CS

// -------------------------------------------------------------------

// FriendInviteAwardInfo

// uint32 condition = 1;
inline void FriendInviteAwardInfo::clear_condition() {
  condition_ = 0u;
}
inline uint32_t FriendInviteAwardInfo::_internal_condition() const {
  return condition_;
}
inline uint32_t FriendInviteAwardInfo::condition() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendInviteAwardInfo.condition)
  return _internal_condition();
}
inline void FriendInviteAwardInfo::_internal_set_condition(uint32_t value) {
  
  condition_ = value;
}
inline void FriendInviteAwardInfo::set_condition(uint32_t value) {
  _internal_set_condition(value);
  // @@protoc_insertion_point(field_set:XrPb.FriendInviteAwardInfo.condition)
}

// uint32 value = 2;
inline void FriendInviteAwardInfo::clear_value() {
  value_ = 0u;
}
inline uint32_t FriendInviteAwardInfo::_internal_value() const {
  return value_;
}
inline uint32_t FriendInviteAwardInfo::value() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendInviteAwardInfo.value)
  return _internal_value();
}
inline void FriendInviteAwardInfo::_internal_set_value(uint32_t value) {
  
  value_ = value;
}
inline void FriendInviteAwardInfo::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:XrPb.FriendInviteAwardInfo.value)
}

// uint32 num = 3;
inline void FriendInviteAwardInfo::clear_num() {
  num_ = 0u;
}
inline uint32_t FriendInviteAwardInfo::_internal_num() const {
  return num_;
}
inline uint32_t FriendInviteAwardInfo::num() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendInviteAwardInfo.num)
  return _internal_num();
}
inline void FriendInviteAwardInfo::_internal_set_num(uint32_t value) {
  
  num_ = value;
}
inline void FriendInviteAwardInfo::set_num(uint32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:XrPb.FriendInviteAwardInfo.num)
}

// uint32 gained_num = 4;
inline void FriendInviteAwardInfo::clear_gained_num() {
  gained_num_ = 0u;
}
inline uint32_t FriendInviteAwardInfo::_internal_gained_num() const {
  return gained_num_;
}
inline uint32_t FriendInviteAwardInfo::gained_num() const {
  // @@protoc_insertion_point(field_get:XrPb.FriendInviteAwardInfo.gained_num)
  return _internal_gained_num();
}
inline void FriendInviteAwardInfo::_internal_set_gained_num(uint32_t value) {
  
  gained_num_ = value;
}
inline void FriendInviteAwardInfo::set_gained_num(uint32_t value) {
  _internal_set_gained_num(value);
  // @@protoc_insertion_point(field_set:XrPb.FriendInviteAwardInfo.gained_num)
}

// -------------------------------------------------------------------

// Msg_GetFriendInviteAward_SC

// uint32 used_count = 1;
inline void Msg_GetFriendInviteAward_SC::clear_used_count() {
  used_count_ = 0u;
}
inline uint32_t Msg_GetFriendInviteAward_SC::_internal_used_count() const {
  return used_count_;
}
inline uint32_t Msg_GetFriendInviteAward_SC::used_count() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetFriendInviteAward_SC.used_count)
  return _internal_used_count();
}
inline void Msg_GetFriendInviteAward_SC::_internal_set_used_count(uint32_t value) {
  
  used_count_ = value;
}
inline void Msg_GetFriendInviteAward_SC::set_used_count(uint32_t value) {
  _internal_set_used_count(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetFriendInviteAward_SC.used_count)
}

// repeated .XrPb.FriendInviteAwardInfo new_award = 2;
inline int Msg_GetFriendInviteAward_SC::_internal_new_award_size() const {
  return new_award_.size();
}
inline int Msg_GetFriendInviteAward_SC::new_award_size() const {
  return _internal_new_award_size();
}
inline void Msg_GetFriendInviteAward_SC::clear_new_award() {
  new_award_.Clear();
}
inline ::XrPb::FriendInviteAwardInfo* Msg_GetFriendInviteAward_SC::mutable_new_award(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GetFriendInviteAward_SC.new_award)
  return new_award_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInviteAwardInfo >*
Msg_GetFriendInviteAward_SC::mutable_new_award() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_GetFriendInviteAward_SC.new_award)
  return &new_award_;
}
inline const ::XrPb::FriendInviteAwardInfo& Msg_GetFriendInviteAward_SC::_internal_new_award(int index) const {
  return new_award_.Get(index);
}
inline const ::XrPb::FriendInviteAwardInfo& Msg_GetFriendInviteAward_SC::new_award(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetFriendInviteAward_SC.new_award)
  return _internal_new_award(index);
}
inline ::XrPb::FriendInviteAwardInfo* Msg_GetFriendInviteAward_SC::_internal_add_new_award() {
  return new_award_.Add();
}
inline ::XrPb::FriendInviteAwardInfo* Msg_GetFriendInviteAward_SC::add_new_award() {
  ::XrPb::FriendInviteAwardInfo* _add = _internal_add_new_award();
  // @@protoc_insertion_point(field_add:XrPb.Msg_GetFriendInviteAward_SC.new_award)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInviteAwardInfo >&
Msg_GetFriendInviteAward_SC::new_award() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_GetFriendInviteAward_SC.new_award)
  return new_award_;
}

// repeated .XrPb.FriendInviteAwardInfo old_award = 3;
inline int Msg_GetFriendInviteAward_SC::_internal_old_award_size() const {
  return old_award_.size();
}
inline int Msg_GetFriendInviteAward_SC::old_award_size() const {
  return _internal_old_award_size();
}
inline void Msg_GetFriendInviteAward_SC::clear_old_award() {
  old_award_.Clear();
}
inline ::XrPb::FriendInviteAwardInfo* Msg_GetFriendInviteAward_SC::mutable_old_award(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GetFriendInviteAward_SC.old_award)
  return old_award_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInviteAwardInfo >*
Msg_GetFriendInviteAward_SC::mutable_old_award() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_GetFriendInviteAward_SC.old_award)
  return &old_award_;
}
inline const ::XrPb::FriendInviteAwardInfo& Msg_GetFriendInviteAward_SC::_internal_old_award(int index) const {
  return old_award_.Get(index);
}
inline const ::XrPb::FriendInviteAwardInfo& Msg_GetFriendInviteAward_SC::old_award(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetFriendInviteAward_SC.old_award)
  return _internal_old_award(index);
}
inline ::XrPb::FriendInviteAwardInfo* Msg_GetFriendInviteAward_SC::_internal_add_old_award() {
  return old_award_.Add();
}
inline ::XrPb::FriendInviteAwardInfo* Msg_GetFriendInviteAward_SC::add_old_award() {
  ::XrPb::FriendInviteAwardInfo* _add = _internal_add_old_award();
  // @@protoc_insertion_point(field_add:XrPb.Msg_GetFriendInviteAward_SC.old_award)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::FriendInviteAwardInfo >&
Msg_GetFriendInviteAward_SC::old_award() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_GetFriendInviteAward_SC.old_award)
  return old_award_;
}

// optional string other_invite_code = 4;
inline bool Msg_GetFriendInviteAward_SC::_internal_has_other_invite_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_GetFriendInviteAward_SC::has_other_invite_code() const {
  return _internal_has_other_invite_code();
}
inline void Msg_GetFriendInviteAward_SC::clear_other_invite_code() {
  other_invite_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Msg_GetFriendInviteAward_SC::other_invite_code() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetFriendInviteAward_SC.other_invite_code)
  return _internal_other_invite_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_GetFriendInviteAward_SC::set_other_invite_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 other_invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetFriendInviteAward_SC.other_invite_code)
}
inline std::string* Msg_GetFriendInviteAward_SC::mutable_other_invite_code() {
  std::string* _s = _internal_mutable_other_invite_code();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GetFriendInviteAward_SC.other_invite_code)
  return _s;
}
inline const std::string& Msg_GetFriendInviteAward_SC::_internal_other_invite_code() const {
  return other_invite_code_.Get();
}
inline void Msg_GetFriendInviteAward_SC::_internal_set_other_invite_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  other_invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_GetFriendInviteAward_SC::_internal_mutable_other_invite_code() {
  _has_bits_[0] |= 0x00000001u;
  return other_invite_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_GetFriendInviteAward_SC::release_other_invite_code() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_GetFriendInviteAward_SC.other_invite_code)
  if (!_internal_has_other_invite_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = other_invite_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (other_invite_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    other_invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_GetFriendInviteAward_SC::set_allocated_other_invite_code(std::string* other_invite_code) {
  if (other_invite_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  other_invite_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), other_invite_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (other_invite_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    other_invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_GetFriendInviteAward_SC.other_invite_code)
}

// optional string self_invite_code = 5;
inline bool Msg_GetFriendInviteAward_SC::_internal_has_self_invite_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_GetFriendInviteAward_SC::has_self_invite_code() const {
  return _internal_has_self_invite_code();
}
inline void Msg_GetFriendInviteAward_SC::clear_self_invite_code() {
  self_invite_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Msg_GetFriendInviteAward_SC::self_invite_code() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetFriendInviteAward_SC.self_invite_code)
  return _internal_self_invite_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_GetFriendInviteAward_SC::set_self_invite_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 self_invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetFriendInviteAward_SC.self_invite_code)
}
inline std::string* Msg_GetFriendInviteAward_SC::mutable_self_invite_code() {
  std::string* _s = _internal_mutable_self_invite_code();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GetFriendInviteAward_SC.self_invite_code)
  return _s;
}
inline const std::string& Msg_GetFriendInviteAward_SC::_internal_self_invite_code() const {
  return self_invite_code_.Get();
}
inline void Msg_GetFriendInviteAward_SC::_internal_set_self_invite_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  self_invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_GetFriendInviteAward_SC::_internal_mutable_self_invite_code() {
  _has_bits_[0] |= 0x00000002u;
  return self_invite_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_GetFriendInviteAward_SC::release_self_invite_code() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_GetFriendInviteAward_SC.self_invite_code)
  if (!_internal_has_self_invite_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = self_invite_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (self_invite_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    self_invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_GetFriendInviteAward_SC::set_allocated_self_invite_code(std::string* self_invite_code) {
  if (self_invite_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  self_invite_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), self_invite_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (self_invite_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    self_invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_GetFriendInviteAward_SC.self_invite_code)
}

// -------------------------------------------------------------------

// Msg_GainInviteCodeAward_CS

// .XrPb.EInviteCodeAwardType type = 1;
inline void Msg_GainInviteCodeAward_CS::clear_type() {
  type_ = 0;
}
inline ::XrPb::EInviteCodeAwardType Msg_GainInviteCodeAward_CS::_internal_type() const {
  return static_cast< ::XrPb::EInviteCodeAwardType >(type_);
}
inline ::XrPb::EInviteCodeAwardType Msg_GainInviteCodeAward_CS::type() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GainInviteCodeAward_CS.type)
  return _internal_type();
}
inline void Msg_GainInviteCodeAward_CS::_internal_set_type(::XrPb::EInviteCodeAwardType value) {
  
  type_ = value;
}
inline void Msg_GainInviteCodeAward_CS::set_type(::XrPb::EInviteCodeAwardType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GainInviteCodeAward_CS.type)
}

// uint32 condition = 2;
inline void Msg_GainInviteCodeAward_CS::clear_condition() {
  condition_ = 0u;
}
inline uint32_t Msg_GainInviteCodeAward_CS::_internal_condition() const {
  return condition_;
}
inline uint32_t Msg_GainInviteCodeAward_CS::condition() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GainInviteCodeAward_CS.condition)
  return _internal_condition();
}
inline void Msg_GainInviteCodeAward_CS::_internal_set_condition(uint32_t value) {
  
  condition_ = value;
}
inline void Msg_GainInviteCodeAward_CS::set_condition(uint32_t value) {
  _internal_set_condition(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GainInviteCodeAward_CS.condition)
}

// uint32 value = 3;
inline void Msg_GainInviteCodeAward_CS::clear_value() {
  value_ = 0u;
}
inline uint32_t Msg_GainInviteCodeAward_CS::_internal_value() const {
  return value_;
}
inline uint32_t Msg_GainInviteCodeAward_CS::value() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GainInviteCodeAward_CS.value)
  return _internal_value();
}
inline void Msg_GainInviteCodeAward_CS::_internal_set_value(uint32_t value) {
  
  value_ = value;
}
inline void Msg_GainInviteCodeAward_CS::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GainInviteCodeAward_CS.value)
}

// -------------------------------------------------------------------

// Msg_GainInviteCodeAward_SC

// -------------------------------------------------------------------

// Msg_UseInviteCodeReq

// string invite_code = 1;
inline void Msg_UseInviteCodeReq::clear_invite_code() {
  invite_code_.ClearToEmpty();
}
inline const std::string& Msg_UseInviteCodeReq::invite_code() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_UseInviteCodeReq.invite_code)
  return _internal_invite_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_UseInviteCodeReq::set_invite_code(ArgT0&& arg0, ArgT... args) {
 
 invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_UseInviteCodeReq.invite_code)
}
inline std::string* Msg_UseInviteCodeReq::mutable_invite_code() {
  std::string* _s = _internal_mutable_invite_code();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_UseInviteCodeReq.invite_code)
  return _s;
}
inline const std::string& Msg_UseInviteCodeReq::_internal_invite_code() const {
  return invite_code_.Get();
}
inline void Msg_UseInviteCodeReq::_internal_set_invite_code(const std::string& value) {
  
  invite_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_UseInviteCodeReq::_internal_mutable_invite_code() {
  
  return invite_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_UseInviteCodeReq::release_invite_code() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_UseInviteCodeReq.invite_code)
  return invite_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_UseInviteCodeReq::set_allocated_invite_code(std::string* invite_code) {
  if (invite_code != nullptr) {
    
  } else {
    
  }
  invite_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invite_code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (invite_code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    invite_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_UseInviteCodeReq.invite_code)
}

// -------------------------------------------------------------------

// Msg_UseInviteCodeAck

// -------------------------------------------------------------------

// Msg_FriendInviteAward_PUSH

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XrPb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::XrPb::MsgMod_Friend_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::MsgMod_Friend_MsgId>() {
  return ::XrPb::MsgMod_Friend_MsgId_descriptor();
}
template <> struct is_proto_enum< ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType>() {
  return ::XrPb::Msg_FriendInfoUpdate_PUSH_AttrType_descriptor();
}
template <> struct is_proto_enum< ::XrPb::EFriendReplyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::EFriendReplyType>() {
  return ::XrPb::EFriendReplyType_descriptor();
}
template <> struct is_proto_enum< ::XrPb::EInviteCodeAwardType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::EInviteCodeAwardType>() {
  return ::XrPb::EInviteCodeAwardType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_2fMsgFriend_2eproto
