// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/Common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_2fCommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_2fCommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_2fCommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_2fCommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_2fCommon_2eproto;
namespace XrPb {
class ChatMsgData;
struct ChatMsgDataDefaultTypeInternal;
extern ChatMsgDataDefaultTypeInternal _ChatMsgData_default_instance_;
class ChatPlayerBaseData;
struct ChatPlayerBaseDataDefaultTypeInternal;
extern ChatPlayerBaseDataDefaultTypeInternal _ChatPlayerBaseData_default_instance_;
class FormData;
struct FormDataDefaultTypeInternal;
extern FormDataDefaultTypeInternal _FormData_default_instance_;
class GameVersion;
struct GameVersionDefaultTypeInternal;
extern GameVersionDefaultTypeInternal _GameVersion_default_instance_;
class Item;
struct ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class RoleBaseInfo;
struct RoleBaseInfoDefaultTypeInternal;
extern RoleBaseInfoDefaultTypeInternal _RoleBaseInfo_default_instance_;
class ScenePlayerData;
struct ScenePlayerDataDefaultTypeInternal;
extern ScenePlayerDataDefaultTypeInternal _ScenePlayerData_default_instance_;
class SceneResultPlayerData;
struct SceneResultPlayerDataDefaultTypeInternal;
extern SceneResultPlayerDataDefaultTypeInternal _SceneResultPlayerData_default_instance_;
class V3_POS;
struct V3_POSDefaultTypeInternal;
extern V3_POSDefaultTypeInternal _V3_POS_default_instance_;
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> ::XrPb::ChatMsgData* Arena::CreateMaybeMessage<::XrPb::ChatMsgData>(Arena*);
template<> ::XrPb::ChatPlayerBaseData* Arena::CreateMaybeMessage<::XrPb::ChatPlayerBaseData>(Arena*);
template<> ::XrPb::FormData* Arena::CreateMaybeMessage<::XrPb::FormData>(Arena*);
template<> ::XrPb::GameVersion* Arena::CreateMaybeMessage<::XrPb::GameVersion>(Arena*);
template<> ::XrPb::Item* Arena::CreateMaybeMessage<::XrPb::Item>(Arena*);
template<> ::XrPb::RoleBaseInfo* Arena::CreateMaybeMessage<::XrPb::RoleBaseInfo>(Arena*);
template<> ::XrPb::ScenePlayerData* Arena::CreateMaybeMessage<::XrPb::ScenePlayerData>(Arena*);
template<> ::XrPb::SceneResultPlayerData* Arena::CreateMaybeMessage<::XrPb::SceneResultPlayerData>(Arena*);
template<> ::XrPb::V3_POS* Arena::CreateMaybeMessage<::XrPb::V3_POS>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XrPb {

enum RoomType : int {
  Room_None = 0,
  PvE_Robot = 1,
  RoomType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RoomType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RoomType_IsValid(int value);
constexpr RoomType RoomType_MIN = Room_None;
constexpr RoomType RoomType_MAX = PvE_Robot;
constexpr int RoomType_ARRAYSIZE = RoomType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomType_descriptor();
template<typename T>
inline const std::string& RoomType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoomType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoomType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoomType_descriptor(), enum_t_value);
}
inline bool RoomType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoomType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoomType>(
    RoomType_descriptor(), name, value);
}
enum EItemId : int {
  eItem_Free = 0,
  eItem_GP = 1,
  eItem_MB = 2,
  EItemId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EItemId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EItemId_IsValid(int value);
constexpr EItemId EItemId_MIN = eItem_Free;
constexpr EItemId EItemId_MAX = eItem_MB;
constexpr int EItemId_ARRAYSIZE = EItemId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EItemId_descriptor();
template<typename T>
inline const std::string& EItemId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EItemId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EItemId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EItemId_descriptor(), enum_t_value);
}
inline bool EItemId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EItemId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EItemId>(
    EItemId_descriptor(), name, value);
}
enum ResultCode : int {
  Code_Common_Succeed = 0,
  Code_Common_Failure = 1,
  Code_Login_RoleNameCollision = 1001,
  Code_Login_NoRole = 1002,
  Code_Login_RoleInGame = 1003,
  Code_Login_Failure = 1004,
  Code_Login_SystemStop = 1005,
  Code_Login_NoInGame = 1006,
  Code_Login_InPunishBan = 1007,
  Code_Login_CheckTooOften = 1008,
  Code_Login_HasNoPortrait = 1009,
  Code_Login_PortraitOutOfDate = 1010,
  Code_Login_NoWorldChatItem = 1011,
  Code_Login_SendWorldMsgTooOften = 1012,
  Code_Login_WorldChatTooBusy = 1013,
  Code_Login_InformUpLimit = 1014,
  Code_Login_ReloginTimeout = 1015,
  Code_Login_ResVerNotRight = 1016,
  Code_Login_AppVerNotRight = 1017,
  Code_Login_SessionTimeout = 1018,
  Code_Login_DeviceNotSame = 1019,
  Code_Login_WorldChatLevelLimit = 1020,
  Code_Login_NameNotRight = 1021,
  Code_Login_NameTooLong = 1022,
  Code_Login_HasNoBackground = 1023,
  Code_Login_BackgroundOutOfDate = 1024,
  Code_Login_SystemKickout = 1025,
  Code_Login_ForbidChatNoDisplay = 1026,
  Code_Login_BeKickedOut = 1027,
  Code_Login_CantFindRole = 1028,
  Code_Login_ForbidChatDisplay = 1029,
  ResultCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ResultCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ResultCode_IsValid(int value);
constexpr ResultCode ResultCode_MIN = Code_Common_Succeed;
constexpr ResultCode ResultCode_MAX = Code_Login_ForbidChatDisplay;
constexpr int ResultCode_ARRAYSIZE = ResultCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultCode_descriptor();
template<typename T>
inline const std::string& ResultCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResultCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResultCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResultCode_descriptor(), enum_t_value);
}
inline bool ResultCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResultCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResultCode>(
    ResultCode_descriptor(), name, value);
}
enum EChatMsgType : int {
  TEXT = 0,
  VOICE = 1,
  EChatMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EChatMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EChatMsgType_IsValid(int value);
constexpr EChatMsgType EChatMsgType_MIN = TEXT;
constexpr EChatMsgType EChatMsgType_MAX = VOICE;
constexpr int EChatMsgType_ARRAYSIZE = EChatMsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChatMsgType_descriptor();
template<typename T>
inline const std::string& EChatMsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EChatMsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EChatMsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EChatMsgType_descriptor(), enum_t_value);
}
inline bool EChatMsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EChatMsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EChatMsgType>(
    EChatMsgType_descriptor(), name, value);
}
enum EChatType : int {
  FRIEND = 0,
  ROOM = 1,
  EChatType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EChatType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EChatType_IsValid(int value);
constexpr EChatType EChatType_MIN = FRIEND;
constexpr EChatType EChatType_MAX = ROOM;
constexpr int EChatType_ARRAYSIZE = EChatType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChatType_descriptor();
template<typename T>
inline const std::string& EChatType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EChatType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EChatType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EChatType_descriptor(), enum_t_value);
}
inline bool EChatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EChatType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EChatType>(
    EChatType_descriptor(), name, value);
}
enum PlayerStatus : int {
  Offline = 0,
  Online = 1,
  PlayerStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PlayerStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PlayerStatus_IsValid(int value);
constexpr PlayerStatus PlayerStatus_MIN = Offline;
constexpr PlayerStatus PlayerStatus_MAX = Online;
constexpr int PlayerStatus_ARRAYSIZE = PlayerStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerStatus_descriptor();
template<typename T>
inline const std::string& PlayerStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerStatus_descriptor(), enum_t_value);
}
inline bool PlayerStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerStatus>(
    PlayerStatus_descriptor(), name, value);
}
// ===================================================================

class Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Item) */ {
 public:
  inline Item() : Item(nullptr) {}
  ~Item() override;
  explicit constexpr Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Item& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Item";
  }
  protected:
  explicit Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 num = 2;
  void clear_num();
  uint32_t num() const;
  void set_num(uint32_t value);
  private:
  uint32_t _internal_num() const;
  void _internal_set_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t id_;
  uint32_t num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class GameVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.GameVersion) */ {
 public:
  inline GameVersion() : GameVersion(nullptr) {}
  ~GameVersion() override;
  explicit constexpr GameVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameVersion(const GameVersion& from);
  GameVersion(GameVersion&& from) noexcept
    : GameVersion() {
    *this = ::std::move(from);
  }

  inline GameVersion& operator=(const GameVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameVersion& operator=(GameVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameVersion* internal_default_instance() {
    return reinterpret_cast<const GameVersion*>(
               &_GameVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameVersion& a, GameVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(GameVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GameVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.GameVersion";
  }
  protected:
  explicit GameVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResVerFieldNumber = 1,
    kAppVerFieldNumber = 2,
  };
  // optional string ResVer = 1;
  bool has_resver() const;
  private:
  bool _internal_has_resver() const;
  public:
  void clear_resver();
  const std::string& resver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resver();
  PROTOBUF_NODISCARD std::string* release_resver();
  void set_allocated_resver(std::string* resver);
  private:
  const std::string& _internal_resver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resver(const std::string& value);
  std::string* _internal_mutable_resver();
  public:

  // optional string AppVer = 2;
  bool has_appver() const;
  private:
  bool _internal_has_appver() const;
  public:
  void clear_appver();
  const std::string& appver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_appver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_appver();
  PROTOBUF_NODISCARD std::string* release_appver();
  void set_allocated_appver(std::string* appver);
  private:
  const std::string& _internal_appver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appver(const std::string& value);
  std::string* _internal_mutable_appver();
  public:

  // @@protoc_insertion_point(class_scope:XrPb.GameVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appver_;
  friend struct ::TableStruct_client_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class FormData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.FormData) */ {
 public:
  inline FormData() : FormData(nullptr) {}
  ~FormData() override;
  explicit constexpr FormData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FormData(const FormData& from);
  FormData(FormData&& from) noexcept
    : FormData() {
    *this = ::std::move(from);
  }

  inline FormData& operator=(const FormData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormData& operator=(FormData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FormData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FormData* internal_default_instance() {
    return reinterpret_cast<const FormData*>(
               &_FormData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FormData& a, FormData& b) {
    a.Swap(&b);
  }
  inline void Swap(FormData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FormData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FormData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FormData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FormData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.FormData";
  }
  protected:
  explicit FormData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortraitFieldNumber = 1,
    kBackgroundFieldNumber = 2,
  };
  // optional uint32 portrait = 1;
  bool has_portrait() const;
  private:
  bool _internal_has_portrait() const;
  public:
  void clear_portrait();
  uint32_t portrait() const;
  void set_portrait(uint32_t value);
  private:
  uint32_t _internal_portrait() const;
  void _internal_set_portrait(uint32_t value);
  public:

  // optional uint32 background = 2;
  bool has_background() const;
  private:
  bool _internal_has_background() const;
  public:
  void clear_background();
  uint32_t background() const;
  void set_background(uint32_t value);
  private:
  uint32_t _internal_background() const;
  void _internal_set_background(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.FormData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t portrait_;
  uint32_t background_;
  friend struct ::TableStruct_client_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class ChatMsgData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.ChatMsgData) */ {
 public:
  inline ChatMsgData() : ChatMsgData(nullptr) {}
  ~ChatMsgData() override;
  explicit constexpr ChatMsgData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatMsgData(const ChatMsgData& from);
  ChatMsgData(ChatMsgData&& from) noexcept
    : ChatMsgData() {
    *this = ::std::move(from);
  }

  inline ChatMsgData& operator=(const ChatMsgData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMsgData& operator=(ChatMsgData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMsgData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMsgData* internal_default_instance() {
    return reinterpret_cast<const ChatMsgData*>(
               &_ChatMsgData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChatMsgData& a, ChatMsgData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMsgData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMsgData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMsgData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatMsgData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatMsgData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatMsgData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMsgData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.ChatMsgData";
  }
  protected:
  explicit ChatMsgData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 6,
    kPlayerFieldNumber = 2,
    kSendIdFieldNumber = 1,
    kTimeFieldNumber = 3,
    kTypeFieldNumber = 4,
    kMsgTypeFieldNumber = 5,
    kChatIdFieldNumber = 7,
  };
  // optional string msg = 6;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // optional .XrPb.ChatPlayerBaseData player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::XrPb::ChatPlayerBaseData& player() const;
  PROTOBUF_NODISCARD ::XrPb::ChatPlayerBaseData* release_player();
  ::XrPb::ChatPlayerBaseData* mutable_player();
  void set_allocated_player(::XrPb::ChatPlayerBaseData* player);
  private:
  const ::XrPb::ChatPlayerBaseData& _internal_player() const;
  ::XrPb::ChatPlayerBaseData* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::XrPb::ChatPlayerBaseData* player);
  ::XrPb::ChatPlayerBaseData* unsafe_arena_release_player();

  // optional int64 Send_id = 1;
  bool has_send_id() const;
  private:
  bool _internal_has_send_id() const;
  public:
  void clear_send_id();
  int64_t send_id() const;
  void set_send_id(int64_t value);
  private:
  int64_t _internal_send_id() const;
  void _internal_set_send_id(int64_t value);
  public:

  // optional int64 time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // optional .XrPb.EChatType type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::XrPb::EChatType type() const;
  void set_type(::XrPb::EChatType value);
  private:
  ::XrPb::EChatType _internal_type() const;
  void _internal_set_type(::XrPb::EChatType value);
  public:

  // optional .XrPb.EChatMsgType msg_type = 5;
  bool has_msg_type() const;
  private:
  bool _internal_has_msg_type() const;
  public:
  void clear_msg_type();
  ::XrPb::EChatMsgType msg_type() const;
  void set_msg_type(::XrPb::EChatMsgType value);
  private:
  ::XrPb::EChatMsgType _internal_msg_type() const;
  void _internal_set_msg_type(::XrPb::EChatMsgType value);
  public:

  // optional int64 chat_id = 7;
  bool has_chat_id() const;
  private:
  bool _internal_has_chat_id() const;
  public:
  void clear_chat_id();
  int64_t chat_id() const;
  void set_chat_id(int64_t value);
  private:
  int64_t _internal_chat_id() const;
  void _internal_set_chat_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.ChatMsgData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::XrPb::ChatPlayerBaseData* player_;
  int64_t send_id_;
  int64_t time_;
  int type_;
  int msg_type_;
  int64_t chat_id_;
  friend struct ::TableStruct_client_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class RoleBaseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.RoleBaseInfo) */ {
 public:
  inline RoleBaseInfo() : RoleBaseInfo(nullptr) {}
  ~RoleBaseInfo() override;
  explicit constexpr RoleBaseInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleBaseInfo(const RoleBaseInfo& from);
  RoleBaseInfo(RoleBaseInfo&& from) noexcept
    : RoleBaseInfo() {
    *this = ::std::move(from);
  }

  inline RoleBaseInfo& operator=(const RoleBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleBaseInfo& operator=(RoleBaseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleBaseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleBaseInfo* internal_default_instance() {
    return reinterpret_cast<const RoleBaseInfo*>(
               &_RoleBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoleBaseInfo& a, RoleBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleBaseInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleBaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleBaseInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleBaseInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleBaseInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleBaseInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.RoleBaseInfo";
  }
  protected:
  explicit RoleBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSzRoleNameFieldNumber = 3,
    kMapidFieldNumber = 7,
    kPosFieldNumber = 8,
    kDwAccIdFieldNumber = 1,
    kDwRoleIdFieldNumber = 2,
    kN32CareerIDFieldNumber = 4,
    kBGenderFieldNumber = 5,
    kUn32LevelFieldNumber = 6,
  };
  // optional string szRoleName = 3;
  bool has_szrolename() const;
  private:
  bool _internal_has_szrolename() const;
  public:
  void clear_szrolename();
  const std::string& szrolename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_szrolename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_szrolename();
  PROTOBUF_NODISCARD std::string* release_szrolename();
  void set_allocated_szrolename(std::string* szrolename);
  private:
  const std::string& _internal_szrolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_szrolename(const std::string& value);
  std::string* _internal_mutable_szrolename();
  public:

  // optional string mapid = 7;
  bool has_mapid() const;
  private:
  bool _internal_has_mapid() const;
  public:
  void clear_mapid();
  const std::string& mapid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapid();
  PROTOBUF_NODISCARD std::string* release_mapid();
  void set_allocated_mapid(std::string* mapid);
  private:
  const std::string& _internal_mapid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapid(const std::string& value);
  std::string* _internal_mutable_mapid();
  public:

  // optional .XrPb.V3_POS pos = 8;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::XrPb::V3_POS& pos() const;
  PROTOBUF_NODISCARD ::XrPb::V3_POS* release_pos();
  ::XrPb::V3_POS* mutable_pos();
  void set_allocated_pos(::XrPb::V3_POS* pos);
  private:
  const ::XrPb::V3_POS& _internal_pos() const;
  ::XrPb::V3_POS* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::XrPb::V3_POS* pos);
  ::XrPb::V3_POS* unsafe_arena_release_pos();

  // optional int64 dwAccId = 1;
  bool has_dwaccid() const;
  private:
  bool _internal_has_dwaccid() const;
  public:
  void clear_dwaccid();
  int64_t dwaccid() const;
  void set_dwaccid(int64_t value);
  private:
  int64_t _internal_dwaccid() const;
  void _internal_set_dwaccid(int64_t value);
  public:

  // optional int64 dwRoleId = 2;
  bool has_dwroleid() const;
  private:
  bool _internal_has_dwroleid() const;
  public:
  void clear_dwroleid();
  int64_t dwroleid() const;
  void set_dwroleid(int64_t value);
  private:
  int64_t _internal_dwroleid() const;
  void _internal_set_dwroleid(int64_t value);
  public:

  // optional uint32 n32CareerID = 4;
  bool has_n32careerid() const;
  private:
  bool _internal_has_n32careerid() const;
  public:
  void clear_n32careerid();
  uint32_t n32careerid() const;
  void set_n32careerid(uint32_t value);
  private:
  uint32_t _internal_n32careerid() const;
  void _internal_set_n32careerid(uint32_t value);
  public:

  // optional uint32 bGender = 5;
  bool has_bgender() const;
  private:
  bool _internal_has_bgender() const;
  public:
  void clear_bgender();
  uint32_t bgender() const;
  void set_bgender(uint32_t value);
  private:
  uint32_t _internal_bgender() const;
  void _internal_set_bgender(uint32_t value);
  public:

  // optional uint32 un32Level = 6;
  bool has_un32level() const;
  private:
  bool _internal_has_un32level() const;
  public:
  void clear_un32level();
  uint32_t un32level() const;
  void set_un32level(uint32_t value);
  private:
  uint32_t _internal_un32level() const;
  void _internal_set_un32level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.RoleBaseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr szrolename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapid_;
  ::XrPb::V3_POS* pos_;
  int64_t dwaccid_;
  int64_t dwroleid_;
  uint32_t n32careerid_;
  uint32_t bgender_;
  uint32_t un32level_;
  friend struct ::TableStruct_client_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class ChatPlayerBaseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.ChatPlayerBaseData) */ {
 public:
  inline ChatPlayerBaseData() : ChatPlayerBaseData(nullptr) {}
  ~ChatPlayerBaseData() override;
  explicit constexpr ChatPlayerBaseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatPlayerBaseData(const ChatPlayerBaseData& from);
  ChatPlayerBaseData(ChatPlayerBaseData&& from) noexcept
    : ChatPlayerBaseData() {
    *this = ::std::move(from);
  }

  inline ChatPlayerBaseData& operator=(const ChatPlayerBaseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatPlayerBaseData& operator=(ChatPlayerBaseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatPlayerBaseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatPlayerBaseData* internal_default_instance() {
    return reinterpret_cast<const ChatPlayerBaseData*>(
               &_ChatPlayerBaseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChatPlayerBaseData& a, ChatPlayerBaseData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatPlayerBaseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatPlayerBaseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatPlayerBaseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatPlayerBaseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChatPlayerBaseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChatPlayerBaseData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatPlayerBaseData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.ChatPlayerBaseData";
  }
  protected:
  explicit ChatPlayerBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
  };
  // .XrPb.RoleBaseInfo role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::XrPb::RoleBaseInfo& role() const;
  PROTOBUF_NODISCARD ::XrPb::RoleBaseInfo* release_role();
  ::XrPb::RoleBaseInfo* mutable_role();
  void set_allocated_role(::XrPb::RoleBaseInfo* role);
  private:
  const ::XrPb::RoleBaseInfo& _internal_role() const;
  ::XrPb::RoleBaseInfo* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::XrPb::RoleBaseInfo* role);
  ::XrPb::RoleBaseInfo* unsafe_arena_release_role();

  // @@protoc_insertion_point(class_scope:XrPb.ChatPlayerBaseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::XrPb::RoleBaseInfo* role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class ScenePlayerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.ScenePlayerData) */ {
 public:
  inline ScenePlayerData() : ScenePlayerData(nullptr) {}
  ~ScenePlayerData() override;
  explicit constexpr ScenePlayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenePlayerData(const ScenePlayerData& from);
  ScenePlayerData(ScenePlayerData&& from) noexcept
    : ScenePlayerData() {
    *this = ::std::move(from);
  }

  inline ScenePlayerData& operator=(const ScenePlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenePlayerData& operator=(ScenePlayerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenePlayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenePlayerData* internal_default_instance() {
    return reinterpret_cast<const ScenePlayerData*>(
               &_ScenePlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ScenePlayerData& a, ScenePlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenePlayerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenePlayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenePlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenePlayerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScenePlayerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScenePlayerData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenePlayerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.ScenePlayerData";
  }
  protected:
  explicit ScenePlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
  };
  // .XrPb.RoleBaseInfo role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::XrPb::RoleBaseInfo& role() const;
  PROTOBUF_NODISCARD ::XrPb::RoleBaseInfo* release_role();
  ::XrPb::RoleBaseInfo* mutable_role();
  void set_allocated_role(::XrPb::RoleBaseInfo* role);
  private:
  const ::XrPb::RoleBaseInfo& _internal_role() const;
  ::XrPb::RoleBaseInfo* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::XrPb::RoleBaseInfo* role);
  ::XrPb::RoleBaseInfo* unsafe_arena_release_role();

  // @@protoc_insertion_point(class_scope:XrPb.ScenePlayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::XrPb::RoleBaseInfo* role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class SceneResultPlayerData final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.SceneResultPlayerData) */ {
 public:
  inline SceneResultPlayerData() : SceneResultPlayerData(nullptr) {}
  explicit constexpr SceneResultPlayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SceneResultPlayerData(const SceneResultPlayerData& from);
  SceneResultPlayerData(SceneResultPlayerData&& from) noexcept
    : SceneResultPlayerData() {
    *this = ::std::move(from);
  }

  inline SceneResultPlayerData& operator=(const SceneResultPlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneResultPlayerData& operator=(SceneResultPlayerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SceneResultPlayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SceneResultPlayerData* internal_default_instance() {
    return reinterpret_cast<const SceneResultPlayerData*>(
               &_SceneResultPlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SceneResultPlayerData& a, SceneResultPlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneResultPlayerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneResultPlayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SceneResultPlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SceneResultPlayerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SceneResultPlayerData& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SceneResultPlayerData& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.SceneResultPlayerData";
  }
  protected:
  explicit SceneResultPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.SceneResultPlayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fCommon_2eproto;
};
// -------------------------------------------------------------------

class V3_POS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.V3_POS) */ {
 public:
  inline V3_POS() : V3_POS(nullptr) {}
  ~V3_POS() override;
  explicit constexpr V3_POS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  V3_POS(const V3_POS& from);
  V3_POS(V3_POS&& from) noexcept
    : V3_POS() {
    *this = ::std::move(from);
  }

  inline V3_POS& operator=(const V3_POS& from) {
    CopyFrom(from);
    return *this;
  }
  inline V3_POS& operator=(V3_POS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const V3_POS& default_instance() {
    return *internal_default_instance();
  }
  static inline const V3_POS* internal_default_instance() {
    return reinterpret_cast<const V3_POS*>(
               &_V3_POS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(V3_POS& a, V3_POS& b) {
    a.Swap(&b);
  }
  inline void Swap(V3_POS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(V3_POS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  V3_POS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<V3_POS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const V3_POS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const V3_POS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V3_POS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.V3_POS";
  }
  protected:
  explicit V3_POS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // uint64 x = 1;
  void clear_x();
  uint64_t x() const;
  void set_x(uint64_t value);
  private:
  uint64_t _internal_x() const;
  void _internal_set_x(uint64_t value);
  public:

  // uint64 y = 2;
  void clear_y();
  uint64_t y() const;
  void set_y(uint64_t value);
  private:
  uint64_t _internal_y() const;
  void _internal_set_y(uint64_t value);
  public:

  // uint64 z = 3;
  void clear_z();
  uint64_t z() const;
  void set_z(uint64_t value);
  private:
  uint64_t _internal_z() const;
  void _internal_set_z(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.V3_POS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t x_;
  uint64_t y_;
  uint64_t z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fCommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Item

// uint32 id = 1;
inline void Item::clear_id() {
  id_ = 0u;
}
inline uint32_t Item::_internal_id() const {
  return id_;
}
inline uint32_t Item::id() const {
  // @@protoc_insertion_point(field_get:XrPb.Item.id)
  return _internal_id();
}
inline void Item::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void Item::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Item.id)
}

// uint32 num = 2;
inline void Item::clear_num() {
  num_ = 0u;
}
inline uint32_t Item::_internal_num() const {
  return num_;
}
inline uint32_t Item::num() const {
  // @@protoc_insertion_point(field_get:XrPb.Item.num)
  return _internal_num();
}
inline void Item::_internal_set_num(uint32_t value) {
  
  num_ = value;
}
inline void Item::set_num(uint32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:XrPb.Item.num)
}

// -------------------------------------------------------------------

// GameVersion

// optional string ResVer = 1;
inline bool GameVersion::_internal_has_resver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameVersion::has_resver() const {
  return _internal_has_resver();
}
inline void GameVersion::clear_resver() {
  resver_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameVersion::resver() const {
  // @@protoc_insertion_point(field_get:XrPb.GameVersion.ResVer)
  return _internal_resver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameVersion::set_resver(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 resver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.GameVersion.ResVer)
}
inline std::string* GameVersion::mutable_resver() {
  std::string* _s = _internal_mutable_resver();
  // @@protoc_insertion_point(field_mutable:XrPb.GameVersion.ResVer)
  return _s;
}
inline const std::string& GameVersion::_internal_resver() const {
  return resver_.Get();
}
inline void GameVersion::_internal_set_resver(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  resver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameVersion::_internal_mutable_resver() {
  _has_bits_[0] |= 0x00000001u;
  return resver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameVersion::release_resver() {
  // @@protoc_insertion_point(field_release:XrPb.GameVersion.ResVer)
  if (!_internal_has_resver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = resver_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (resver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    resver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GameVersion::set_allocated_resver(std::string* resver) {
  if (resver != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  resver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resver,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (resver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    resver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.GameVersion.ResVer)
}

// optional string AppVer = 2;
inline bool GameVersion::_internal_has_appver() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameVersion::has_appver() const {
  return _internal_has_appver();
}
inline void GameVersion::clear_appver() {
  appver_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GameVersion::appver() const {
  // @@protoc_insertion_point(field_get:XrPb.GameVersion.AppVer)
  return _internal_appver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameVersion::set_appver(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 appver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.GameVersion.AppVer)
}
inline std::string* GameVersion::mutable_appver() {
  std::string* _s = _internal_mutable_appver();
  // @@protoc_insertion_point(field_mutable:XrPb.GameVersion.AppVer)
  return _s;
}
inline const std::string& GameVersion::_internal_appver() const {
  return appver_.Get();
}
inline void GameVersion::_internal_set_appver(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  appver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameVersion::_internal_mutable_appver() {
  _has_bits_[0] |= 0x00000002u;
  return appver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameVersion::release_appver() {
  // @@protoc_insertion_point(field_release:XrPb.GameVersion.AppVer)
  if (!_internal_has_appver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = appver_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (appver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    appver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GameVersion::set_allocated_appver(std::string* appver) {
  if (appver != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  appver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appver,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (appver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    appver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.GameVersion.AppVer)
}

// -------------------------------------------------------------------

// FormData

// optional uint32 portrait = 1;
inline bool FormData::_internal_has_portrait() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FormData::has_portrait() const {
  return _internal_has_portrait();
}
inline void FormData::clear_portrait() {
  portrait_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t FormData::_internal_portrait() const {
  return portrait_;
}
inline uint32_t FormData::portrait() const {
  // @@protoc_insertion_point(field_get:XrPb.FormData.portrait)
  return _internal_portrait();
}
inline void FormData::_internal_set_portrait(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  portrait_ = value;
}
inline void FormData::set_portrait(uint32_t value) {
  _internal_set_portrait(value);
  // @@protoc_insertion_point(field_set:XrPb.FormData.portrait)
}

// optional uint32 background = 2;
inline bool FormData::_internal_has_background() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FormData::has_background() const {
  return _internal_has_background();
}
inline void FormData::clear_background() {
  background_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FormData::_internal_background() const {
  return background_;
}
inline uint32_t FormData::background() const {
  // @@protoc_insertion_point(field_get:XrPb.FormData.background)
  return _internal_background();
}
inline void FormData::_internal_set_background(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  background_ = value;
}
inline void FormData::set_background(uint32_t value) {
  _internal_set_background(value);
  // @@protoc_insertion_point(field_set:XrPb.FormData.background)
}

// -------------------------------------------------------------------

// ChatMsgData

// optional int64 Send_id = 1;
inline bool ChatMsgData::_internal_has_send_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChatMsgData::has_send_id() const {
  return _internal_has_send_id();
}
inline void ChatMsgData::clear_send_id() {
  send_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t ChatMsgData::_internal_send_id() const {
  return send_id_;
}
inline int64_t ChatMsgData::send_id() const {
  // @@protoc_insertion_point(field_get:XrPb.ChatMsgData.Send_id)
  return _internal_send_id();
}
inline void ChatMsgData::_internal_set_send_id(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  send_id_ = value;
}
inline void ChatMsgData::set_send_id(int64_t value) {
  _internal_set_send_id(value);
  // @@protoc_insertion_point(field_set:XrPb.ChatMsgData.Send_id)
}

// optional .XrPb.ChatPlayerBaseData player = 2;
inline bool ChatMsgData::_internal_has_player() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || player_ != nullptr);
  return value;
}
inline bool ChatMsgData::has_player() const {
  return _internal_has_player();
}
inline void ChatMsgData::clear_player() {
  if (player_ != nullptr) player_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::XrPb::ChatPlayerBaseData& ChatMsgData::_internal_player() const {
  const ::XrPb::ChatPlayerBaseData* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::ChatPlayerBaseData&>(
      ::XrPb::_ChatPlayerBaseData_default_instance_);
}
inline const ::XrPb::ChatPlayerBaseData& ChatMsgData::player() const {
  // @@protoc_insertion_point(field_get:XrPb.ChatMsgData.player)
  return _internal_player();
}
inline void ChatMsgData::unsafe_arena_set_allocated_player(
    ::XrPb::ChatPlayerBaseData* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.ChatMsgData.player)
}
inline ::XrPb::ChatPlayerBaseData* ChatMsgData::release_player() {
  _has_bits_[0] &= ~0x00000002u;
  ::XrPb::ChatPlayerBaseData* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::ChatPlayerBaseData* ChatMsgData::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:XrPb.ChatMsgData.player)
  _has_bits_[0] &= ~0x00000002u;
  ::XrPb::ChatPlayerBaseData* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::XrPb::ChatPlayerBaseData* ChatMsgData::_internal_mutable_player() {
  _has_bits_[0] |= 0x00000002u;
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::ChatPlayerBaseData>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::XrPb::ChatPlayerBaseData* ChatMsgData::mutable_player() {
  ::XrPb::ChatPlayerBaseData* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:XrPb.ChatMsgData.player)
  return _msg;
}
inline void ChatMsgData::set_allocated_player(::XrPb::ChatPlayerBaseData* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::ChatPlayerBaseData>::GetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:XrPb.ChatMsgData.player)
}

// optional int64 time = 3;
inline bool ChatMsgData::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChatMsgData::has_time() const {
  return _internal_has_time();
}
inline void ChatMsgData::clear_time() {
  time_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t ChatMsgData::_internal_time() const {
  return time_;
}
inline int64_t ChatMsgData::time() const {
  // @@protoc_insertion_point(field_get:XrPb.ChatMsgData.time)
  return _internal_time();
}
inline void ChatMsgData::_internal_set_time(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  time_ = value;
}
inline void ChatMsgData::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:XrPb.ChatMsgData.time)
}

// optional .XrPb.EChatType type = 4;
inline bool ChatMsgData::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChatMsgData::has_type() const {
  return _internal_has_type();
}
inline void ChatMsgData::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::XrPb::EChatType ChatMsgData::_internal_type() const {
  return static_cast< ::XrPb::EChatType >(type_);
}
inline ::XrPb::EChatType ChatMsgData::type() const {
  // @@protoc_insertion_point(field_get:XrPb.ChatMsgData.type)
  return _internal_type();
}
inline void ChatMsgData::_internal_set_type(::XrPb::EChatType value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void ChatMsgData::set_type(::XrPb::EChatType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:XrPb.ChatMsgData.type)
}

// optional .XrPb.EChatMsgType msg_type = 5;
inline bool ChatMsgData::_internal_has_msg_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ChatMsgData::has_msg_type() const {
  return _internal_has_msg_type();
}
inline void ChatMsgData::clear_msg_type() {
  msg_type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::XrPb::EChatMsgType ChatMsgData::_internal_msg_type() const {
  return static_cast< ::XrPb::EChatMsgType >(msg_type_);
}
inline ::XrPb::EChatMsgType ChatMsgData::msg_type() const {
  // @@protoc_insertion_point(field_get:XrPb.ChatMsgData.msg_type)
  return _internal_msg_type();
}
inline void ChatMsgData::_internal_set_msg_type(::XrPb::EChatMsgType value) {
  _has_bits_[0] |= 0x00000020u;
  msg_type_ = value;
}
inline void ChatMsgData::set_msg_type(::XrPb::EChatMsgType value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:XrPb.ChatMsgData.msg_type)
}

// optional string msg = 6;
inline bool ChatMsgData::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChatMsgData::has_msg() const {
  return _internal_has_msg();
}
inline void ChatMsgData::clear_msg() {
  msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChatMsgData::msg() const {
  // @@protoc_insertion_point(field_get:XrPb.ChatMsgData.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatMsgData::set_msg(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.ChatMsgData.msg)
}
inline std::string* ChatMsgData::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:XrPb.ChatMsgData.msg)
  return _s;
}
inline const std::string& ChatMsgData::_internal_msg() const {
  return msg_.Get();
}
inline void ChatMsgData::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChatMsgData::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChatMsgData::release_msg() {
  // @@protoc_insertion_point(field_release:XrPb.ChatMsgData.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChatMsgData::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.ChatMsgData.msg)
}

// optional int64 chat_id = 7;
inline bool ChatMsgData::_internal_has_chat_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ChatMsgData::has_chat_id() const {
  return _internal_has_chat_id();
}
inline void ChatMsgData::clear_chat_id() {
  chat_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000040u;
}
inline int64_t ChatMsgData::_internal_chat_id() const {
  return chat_id_;
}
inline int64_t ChatMsgData::chat_id() const {
  // @@protoc_insertion_point(field_get:XrPb.ChatMsgData.chat_id)
  return _internal_chat_id();
}
inline void ChatMsgData::_internal_set_chat_id(int64_t value) {
  _has_bits_[0] |= 0x00000040u;
  chat_id_ = value;
}
inline void ChatMsgData::set_chat_id(int64_t value) {
  _internal_set_chat_id(value);
  // @@protoc_insertion_point(field_set:XrPb.ChatMsgData.chat_id)
}

// -------------------------------------------------------------------

// RoleBaseInfo

// optional int64 dwAccId = 1;
inline bool RoleBaseInfo::_internal_has_dwaccid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RoleBaseInfo::has_dwaccid() const {
  return _internal_has_dwaccid();
}
inline void RoleBaseInfo::clear_dwaccid() {
  dwaccid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t RoleBaseInfo::_internal_dwaccid() const {
  return dwaccid_;
}
inline int64_t RoleBaseInfo::dwaccid() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleBaseInfo.dwAccId)
  return _internal_dwaccid();
}
inline void RoleBaseInfo::_internal_set_dwaccid(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  dwaccid_ = value;
}
inline void RoleBaseInfo::set_dwaccid(int64_t value) {
  _internal_set_dwaccid(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleBaseInfo.dwAccId)
}

// optional int64 dwRoleId = 2;
inline bool RoleBaseInfo::_internal_has_dwroleid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RoleBaseInfo::has_dwroleid() const {
  return _internal_has_dwroleid();
}
inline void RoleBaseInfo::clear_dwroleid() {
  dwroleid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t RoleBaseInfo::_internal_dwroleid() const {
  return dwroleid_;
}
inline int64_t RoleBaseInfo::dwroleid() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleBaseInfo.dwRoleId)
  return _internal_dwroleid();
}
inline void RoleBaseInfo::_internal_set_dwroleid(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  dwroleid_ = value;
}
inline void RoleBaseInfo::set_dwroleid(int64_t value) {
  _internal_set_dwroleid(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleBaseInfo.dwRoleId)
}

// optional string szRoleName = 3;
inline bool RoleBaseInfo::_internal_has_szrolename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoleBaseInfo::has_szrolename() const {
  return _internal_has_szrolename();
}
inline void RoleBaseInfo::clear_szrolename() {
  szrolename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoleBaseInfo::szrolename() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleBaseInfo.szRoleName)
  return _internal_szrolename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleBaseInfo::set_szrolename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 szrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.RoleBaseInfo.szRoleName)
}
inline std::string* RoleBaseInfo::mutable_szrolename() {
  std::string* _s = _internal_mutable_szrolename();
  // @@protoc_insertion_point(field_mutable:XrPb.RoleBaseInfo.szRoleName)
  return _s;
}
inline const std::string& RoleBaseInfo::_internal_szrolename() const {
  return szrolename_.Get();
}
inline void RoleBaseInfo::_internal_set_szrolename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  szrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoleBaseInfo::_internal_mutable_szrolename() {
  _has_bits_[0] |= 0x00000001u;
  return szrolename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoleBaseInfo::release_szrolename() {
  // @@protoc_insertion_point(field_release:XrPb.RoleBaseInfo.szRoleName)
  if (!_internal_has_szrolename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = szrolename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (szrolename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    szrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleBaseInfo::set_allocated_szrolename(std::string* szrolename) {
  if (szrolename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  szrolename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), szrolename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (szrolename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    szrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.RoleBaseInfo.szRoleName)
}

// optional uint32 n32CareerID = 4;
inline bool RoleBaseInfo::_internal_has_n32careerid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RoleBaseInfo::has_n32careerid() const {
  return _internal_has_n32careerid();
}
inline void RoleBaseInfo::clear_n32careerid() {
  n32careerid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t RoleBaseInfo::_internal_n32careerid() const {
  return n32careerid_;
}
inline uint32_t RoleBaseInfo::n32careerid() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleBaseInfo.n32CareerID)
  return _internal_n32careerid();
}
inline void RoleBaseInfo::_internal_set_n32careerid(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  n32careerid_ = value;
}
inline void RoleBaseInfo::set_n32careerid(uint32_t value) {
  _internal_set_n32careerid(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleBaseInfo.n32CareerID)
}

// optional uint32 bGender = 5;
inline bool RoleBaseInfo::_internal_has_bgender() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RoleBaseInfo::has_bgender() const {
  return _internal_has_bgender();
}
inline void RoleBaseInfo::clear_bgender() {
  bgender_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t RoleBaseInfo::_internal_bgender() const {
  return bgender_;
}
inline uint32_t RoleBaseInfo::bgender() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleBaseInfo.bGender)
  return _internal_bgender();
}
inline void RoleBaseInfo::_internal_set_bgender(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  bgender_ = value;
}
inline void RoleBaseInfo::set_bgender(uint32_t value) {
  _internal_set_bgender(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleBaseInfo.bGender)
}

// optional uint32 un32Level = 6;
inline bool RoleBaseInfo::_internal_has_un32level() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RoleBaseInfo::has_un32level() const {
  return _internal_has_un32level();
}
inline void RoleBaseInfo::clear_un32level() {
  un32level_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t RoleBaseInfo::_internal_un32level() const {
  return un32level_;
}
inline uint32_t RoleBaseInfo::un32level() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleBaseInfo.un32Level)
  return _internal_un32level();
}
inline void RoleBaseInfo::_internal_set_un32level(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  un32level_ = value;
}
inline void RoleBaseInfo::set_un32level(uint32_t value) {
  _internal_set_un32level(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleBaseInfo.un32Level)
}

// optional string mapid = 7;
inline bool RoleBaseInfo::_internal_has_mapid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoleBaseInfo::has_mapid() const {
  return _internal_has_mapid();
}
inline void RoleBaseInfo::clear_mapid() {
  mapid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RoleBaseInfo::mapid() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleBaseInfo.mapid)
  return _internal_mapid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleBaseInfo::set_mapid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 mapid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.RoleBaseInfo.mapid)
}
inline std::string* RoleBaseInfo::mutable_mapid() {
  std::string* _s = _internal_mutable_mapid();
  // @@protoc_insertion_point(field_mutable:XrPb.RoleBaseInfo.mapid)
  return _s;
}
inline const std::string& RoleBaseInfo::_internal_mapid() const {
  return mapid_.Get();
}
inline void RoleBaseInfo::_internal_set_mapid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mapid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoleBaseInfo::_internal_mutable_mapid() {
  _has_bits_[0] |= 0x00000002u;
  return mapid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoleBaseInfo::release_mapid() {
  // @@protoc_insertion_point(field_release:XrPb.RoleBaseInfo.mapid)
  if (!_internal_has_mapid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = mapid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mapid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleBaseInfo::set_allocated_mapid(std::string* mapid) {
  if (mapid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mapid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mapid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.RoleBaseInfo.mapid)
}

// optional .XrPb.V3_POS pos = 8;
inline bool RoleBaseInfo::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || pos_ != nullptr);
  return value;
}
inline bool RoleBaseInfo::has_pos() const {
  return _internal_has_pos();
}
inline void RoleBaseInfo::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::XrPb::V3_POS& RoleBaseInfo::_internal_pos() const {
  const ::XrPb::V3_POS* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::V3_POS&>(
      ::XrPb::_V3_POS_default_instance_);
}
inline const ::XrPb::V3_POS& RoleBaseInfo::pos() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleBaseInfo.pos)
  return _internal_pos();
}
inline void RoleBaseInfo::unsafe_arena_set_allocated_pos(
    ::XrPb::V3_POS* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.RoleBaseInfo.pos)
}
inline ::XrPb::V3_POS* RoleBaseInfo::release_pos() {
  _has_bits_[0] &= ~0x00000004u;
  ::XrPb::V3_POS* temp = pos_;
  pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::V3_POS* RoleBaseInfo::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:XrPb.RoleBaseInfo.pos)
  _has_bits_[0] &= ~0x00000004u;
  ::XrPb::V3_POS* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::XrPb::V3_POS* RoleBaseInfo::_internal_mutable_pos() {
  _has_bits_[0] |= 0x00000004u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::V3_POS>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::XrPb::V3_POS* RoleBaseInfo::mutable_pos() {
  ::XrPb::V3_POS* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:XrPb.RoleBaseInfo.pos)
  return _msg;
}
inline void RoleBaseInfo::set_allocated_pos(::XrPb::V3_POS* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::V3_POS>::GetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:XrPb.RoleBaseInfo.pos)
}

// -------------------------------------------------------------------

// ChatPlayerBaseData

// .XrPb.RoleBaseInfo role = 1;
inline bool ChatPlayerBaseData::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool ChatPlayerBaseData::has_role() const {
  return _internal_has_role();
}
inline void ChatPlayerBaseData::clear_role() {
  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
inline const ::XrPb::RoleBaseInfo& ChatPlayerBaseData::_internal_role() const {
  const ::XrPb::RoleBaseInfo* p = role_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::RoleBaseInfo&>(
      ::XrPb::_RoleBaseInfo_default_instance_);
}
inline const ::XrPb::RoleBaseInfo& ChatPlayerBaseData::role() const {
  // @@protoc_insertion_point(field_get:XrPb.ChatPlayerBaseData.role)
  return _internal_role();
}
inline void ChatPlayerBaseData::unsafe_arena_set_allocated_role(
    ::XrPb::RoleBaseInfo* role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.ChatPlayerBaseData.role)
}
inline ::XrPb::RoleBaseInfo* ChatPlayerBaseData::release_role() {
  
  ::XrPb::RoleBaseInfo* temp = role_;
  role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::RoleBaseInfo* ChatPlayerBaseData::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:XrPb.ChatPlayerBaseData.role)
  
  ::XrPb::RoleBaseInfo* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::XrPb::RoleBaseInfo* ChatPlayerBaseData::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::RoleBaseInfo>(GetArenaForAllocation());
    role_ = p;
  }
  return role_;
}
inline ::XrPb::RoleBaseInfo* ChatPlayerBaseData::mutable_role() {
  ::XrPb::RoleBaseInfo* _msg = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:XrPb.ChatPlayerBaseData.role)
  return _msg;
}
inline void ChatPlayerBaseData::set_allocated_role(::XrPb::RoleBaseInfo* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::RoleBaseInfo>::GetOwningArena(role);
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:XrPb.ChatPlayerBaseData.role)
}

// -------------------------------------------------------------------

// ScenePlayerData

// .XrPb.RoleBaseInfo role = 1;
inline bool ScenePlayerData::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool ScenePlayerData::has_role() const {
  return _internal_has_role();
}
inline void ScenePlayerData::clear_role() {
  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
inline const ::XrPb::RoleBaseInfo& ScenePlayerData::_internal_role() const {
  const ::XrPb::RoleBaseInfo* p = role_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::RoleBaseInfo&>(
      ::XrPb::_RoleBaseInfo_default_instance_);
}
inline const ::XrPb::RoleBaseInfo& ScenePlayerData::role() const {
  // @@protoc_insertion_point(field_get:XrPb.ScenePlayerData.role)
  return _internal_role();
}
inline void ScenePlayerData::unsafe_arena_set_allocated_role(
    ::XrPb::RoleBaseInfo* role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.ScenePlayerData.role)
}
inline ::XrPb::RoleBaseInfo* ScenePlayerData::release_role() {
  
  ::XrPb::RoleBaseInfo* temp = role_;
  role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::RoleBaseInfo* ScenePlayerData::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:XrPb.ScenePlayerData.role)
  
  ::XrPb::RoleBaseInfo* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::XrPb::RoleBaseInfo* ScenePlayerData::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::RoleBaseInfo>(GetArenaForAllocation());
    role_ = p;
  }
  return role_;
}
inline ::XrPb::RoleBaseInfo* ScenePlayerData::mutable_role() {
  ::XrPb::RoleBaseInfo* _msg = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:XrPb.ScenePlayerData.role)
  return _msg;
}
inline void ScenePlayerData::set_allocated_role(::XrPb::RoleBaseInfo* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete role_;
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::RoleBaseInfo>::GetOwningArena(role);
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:XrPb.ScenePlayerData.role)
}

// -------------------------------------------------------------------

// SceneResultPlayerData

// -------------------------------------------------------------------

// V3_POS

// uint64 x = 1;
inline void V3_POS::clear_x() {
  x_ = uint64_t{0u};
}
inline uint64_t V3_POS::_internal_x() const {
  return x_;
}
inline uint64_t V3_POS::x() const {
  // @@protoc_insertion_point(field_get:XrPb.V3_POS.x)
  return _internal_x();
}
inline void V3_POS::_internal_set_x(uint64_t value) {
  
  x_ = value;
}
inline void V3_POS::set_x(uint64_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:XrPb.V3_POS.x)
}

// uint64 y = 2;
inline void V3_POS::clear_y() {
  y_ = uint64_t{0u};
}
inline uint64_t V3_POS::_internal_y() const {
  return y_;
}
inline uint64_t V3_POS::y() const {
  // @@protoc_insertion_point(field_get:XrPb.V3_POS.y)
  return _internal_y();
}
inline void V3_POS::_internal_set_y(uint64_t value) {
  
  y_ = value;
}
inline void V3_POS::set_y(uint64_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:XrPb.V3_POS.y)
}

// uint64 z = 3;
inline void V3_POS::clear_z() {
  z_ = uint64_t{0u};
}
inline uint64_t V3_POS::_internal_z() const {
  return z_;
}
inline uint64_t V3_POS::z() const {
  // @@protoc_insertion_point(field_get:XrPb.V3_POS.z)
  return _internal_z();
}
inline void V3_POS::_internal_set_z(uint64_t value) {
  
  z_ = value;
}
inline void V3_POS::set_z(uint64_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:XrPb.V3_POS.z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XrPb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::XrPb::RoomType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::RoomType>() {
  return ::XrPb::RoomType_descriptor();
}
template <> struct is_proto_enum< ::XrPb::EItemId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::EItemId>() {
  return ::XrPb::EItemId_descriptor();
}
template <> struct is_proto_enum< ::XrPb::ResultCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::ResultCode>() {
  return ::XrPb::ResultCode_descriptor();
}
template <> struct is_proto_enum< ::XrPb::EChatMsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::EChatMsgType>() {
  return ::XrPb::EChatMsgType_descriptor();
}
template <> struct is_proto_enum< ::XrPb::EChatType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::EChatType>() {
  return ::XrPb::EChatType_descriptor();
}
template <> struct is_proto_enum< ::XrPb::PlayerStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::PlayerStatus>() {
  return ::XrPb::PlayerStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_2fCommon_2eproto
