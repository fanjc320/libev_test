// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/Common.proto

#include "client/Common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace XrPb {
constexpr Item::Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u)
  , num_(0u){}
struct ItemDefaultTypeInternal {
  constexpr ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemDefaultTypeInternal() {}
  union {
    Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemDefaultTypeInternal _Item_default_instance_;
constexpr GameVersion::GameVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GameVersionDefaultTypeInternal {
  constexpr GameVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameVersionDefaultTypeInternal() {}
  union {
    GameVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameVersionDefaultTypeInternal _GameVersion_default_instance_;
constexpr FormData::FormData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : portrait_(0u)
  , background_(0u){}
struct FormDataDefaultTypeInternal {
  constexpr FormDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormDataDefaultTypeInternal() {}
  union {
    FormData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormDataDefaultTypeInternal _FormData_default_instance_;
constexpr ChatMsgData::ChatMsgData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_(nullptr)
  , send_id_(int64_t{0})
  , time_(int64_t{0})
  , type_(0)

  , msg_type_(0)

  , chat_id_(int64_t{0}){}
struct ChatMsgDataDefaultTypeInternal {
  constexpr ChatMsgDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatMsgDataDefaultTypeInternal() {}
  union {
    ChatMsgData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatMsgDataDefaultTypeInternal _ChatMsgData_default_instance_;
constexpr RoleBaseInfo::RoleBaseInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : szrolename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mapid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pos_(nullptr)
  , dwaccid_(int64_t{0})
  , dwroleid_(int64_t{0})
  , n32careerid_(0u)
  , bgender_(0u)
  , un32level_(0u){}
struct RoleBaseInfoDefaultTypeInternal {
  constexpr RoleBaseInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoleBaseInfoDefaultTypeInternal() {}
  union {
    RoleBaseInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoleBaseInfoDefaultTypeInternal _RoleBaseInfo_default_instance_;
constexpr ChatPlayerBaseData::ChatPlayerBaseData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(nullptr){}
struct ChatPlayerBaseDataDefaultTypeInternal {
  constexpr ChatPlayerBaseDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatPlayerBaseDataDefaultTypeInternal() {}
  union {
    ChatPlayerBaseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatPlayerBaseDataDefaultTypeInternal _ChatPlayerBaseData_default_instance_;
constexpr ScenePlayerData::ScenePlayerData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(nullptr){}
struct ScenePlayerDataDefaultTypeInternal {
  constexpr ScenePlayerDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScenePlayerDataDefaultTypeInternal() {}
  union {
    ScenePlayerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScenePlayerDataDefaultTypeInternal _ScenePlayerData_default_instance_;
constexpr SceneResultPlayerData::SceneResultPlayerData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SceneResultPlayerDataDefaultTypeInternal {
  constexpr SceneResultPlayerDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SceneResultPlayerDataDefaultTypeInternal() {}
  union {
    SceneResultPlayerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SceneResultPlayerDataDefaultTypeInternal _SceneResultPlayerData_default_instance_;
constexpr V3_POS::V3_POS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(uint64_t{0u})
  , y_(uint64_t{0u})
  , z_(uint64_t{0u}){}
struct V3_POSDefaultTypeInternal {
  constexpr V3_POSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~V3_POSDefaultTypeInternal() {}
  union {
    V3_POS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT V3_POSDefaultTypeInternal _V3_POS_default_instance_;
}  // namespace XrPb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_2fCommon_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_client_2fCommon_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_2fCommon_2eproto = nullptr;

const uint32_t TableStruct_client_2fCommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Item, id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Item, num_),
  PROTOBUF_FIELD_OFFSET(::XrPb::GameVersion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::GameVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::GameVersion, resver_),
  PROTOBUF_FIELD_OFFSET(::XrPb::GameVersion, appver_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::XrPb::FormData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::FormData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::FormData, portrait_),
  PROTOBUF_FIELD_OFFSET(::XrPb::FormData, background_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::XrPb::ChatMsgData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::ChatMsgData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::ChatMsgData, send_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::ChatMsgData, player_),
  PROTOBUF_FIELD_OFFSET(::XrPb::ChatMsgData, time_),
  PROTOBUF_FIELD_OFFSET(::XrPb::ChatMsgData, type_),
  PROTOBUF_FIELD_OFFSET(::XrPb::ChatMsgData, msg_type_),
  PROTOBUF_FIELD_OFFSET(::XrPb::ChatMsgData, msg_),
  PROTOBUF_FIELD_OFFSET(::XrPb::ChatMsgData, chat_id_),
  2,
  1,
  3,
  4,
  5,
  0,
  6,
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleBaseInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleBaseInfo, dwaccid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleBaseInfo, dwroleid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleBaseInfo, szrolename_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleBaseInfo, n32careerid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleBaseInfo, bgender_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleBaseInfo, un32level_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleBaseInfo, mapid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleBaseInfo, pos_),
  3,
  4,
  0,
  5,
  6,
  7,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::ChatPlayerBaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::ChatPlayerBaseData, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::ScenePlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::ScenePlayerData, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::SceneResultPlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::V3_POS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::V3_POS, x_),
  PROTOBUF_FIELD_OFFSET(::XrPb::V3_POS, y_),
  PROTOBUF_FIELD_OFFSET(::XrPb::V3_POS, z_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::XrPb::Item)},
  { 8, 16, -1, sizeof(::XrPb::GameVersion)},
  { 18, 26, -1, sizeof(::XrPb::FormData)},
  { 28, 41, -1, sizeof(::XrPb::ChatMsgData)},
  { 48, 62, -1, sizeof(::XrPb::RoleBaseInfo)},
  { 70, -1, -1, sizeof(::XrPb::ChatPlayerBaseData)},
  { 77, -1, -1, sizeof(::XrPb::ScenePlayerData)},
  { 84, -1, -1, sizeof(::XrPb::SceneResultPlayerData)},
  { 90, -1, -1, sizeof(::XrPb::V3_POS)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_GameVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_FormData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_ChatMsgData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_RoleBaseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_ChatPlayerBaseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_ScenePlayerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_SceneResultPlayerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_V3_POS_default_instance_),
};

const char descriptor_table_protodef_client_2fCommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023client/Common.proto\022\004XrPb\"\037\n\004Item\022\n\n\002i"
  "d\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"M\n\013GameVersion\022\023\n\006R"
  "esVer\030\001 \001(\tH\000\210\001\001\022\023\n\006AppVer\030\002 \001(\tH\001\210\001\001B\t\n"
  "\007_ResVerB\t\n\007_AppVer\"V\n\010FormData\022\025\n\010portr"
  "ait\030\001 \001(\rH\000\210\001\001\022\027\n\nbackground\030\002 \001(\rH\001\210\001\001B"
  "\013\n\t_portraitB\r\n\013_background\"\246\002\n\013ChatMsgD"
  "ata\022\024\n\007Send_id\030\001 \001(\003H\000\210\001\001\022-\n\006player\030\002 \001("
  "\0132\030.XrPb.ChatPlayerBaseDataH\001\210\001\001\022\021\n\004time"
  "\030\003 \001(\003H\002\210\001\001\022\"\n\004type\030\004 \001(\0162\017.XrPb.EChatTy"
  "peH\003\210\001\001\022)\n\010msg_type\030\005 \001(\0162\022.XrPb.EChatMs"
  "gTypeH\004\210\001\001\022\020\n\003msg\030\006 \001(\tH\005\210\001\001\022\024\n\007chat_id\030"
  "\007 \001(\003H\006\210\001\001B\n\n\010_Send_idB\t\n\007_playerB\007\n\005_ti"
  "meB\007\n\005_typeB\013\n\t_msg_typeB\006\n\004_msgB\n\n\010_cha"
  "t_id\"\264\002\n\014RoleBaseInfo\022\024\n\007dwAccId\030\001 \001(\003H\000"
  "\210\001\001\022\025\n\010dwRoleId\030\002 \001(\003H\001\210\001\001\022\027\n\nszRoleName"
  "\030\003 \001(\tH\002\210\001\001\022\030\n\013n32CareerID\030\004 \001(\rH\003\210\001\001\022\024\n"
  "\007bGender\030\005 \001(\rH\004\210\001\001\022\026\n\tun32Level\030\006 \001(\rH\005"
  "\210\001\001\022\022\n\005mapid\030\007 \001(\tH\006\210\001\001\022\036\n\003pos\030\010 \001(\0132\014.X"
  "rPb.V3_POSH\007\210\001\001B\n\n\010_dwAccIdB\013\n\t_dwRoleId"
  "B\r\n\013_szRoleNameB\016\n\014_n32CareerIDB\n\n\010_bGen"
  "derB\014\n\n_un32LevelB\010\n\006_mapidB\006\n\004_pos\"6\n\022C"
  "hatPlayerBaseData\022 \n\004role\030\001 \001(\0132\022.XrPb.R"
  "oleBaseInfo\"3\n\017ScenePlayerData\022 \n\004role\030\001"
  " \001(\0132\022.XrPb.RoleBaseInfo\"\027\n\025SceneResultP"
  "layerData\")\n\006V3_POS\022\t\n\001x\030\001 \001(\004\022\t\n\001y\030\002 \001("
  "\004\022\t\n\001z\030\003 \001(\004*(\n\010RoomType\022\r\n\tRoom_None\020\000\022"
  "\r\n\tPvE_Robot\020\001*5\n\007EItemId\022\016\n\neItem_Free\020"
  "\000\022\014\n\010eItem_GP\020\001\022\014\n\010eItem_MB\020\002*\321\007\n\nResult"
  "Code\022\027\n\023Code_Common_Succeed\020\000\022\027\n\023Code_Co"
  "mmon_Failure\020\001\022!\n\034Code_Login_RoleNameCol"
  "lision\020\351\007\022\026\n\021Code_Login_NoRole\020\352\007\022\032\n\025Cod"
  "e_Login_RoleInGame\020\353\007\022\027\n\022Code_Login_Fail"
  "ure\020\354\007\022\032\n\025Code_Login_SystemStop\020\355\007\022\030\n\023Co"
  "de_Login_NoInGame\020\356\007\022\033\n\026Code_Login_InPun"
  "ishBan\020\357\007\022\035\n\030Code_Login_CheckTooOften\020\360\007"
  "\022\035\n\030Code_Login_HasNoPortrait\020\361\007\022!\n\034Code_"
  "Login_PortraitOutOfDate\020\362\007\022\037\n\032Code_Login"
  "_NoWorldChatItem\020\363\007\022$\n\037Code_Login_SendWo"
  "rldMsgTooOften\020\364\007\022 \n\033Code_Login_WorldCha"
  "tTooBusy\020\365\007\022\035\n\030Code_Login_InformUpLimit\020"
  "\366\007\022\036\n\031Code_Login_ReloginTimeout\020\367\007\022\036\n\031Co"
  "de_Login_ResVerNotRight\020\370\007\022\036\n\031Code_Login"
  "_AppVerNotRight\020\371\007\022\036\n\031Code_Login_Session"
  "Timeout\020\372\007\022\035\n\030Code_Login_DeviceNotSame\020\373"
  "\007\022#\n\036Code_Login_WorldChatLevelLimit\020\374\007\022\034"
  "\n\027Code_Login_NameNotRight\020\375\007\022\033\n\026Code_Log"
  "in_NameTooLong\020\376\007\022\037\n\032Code_Login_HasNoBac"
  "kground\020\377\007\022#\n\036Code_Login_BackgroundOutOf"
  "Date\020\200\010\022\035\n\030Code_Login_SystemKickout\020\201\010\022#"
  "\n\036Code_Login_ForbidChatNoDisplay\020\202\010\022\033\n\026C"
  "ode_Login_BeKickedOut\020\203\010\022\034\n\027Code_Login_C"
  "antFindRole\020\204\010\022!\n\034Code_Login_ForbidChatD"
  "isplay\020\205\010*#\n\014EChatMsgType\022\010\n\004TEXT\020\000\022\t\n\005V"
  "OICE\020\001*!\n\tEChatType\022\n\n\006FRIEND\020\000\022\010\n\004ROOM\020"
  "\001*\'\n\014PlayerStatus\022\013\n\007Offline\020\000\022\n\n\006Online"
  "\020\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_2fCommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_2fCommon_2eproto = {
  false, false, 2210, descriptor_table_protodef_client_2fCommon_2eproto, "client/Common.proto", 
  &descriptor_table_client_2fCommon_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_client_2fCommon_2eproto::offsets,
  file_level_metadata_client_2fCommon_2eproto, file_level_enum_descriptors_client_2fCommon_2eproto, file_level_service_descriptors_client_2fCommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_client_2fCommon_2eproto_getter() {
  return &descriptor_table_client_2fCommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_client_2fCommon_2eproto(&descriptor_table_client_2fCommon_2eproto);
namespace XrPb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_2fCommon_2eproto);
  return file_level_enum_descriptors_client_2fCommon_2eproto[0];
}
bool RoomType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EItemId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_2fCommon_2eproto);
  return file_level_enum_descriptors_client_2fCommon_2eproto[1];
}
bool EItemId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResultCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_2fCommon_2eproto);
  return file_level_enum_descriptors_client_2fCommon_2eproto[2];
}
bool ResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChatMsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_2fCommon_2eproto);
  return file_level_enum_descriptors_client_2fCommon_2eproto[3];
}
bool EChatMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChatType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_2fCommon_2eproto);
  return file_level_enum_descriptors_client_2fCommon_2eproto[4];
}
bool EChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_2fCommon_2eproto);
  return file_level_enum_descriptors_client_2fCommon_2eproto[5];
}
bool PlayerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Item::_Internal {
 public:
};

Item::Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Item)
}

inline void Item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(num_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:XrPb.Item)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Item::ArenaDtor(void* object) {
  Item* _this = reinterpret_cast< Item* >(object);
  (void)_this;
}
void Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 num = 2;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 num = 2;
  if (this->_internal_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Item::GetClassData() const { return &_class_data_; }

void Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Item *>(to)->MergeFrom(
      static_cast<const Item &>(from));
}


void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Item)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_num() != 0) {
    _internal_set_num(from._internal_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Item, num_)
      + sizeof(Item::num_)
      - PROTOBUF_FIELD_OFFSET(Item, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fCommon_2eproto_getter, &descriptor_table_client_2fCommon_2eproto_once,
      file_level_metadata_client_2fCommon_2eproto[0]);
}

// ===================================================================

class GameVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<GameVersion>()._has_bits_);
  static void set_has_resver(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appver(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GameVersion::GameVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.GameVersion)
}
GameVersion::GameVersion(const GameVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    resver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_resver()) {
    resver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resver(), 
      GetArenaForAllocation());
  }
  appver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    appver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_appver()) {
    appver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appver(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.GameVersion)
}

inline void GameVersion::SharedCtor() {
resver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  resver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
appver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  appver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameVersion::~GameVersion() {
  // @@protoc_insertion_point(destructor:XrPb.GameVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GameVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  resver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameVersion::ArenaDtor(void* object) {
  GameVersion* _this = reinterpret_cast< GameVersion* >(object);
  (void)_this;
}
void GameVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.GameVersion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      resver_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      appver_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string ResVer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_resver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.GameVersion.ResVer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string AppVer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_appver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.GameVersion.AppVer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameVersion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.GameVersion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string ResVer = 1;
  if (_internal_has_resver()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resver().data(), static_cast<int>(this->_internal_resver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.GameVersion.ResVer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resver(), target);
  }

  // optional string AppVer = 2;
  if (_internal_has_appver()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appver().data(), static_cast<int>(this->_internal_appver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.GameVersion.AppVer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_appver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.GameVersion)
  return target;
}

size_t GameVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.GameVersion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ResVer = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_resver());
    }

    // optional string AppVer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_appver());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GameVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameVersion::GetClassData() const { return &_class_data_; }

void GameVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GameVersion *>(to)->MergeFrom(
      static_cast<const GameVersion &>(from));
}


void GameVersion::MergeFrom(const GameVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.GameVersion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_resver(from._internal_resver());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_appver(from._internal_appver());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameVersion::CopyFrom(const GameVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.GameVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameVersion::IsInitialized() const {
  return true;
}

void GameVersion::InternalSwap(GameVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &resver_, lhs_arena,
      &other->resver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &appver_, lhs_arena,
      &other->appver_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GameVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fCommon_2eproto_getter, &descriptor_table_client_2fCommon_2eproto_once,
      file_level_metadata_client_2fCommon_2eproto[1]);
}

// ===================================================================

class FormData::_Internal {
 public:
  using HasBits = decltype(std::declval<FormData>()._has_bits_);
  static void set_has_portrait(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FormData::FormData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.FormData)
}
FormData::FormData(const FormData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&portrait_, &from.portrait_,
    static_cast<size_t>(reinterpret_cast<char*>(&background_) -
    reinterpret_cast<char*>(&portrait_)) + sizeof(background_));
  // @@protoc_insertion_point(copy_constructor:XrPb.FormData)
}

inline void FormData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&portrait_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&background_) -
    reinterpret_cast<char*>(&portrait_)) + sizeof(background_));
}

FormData::~FormData() {
  // @@protoc_insertion_point(destructor:XrPb.FormData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FormData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FormData::ArenaDtor(void* object) {
  FormData* _this = reinterpret_cast< FormData* >(object);
  (void)_this;
}
void FormData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormData::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.FormData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&portrait_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&background_) -
        reinterpret_cast<char*>(&portrait_)) + sizeof(background_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 portrait = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_portrait(&has_bits);
          portrait_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 background = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_background(&has_bits);
          background_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.FormData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 portrait = 1;
  if (_internal_has_portrait()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_portrait(), target);
  }

  // optional uint32 background = 2;
  if (_internal_has_background()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_background(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.FormData)
  return target;
}

size_t FormData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.FormData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 portrait = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_portrait());
    }

    // optional uint32 background = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_background());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FormData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormData::GetClassData() const { return &_class_data_; }

void FormData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FormData *>(to)->MergeFrom(
      static_cast<const FormData &>(from));
}


void FormData::MergeFrom(const FormData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.FormData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      portrait_ = from.portrait_;
    }
    if (cached_has_bits & 0x00000002u) {
      background_ = from.background_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormData::CopyFrom(const FormData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.FormData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormData::IsInitialized() const {
  return true;
}

void FormData::InternalSwap(FormData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormData, background_)
      + sizeof(FormData::background_)
      - PROTOBUF_FIELD_OFFSET(FormData, portrait_)>(
          reinterpret_cast<char*>(&portrait_),
          reinterpret_cast<char*>(&other->portrait_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fCommon_2eproto_getter, &descriptor_table_client_2fCommon_2eproto_once,
      file_level_metadata_client_2fCommon_2eproto[2]);
}

// ===================================================================

class ChatMsgData::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatMsgData>()._has_bits_);
  static void set_has_send_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::XrPb::ChatPlayerBaseData& player(const ChatMsgData* msg);
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::XrPb::ChatPlayerBaseData&
ChatMsgData::_Internal::player(const ChatMsgData* msg) {
  return *msg->player_;
}
ChatMsgData::ChatMsgData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.ChatMsgData)
}
ChatMsgData::ChatMsgData(const ChatMsgData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    player_ = new ::XrPb::ChatPlayerBaseData(*from.player_);
  } else {
    player_ = nullptr;
  }
  ::memcpy(&send_id_, &from.send_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&send_id_)) + sizeof(chat_id_));
  // @@protoc_insertion_point(copy_constructor:XrPb.ChatMsgData)
}

inline void ChatMsgData::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_id_) -
    reinterpret_cast<char*>(&player_)) + sizeof(chat_id_));
}

ChatMsgData::~ChatMsgData() {
  // @@protoc_insertion_point(destructor:XrPb.ChatMsgData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChatMsgData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_;
}

void ChatMsgData::ArenaDtor(void* object) {
  ChatMsgData* _this = reinterpret_cast< ChatMsgData* >(object);
  (void)_this;
}
void ChatMsgData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatMsgData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatMsgData::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.ChatMsgData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player_ != nullptr);
      player_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&send_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_id_) -
        reinterpret_cast<char*>(&send_id_)) + sizeof(chat_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMsgData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 Send_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_send_id(&has_bits);
          send_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.ChatPlayerBaseData player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.EChatType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::XrPb::EChatType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.EChatMsgType msg_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::XrPb::EChatMsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.ChatMsgData.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 chat_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_chat_id(&has_bits);
          chat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMsgData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.ChatMsgData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 Send_id = 1;
  if (_internal_has_send_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_send_id(), target);
  }

  // optional .XrPb.ChatPlayerBaseData player = 2;
  if (_internal_has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player(this), target, stream);
  }

  // optional int64 time = 3;
  if (_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  // optional .XrPb.EChatType type = 4;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional .XrPb.EChatMsgType msg_type = 5;
  if (_internal_has_msg_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_msg_type(), target);
  }

  // optional string msg = 6;
  if (_internal_has_msg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.ChatMsgData.msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_msg(), target);
  }

  // optional int64 chat_id = 7;
  if (_internal_has_chat_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_chat_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.ChatMsgData)
  return target;
}

size_t ChatMsgData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.ChatMsgData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string msg = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg());
    }

    // optional .XrPb.ChatPlayerBaseData player = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_);
    }

    // optional int64 Send_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_send_id());
    }

    // optional int64 time = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_time());
    }

    // optional .XrPb.EChatType type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .XrPb.EChatMsgType msg_type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_type());
    }

    // optional int64 chat_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_chat_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMsgData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatMsgData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMsgData::GetClassData() const { return &_class_data_; }

void ChatMsgData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatMsgData *>(to)->MergeFrom(
      static_cast<const ChatMsgData &>(from));
}


void ChatMsgData::MergeFrom(const ChatMsgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.ChatMsgData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_player()->::XrPb::ChatPlayerBaseData::MergeFrom(from._internal_player());
    }
    if (cached_has_bits & 0x00000004u) {
      send_id_ = from.send_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      msg_type_ = from.msg_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMsgData::CopyFrom(const ChatMsgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.ChatMsgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMsgData::IsInitialized() const {
  return true;
}

void ChatMsgData::InternalSwap(ChatMsgData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMsgData, chat_id_)
      + sizeof(ChatMsgData::chat_id_)
      - PROTOBUF_FIELD_OFFSET(ChatMsgData, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMsgData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fCommon_2eproto_getter, &descriptor_table_client_2fCommon_2eproto_once,
      file_level_metadata_client_2fCommon_2eproto[3]);
}

// ===================================================================

class RoleBaseInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleBaseInfo>()._has_bits_);
  static void set_has_dwaccid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dwroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_szrolename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_n32careerid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bgender(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_un32level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mapid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::XrPb::V3_POS& pos(const RoleBaseInfo* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::XrPb::V3_POS&
RoleBaseInfo::_Internal::pos(const RoleBaseInfo* msg) {
  return *msg->pos_;
}
RoleBaseInfo::RoleBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.RoleBaseInfo)
}
RoleBaseInfo::RoleBaseInfo(const RoleBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  szrolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    szrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_szrolename()) {
    szrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_szrolename(), 
      GetArenaForAllocation());
  }
  mapid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mapid()) {
    mapid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mapid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    pos_ = new ::XrPb::V3_POS(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&dwaccid_, &from.dwaccid_,
    static_cast<size_t>(reinterpret_cast<char*>(&un32level_) -
    reinterpret_cast<char*>(&dwaccid_)) + sizeof(un32level_));
  // @@protoc_insertion_point(copy_constructor:XrPb.RoleBaseInfo)
}

inline void RoleBaseInfo::SharedCtor() {
szrolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  szrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mapid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&un32level_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(un32level_));
}

RoleBaseInfo::~RoleBaseInfo() {
  // @@protoc_insertion_point(destructor:XrPb.RoleBaseInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoleBaseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  szrolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mapid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
}

void RoleBaseInfo::ArenaDtor(void* object) {
  RoleBaseInfo* _this = reinterpret_cast< RoleBaseInfo* >(object);
  (void)_this;
}
void RoleBaseInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleBaseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.RoleBaseInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      szrolename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      mapid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&dwaccid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&un32level_) -
        reinterpret_cast<char*>(&dwaccid_)) + sizeof(un32level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleBaseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 dwAccId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dwaccid(&has_bits);
          dwaccid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 dwRoleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_dwroleid(&has_bits);
          dwroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string szRoleName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_szrolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.RoleBaseInfo.szRoleName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 n32CareerID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_n32careerid(&has_bits);
          n32careerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bGender = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bgender(&has_bits);
          bgender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 un32Level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_un32level(&has_bits);
          un32level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string mapid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_mapid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.RoleBaseInfo.mapid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.V3_POS pos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleBaseInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.RoleBaseInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 dwAccId = 1;
  if (_internal_has_dwaccid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_dwaccid(), target);
  }

  // optional int64 dwRoleId = 2;
  if (_internal_has_dwroleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_dwroleid(), target);
  }

  // optional string szRoleName = 3;
  if (_internal_has_szrolename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_szrolename().data(), static_cast<int>(this->_internal_szrolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.RoleBaseInfo.szRoleName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_szrolename(), target);
  }

  // optional uint32 n32CareerID = 4;
  if (_internal_has_n32careerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_n32careerid(), target);
  }

  // optional uint32 bGender = 5;
  if (_internal_has_bgender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bgender(), target);
  }

  // optional uint32 un32Level = 6;
  if (_internal_has_un32level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_un32level(), target);
  }

  // optional string mapid = 7;
  if (_internal_has_mapid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapid().data(), static_cast<int>(this->_internal_mapid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.RoleBaseInfo.mapid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_mapid(), target);
  }

  // optional .XrPb.V3_POS pos = 8;
  if (_internal_has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.RoleBaseInfo)
  return target;
}

size_t RoleBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.RoleBaseInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string szRoleName = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_szrolename());
    }

    // optional string mapid = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mapid());
    }

    // optional .XrPb.V3_POS pos = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional int64 dwAccId = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_dwaccid());
    }

    // optional int64 dwRoleId = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_dwroleid());
    }

    // optional uint32 n32CareerID = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_n32careerid());
    }

    // optional uint32 bGender = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bgender());
    }

    // optional uint32 un32Level = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_un32level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleBaseInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleBaseInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleBaseInfo::GetClassData() const { return &_class_data_; }

void RoleBaseInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleBaseInfo *>(to)->MergeFrom(
      static_cast<const RoleBaseInfo &>(from));
}


void RoleBaseInfo::MergeFrom(const RoleBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.RoleBaseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_szrolename(from._internal_szrolename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_mapid(from._internal_mapid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_pos()->::XrPb::V3_POS::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000008u) {
      dwaccid_ = from.dwaccid_;
    }
    if (cached_has_bits & 0x00000010u) {
      dwroleid_ = from.dwroleid_;
    }
    if (cached_has_bits & 0x00000020u) {
      n32careerid_ = from.n32careerid_;
    }
    if (cached_has_bits & 0x00000040u) {
      bgender_ = from.bgender_;
    }
    if (cached_has_bits & 0x00000080u) {
      un32level_ = from.un32level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleBaseInfo::CopyFrom(const RoleBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.RoleBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBaseInfo::IsInitialized() const {
  return true;
}

void RoleBaseInfo::InternalSwap(RoleBaseInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &szrolename_, lhs_arena,
      &other->szrolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mapid_, lhs_arena,
      &other->mapid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleBaseInfo, un32level_)
      + sizeof(RoleBaseInfo::un32level_)
      - PROTOBUF_FIELD_OFFSET(RoleBaseInfo, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleBaseInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fCommon_2eproto_getter, &descriptor_table_client_2fCommon_2eproto_once,
      file_level_metadata_client_2fCommon_2eproto[4]);
}

// ===================================================================

class ChatPlayerBaseData::_Internal {
 public:
  static const ::XrPb::RoleBaseInfo& role(const ChatPlayerBaseData* msg);
};

const ::XrPb::RoleBaseInfo&
ChatPlayerBaseData::_Internal::role(const ChatPlayerBaseData* msg) {
  return *msg->role_;
}
ChatPlayerBaseData::ChatPlayerBaseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.ChatPlayerBaseData)
}
ChatPlayerBaseData::ChatPlayerBaseData(const ChatPlayerBaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::XrPb::RoleBaseInfo(*from.role_);
  } else {
    role_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.ChatPlayerBaseData)
}

inline void ChatPlayerBaseData::SharedCtor() {
role_ = nullptr;
}

ChatPlayerBaseData::~ChatPlayerBaseData() {
  // @@protoc_insertion_point(destructor:XrPb.ChatPlayerBaseData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChatPlayerBaseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void ChatPlayerBaseData::ArenaDtor(void* object) {
  ChatPlayerBaseData* _this = reinterpret_cast< ChatPlayerBaseData* >(object);
  (void)_this;
}
void ChatPlayerBaseData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatPlayerBaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatPlayerBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.ChatPlayerBaseData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatPlayerBaseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.RoleBaseInfo role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatPlayerBaseData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.ChatPlayerBaseData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.RoleBaseInfo role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.ChatPlayerBaseData)
  return target;
}

size_t ChatPlayerBaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.ChatPlayerBaseData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.RoleBaseInfo role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatPlayerBaseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChatPlayerBaseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatPlayerBaseData::GetClassData() const { return &_class_data_; }

void ChatPlayerBaseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChatPlayerBaseData *>(to)->MergeFrom(
      static_cast<const ChatPlayerBaseData &>(from));
}


void ChatPlayerBaseData::MergeFrom(const ChatPlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.ChatPlayerBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::RoleBaseInfo::MergeFrom(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatPlayerBaseData::CopyFrom(const ChatPlayerBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.ChatPlayerBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatPlayerBaseData::IsInitialized() const {
  return true;
}

void ChatPlayerBaseData::InternalSwap(ChatPlayerBaseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatPlayerBaseData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fCommon_2eproto_getter, &descriptor_table_client_2fCommon_2eproto_once,
      file_level_metadata_client_2fCommon_2eproto[5]);
}

// ===================================================================

class ScenePlayerData::_Internal {
 public:
  static const ::XrPb::RoleBaseInfo& role(const ScenePlayerData* msg);
};

const ::XrPb::RoleBaseInfo&
ScenePlayerData::_Internal::role(const ScenePlayerData* msg) {
  return *msg->role_;
}
ScenePlayerData::ScenePlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.ScenePlayerData)
}
ScenePlayerData::ScenePlayerData(const ScenePlayerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::XrPb::RoleBaseInfo(*from.role_);
  } else {
    role_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.ScenePlayerData)
}

inline void ScenePlayerData::SharedCtor() {
role_ = nullptr;
}

ScenePlayerData::~ScenePlayerData() {
  // @@protoc_insertion_point(destructor:XrPb.ScenePlayerData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ScenePlayerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void ScenePlayerData::ArenaDtor(void* object) {
  ScenePlayerData* _this = reinterpret_cast< ScenePlayerData* >(object);
  (void)_this;
}
void ScenePlayerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScenePlayerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScenePlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.ScenePlayerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenePlayerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.RoleBaseInfo role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenePlayerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.ScenePlayerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.RoleBaseInfo role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.ScenePlayerData)
  return target;
}

size_t ScenePlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.ScenePlayerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.RoleBaseInfo role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenePlayerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScenePlayerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenePlayerData::GetClassData() const { return &_class_data_; }

void ScenePlayerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScenePlayerData *>(to)->MergeFrom(
      static_cast<const ScenePlayerData &>(from));
}


void ScenePlayerData::MergeFrom(const ScenePlayerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.ScenePlayerData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::RoleBaseInfo::MergeFrom(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenePlayerData::CopyFrom(const ScenePlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.ScenePlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayerData::IsInitialized() const {
  return true;
}

void ScenePlayerData::InternalSwap(ScenePlayerData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenePlayerData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fCommon_2eproto_getter, &descriptor_table_client_2fCommon_2eproto_once,
      file_level_metadata_client_2fCommon_2eproto[6]);
}

// ===================================================================

class SceneResultPlayerData::_Internal {
 public:
};

SceneResultPlayerData::SceneResultPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.SceneResultPlayerData)
}
SceneResultPlayerData::SceneResultPlayerData(const SceneResultPlayerData& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.SceneResultPlayerData)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SceneResultPlayerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SceneResultPlayerData::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SceneResultPlayerData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fCommon_2eproto_getter, &descriptor_table_client_2fCommon_2eproto_once,
      file_level_metadata_client_2fCommon_2eproto[7]);
}

// ===================================================================

class V3_POS::_Internal {
 public:
};

V3_POS::V3_POS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.V3_POS)
}
V3_POS::V3_POS(const V3_POS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:XrPb.V3_POS)
}

inline void V3_POS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

V3_POS::~V3_POS() {
  // @@protoc_insertion_point(destructor:XrPb.V3_POS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void V3_POS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void V3_POS::ArenaDtor(void* object) {
  V3_POS* _this = reinterpret_cast< V3_POS* >(object);
  (void)_this;
}
void V3_POS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void V3_POS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void V3_POS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.V3_POS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* V3_POS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* V3_POS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.V3_POS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_x(), target);
  }

  // uint64 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_y(), target);
  }

  // uint64 z = 3;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.V3_POS)
  return target;
}

size_t V3_POS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.V3_POS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_x());
  }

  // uint64 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_y());
  }

  // uint64 z = 3;
  if (this->_internal_z() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData V3_POS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    V3_POS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*V3_POS::GetClassData() const { return &_class_data_; }

void V3_POS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<V3_POS *>(to)->MergeFrom(
      static_cast<const V3_POS &>(from));
}


void V3_POS::MergeFrom(const V3_POS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.V3_POS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from._internal_z() != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void V3_POS::CopyFrom(const V3_POS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.V3_POS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V3_POS::IsInitialized() const {
  return true;
}

void V3_POS::InternalSwap(V3_POS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(V3_POS, z_)
      + sizeof(V3_POS::z_)
      - PROTOBUF_FIELD_OFFSET(V3_POS, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata V3_POS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fCommon_2eproto_getter, &descriptor_table_client_2fCommon_2eproto_once,
      file_level_metadata_client_2fCommon_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XrPb::Item* Arena::CreateMaybeMessage< ::XrPb::Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::GameVersion* Arena::CreateMaybeMessage< ::XrPb::GameVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::GameVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::FormData* Arena::CreateMaybeMessage< ::XrPb::FormData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::FormData >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::ChatMsgData* Arena::CreateMaybeMessage< ::XrPb::ChatMsgData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::ChatMsgData >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::RoleBaseInfo* Arena::CreateMaybeMessage< ::XrPb::RoleBaseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::RoleBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::ChatPlayerBaseData* Arena::CreateMaybeMessage< ::XrPb::ChatPlayerBaseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::ChatPlayerBaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::ScenePlayerData* Arena::CreateMaybeMessage< ::XrPb::ScenePlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::ScenePlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::SceneResultPlayerData* Arena::CreateMaybeMessage< ::XrPb::SceneResultPlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::SceneResultPlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::V3_POS* Arena::CreateMaybeMessage< ::XrPb::V3_POS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::V3_POS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
