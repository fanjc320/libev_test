// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/MsgMatch.proto

#include "client/MsgMatch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace XrPb {
constexpr MsgMod_Match::MsgMod_Match(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MsgMod_MatchDefaultTypeInternal {
  constexpr MsgMod_MatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgMod_MatchDefaultTypeInternal() {}
  union {
    MsgMod_Match _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgMod_MatchDefaultTypeInternal _MsgMod_Match_default_instance_;
constexpr RoomInfoData::RoomInfoData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roomid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mapid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0u){}
struct RoomInfoDataDefaultTypeInternal {
  constexpr RoomInfoDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoomInfoDataDefaultTypeInternal() {}
  union {
    RoomInfoData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoomInfoDataDefaultTypeInternal _RoomInfoData_default_instance_;
constexpr Msg_Home_Enter_CS::Msg_Home_Enter_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mapid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Msg_Home_Enter_CSDefaultTypeInternal {
  constexpr Msg_Home_Enter_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_Home_Enter_CSDefaultTypeInternal() {}
  union {
    Msg_Home_Enter_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_Home_Enter_CSDefaultTypeInternal _Msg_Home_Enter_CS_default_instance_;
constexpr Msg_Home_Enter_SC::Msg_Home_Enter_SC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playersession_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_(nullptr)
  , convid_(0u){}
struct Msg_Home_Enter_SCDefaultTypeInternal {
  constexpr Msg_Home_Enter_SCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_Home_Enter_SCDefaultTypeInternal() {}
  union {
    Msg_Home_Enter_SC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_Home_Enter_SCDefaultTypeInternal _Msg_Home_Enter_SC_default_instance_;
constexpr Msg_PlayHall_Enter_CS::Msg_PlayHall_Enter_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mapid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Msg_PlayHall_Enter_CSDefaultTypeInternal {
  constexpr Msg_PlayHall_Enter_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_PlayHall_Enter_CSDefaultTypeInternal() {}
  union {
    Msg_PlayHall_Enter_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_PlayHall_Enter_CSDefaultTypeInternal _Msg_PlayHall_Enter_CS_default_instance_;
constexpr Msg_PlayHall_Enter_SC::Msg_PlayHall_Enter_SC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playersession_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_(nullptr)
  , convid_(0u){}
struct Msg_PlayHall_Enter_SCDefaultTypeInternal {
  constexpr Msg_PlayHall_Enter_SCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_PlayHall_Enter_SCDefaultTypeInternal() {}
  union {
    Msg_PlayHall_Enter_SC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_PlayHall_Enter_SCDefaultTypeInternal _Msg_PlayHall_Enter_SC_default_instance_;
constexpr Msg_Dup_Enter_CS::Msg_Dup_Enter_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mapid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Msg_Dup_Enter_CSDefaultTypeInternal {
  constexpr Msg_Dup_Enter_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_Dup_Enter_CSDefaultTypeInternal() {}
  union {
    Msg_Dup_Enter_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_Dup_Enter_CSDefaultTypeInternal _Msg_Dup_Enter_CS_default_instance_;
constexpr Msg_Dup_Enter_SC::Msg_Dup_Enter_SC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playersession_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , map_(nullptr)
  , convid_(0u){}
struct Msg_Dup_Enter_SCDefaultTypeInternal {
  constexpr Msg_Dup_Enter_SCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_Dup_Enter_SCDefaultTypeInternal() {}
  union {
    Msg_Dup_Enter_SC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_Dup_Enter_SCDefaultTypeInternal _Msg_Dup_Enter_SC_default_instance_;
constexpr Msg_Member_leave_PUSH::Msg_Member_leave_PUSH(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roleid_(int64_t{0}){}
struct Msg_Member_leave_PUSHDefaultTypeInternal {
  constexpr Msg_Member_leave_PUSHDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_Member_leave_PUSHDefaultTypeInternal() {}
  union {
    Msg_Member_leave_PUSH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_Member_leave_PUSHDefaultTypeInternal _Msg_Member_leave_PUSH_default_instance_;
}  // namespace XrPb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_2fMsgMatch_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_client_2fMsgMatch_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_2fMsgMatch_2eproto = nullptr;

const uint32_t TableStruct_client_2fMsgMatch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::MsgMod_Match, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoomInfoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoomInfoData, roomid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoomInfoData, mapid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoomInfoData, ip_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoomInfoData, port_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoomInfoData, session_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Home_Enter_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Home_Enter_CS, mapid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Home_Enter_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Home_Enter_SC, map_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Home_Enter_SC, playersession_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Home_Enter_SC, convid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_PlayHall_Enter_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_PlayHall_Enter_CS, mapid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_PlayHall_Enter_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_PlayHall_Enter_SC, map_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_PlayHall_Enter_SC, playersession_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_PlayHall_Enter_SC, convid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Dup_Enter_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Dup_Enter_CS, mapid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Dup_Enter_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Dup_Enter_SC, map_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Dup_Enter_SC, playersession_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Dup_Enter_SC, convid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Member_leave_PUSH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Member_leave_PUSH, roleid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::XrPb::MsgMod_Match)},
  { 6, -1, -1, sizeof(::XrPb::RoomInfoData)},
  { 17, -1, -1, sizeof(::XrPb::Msg_Home_Enter_CS)},
  { 24, -1, -1, sizeof(::XrPb::Msg_Home_Enter_SC)},
  { 33, -1, -1, sizeof(::XrPb::Msg_PlayHall_Enter_CS)},
  { 40, -1, -1, sizeof(::XrPb::Msg_PlayHall_Enter_SC)},
  { 49, -1, -1, sizeof(::XrPb::Msg_Dup_Enter_CS)},
  { 56, -1, -1, sizeof(::XrPb::Msg_Dup_Enter_SC)},
  { 65, -1, -1, sizeof(::XrPb::Msg_Member_leave_PUSH)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_MsgMod_Match_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_RoomInfoData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_Home_Enter_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_Home_Enter_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_PlayHall_Enter_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_PlayHall_Enter_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_Dup_Enter_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_Dup_Enter_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_Member_leave_PUSH_default_instance_),
};

const char descriptor_table_protodef_client_2fMsgMatch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025client/MsgMatch.proto\022\004XrPb\"\266\001\n\014MsgMod"
  "_Match\"\245\001\n\005MsgId\022\014\n\010Msg_None\020\000\022\025\n\021Msg_Ho"
  "me_Enter_CS\020\001\022\025\n\021Msg_Home_Enter_SC\020\002\022\031\n\025"
  "Msg_PlayHall_Enter_CS\020\003\022\031\n\025Msg_PlayHall_"
  "Enter_SC\020\004\022\024\n\020Msg_Dup_Enter_CS\020\005\022\024\n\020Msg_"
  "Dup_Enter_SC\020\006\"X\n\014RoomInfoData\022\016\n\006roomId"
  "\030\001 \001(\t\022\r\n\005mapId\030\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022\014\n\004por"
  "t\030\004 \001(\r\022\017\n\007session\030\005 \001(\t\"\"\n\021Msg_Home_Ent"
  "er_CS\022\r\n\005mapid\030\001 \001(\t\"[\n\021Msg_Home_Enter_S"
  "C\022\037\n\003map\030\001 \001(\0132\022.XrPb.RoomInfoData\022\025\n\rpl"
  "ayerSession\030\002 \001(\t\022\016\n\006convid\030\003 \001(\r\"&\n\025Msg"
  "_PlayHall_Enter_CS\022\r\n\005mapid\030\001 \001(\t\"_\n\025Msg"
  "_PlayHall_Enter_SC\022\037\n\003map\030\001 \001(\0132\022.XrPb.R"
  "oomInfoData\022\025\n\rplayerSession\030\002 \001(\t\022\016\n\006co"
  "nvid\030\003 \001(\r\"!\n\020Msg_Dup_Enter_CS\022\r\n\005mapid\030"
  "\001 \001(\t\"Z\n\020Msg_Dup_Enter_SC\022\037\n\003map\030\001 \001(\0132\022"
  ".XrPb.RoomInfoData\022\025\n\rplayerSession\030\002 \001("
  "\t\022\016\n\006convid\030\003 \001(\r\"\'\n\025Msg_Member_leave_PU"
  "SH\022\016\n\006roleid\030\001 \001(\003b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_2fMsgMatch_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_2fMsgMatch_2eproto = {
  false, false, 746, descriptor_table_protodef_client_2fMsgMatch_2eproto, "client/MsgMatch.proto", 
  &descriptor_table_client_2fMsgMatch_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_client_2fMsgMatch_2eproto::offsets,
  file_level_metadata_client_2fMsgMatch_2eproto, file_level_enum_descriptors_client_2fMsgMatch_2eproto, file_level_service_descriptors_client_2fMsgMatch_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_client_2fMsgMatch_2eproto_getter() {
  return &descriptor_table_client_2fMsgMatch_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_client_2fMsgMatch_2eproto(&descriptor_table_client_2fMsgMatch_2eproto);
namespace XrPb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgMod_Match_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_2fMsgMatch_2eproto);
  return file_level_enum_descriptors_client_2fMsgMatch_2eproto[0];
}
bool MsgMod_Match_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MsgMod_Match_MsgId MsgMod_Match::Msg_None;
constexpr MsgMod_Match_MsgId MsgMod_Match::Msg_Home_Enter_CS;
constexpr MsgMod_Match_MsgId MsgMod_Match::Msg_Home_Enter_SC;
constexpr MsgMod_Match_MsgId MsgMod_Match::Msg_PlayHall_Enter_CS;
constexpr MsgMod_Match_MsgId MsgMod_Match::Msg_PlayHall_Enter_SC;
constexpr MsgMod_Match_MsgId MsgMod_Match::Msg_Dup_Enter_CS;
constexpr MsgMod_Match_MsgId MsgMod_Match::Msg_Dup_Enter_SC;
constexpr MsgMod_Match_MsgId MsgMod_Match::MsgId_MIN;
constexpr MsgMod_Match_MsgId MsgMod_Match::MsgId_MAX;
constexpr int MsgMod_Match::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MsgMod_Match::_Internal {
 public:
};

MsgMod_Match::MsgMod_Match(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.MsgMod_Match)
}
MsgMod_Match::MsgMod_Match(const MsgMod_Match& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.MsgMod_Match)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgMod_Match::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgMod_Match::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgMod_Match::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgMatch_2eproto_getter, &descriptor_table_client_2fMsgMatch_2eproto_once,
      file_level_metadata_client_2fMsgMatch_2eproto[0]);
}

// ===================================================================

class RoomInfoData::_Internal {
 public:
};

RoomInfoData::RoomInfoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.RoomInfoData)
}
RoomInfoData::RoomInfoData(const RoomInfoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomid().empty()) {
    roomid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roomid(), 
      GetArenaForAllocation());
  }
  mapid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapid().empty()) {
    mapid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mapid(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session().empty()) {
    session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:XrPb.RoomInfoData)
}

inline void RoomInfoData::SharedCtor() {
roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mapid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
port_ = 0u;
}

RoomInfoData::~RoomInfoData() {
  // @@protoc_insertion_point(destructor:XrPb.RoomInfoData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoomInfoData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mapid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomInfoData::ArenaDtor(void* object) {
  RoomInfoData* _this = reinterpret_cast< RoomInfoData* >(object);
  (void)_this;
}
void RoomInfoData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomInfoData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoomInfoData::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.RoomInfoData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_.ClearToEmpty();
  mapid_.ClearToEmpty();
  ip_.ClearToEmpty();
  session_.ClearToEmpty();
  port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomInfoData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roomid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.RoomInfoData.roomId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mapId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mapid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.RoomInfoData.mapId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.RoomInfoData.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.RoomInfoData.session"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomInfoData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.RoomInfoData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomId = 1;
  if (!this->_internal_roomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomid().data(), static_cast<int>(this->_internal_roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.RoomInfoData.roomId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roomid(), target);
  }

  // string mapId = 2;
  if (!this->_internal_mapid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapid().data(), static_cast<int>(this->_internal_mapid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.RoomInfoData.mapId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mapid(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.RoomInfoData.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port(), target);
  }

  // string session = 5;
  if (!this->_internal_session().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.RoomInfoData.session");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_session(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.RoomInfoData)
  return target;
}

size_t RoomInfoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.RoomInfoData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomId = 1;
  if (!this->_internal_roomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomid());
  }

  // string mapId = 2;
  if (!this->_internal_mapid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapid());
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string session = 5;
  if (!this->_internal_session().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session());
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomInfoData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoomInfoData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomInfoData::GetClassData() const { return &_class_data_; }

void RoomInfoData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoomInfoData *>(to)->MergeFrom(
      static_cast<const RoomInfoData &>(from));
}


void RoomInfoData::MergeFrom(const RoomInfoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.RoomInfoData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomid().empty()) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (!from._internal_mapid().empty()) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from._internal_session().empty()) {
    _internal_set_session(from._internal_session());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomInfoData::CopyFrom(const RoomInfoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.RoomInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfoData::IsInitialized() const {
  return true;
}

void RoomInfoData::InternalSwap(RoomInfoData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roomid_, lhs_arena,
      &other->roomid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mapid_, lhs_arena,
      &other->mapid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_, lhs_arena,
      &other->session_, rhs_arena
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInfoData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgMatch_2eproto_getter, &descriptor_table_client_2fMsgMatch_2eproto_once,
      file_level_metadata_client_2fMsgMatch_2eproto[1]);
}

// ===================================================================

class Msg_Home_Enter_CS::_Internal {
 public:
};

Msg_Home_Enter_CS::Msg_Home_Enter_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_Home_Enter_CS)
}
Msg_Home_Enter_CS::Msg_Home_Enter_CS(const Msg_Home_Enter_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mapid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapid().empty()) {
    mapid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mapid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_Home_Enter_CS)
}

inline void Msg_Home_Enter_CS::SharedCtor() {
mapid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Msg_Home_Enter_CS::~Msg_Home_Enter_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_Home_Enter_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_Home_Enter_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mapid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_Home_Enter_CS::ArenaDtor(void* object) {
  Msg_Home_Enter_CS* _this = reinterpret_cast< Msg_Home_Enter_CS* >(object);
  (void)_this;
}
void Msg_Home_Enter_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_Home_Enter_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_Home_Enter_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_Home_Enter_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_Home_Enter_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mapid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_Home_Enter_CS.mapid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_Home_Enter_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_Home_Enter_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mapid = 1;
  if (!this->_internal_mapid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapid().data(), static_cast<int>(this->_internal_mapid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_Home_Enter_CS.mapid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mapid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_Home_Enter_CS)
  return target;
}

size_t Msg_Home_Enter_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_Home_Enter_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mapid = 1;
  if (!this->_internal_mapid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_Home_Enter_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_Home_Enter_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_Home_Enter_CS::GetClassData() const { return &_class_data_; }

void Msg_Home_Enter_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_Home_Enter_CS *>(to)->MergeFrom(
      static_cast<const Msg_Home_Enter_CS &>(from));
}


void Msg_Home_Enter_CS::MergeFrom(const Msg_Home_Enter_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_Home_Enter_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mapid().empty()) {
    _internal_set_mapid(from._internal_mapid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_Home_Enter_CS::CopyFrom(const Msg_Home_Enter_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_Home_Enter_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Home_Enter_CS::IsInitialized() const {
  return true;
}

void Msg_Home_Enter_CS::InternalSwap(Msg_Home_Enter_CS* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mapid_, lhs_arena,
      &other->mapid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Home_Enter_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgMatch_2eproto_getter, &descriptor_table_client_2fMsgMatch_2eproto_once,
      file_level_metadata_client_2fMsgMatch_2eproto[2]);
}

// ===================================================================

class Msg_Home_Enter_SC::_Internal {
 public:
  static const ::XrPb::RoomInfoData& map(const Msg_Home_Enter_SC* msg);
};

const ::XrPb::RoomInfoData&
Msg_Home_Enter_SC::_Internal::map(const Msg_Home_Enter_SC* msg) {
  return *msg->map_;
}
Msg_Home_Enter_SC::Msg_Home_Enter_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_Home_Enter_SC)
}
Msg_Home_Enter_SC::Msg_Home_Enter_SC(const Msg_Home_Enter_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playersession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    playersession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playersession().empty()) {
    playersession_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playersession(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_map()) {
    map_ = new ::XrPb::RoomInfoData(*from.map_);
  } else {
    map_ = nullptr;
  }
  convid_ = from.convid_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_Home_Enter_SC)
}

inline void Msg_Home_Enter_SC::SharedCtor() {
playersession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  playersession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&map_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&convid_) -
    reinterpret_cast<char*>(&map_)) + sizeof(convid_));
}

Msg_Home_Enter_SC::~Msg_Home_Enter_SC() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_Home_Enter_SC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_Home_Enter_SC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  playersession_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete map_;
}

void Msg_Home_Enter_SC::ArenaDtor(void* object) {
  Msg_Home_Enter_SC* _this = reinterpret_cast< Msg_Home_Enter_SC* >(object);
  (void)_this;
}
void Msg_Home_Enter_SC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_Home_Enter_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_Home_Enter_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_Home_Enter_SC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playersession_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
  convid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_Home_Enter_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.RoomInfoData map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string playerSession = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_playersession();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_Home_Enter_SC.playerSession"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 convid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          convid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_Home_Enter_SC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_Home_Enter_SC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.RoomInfoData map = 1;
  if (this->_internal_has_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::map(this), target, stream);
  }

  // string playerSession = 2;
  if (!this->_internal_playersession().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playersession().data(), static_cast<int>(this->_internal_playersession().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_Home_Enter_SC.playerSession");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_playersession(), target);
  }

  // uint32 convid = 3;
  if (this->_internal_convid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_convid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_Home_Enter_SC)
  return target;
}

size_t Msg_Home_Enter_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_Home_Enter_SC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerSession = 2;
  if (!this->_internal_playersession().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playersession());
  }

  // .XrPb.RoomInfoData map = 1;
  if (this->_internal_has_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_);
  }

  // uint32 convid = 3;
  if (this->_internal_convid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_convid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_Home_Enter_SC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_Home_Enter_SC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_Home_Enter_SC::GetClassData() const { return &_class_data_; }

void Msg_Home_Enter_SC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_Home_Enter_SC *>(to)->MergeFrom(
      static_cast<const Msg_Home_Enter_SC &>(from));
}


void Msg_Home_Enter_SC::MergeFrom(const Msg_Home_Enter_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_Home_Enter_SC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playersession().empty()) {
    _internal_set_playersession(from._internal_playersession());
  }
  if (from._internal_has_map()) {
    _internal_mutable_map()->::XrPb::RoomInfoData::MergeFrom(from._internal_map());
  }
  if (from._internal_convid() != 0) {
    _internal_set_convid(from._internal_convid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_Home_Enter_SC::CopyFrom(const Msg_Home_Enter_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_Home_Enter_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Home_Enter_SC::IsInitialized() const {
  return true;
}

void Msg_Home_Enter_SC::InternalSwap(Msg_Home_Enter_SC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &playersession_, lhs_arena,
      &other->playersession_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_Home_Enter_SC, convid_)
      + sizeof(Msg_Home_Enter_SC::convid_)
      - PROTOBUF_FIELD_OFFSET(Msg_Home_Enter_SC, map_)>(
          reinterpret_cast<char*>(&map_),
          reinterpret_cast<char*>(&other->map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Home_Enter_SC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgMatch_2eproto_getter, &descriptor_table_client_2fMsgMatch_2eproto_once,
      file_level_metadata_client_2fMsgMatch_2eproto[3]);
}

// ===================================================================

class Msg_PlayHall_Enter_CS::_Internal {
 public:
};

Msg_PlayHall_Enter_CS::Msg_PlayHall_Enter_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_PlayHall_Enter_CS)
}
Msg_PlayHall_Enter_CS::Msg_PlayHall_Enter_CS(const Msg_PlayHall_Enter_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mapid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapid().empty()) {
    mapid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mapid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_PlayHall_Enter_CS)
}

inline void Msg_PlayHall_Enter_CS::SharedCtor() {
mapid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Msg_PlayHall_Enter_CS::~Msg_PlayHall_Enter_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_PlayHall_Enter_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_PlayHall_Enter_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mapid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_PlayHall_Enter_CS::ArenaDtor(void* object) {
  Msg_PlayHall_Enter_CS* _this = reinterpret_cast< Msg_PlayHall_Enter_CS* >(object);
  (void)_this;
}
void Msg_PlayHall_Enter_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_PlayHall_Enter_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_PlayHall_Enter_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_PlayHall_Enter_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_PlayHall_Enter_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mapid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_PlayHall_Enter_CS.mapid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_PlayHall_Enter_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_PlayHall_Enter_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mapid = 1;
  if (!this->_internal_mapid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapid().data(), static_cast<int>(this->_internal_mapid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_PlayHall_Enter_CS.mapid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mapid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_PlayHall_Enter_CS)
  return target;
}

size_t Msg_PlayHall_Enter_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_PlayHall_Enter_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mapid = 1;
  if (!this->_internal_mapid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_PlayHall_Enter_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_PlayHall_Enter_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_PlayHall_Enter_CS::GetClassData() const { return &_class_data_; }

void Msg_PlayHall_Enter_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_PlayHall_Enter_CS *>(to)->MergeFrom(
      static_cast<const Msg_PlayHall_Enter_CS &>(from));
}


void Msg_PlayHall_Enter_CS::MergeFrom(const Msg_PlayHall_Enter_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_PlayHall_Enter_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mapid().empty()) {
    _internal_set_mapid(from._internal_mapid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_PlayHall_Enter_CS::CopyFrom(const Msg_PlayHall_Enter_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_PlayHall_Enter_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_PlayHall_Enter_CS::IsInitialized() const {
  return true;
}

void Msg_PlayHall_Enter_CS::InternalSwap(Msg_PlayHall_Enter_CS* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mapid_, lhs_arena,
      &other->mapid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_PlayHall_Enter_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgMatch_2eproto_getter, &descriptor_table_client_2fMsgMatch_2eproto_once,
      file_level_metadata_client_2fMsgMatch_2eproto[4]);
}

// ===================================================================

class Msg_PlayHall_Enter_SC::_Internal {
 public:
  static const ::XrPb::RoomInfoData& map(const Msg_PlayHall_Enter_SC* msg);
};

const ::XrPb::RoomInfoData&
Msg_PlayHall_Enter_SC::_Internal::map(const Msg_PlayHall_Enter_SC* msg) {
  return *msg->map_;
}
Msg_PlayHall_Enter_SC::Msg_PlayHall_Enter_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_PlayHall_Enter_SC)
}
Msg_PlayHall_Enter_SC::Msg_PlayHall_Enter_SC(const Msg_PlayHall_Enter_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playersession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    playersession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playersession().empty()) {
    playersession_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playersession(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_map()) {
    map_ = new ::XrPb::RoomInfoData(*from.map_);
  } else {
    map_ = nullptr;
  }
  convid_ = from.convid_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_PlayHall_Enter_SC)
}

inline void Msg_PlayHall_Enter_SC::SharedCtor() {
playersession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  playersession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&map_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&convid_) -
    reinterpret_cast<char*>(&map_)) + sizeof(convid_));
}

Msg_PlayHall_Enter_SC::~Msg_PlayHall_Enter_SC() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_PlayHall_Enter_SC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_PlayHall_Enter_SC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  playersession_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete map_;
}

void Msg_PlayHall_Enter_SC::ArenaDtor(void* object) {
  Msg_PlayHall_Enter_SC* _this = reinterpret_cast< Msg_PlayHall_Enter_SC* >(object);
  (void)_this;
}
void Msg_PlayHall_Enter_SC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_PlayHall_Enter_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_PlayHall_Enter_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_PlayHall_Enter_SC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playersession_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
  convid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_PlayHall_Enter_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.RoomInfoData map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string playerSession = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_playersession();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_PlayHall_Enter_SC.playerSession"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 convid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          convid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_PlayHall_Enter_SC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_PlayHall_Enter_SC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.RoomInfoData map = 1;
  if (this->_internal_has_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::map(this), target, stream);
  }

  // string playerSession = 2;
  if (!this->_internal_playersession().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playersession().data(), static_cast<int>(this->_internal_playersession().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_PlayHall_Enter_SC.playerSession");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_playersession(), target);
  }

  // uint32 convid = 3;
  if (this->_internal_convid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_convid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_PlayHall_Enter_SC)
  return target;
}

size_t Msg_PlayHall_Enter_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_PlayHall_Enter_SC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerSession = 2;
  if (!this->_internal_playersession().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playersession());
  }

  // .XrPb.RoomInfoData map = 1;
  if (this->_internal_has_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_);
  }

  // uint32 convid = 3;
  if (this->_internal_convid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_convid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_PlayHall_Enter_SC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_PlayHall_Enter_SC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_PlayHall_Enter_SC::GetClassData() const { return &_class_data_; }

void Msg_PlayHall_Enter_SC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_PlayHall_Enter_SC *>(to)->MergeFrom(
      static_cast<const Msg_PlayHall_Enter_SC &>(from));
}


void Msg_PlayHall_Enter_SC::MergeFrom(const Msg_PlayHall_Enter_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_PlayHall_Enter_SC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playersession().empty()) {
    _internal_set_playersession(from._internal_playersession());
  }
  if (from._internal_has_map()) {
    _internal_mutable_map()->::XrPb::RoomInfoData::MergeFrom(from._internal_map());
  }
  if (from._internal_convid() != 0) {
    _internal_set_convid(from._internal_convid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_PlayHall_Enter_SC::CopyFrom(const Msg_PlayHall_Enter_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_PlayHall_Enter_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_PlayHall_Enter_SC::IsInitialized() const {
  return true;
}

void Msg_PlayHall_Enter_SC::InternalSwap(Msg_PlayHall_Enter_SC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &playersession_, lhs_arena,
      &other->playersession_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_PlayHall_Enter_SC, convid_)
      + sizeof(Msg_PlayHall_Enter_SC::convid_)
      - PROTOBUF_FIELD_OFFSET(Msg_PlayHall_Enter_SC, map_)>(
          reinterpret_cast<char*>(&map_),
          reinterpret_cast<char*>(&other->map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_PlayHall_Enter_SC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgMatch_2eproto_getter, &descriptor_table_client_2fMsgMatch_2eproto_once,
      file_level_metadata_client_2fMsgMatch_2eproto[5]);
}

// ===================================================================

class Msg_Dup_Enter_CS::_Internal {
 public:
};

Msg_Dup_Enter_CS::Msg_Dup_Enter_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_Dup_Enter_CS)
}
Msg_Dup_Enter_CS::Msg_Dup_Enter_CS(const Msg_Dup_Enter_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mapid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapid().empty()) {
    mapid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mapid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_Dup_Enter_CS)
}

inline void Msg_Dup_Enter_CS::SharedCtor() {
mapid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Msg_Dup_Enter_CS::~Msg_Dup_Enter_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_Dup_Enter_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_Dup_Enter_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mapid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_Dup_Enter_CS::ArenaDtor(void* object) {
  Msg_Dup_Enter_CS* _this = reinterpret_cast< Msg_Dup_Enter_CS* >(object);
  (void)_this;
}
void Msg_Dup_Enter_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_Dup_Enter_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_Dup_Enter_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_Dup_Enter_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_Dup_Enter_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mapid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_Dup_Enter_CS.mapid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_Dup_Enter_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_Dup_Enter_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mapid = 1;
  if (!this->_internal_mapid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapid().data(), static_cast<int>(this->_internal_mapid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_Dup_Enter_CS.mapid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mapid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_Dup_Enter_CS)
  return target;
}

size_t Msg_Dup_Enter_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_Dup_Enter_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mapid = 1;
  if (!this->_internal_mapid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_Dup_Enter_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_Dup_Enter_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_Dup_Enter_CS::GetClassData() const { return &_class_data_; }

void Msg_Dup_Enter_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_Dup_Enter_CS *>(to)->MergeFrom(
      static_cast<const Msg_Dup_Enter_CS &>(from));
}


void Msg_Dup_Enter_CS::MergeFrom(const Msg_Dup_Enter_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_Dup_Enter_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mapid().empty()) {
    _internal_set_mapid(from._internal_mapid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_Dup_Enter_CS::CopyFrom(const Msg_Dup_Enter_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_Dup_Enter_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Dup_Enter_CS::IsInitialized() const {
  return true;
}

void Msg_Dup_Enter_CS::InternalSwap(Msg_Dup_Enter_CS* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mapid_, lhs_arena,
      &other->mapid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Dup_Enter_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgMatch_2eproto_getter, &descriptor_table_client_2fMsgMatch_2eproto_once,
      file_level_metadata_client_2fMsgMatch_2eproto[6]);
}

// ===================================================================

class Msg_Dup_Enter_SC::_Internal {
 public:
  static const ::XrPb::RoomInfoData& map(const Msg_Dup_Enter_SC* msg);
};

const ::XrPb::RoomInfoData&
Msg_Dup_Enter_SC::_Internal::map(const Msg_Dup_Enter_SC* msg) {
  return *msg->map_;
}
Msg_Dup_Enter_SC::Msg_Dup_Enter_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_Dup_Enter_SC)
}
Msg_Dup_Enter_SC::Msg_Dup_Enter_SC(const Msg_Dup_Enter_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playersession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    playersession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playersession().empty()) {
    playersession_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playersession(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_map()) {
    map_ = new ::XrPb::RoomInfoData(*from.map_);
  } else {
    map_ = nullptr;
  }
  convid_ = from.convid_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_Dup_Enter_SC)
}

inline void Msg_Dup_Enter_SC::SharedCtor() {
playersession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  playersession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&map_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&convid_) -
    reinterpret_cast<char*>(&map_)) + sizeof(convid_));
}

Msg_Dup_Enter_SC::~Msg_Dup_Enter_SC() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_Dup_Enter_SC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_Dup_Enter_SC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  playersession_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete map_;
}

void Msg_Dup_Enter_SC::ArenaDtor(void* object) {
  Msg_Dup_Enter_SC* _this = reinterpret_cast< Msg_Dup_Enter_SC* >(object);
  (void)_this;
}
void Msg_Dup_Enter_SC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_Dup_Enter_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_Dup_Enter_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_Dup_Enter_SC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playersession_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
  convid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_Dup_Enter_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.RoomInfoData map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string playerSession = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_playersession();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_Dup_Enter_SC.playerSession"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 convid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          convid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_Dup_Enter_SC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_Dup_Enter_SC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.RoomInfoData map = 1;
  if (this->_internal_has_map()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::map(this), target, stream);
  }

  // string playerSession = 2;
  if (!this->_internal_playersession().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playersession().data(), static_cast<int>(this->_internal_playersession().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_Dup_Enter_SC.playerSession");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_playersession(), target);
  }

  // uint32 convid = 3;
  if (this->_internal_convid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_convid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_Dup_Enter_SC)
  return target;
}

size_t Msg_Dup_Enter_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_Dup_Enter_SC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerSession = 2;
  if (!this->_internal_playersession().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playersession());
  }

  // .XrPb.RoomInfoData map = 1;
  if (this->_internal_has_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_);
  }

  // uint32 convid = 3;
  if (this->_internal_convid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_convid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_Dup_Enter_SC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_Dup_Enter_SC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_Dup_Enter_SC::GetClassData() const { return &_class_data_; }

void Msg_Dup_Enter_SC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_Dup_Enter_SC *>(to)->MergeFrom(
      static_cast<const Msg_Dup_Enter_SC &>(from));
}


void Msg_Dup_Enter_SC::MergeFrom(const Msg_Dup_Enter_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_Dup_Enter_SC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playersession().empty()) {
    _internal_set_playersession(from._internal_playersession());
  }
  if (from._internal_has_map()) {
    _internal_mutable_map()->::XrPb::RoomInfoData::MergeFrom(from._internal_map());
  }
  if (from._internal_convid() != 0) {
    _internal_set_convid(from._internal_convid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_Dup_Enter_SC::CopyFrom(const Msg_Dup_Enter_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_Dup_Enter_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Dup_Enter_SC::IsInitialized() const {
  return true;
}

void Msg_Dup_Enter_SC::InternalSwap(Msg_Dup_Enter_SC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &playersession_, lhs_arena,
      &other->playersession_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_Dup_Enter_SC, convid_)
      + sizeof(Msg_Dup_Enter_SC::convid_)
      - PROTOBUF_FIELD_OFFSET(Msg_Dup_Enter_SC, map_)>(
          reinterpret_cast<char*>(&map_),
          reinterpret_cast<char*>(&other->map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Dup_Enter_SC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgMatch_2eproto_getter, &descriptor_table_client_2fMsgMatch_2eproto_once,
      file_level_metadata_client_2fMsgMatch_2eproto[7]);
}

// ===================================================================

class Msg_Member_leave_PUSH::_Internal {
 public:
};

Msg_Member_leave_PUSH::Msg_Member_leave_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_Member_leave_PUSH)
}
Msg_Member_leave_PUSH::Msg_Member_leave_PUSH(const Msg_Member_leave_PUSH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_Member_leave_PUSH)
}

inline void Msg_Member_leave_PUSH::SharedCtor() {
roleid_ = int64_t{0};
}

Msg_Member_leave_PUSH::~Msg_Member_leave_PUSH() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_Member_leave_PUSH)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_Member_leave_PUSH::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_Member_leave_PUSH::ArenaDtor(void* object) {
  Msg_Member_leave_PUSH* _this = reinterpret_cast< Msg_Member_leave_PUSH* >(object);
  (void)_this;
}
void Msg_Member_leave_PUSH::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_Member_leave_PUSH::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_Member_leave_PUSH::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_Member_leave_PUSH)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roleid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_Member_leave_PUSH::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_Member_leave_PUSH::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_Member_leave_PUSH)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roleid = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_Member_leave_PUSH)
  return target;
}

size_t Msg_Member_leave_PUSH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_Member_leave_PUSH)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 roleid = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_roleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_Member_leave_PUSH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_Member_leave_PUSH::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_Member_leave_PUSH::GetClassData() const { return &_class_data_; }

void Msg_Member_leave_PUSH::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_Member_leave_PUSH *>(to)->MergeFrom(
      static_cast<const Msg_Member_leave_PUSH &>(from));
}


void Msg_Member_leave_PUSH::MergeFrom(const Msg_Member_leave_PUSH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_Member_leave_PUSH)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_Member_leave_PUSH::CopyFrom(const Msg_Member_leave_PUSH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_Member_leave_PUSH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Member_leave_PUSH::IsInitialized() const {
  return true;
}

void Msg_Member_leave_PUSH::InternalSwap(Msg_Member_leave_PUSH* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(roleid_, other->roleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Member_leave_PUSH::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgMatch_2eproto_getter, &descriptor_table_client_2fMsgMatch_2eproto_once,
      file_level_metadata_client_2fMsgMatch_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XrPb::MsgMod_Match* Arena::CreateMaybeMessage< ::XrPb::MsgMod_Match >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::MsgMod_Match >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::RoomInfoData* Arena::CreateMaybeMessage< ::XrPb::RoomInfoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::RoomInfoData >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_Home_Enter_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_Home_Enter_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_Home_Enter_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_Home_Enter_SC* Arena::CreateMaybeMessage< ::XrPb::Msg_Home_Enter_SC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_Home_Enter_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_PlayHall_Enter_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_PlayHall_Enter_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_PlayHall_Enter_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_PlayHall_Enter_SC* Arena::CreateMaybeMessage< ::XrPb::Msg_PlayHall_Enter_SC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_PlayHall_Enter_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_Dup_Enter_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_Dup_Enter_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_Dup_Enter_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_Dup_Enter_SC* Arena::CreateMaybeMessage< ::XrPb::Msg_Dup_Enter_SC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_Dup_Enter_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_Member_leave_PUSH* Arena::CreateMaybeMessage< ::XrPb::Msg_Member_leave_PUSH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_Member_leave_PUSH >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
