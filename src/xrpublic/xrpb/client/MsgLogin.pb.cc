// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/MsgLogin.proto

#include "client/MsgLogin.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace XrPb {
constexpr MsgMod_Login::MsgMod_Login(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MsgMod_LoginDefaultTypeInternal {
  constexpr MsgMod_LoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgMod_LoginDefaultTypeInternal() {}
  union {
    MsgMod_Login _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgMod_LoginDefaultTypeInternal _MsgMod_Login_default_instance_;
constexpr Msg_LoginFinish_PUSH::Msg_LoginFinish_PUSH(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Msg_LoginFinish_PUSHDefaultTypeInternal {
  constexpr Msg_LoginFinish_PUSHDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_LoginFinish_PUSHDefaultTypeInternal() {}
  union {
    Msg_LoginFinish_PUSH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_LoginFinish_PUSHDefaultTypeInternal _Msg_LoginFinish_PUSH_default_instance_;
constexpr Msg_Login_LineUp_PUSH::Msg_Login_LineUp_PUSH(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sunum_(0u)
  , cur_pos_(0u)
  , wait_time_(0u){}
struct Msg_Login_LineUp_PUSHDefaultTypeInternal {
  constexpr Msg_Login_LineUp_PUSHDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_Login_LineUp_PUSHDefaultTypeInternal() {}
  union {
    Msg_Login_LineUp_PUSH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_Login_LineUp_PUSHDefaultTypeInternal _Msg_Login_LineUp_PUSH_default_instance_;
constexpr Msg_Login_VerifyAccount_CS::Msg_Login_VerifyAccount_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : szusername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , szpassword_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gameversion_(nullptr)
  , uiaccid_(int64_t{0})
  , dwsdk_(0u)
  , un8relogin_(0u){}
struct Msg_Login_VerifyAccount_CSDefaultTypeInternal {
  constexpr Msg_Login_VerifyAccount_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_Login_VerifyAccount_CSDefaultTypeInternal() {}
  union {
    Msg_Login_VerifyAccount_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_Login_VerifyAccount_CSDefaultTypeInternal _Msg_Login_VerifyAccount_CS_default_instance_;
constexpr Msg_Login_VerifyAccount_SC::Msg_Login_VerifyAccount_SC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : szusername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uiaccid_(int64_t{0})
  , nservertime_(int64_t{0})
  , ngameid_(0u)
  , ntimezone_(0)
  , opendate_(int64_t{0})
  , estate_(0)
{}
struct Msg_Login_VerifyAccount_SCDefaultTypeInternal {
  constexpr Msg_Login_VerifyAccount_SCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_Login_VerifyAccount_SCDefaultTypeInternal() {}
  union {
    Msg_Login_VerifyAccount_SC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_Login_VerifyAccount_SCDefaultTypeInternal _Msg_Login_VerifyAccount_SC_default_instance_;
constexpr Msg_CreateRole_CS::Msg_CreateRole_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : szrolename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , form_(nullptr)
  , ncareerid_(0u)
  , bgender_(0u){}
struct Msg_CreateRole_CSDefaultTypeInternal {
  constexpr Msg_CreateRole_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_CreateRole_CSDefaultTypeInternal() {}
  union {
    Msg_CreateRole_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_CreateRole_CSDefaultTypeInternal _Msg_CreateRole_CS_default_instance_;
constexpr Msg_CreateRole_SC::Msg_CreateRole_SC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : szrolename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dwroleid_(int64_t{0})
  , llcreatetime_(int64_t{0})
  , nlevel_(0){}
struct Msg_CreateRole_SCDefaultTypeInternal {
  constexpr Msg_CreateRole_SCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_CreateRole_SCDefaultTypeInternal() {}
  union {
    Msg_CreateRole_SC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_CreateRole_SCDefaultTypeInternal _Msg_CreateRole_SC_default_instance_;
constexpr Msg_Role_PUSH::Msg_Role_PUSH(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(nullptr)
  , form_(nullptr)
  , un32exp_(0u)
  , gmlevel_(0u)
  , create_time_(int64_t{0}){}
struct Msg_Role_PUSHDefaultTypeInternal {
  constexpr Msg_Role_PUSHDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_Role_PUSHDefaultTypeInternal() {}
  union {
    Msg_Role_PUSH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_Role_PUSHDefaultTypeInternal _Msg_Role_PUSH_default_instance_;
constexpr Msg_RollName_CS::Msg_RollName_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bisman_(false){}
struct Msg_RollName_CSDefaultTypeInternal {
  constexpr Msg_RollName_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_RollName_CSDefaultTypeInternal() {}
  union {
    Msg_RollName_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_RollName_CSDefaultTypeInternal _Msg_RollName_CS_default_instance_;
constexpr Msg_RollName_SC::Msg_RollName_SC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strrollname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct Msg_RollName_SCDefaultTypeInternal {
  constexpr Msg_RollName_SCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_RollName_SCDefaultTypeInternal() {}
  union {
    Msg_RollName_SC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_RollName_SCDefaultTypeInternal _Msg_RollName_SC_default_instance_;
constexpr Msg_Kick_PUSH::Msg_Kick_PUSH(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strusername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uiaccid_(int64_t{0})
  , nflag_(0)
  , ngameid_(0u){}
struct Msg_Kick_PUSHDefaultTypeInternal {
  constexpr Msg_Kick_PUSHDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_Kick_PUSHDefaultTypeInternal() {}
  union {
    Msg_Kick_PUSH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_Kick_PUSHDefaultTypeInternal _Msg_Kick_PUSH_default_instance_;
constexpr Msg_BeatHeart_CS::Msg_BeatHeart_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Msg_BeatHeart_CSDefaultTypeInternal {
  constexpr Msg_BeatHeart_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_BeatHeart_CSDefaultTypeInternal() {}
  union {
    Msg_BeatHeart_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_BeatHeart_CSDefaultTypeInternal _Msg_BeatHeart_CS_default_instance_;
constexpr Msg_BeatHeart_SC::Msg_BeatHeart_SC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nservertime_(int64_t{0}){}
struct Msg_BeatHeart_SCDefaultTypeInternal {
  constexpr Msg_BeatHeart_SCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_BeatHeart_SCDefaultTypeInternal() {}
  union {
    Msg_BeatHeart_SC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_BeatHeart_SCDefaultTypeInternal _Msg_BeatHeart_SC_default_instance_;
constexpr Msg_LoadOtherPlayerData_CS::Msg_LoadOtherPlayerData_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_id_(int64_t{0}){}
struct Msg_LoadOtherPlayerData_CSDefaultTypeInternal {
  constexpr Msg_LoadOtherPlayerData_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_LoadOtherPlayerData_CSDefaultTypeInternal() {}
  union {
    Msg_LoadOtherPlayerData_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_LoadOtherPlayerData_CSDefaultTypeInternal _Msg_LoadOtherPlayerData_CS_default_instance_;
constexpr Msg_LoadOtherPlayerData_SC::Msg_LoadOtherPlayerData_SC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , form_(nullptr)
  , acc_id_(int64_t{0})
  , level_(0u){}
struct Msg_LoadOtherPlayerData_SCDefaultTypeInternal {
  constexpr Msg_LoadOtherPlayerData_SCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_LoadOtherPlayerData_SCDefaultTypeInternal() {}
  union {
    Msg_LoadOtherPlayerData_SC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_LoadOtherPlayerData_SCDefaultTypeInternal _Msg_LoadOtherPlayerData_SC_default_instance_;
constexpr Msg_ItemList_REQ::Msg_ItemList_REQ(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Msg_ItemList_REQDefaultTypeInternal {
  constexpr Msg_ItemList_REQDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_ItemList_REQDefaultTypeInternal() {}
  union {
    Msg_ItemList_REQ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_ItemList_REQDefaultTypeInternal _Msg_ItemList_REQ_default_instance_;
constexpr Msg_ItemList_PUSH::Msg_ItemList_PUSH(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oitem_(){}
struct Msg_ItemList_PUSHDefaultTypeInternal {
  constexpr Msg_ItemList_PUSHDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_ItemList_PUSHDefaultTypeInternal() {}
  union {
    Msg_ItemList_PUSH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_ItemList_PUSHDefaultTypeInternal _Msg_ItemList_PUSH_default_instance_;
}  // namespace XrPb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_2fMsgLogin_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_client_2fMsgLogin_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_2fMsgLogin_2eproto = nullptr;

const uint32_t TableStruct_client_2fMsgLogin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::MsgMod_Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LoginFinish_PUSH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_LineUp_PUSH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_LineUp_PUSH, sunum_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_LineUp_PUSH, cur_pos_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_LineUp_PUSH, wait_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_VerifyAccount_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_VerifyAccount_CS, uiaccid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_VerifyAccount_CS, szusername_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_VerifyAccount_CS, szpassword_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_VerifyAccount_CS, dwsdk_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_VerifyAccount_CS, un8relogin_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_VerifyAccount_CS, gameversion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_VerifyAccount_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_VerifyAccount_SC, uiaccid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_VerifyAccount_SC, szusername_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_VerifyAccount_SC, ngameid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_VerifyAccount_SC, nservertime_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_VerifyAccount_SC, ntimezone_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_VerifyAccount_SC, opendate_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Login_VerifyAccount_SC, estate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_CreateRole_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_CreateRole_CS, ncareerid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_CreateRole_CS, bgender_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_CreateRole_CS, szrolename_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_CreateRole_CS, form_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_CreateRole_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_CreateRole_SC, dwroleid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_CreateRole_SC, szrolename_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_CreateRole_SC, nlevel_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_CreateRole_SC, llcreatetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Role_PUSH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Role_PUSH, role_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Role_PUSH, un32exp_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Role_PUSH, gmlevel_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Role_PUSH, form_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Role_PUSH, create_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_RollName_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_RollName_CS, bisman_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_RollName_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_RollName_SC, strrollname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Kick_PUSH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Kick_PUSH, uiaccid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Kick_PUSH, strusername_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Kick_PUSH, nflag_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Kick_PUSH, ngameid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_BeatHeart_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_BeatHeart_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_BeatHeart_SC, nservertime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LoadOtherPlayerData_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LoadOtherPlayerData_CS, acc_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LoadOtherPlayerData_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LoadOtherPlayerData_SC, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LoadOtherPlayerData_SC, form_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LoadOtherPlayerData_SC, role_name_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LoadOtherPlayerData_SC, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_ItemList_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_ItemList_PUSH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_ItemList_PUSH, oitem_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::XrPb::MsgMod_Login)},
  { 6, -1, -1, sizeof(::XrPb::Msg_LoginFinish_PUSH)},
  { 12, -1, -1, sizeof(::XrPb::Msg_Login_LineUp_PUSH)},
  { 21, -1, -1, sizeof(::XrPb::Msg_Login_VerifyAccount_CS)},
  { 33, -1, -1, sizeof(::XrPb::Msg_Login_VerifyAccount_SC)},
  { 46, -1, -1, sizeof(::XrPb::Msg_CreateRole_CS)},
  { 56, -1, -1, sizeof(::XrPb::Msg_CreateRole_SC)},
  { 66, -1, -1, sizeof(::XrPb::Msg_Role_PUSH)},
  { 77, -1, -1, sizeof(::XrPb::Msg_RollName_CS)},
  { 84, -1, -1, sizeof(::XrPb::Msg_RollName_SC)},
  { 91, -1, -1, sizeof(::XrPb::Msg_Kick_PUSH)},
  { 101, -1, -1, sizeof(::XrPb::Msg_BeatHeart_CS)},
  { 107, -1, -1, sizeof(::XrPb::Msg_BeatHeart_SC)},
  { 114, -1, -1, sizeof(::XrPb::Msg_LoadOtherPlayerData_CS)},
  { 121, -1, -1, sizeof(::XrPb::Msg_LoadOtherPlayerData_SC)},
  { 131, -1, -1, sizeof(::XrPb::Msg_ItemList_REQ)},
  { 137, -1, -1, sizeof(::XrPb::Msg_ItemList_PUSH)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_MsgMod_Login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_LoginFinish_PUSH_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_Login_LineUp_PUSH_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_Login_VerifyAccount_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_Login_VerifyAccount_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_CreateRole_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_CreateRole_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_Role_PUSH_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_RollName_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_RollName_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_Kick_PUSH_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_BeatHeart_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_BeatHeart_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_LoadOtherPlayerData_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_LoadOtherPlayerData_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_ItemList_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_ItemList_PUSH_default_instance_),
};

const char descriptor_table_protodef_client_2fMsgLogin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025client/MsgLogin.proto\022\004XrPb\032\023client/Co"
  "mmon.proto\"\262\003\n\014MsgMod_Login\"\241\003\n\005MsgId\022\014\n"
  "\010Msg_None\020\000\022\031\n\025Msg_Login_LineUp_PUSH\020\001\022\036"
  "\n\032Msg_Login_VerifyAccount_CS\020\002\022\036\n\032Msg_Lo"
  "gin_VerifyAccount_SC\020\003\022\025\n\021Msg_CreateRole"
  "_CS\020\004\022\025\n\021Msg_CreateRole_SC\020\005\022\023\n\017Msg_Roll"
  "Name_CS\020\006\022\023\n\017Msg_RollName_SC\020\007\022\021\n\rMsg_Ro"
  "le_PUSH\020\010\022\030\n\024Msg_LoginFinish_PUSH\020\t\022\021\n\rM"
  "sg_Kick_PUSH\020\n\022\036\n\032Msg_LoadOtherPlayerDat"
  "a_CS\020\013\022\036\n\032Msg_LoadOtherPlayerData_SC\020\014\022\024"
  "\n\020Msg_ItemList_REQ\020\r\022\025\n\021Msg_ItemList_PUS"
  "H\020\016\022\024\n\020Msg_BeatHeart_CS\020d\022\024\n\020Msg_BeatHea"
  "rt_SC\020e\"\026\n\024Msg_LoginFinish_PUSH\"J\n\025Msg_L"
  "ogin_LineUp_PUSH\022\r\n\005sunum\030\001 \001(\r\022\017\n\007cur_p"
  "os\030\002 \001(\r\022\021\n\twait_time\030\003 \001(\r\"\240\001\n\032Msg_Logi"
  "n_VerifyAccount_CS\022\017\n\007uiAccID\030\001 \001(\003\022\022\n\ns"
  "zUserName\030\002 \001(\t\022\022\n\nszPassword\030\003 \001(\t\022\r\n\005d"
  "wSdk\030\004 \001(\r\022\022\n\nun8ReLogin\030\005 \001(\r\022&\n\013gameVe"
  "rsion\030\006 \001(\0132\021.XrPb.GameVersion\"\260\001\n\032Msg_L"
  "ogin_VerifyAccount_SC\022\017\n\007uiAccID\030\001 \001(\003\022\022"
  "\n\nszUserName\030\002 \001(\t\022\017\n\007nGameID\030\003 \001(\r\022\023\n\013n"
  "ServerTime\030\004 \001(\003\022\021\n\tnTimeZone\030\005 \001(\005\022\020\n\010o"
  "pendate\030\006 \001(\003\022\"\n\006eState\030\007 \001(\0162\022.XrPb.Pla"
  "yerStatus\"i\n\021Msg_CreateRole_CS\022\021\n\tnCaree"
  "rID\030\001 \001(\r\022\017\n\007bGender\030\002 \001(\r\022\022\n\nszRoleName"
  "\030\003 \001(\t\022\034\n\004form\030\004 \001(\0132\016.XrPb.FormData\"_\n\021"
  "Msg_CreateRole_SC\022\020\n\010dwRoleId\030\001 \001(\003\022\022\n\ns"
  "zRoleName\030\002 \001(\t\022\016\n\006nLevel\030\003 \001(\005\022\024\n\014llCre"
  "ateTime\030\004 \001(\003\"\206\001\n\rMsg_Role_PUSH\022 \n\004role\030"
  "\001 \001(\0132\022.XrPb.RoleBaseInfo\022\017\n\007un32Exp\030\002 \001"
  "(\r\022\017\n\007GMLevel\030\003 \001(\r\022\034\n\004form\030\004 \001(\0132\016.XrPb"
  ".FormData\022\023\n\013create_time\030\005 \001(\003\"!\n\017Msg_Ro"
  "llName_CS\022\016\n\006bIsMan\030\001 \001(\010\"&\n\017Msg_RollNam"
  "e_SC\022\023\n\013strRollName\030\001 \001(\t\"U\n\rMsg_Kick_PU"
  "SH\022\017\n\007uiAccID\030\001 \001(\003\022\023\n\013strUserName\030\002 \001(\t"
  "\022\r\n\005nFlag\030\003 \001(\005\022\017\n\007nGameID\030\004 \001(\r\"\022\n\020Msg_"
  "BeatHeart_CS\"\'\n\020Msg_BeatHeart_SC\022\023\n\013nSer"
  "verTime\030\001 \001(\003\",\n\032Msg_LoadOtherPlayerData"
  "_CS\022\016\n\006acc_id\030\001 \001(\003\"l\n\032Msg_LoadOtherPlay"
  "erData_SC\022\016\n\006acc_id\030\001 \001(\003\022\034\n\004form\030\002 \001(\0132"
  "\016.XrPb.FormData\022\021\n\trole_name\030\003 \001(\t\022\r\n\005le"
  "vel\030\004 \001(\r\"\022\n\020Msg_ItemList_REQ\".\n\021Msg_Ite"
  "mList_PUSH\022\031\n\005oItem\030\001 \003(\0132\n.XrPb.Itemb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_client_2fMsgLogin_2eproto_deps[1] = {
  &::descriptor_table_client_2fCommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_2fMsgLogin_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_2fMsgLogin_2eproto = {
  false, false, 1725, descriptor_table_protodef_client_2fMsgLogin_2eproto, "client/MsgLogin.proto", 
  &descriptor_table_client_2fMsgLogin_2eproto_once, descriptor_table_client_2fMsgLogin_2eproto_deps, 1, 17,
  schemas, file_default_instances, TableStruct_client_2fMsgLogin_2eproto::offsets,
  file_level_metadata_client_2fMsgLogin_2eproto, file_level_enum_descriptors_client_2fMsgLogin_2eproto, file_level_service_descriptors_client_2fMsgLogin_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_client_2fMsgLogin_2eproto_getter() {
  return &descriptor_table_client_2fMsgLogin_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_client_2fMsgLogin_2eproto(&descriptor_table_client_2fMsgLogin_2eproto);
namespace XrPb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgMod_Login_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_2fMsgLogin_2eproto);
  return file_level_enum_descriptors_client_2fMsgLogin_2eproto[0];
}
bool MsgMod_Login_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_None;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_Login_LineUp_PUSH;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_Login_VerifyAccount_CS;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_Login_VerifyAccount_SC;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_CreateRole_CS;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_CreateRole_SC;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_RollName_CS;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_RollName_SC;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_Role_PUSH;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_LoginFinish_PUSH;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_Kick_PUSH;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_LoadOtherPlayerData_CS;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_LoadOtherPlayerData_SC;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_ItemList_REQ;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_ItemList_PUSH;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_BeatHeart_CS;
constexpr MsgMod_Login_MsgId MsgMod_Login::Msg_BeatHeart_SC;
constexpr MsgMod_Login_MsgId MsgMod_Login::MsgId_MIN;
constexpr MsgMod_Login_MsgId MsgMod_Login::MsgId_MAX;
constexpr int MsgMod_Login::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MsgMod_Login::_Internal {
 public:
};

MsgMod_Login::MsgMod_Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.MsgMod_Login)
}
MsgMod_Login::MsgMod_Login(const MsgMod_Login& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.MsgMod_Login)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgMod_Login::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgMod_Login::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgMod_Login::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[0]);
}

// ===================================================================

class Msg_LoginFinish_PUSH::_Internal {
 public:
};

Msg_LoginFinish_PUSH::Msg_LoginFinish_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_LoginFinish_PUSH)
}
Msg_LoginFinish_PUSH::Msg_LoginFinish_PUSH(const Msg_LoginFinish_PUSH& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_LoginFinish_PUSH)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_LoginFinish_PUSH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_LoginFinish_PUSH::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Msg_LoginFinish_PUSH::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[1]);
}

// ===================================================================

class Msg_Login_LineUp_PUSH::_Internal {
 public:
};

Msg_Login_LineUp_PUSH::Msg_Login_LineUp_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_Login_LineUp_PUSH)
}
Msg_Login_LineUp_PUSH::Msg_Login_LineUp_PUSH(const Msg_Login_LineUp_PUSH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sunum_, &from.sunum_,
    static_cast<size_t>(reinterpret_cast<char*>(&wait_time_) -
    reinterpret_cast<char*>(&sunum_)) + sizeof(wait_time_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_Login_LineUp_PUSH)
}

inline void Msg_Login_LineUp_PUSH::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sunum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wait_time_) -
    reinterpret_cast<char*>(&sunum_)) + sizeof(wait_time_));
}

Msg_Login_LineUp_PUSH::~Msg_Login_LineUp_PUSH() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_Login_LineUp_PUSH)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_Login_LineUp_PUSH::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_Login_LineUp_PUSH::ArenaDtor(void* object) {
  Msg_Login_LineUp_PUSH* _this = reinterpret_cast< Msg_Login_LineUp_PUSH* >(object);
  (void)_this;
}
void Msg_Login_LineUp_PUSH::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_Login_LineUp_PUSH::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_Login_LineUp_PUSH::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_Login_LineUp_PUSH)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sunum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_time_) -
      reinterpret_cast<char*>(&sunum_)) + sizeof(wait_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_Login_LineUp_PUSH::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sunum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          sunum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cur_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cur_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 wait_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_Login_LineUp_PUSH::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_Login_LineUp_PUSH)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sunum = 1;
  if (this->_internal_sunum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sunum(), target);
  }

  // uint32 cur_pos = 2;
  if (this->_internal_cur_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cur_pos(), target);
  }

  // uint32 wait_time = 3;
  if (this->_internal_wait_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_wait_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_Login_LineUp_PUSH)
  return target;
}

size_t Msg_Login_LineUp_PUSH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_Login_LineUp_PUSH)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sunum = 1;
  if (this->_internal_sunum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sunum());
  }

  // uint32 cur_pos = 2;
  if (this->_internal_cur_pos() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cur_pos());
  }

  // uint32 wait_time = 3;
  if (this->_internal_wait_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_wait_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_Login_LineUp_PUSH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_Login_LineUp_PUSH::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_Login_LineUp_PUSH::GetClassData() const { return &_class_data_; }

void Msg_Login_LineUp_PUSH::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_Login_LineUp_PUSH *>(to)->MergeFrom(
      static_cast<const Msg_Login_LineUp_PUSH &>(from));
}


void Msg_Login_LineUp_PUSH::MergeFrom(const Msg_Login_LineUp_PUSH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_Login_LineUp_PUSH)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sunum() != 0) {
    _internal_set_sunum(from._internal_sunum());
  }
  if (from._internal_cur_pos() != 0) {
    _internal_set_cur_pos(from._internal_cur_pos());
  }
  if (from._internal_wait_time() != 0) {
    _internal_set_wait_time(from._internal_wait_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_Login_LineUp_PUSH::CopyFrom(const Msg_Login_LineUp_PUSH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_Login_LineUp_PUSH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Login_LineUp_PUSH::IsInitialized() const {
  return true;
}

void Msg_Login_LineUp_PUSH::InternalSwap(Msg_Login_LineUp_PUSH* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_Login_LineUp_PUSH, wait_time_)
      + sizeof(Msg_Login_LineUp_PUSH::wait_time_)
      - PROTOBUF_FIELD_OFFSET(Msg_Login_LineUp_PUSH, sunum_)>(
          reinterpret_cast<char*>(&sunum_),
          reinterpret_cast<char*>(&other->sunum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Login_LineUp_PUSH::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[2]);
}

// ===================================================================

class Msg_Login_VerifyAccount_CS::_Internal {
 public:
  static const ::XrPb::GameVersion& gameversion(const Msg_Login_VerifyAccount_CS* msg);
};

const ::XrPb::GameVersion&
Msg_Login_VerifyAccount_CS::_Internal::gameversion(const Msg_Login_VerifyAccount_CS* msg) {
  return *msg->gameversion_;
}
void Msg_Login_VerifyAccount_CS::clear_gameversion() {
  if (GetArenaForAllocation() == nullptr && gameversion_ != nullptr) {
    delete gameversion_;
  }
  gameversion_ = nullptr;
}
Msg_Login_VerifyAccount_CS::Msg_Login_VerifyAccount_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_Login_VerifyAccount_CS)
}
Msg_Login_VerifyAccount_CS::Msg_Login_VerifyAccount_CS(const Msg_Login_VerifyAccount_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  szusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    szusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_szusername().empty()) {
    szusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_szusername(), 
      GetArenaForAllocation());
  }
  szpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    szpassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_szpassword().empty()) {
    szpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_szpassword(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_gameversion()) {
    gameversion_ = new ::XrPb::GameVersion(*from.gameversion_);
  } else {
    gameversion_ = nullptr;
  }
  ::memcpy(&uiaccid_, &from.uiaccid_,
    static_cast<size_t>(reinterpret_cast<char*>(&un8relogin_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(un8relogin_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_Login_VerifyAccount_CS)
}

inline void Msg_Login_VerifyAccount_CS::SharedCtor() {
szusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  szusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
szpassword_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  szpassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gameversion_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&un8relogin_) -
    reinterpret_cast<char*>(&gameversion_)) + sizeof(un8relogin_));
}

Msg_Login_VerifyAccount_CS::~Msg_Login_VerifyAccount_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_Login_VerifyAccount_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_Login_VerifyAccount_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  szusername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  szpassword_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gameversion_;
}

void Msg_Login_VerifyAccount_CS::ArenaDtor(void* object) {
  Msg_Login_VerifyAccount_CS* _this = reinterpret_cast< Msg_Login_VerifyAccount_CS* >(object);
  (void)_this;
}
void Msg_Login_VerifyAccount_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_Login_VerifyAccount_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_Login_VerifyAccount_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_Login_VerifyAccount_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szusername_.ClearToEmpty();
  szpassword_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && gameversion_ != nullptr) {
    delete gameversion_;
  }
  gameversion_ = nullptr;
  ::memset(&uiaccid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&un8relogin_) -
      reinterpret_cast<char*>(&uiaccid_)) + sizeof(un8relogin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_Login_VerifyAccount_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uiAccID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiaccid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string szUserName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_szusername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_Login_VerifyAccount_CS.szUserName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string szPassword = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_szpassword();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_Login_VerifyAccount_CS.szPassword"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dwSdk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          dwsdk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 un8ReLogin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          un8relogin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.GameVersion gameVersion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameversion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_Login_VerifyAccount_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_Login_VerifyAccount_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uiAccID = 1;
  if (this->_internal_uiaccid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uiaccid(), target);
  }

  // string szUserName = 2;
  if (!this->_internal_szusername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_szusername().data(), static_cast<int>(this->_internal_szusername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_Login_VerifyAccount_CS.szUserName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_szusername(), target);
  }

  // string szPassword = 3;
  if (!this->_internal_szpassword().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_szpassword().data(), static_cast<int>(this->_internal_szpassword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_Login_VerifyAccount_CS.szPassword");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_szpassword(), target);
  }

  // uint32 dwSdk = 4;
  if (this->_internal_dwsdk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dwsdk(), target);
  }

  // uint32 un8ReLogin = 5;
  if (this->_internal_un8relogin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_un8relogin(), target);
  }

  // .XrPb.GameVersion gameVersion = 6;
  if (this->_internal_has_gameversion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::gameversion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_Login_VerifyAccount_CS)
  return target;
}

size_t Msg_Login_VerifyAccount_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_Login_VerifyAccount_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szUserName = 2;
  if (!this->_internal_szusername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_szusername());
  }

  // string szPassword = 3;
  if (!this->_internal_szpassword().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_szpassword());
  }

  // .XrPb.GameVersion gameVersion = 6;
  if (this->_internal_has_gameversion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gameversion_);
  }

  // int64 uiAccID = 1;
  if (this->_internal_uiaccid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiaccid());
  }

  // uint32 dwSdk = 4;
  if (this->_internal_dwsdk() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dwsdk());
  }

  // uint32 un8ReLogin = 5;
  if (this->_internal_un8relogin() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_un8relogin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_Login_VerifyAccount_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_Login_VerifyAccount_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_Login_VerifyAccount_CS::GetClassData() const { return &_class_data_; }

void Msg_Login_VerifyAccount_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_Login_VerifyAccount_CS *>(to)->MergeFrom(
      static_cast<const Msg_Login_VerifyAccount_CS &>(from));
}


void Msg_Login_VerifyAccount_CS::MergeFrom(const Msg_Login_VerifyAccount_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_Login_VerifyAccount_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_szusername().empty()) {
    _internal_set_szusername(from._internal_szusername());
  }
  if (!from._internal_szpassword().empty()) {
    _internal_set_szpassword(from._internal_szpassword());
  }
  if (from._internal_has_gameversion()) {
    _internal_mutable_gameversion()->::XrPb::GameVersion::MergeFrom(from._internal_gameversion());
  }
  if (from._internal_uiaccid() != 0) {
    _internal_set_uiaccid(from._internal_uiaccid());
  }
  if (from._internal_dwsdk() != 0) {
    _internal_set_dwsdk(from._internal_dwsdk());
  }
  if (from._internal_un8relogin() != 0) {
    _internal_set_un8relogin(from._internal_un8relogin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_Login_VerifyAccount_CS::CopyFrom(const Msg_Login_VerifyAccount_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_Login_VerifyAccount_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Login_VerifyAccount_CS::IsInitialized() const {
  return true;
}

void Msg_Login_VerifyAccount_CS::InternalSwap(Msg_Login_VerifyAccount_CS* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &szusername_, lhs_arena,
      &other->szusername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &szpassword_, lhs_arena,
      &other->szpassword_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_Login_VerifyAccount_CS, un8relogin_)
      + sizeof(Msg_Login_VerifyAccount_CS::un8relogin_)
      - PROTOBUF_FIELD_OFFSET(Msg_Login_VerifyAccount_CS, gameversion_)>(
          reinterpret_cast<char*>(&gameversion_),
          reinterpret_cast<char*>(&other->gameversion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Login_VerifyAccount_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[3]);
}

// ===================================================================

class Msg_Login_VerifyAccount_SC::_Internal {
 public:
};

Msg_Login_VerifyAccount_SC::Msg_Login_VerifyAccount_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_Login_VerifyAccount_SC)
}
Msg_Login_VerifyAccount_SC::Msg_Login_VerifyAccount_SC(const Msg_Login_VerifyAccount_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  szusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    szusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_szusername().empty()) {
    szusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_szusername(), 
      GetArenaForAllocation());
  }
  ::memcpy(&uiaccid_, &from.uiaccid_,
    static_cast<size_t>(reinterpret_cast<char*>(&estate_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(estate_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_Login_VerifyAccount_SC)
}

inline void Msg_Login_VerifyAccount_SC::SharedCtor() {
szusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  szusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiaccid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&estate_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(estate_));
}

Msg_Login_VerifyAccount_SC::~Msg_Login_VerifyAccount_SC() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_Login_VerifyAccount_SC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_Login_VerifyAccount_SC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  szusername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_Login_VerifyAccount_SC::ArenaDtor(void* object) {
  Msg_Login_VerifyAccount_SC* _this = reinterpret_cast< Msg_Login_VerifyAccount_SC* >(object);
  (void)_this;
}
void Msg_Login_VerifyAccount_SC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_Login_VerifyAccount_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_Login_VerifyAccount_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_Login_VerifyAccount_SC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szusername_.ClearToEmpty();
  ::memset(&uiaccid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&estate_) -
      reinterpret_cast<char*>(&uiaccid_)) + sizeof(estate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_Login_VerifyAccount_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uiAccID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiaccid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string szUserName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_szusername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_Login_VerifyAccount_SC.szUserName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nGameID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ngameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 nServerTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          nservertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nTimeZone = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ntimezone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 opendate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          opendate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.PlayerStatus eState = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_estate(static_cast<::XrPb::PlayerStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_Login_VerifyAccount_SC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_Login_VerifyAccount_SC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uiAccID = 1;
  if (this->_internal_uiaccid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uiaccid(), target);
  }

  // string szUserName = 2;
  if (!this->_internal_szusername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_szusername().data(), static_cast<int>(this->_internal_szusername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_Login_VerifyAccount_SC.szUserName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_szusername(), target);
  }

  // uint32 nGameID = 3;
  if (this->_internal_ngameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ngameid(), target);
  }

  // int64 nServerTime = 4;
  if (this->_internal_nservertime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_nservertime(), target);
  }

  // int32 nTimeZone = 5;
  if (this->_internal_ntimezone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ntimezone(), target);
  }

  // int64 opendate = 6;
  if (this->_internal_opendate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_opendate(), target);
  }

  // .XrPb.PlayerStatus eState = 7;
  if (this->_internal_estate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_estate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_Login_VerifyAccount_SC)
  return target;
}

size_t Msg_Login_VerifyAccount_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_Login_VerifyAccount_SC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szUserName = 2;
  if (!this->_internal_szusername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_szusername());
  }

  // int64 uiAccID = 1;
  if (this->_internal_uiaccid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiaccid());
  }

  // int64 nServerTime = 4;
  if (this->_internal_nservertime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_nservertime());
  }

  // uint32 nGameID = 3;
  if (this->_internal_ngameid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ngameid());
  }

  // int32 nTimeZone = 5;
  if (this->_internal_ntimezone() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ntimezone());
  }

  // int64 opendate = 6;
  if (this->_internal_opendate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_opendate());
  }

  // .XrPb.PlayerStatus eState = 7;
  if (this->_internal_estate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_estate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_Login_VerifyAccount_SC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_Login_VerifyAccount_SC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_Login_VerifyAccount_SC::GetClassData() const { return &_class_data_; }

void Msg_Login_VerifyAccount_SC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_Login_VerifyAccount_SC *>(to)->MergeFrom(
      static_cast<const Msg_Login_VerifyAccount_SC &>(from));
}


void Msg_Login_VerifyAccount_SC::MergeFrom(const Msg_Login_VerifyAccount_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_Login_VerifyAccount_SC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_szusername().empty()) {
    _internal_set_szusername(from._internal_szusername());
  }
  if (from._internal_uiaccid() != 0) {
    _internal_set_uiaccid(from._internal_uiaccid());
  }
  if (from._internal_nservertime() != 0) {
    _internal_set_nservertime(from._internal_nservertime());
  }
  if (from._internal_ngameid() != 0) {
    _internal_set_ngameid(from._internal_ngameid());
  }
  if (from._internal_ntimezone() != 0) {
    _internal_set_ntimezone(from._internal_ntimezone());
  }
  if (from._internal_opendate() != 0) {
    _internal_set_opendate(from._internal_opendate());
  }
  if (from._internal_estate() != 0) {
    _internal_set_estate(from._internal_estate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_Login_VerifyAccount_SC::CopyFrom(const Msg_Login_VerifyAccount_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_Login_VerifyAccount_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Login_VerifyAccount_SC::IsInitialized() const {
  return true;
}

void Msg_Login_VerifyAccount_SC::InternalSwap(Msg_Login_VerifyAccount_SC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &szusername_, lhs_arena,
      &other->szusername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_Login_VerifyAccount_SC, estate_)
      + sizeof(Msg_Login_VerifyAccount_SC::estate_)
      - PROTOBUF_FIELD_OFFSET(Msg_Login_VerifyAccount_SC, uiaccid_)>(
          reinterpret_cast<char*>(&uiaccid_),
          reinterpret_cast<char*>(&other->uiaccid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Login_VerifyAccount_SC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[4]);
}

// ===================================================================

class Msg_CreateRole_CS::_Internal {
 public:
  static const ::XrPb::FormData& form(const Msg_CreateRole_CS* msg);
};

const ::XrPb::FormData&
Msg_CreateRole_CS::_Internal::form(const Msg_CreateRole_CS* msg) {
  return *msg->form_;
}
void Msg_CreateRole_CS::clear_form() {
  if (GetArenaForAllocation() == nullptr && form_ != nullptr) {
    delete form_;
  }
  form_ = nullptr;
}
Msg_CreateRole_CS::Msg_CreateRole_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_CreateRole_CS)
}
Msg_CreateRole_CS::Msg_CreateRole_CS(const Msg_CreateRole_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  szrolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    szrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_szrolename().empty()) {
    szrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_szrolename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_form()) {
    form_ = new ::XrPb::FormData(*from.form_);
  } else {
    form_ = nullptr;
  }
  ::memcpy(&ncareerid_, &from.ncareerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bgender_) -
    reinterpret_cast<char*>(&ncareerid_)) + sizeof(bgender_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_CreateRole_CS)
}

inline void Msg_CreateRole_CS::SharedCtor() {
szrolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  szrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&form_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bgender_) -
    reinterpret_cast<char*>(&form_)) + sizeof(bgender_));
}

Msg_CreateRole_CS::~Msg_CreateRole_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_CreateRole_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_CreateRole_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  szrolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete form_;
}

void Msg_CreateRole_CS::ArenaDtor(void* object) {
  Msg_CreateRole_CS* _this = reinterpret_cast< Msg_CreateRole_CS* >(object);
  (void)_this;
}
void Msg_CreateRole_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_CreateRole_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_CreateRole_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_CreateRole_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szrolename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && form_ != nullptr) {
    delete form_;
  }
  form_ = nullptr;
  ::memset(&ncareerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bgender_) -
      reinterpret_cast<char*>(&ncareerid_)) + sizeof(bgender_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_CreateRole_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 nCareerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ncareerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bGender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          bgender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string szRoleName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_szrolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_CreateRole_CS.szRoleName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.FormData form = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_form(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_CreateRole_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_CreateRole_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nCareerID = 1;
  if (this->_internal_ncareerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ncareerid(), target);
  }

  // uint32 bGender = 2;
  if (this->_internal_bgender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bgender(), target);
  }

  // string szRoleName = 3;
  if (!this->_internal_szrolename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_szrolename().data(), static_cast<int>(this->_internal_szrolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_CreateRole_CS.szRoleName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_szrolename(), target);
  }

  // .XrPb.FormData form = 4;
  if (this->_internal_has_form()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::form(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_CreateRole_CS)
  return target;
}

size_t Msg_CreateRole_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_CreateRole_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szRoleName = 3;
  if (!this->_internal_szrolename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_szrolename());
  }

  // .XrPb.FormData form = 4;
  if (this->_internal_has_form()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *form_);
  }

  // uint32 nCareerID = 1;
  if (this->_internal_ncareerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ncareerid());
  }

  // uint32 bGender = 2;
  if (this->_internal_bgender() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bgender());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_CreateRole_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_CreateRole_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_CreateRole_CS::GetClassData() const { return &_class_data_; }

void Msg_CreateRole_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_CreateRole_CS *>(to)->MergeFrom(
      static_cast<const Msg_CreateRole_CS &>(from));
}


void Msg_CreateRole_CS::MergeFrom(const Msg_CreateRole_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_CreateRole_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_szrolename().empty()) {
    _internal_set_szrolename(from._internal_szrolename());
  }
  if (from._internal_has_form()) {
    _internal_mutable_form()->::XrPb::FormData::MergeFrom(from._internal_form());
  }
  if (from._internal_ncareerid() != 0) {
    _internal_set_ncareerid(from._internal_ncareerid());
  }
  if (from._internal_bgender() != 0) {
    _internal_set_bgender(from._internal_bgender());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_CreateRole_CS::CopyFrom(const Msg_CreateRole_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_CreateRole_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_CreateRole_CS::IsInitialized() const {
  return true;
}

void Msg_CreateRole_CS::InternalSwap(Msg_CreateRole_CS* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &szrolename_, lhs_arena,
      &other->szrolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_CreateRole_CS, bgender_)
      + sizeof(Msg_CreateRole_CS::bgender_)
      - PROTOBUF_FIELD_OFFSET(Msg_CreateRole_CS, form_)>(
          reinterpret_cast<char*>(&form_),
          reinterpret_cast<char*>(&other->form_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_CreateRole_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[5]);
}

// ===================================================================

class Msg_CreateRole_SC::_Internal {
 public:
};

Msg_CreateRole_SC::Msg_CreateRole_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_CreateRole_SC)
}
Msg_CreateRole_SC::Msg_CreateRole_SC(const Msg_CreateRole_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  szrolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    szrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_szrolename().empty()) {
    szrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_szrolename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&dwroleid_, &from.dwroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nlevel_) -
    reinterpret_cast<char*>(&dwroleid_)) + sizeof(nlevel_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_CreateRole_SC)
}

inline void Msg_CreateRole_SC::SharedCtor() {
szrolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  szrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dwroleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nlevel_) -
    reinterpret_cast<char*>(&dwroleid_)) + sizeof(nlevel_));
}

Msg_CreateRole_SC::~Msg_CreateRole_SC() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_CreateRole_SC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_CreateRole_SC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  szrolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_CreateRole_SC::ArenaDtor(void* object) {
  Msg_CreateRole_SC* _this = reinterpret_cast< Msg_CreateRole_SC* >(object);
  (void)_this;
}
void Msg_CreateRole_SC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_CreateRole_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_CreateRole_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_CreateRole_SC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szrolename_.ClearToEmpty();
  ::memset(&dwroleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nlevel_) -
      reinterpret_cast<char*>(&dwroleid_)) + sizeof(nlevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_CreateRole_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 dwRoleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          dwroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string szRoleName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_szrolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_CreateRole_SC.szRoleName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          nlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 llCreateTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          llcreatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_CreateRole_SC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_CreateRole_SC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 dwRoleId = 1;
  if (this->_internal_dwroleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_dwroleid(), target);
  }

  // string szRoleName = 2;
  if (!this->_internal_szrolename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_szrolename().data(), static_cast<int>(this->_internal_szrolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_CreateRole_SC.szRoleName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_szrolename(), target);
  }

  // int32 nLevel = 3;
  if (this->_internal_nlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_nlevel(), target);
  }

  // int64 llCreateTime = 4;
  if (this->_internal_llcreatetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_llcreatetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_CreateRole_SC)
  return target;
}

size_t Msg_CreateRole_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_CreateRole_SC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szRoleName = 2;
  if (!this->_internal_szrolename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_szrolename());
  }

  // int64 dwRoleId = 1;
  if (this->_internal_dwroleid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_dwroleid());
  }

  // int64 llCreateTime = 4;
  if (this->_internal_llcreatetime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_llcreatetime());
  }

  // int32 nLevel = 3;
  if (this->_internal_nlevel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nlevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_CreateRole_SC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_CreateRole_SC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_CreateRole_SC::GetClassData() const { return &_class_data_; }

void Msg_CreateRole_SC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_CreateRole_SC *>(to)->MergeFrom(
      static_cast<const Msg_CreateRole_SC &>(from));
}


void Msg_CreateRole_SC::MergeFrom(const Msg_CreateRole_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_CreateRole_SC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_szrolename().empty()) {
    _internal_set_szrolename(from._internal_szrolename());
  }
  if (from._internal_dwroleid() != 0) {
    _internal_set_dwroleid(from._internal_dwroleid());
  }
  if (from._internal_llcreatetime() != 0) {
    _internal_set_llcreatetime(from._internal_llcreatetime());
  }
  if (from._internal_nlevel() != 0) {
    _internal_set_nlevel(from._internal_nlevel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_CreateRole_SC::CopyFrom(const Msg_CreateRole_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_CreateRole_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_CreateRole_SC::IsInitialized() const {
  return true;
}

void Msg_CreateRole_SC::InternalSwap(Msg_CreateRole_SC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &szrolename_, lhs_arena,
      &other->szrolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_CreateRole_SC, nlevel_)
      + sizeof(Msg_CreateRole_SC::nlevel_)
      - PROTOBUF_FIELD_OFFSET(Msg_CreateRole_SC, dwroleid_)>(
          reinterpret_cast<char*>(&dwroleid_),
          reinterpret_cast<char*>(&other->dwroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_CreateRole_SC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[6]);
}

// ===================================================================

class Msg_Role_PUSH::_Internal {
 public:
  static const ::XrPb::RoleBaseInfo& role(const Msg_Role_PUSH* msg);
  static const ::XrPb::FormData& form(const Msg_Role_PUSH* msg);
};

const ::XrPb::RoleBaseInfo&
Msg_Role_PUSH::_Internal::role(const Msg_Role_PUSH* msg) {
  return *msg->role_;
}
const ::XrPb::FormData&
Msg_Role_PUSH::_Internal::form(const Msg_Role_PUSH* msg) {
  return *msg->form_;
}
void Msg_Role_PUSH::clear_role() {
  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
void Msg_Role_PUSH::clear_form() {
  if (GetArenaForAllocation() == nullptr && form_ != nullptr) {
    delete form_;
  }
  form_ = nullptr;
}
Msg_Role_PUSH::Msg_Role_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_Role_PUSH)
}
Msg_Role_PUSH::Msg_Role_PUSH(const Msg_Role_PUSH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::XrPb::RoleBaseInfo(*from.role_);
  } else {
    role_ = nullptr;
  }
  if (from._internal_has_form()) {
    form_ = new ::XrPb::FormData(*from.form_);
  } else {
    form_ = nullptr;
  }
  ::memcpy(&un32exp_, &from.un32exp_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_time_) -
    reinterpret_cast<char*>(&un32exp_)) + sizeof(create_time_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_Role_PUSH)
}

inline void Msg_Role_PUSH::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&create_time_) -
    reinterpret_cast<char*>(&role_)) + sizeof(create_time_));
}

Msg_Role_PUSH::~Msg_Role_PUSH() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_Role_PUSH)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_Role_PUSH::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
  if (this != internal_default_instance()) delete form_;
}

void Msg_Role_PUSH::ArenaDtor(void* object) {
  Msg_Role_PUSH* _this = reinterpret_cast< Msg_Role_PUSH* >(object);
  (void)_this;
}
void Msg_Role_PUSH::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_Role_PUSH::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_Role_PUSH::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_Role_PUSH)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  if (GetArenaForAllocation() == nullptr && form_ != nullptr) {
    delete form_;
  }
  form_ = nullptr;
  ::memset(&un32exp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&un32exp_)) + sizeof(create_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_Role_PUSH::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.RoleBaseInfo role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 un32Exp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          un32exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 GMLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          gmlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.FormData form = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_form(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 create_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_Role_PUSH::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_Role_PUSH)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.RoleBaseInfo role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // uint32 un32Exp = 2;
  if (this->_internal_un32exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_un32exp(), target);
  }

  // uint32 GMLevel = 3;
  if (this->_internal_gmlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gmlevel(), target);
  }

  // .XrPb.FormData form = 4;
  if (this->_internal_has_form()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::form(this), target, stream);
  }

  // int64 create_time = 5;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_create_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_Role_PUSH)
  return target;
}

size_t Msg_Role_PUSH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_Role_PUSH)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.RoleBaseInfo role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // .XrPb.FormData form = 4;
  if (this->_internal_has_form()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *form_);
  }

  // uint32 un32Exp = 2;
  if (this->_internal_un32exp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_un32exp());
  }

  // uint32 GMLevel = 3;
  if (this->_internal_gmlevel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gmlevel());
  }

  // int64 create_time = 5;
  if (this->_internal_create_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_create_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_Role_PUSH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_Role_PUSH::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_Role_PUSH::GetClassData() const { return &_class_data_; }

void Msg_Role_PUSH::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_Role_PUSH *>(to)->MergeFrom(
      static_cast<const Msg_Role_PUSH &>(from));
}


void Msg_Role_PUSH::MergeFrom(const Msg_Role_PUSH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_Role_PUSH)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::RoleBaseInfo::MergeFrom(from._internal_role());
  }
  if (from._internal_has_form()) {
    _internal_mutable_form()->::XrPb::FormData::MergeFrom(from._internal_form());
  }
  if (from._internal_un32exp() != 0) {
    _internal_set_un32exp(from._internal_un32exp());
  }
  if (from._internal_gmlevel() != 0) {
    _internal_set_gmlevel(from._internal_gmlevel());
  }
  if (from._internal_create_time() != 0) {
    _internal_set_create_time(from._internal_create_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_Role_PUSH::CopyFrom(const Msg_Role_PUSH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_Role_PUSH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Role_PUSH::IsInitialized() const {
  return true;
}

void Msg_Role_PUSH::InternalSwap(Msg_Role_PUSH* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_Role_PUSH, create_time_)
      + sizeof(Msg_Role_PUSH::create_time_)
      - PROTOBUF_FIELD_OFFSET(Msg_Role_PUSH, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Role_PUSH::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[7]);
}

// ===================================================================

class Msg_RollName_CS::_Internal {
 public:
};

Msg_RollName_CS::Msg_RollName_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_RollName_CS)
}
Msg_RollName_CS::Msg_RollName_CS(const Msg_RollName_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bisman_ = from.bisman_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_RollName_CS)
}

inline void Msg_RollName_CS::SharedCtor() {
bisman_ = false;
}

Msg_RollName_CS::~Msg_RollName_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_RollName_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_RollName_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_RollName_CS::ArenaDtor(void* object) {
  Msg_RollName_CS* _this = reinterpret_cast< Msg_RollName_CS* >(object);
  (void)_this;
}
void Msg_RollName_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_RollName_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_RollName_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_RollName_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bisman_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_RollName_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bIsMan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          bisman_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_RollName_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_RollName_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool bIsMan = 1;
  if (this->_internal_bisman() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_bisman(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_RollName_CS)
  return target;
}

size_t Msg_RollName_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_RollName_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool bIsMan = 1;
  if (this->_internal_bisman() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_RollName_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_RollName_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_RollName_CS::GetClassData() const { return &_class_data_; }

void Msg_RollName_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_RollName_CS *>(to)->MergeFrom(
      static_cast<const Msg_RollName_CS &>(from));
}


void Msg_RollName_CS::MergeFrom(const Msg_RollName_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_RollName_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bisman() != 0) {
    _internal_set_bisman(from._internal_bisman());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_RollName_CS::CopyFrom(const Msg_RollName_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_RollName_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RollName_CS::IsInitialized() const {
  return true;
}

void Msg_RollName_CS::InternalSwap(Msg_RollName_CS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(bisman_, other->bisman_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_RollName_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[8]);
}

// ===================================================================

class Msg_RollName_SC::_Internal {
 public:
};

Msg_RollName_SC::Msg_RollName_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_RollName_SC)
}
Msg_RollName_SC::Msg_RollName_SC(const Msg_RollName_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strrollname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strrollname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strrollname().empty()) {
    strrollname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strrollname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_RollName_SC)
}

inline void Msg_RollName_SC::SharedCtor() {
strrollname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strrollname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Msg_RollName_SC::~Msg_RollName_SC() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_RollName_SC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_RollName_SC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strrollname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_RollName_SC::ArenaDtor(void* object) {
  Msg_RollName_SC* _this = reinterpret_cast< Msg_RollName_SC* >(object);
  (void)_this;
}
void Msg_RollName_SC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_RollName_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_RollName_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_RollName_SC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strrollname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_RollName_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string strRollName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_strrollname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_RollName_SC.strRollName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_RollName_SC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_RollName_SC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string strRollName = 1;
  if (!this->_internal_strrollname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strrollname().data(), static_cast<int>(this->_internal_strrollname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_RollName_SC.strRollName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strrollname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_RollName_SC)
  return target;
}

size_t Msg_RollName_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_RollName_SC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strRollName = 1;
  if (!this->_internal_strrollname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strrollname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_RollName_SC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_RollName_SC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_RollName_SC::GetClassData() const { return &_class_data_; }

void Msg_RollName_SC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_RollName_SC *>(to)->MergeFrom(
      static_cast<const Msg_RollName_SC &>(from));
}


void Msg_RollName_SC::MergeFrom(const Msg_RollName_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_RollName_SC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_strrollname().empty()) {
    _internal_set_strrollname(from._internal_strrollname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_RollName_SC::CopyFrom(const Msg_RollName_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_RollName_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RollName_SC::IsInitialized() const {
  return true;
}

void Msg_RollName_SC::InternalSwap(Msg_RollName_SC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strrollname_, lhs_arena,
      &other->strrollname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_RollName_SC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[9]);
}

// ===================================================================

class Msg_Kick_PUSH::_Internal {
 public:
};

Msg_Kick_PUSH::Msg_Kick_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_Kick_PUSH)
}
Msg_Kick_PUSH::Msg_Kick_PUSH(const Msg_Kick_PUSH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strusername().empty()) {
    strusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strusername(), 
      GetArenaForAllocation());
  }
  ::memcpy(&uiaccid_, &from.uiaccid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ngameid_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(ngameid_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_Kick_PUSH)
}

inline void Msg_Kick_PUSH::SharedCtor() {
strusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiaccid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ngameid_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(ngameid_));
}

Msg_Kick_PUSH::~Msg_Kick_PUSH() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_Kick_PUSH)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_Kick_PUSH::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strusername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_Kick_PUSH::ArenaDtor(void* object) {
  Msg_Kick_PUSH* _this = reinterpret_cast< Msg_Kick_PUSH* >(object);
  (void)_this;
}
void Msg_Kick_PUSH::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_Kick_PUSH::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_Kick_PUSH::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_Kick_PUSH)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strusername_.ClearToEmpty();
  ::memset(&uiaccid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ngameid_) -
      reinterpret_cast<char*>(&uiaccid_)) + sizeof(ngameid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_Kick_PUSH::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uiAccID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiaccid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string strUserName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strusername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_Kick_PUSH.strUserName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nFlag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          nflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nGameID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ngameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_Kick_PUSH::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_Kick_PUSH)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uiAccID = 1;
  if (this->_internal_uiaccid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uiaccid(), target);
  }

  // string strUserName = 2;
  if (!this->_internal_strusername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strusername().data(), static_cast<int>(this->_internal_strusername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_Kick_PUSH.strUserName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strusername(), target);
  }

  // int32 nFlag = 3;
  if (this->_internal_nflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_nflag(), target);
  }

  // uint32 nGameID = 4;
  if (this->_internal_ngameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ngameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_Kick_PUSH)
  return target;
}

size_t Msg_Kick_PUSH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_Kick_PUSH)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strUserName = 2;
  if (!this->_internal_strusername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strusername());
  }

  // int64 uiAccID = 1;
  if (this->_internal_uiaccid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiaccid());
  }

  // int32 nFlag = 3;
  if (this->_internal_nflag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nflag());
  }

  // uint32 nGameID = 4;
  if (this->_internal_ngameid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ngameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_Kick_PUSH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_Kick_PUSH::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_Kick_PUSH::GetClassData() const { return &_class_data_; }

void Msg_Kick_PUSH::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_Kick_PUSH *>(to)->MergeFrom(
      static_cast<const Msg_Kick_PUSH &>(from));
}


void Msg_Kick_PUSH::MergeFrom(const Msg_Kick_PUSH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_Kick_PUSH)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_strusername().empty()) {
    _internal_set_strusername(from._internal_strusername());
  }
  if (from._internal_uiaccid() != 0) {
    _internal_set_uiaccid(from._internal_uiaccid());
  }
  if (from._internal_nflag() != 0) {
    _internal_set_nflag(from._internal_nflag());
  }
  if (from._internal_ngameid() != 0) {
    _internal_set_ngameid(from._internal_ngameid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_Kick_PUSH::CopyFrom(const Msg_Kick_PUSH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_Kick_PUSH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Kick_PUSH::IsInitialized() const {
  return true;
}

void Msg_Kick_PUSH::InternalSwap(Msg_Kick_PUSH* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strusername_, lhs_arena,
      &other->strusername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_Kick_PUSH, ngameid_)
      + sizeof(Msg_Kick_PUSH::ngameid_)
      - PROTOBUF_FIELD_OFFSET(Msg_Kick_PUSH, uiaccid_)>(
          reinterpret_cast<char*>(&uiaccid_),
          reinterpret_cast<char*>(&other->uiaccid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Kick_PUSH::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[10]);
}

// ===================================================================

class Msg_BeatHeart_CS::_Internal {
 public:
};

Msg_BeatHeart_CS::Msg_BeatHeart_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_BeatHeart_CS)
}
Msg_BeatHeart_CS::Msg_BeatHeart_CS(const Msg_BeatHeart_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_BeatHeart_CS)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_BeatHeart_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_BeatHeart_CS::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Msg_BeatHeart_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[11]);
}

// ===================================================================

class Msg_BeatHeart_SC::_Internal {
 public:
};

Msg_BeatHeart_SC::Msg_BeatHeart_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_BeatHeart_SC)
}
Msg_BeatHeart_SC::Msg_BeatHeart_SC(const Msg_BeatHeart_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nservertime_ = from.nservertime_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_BeatHeart_SC)
}

inline void Msg_BeatHeart_SC::SharedCtor() {
nservertime_ = int64_t{0};
}

Msg_BeatHeart_SC::~Msg_BeatHeart_SC() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_BeatHeart_SC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_BeatHeart_SC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_BeatHeart_SC::ArenaDtor(void* object) {
  Msg_BeatHeart_SC* _this = reinterpret_cast< Msg_BeatHeart_SC* >(object);
  (void)_this;
}
void Msg_BeatHeart_SC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_BeatHeart_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_BeatHeart_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_BeatHeart_SC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nservertime_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_BeatHeart_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 nServerTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          nservertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_BeatHeart_SC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_BeatHeart_SC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 nServerTime = 1;
  if (this->_internal_nservertime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_nservertime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_BeatHeart_SC)
  return target;
}

size_t Msg_BeatHeart_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_BeatHeart_SC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 nServerTime = 1;
  if (this->_internal_nservertime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_nservertime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_BeatHeart_SC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_BeatHeart_SC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_BeatHeart_SC::GetClassData() const { return &_class_data_; }

void Msg_BeatHeart_SC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_BeatHeart_SC *>(to)->MergeFrom(
      static_cast<const Msg_BeatHeart_SC &>(from));
}


void Msg_BeatHeart_SC::MergeFrom(const Msg_BeatHeart_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_BeatHeart_SC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nservertime() != 0) {
    _internal_set_nservertime(from._internal_nservertime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_BeatHeart_SC::CopyFrom(const Msg_BeatHeart_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_BeatHeart_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_BeatHeart_SC::IsInitialized() const {
  return true;
}

void Msg_BeatHeart_SC::InternalSwap(Msg_BeatHeart_SC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(nservertime_, other->nservertime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_BeatHeart_SC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[12]);
}

// ===================================================================

class Msg_LoadOtherPlayerData_CS::_Internal {
 public:
};

Msg_LoadOtherPlayerData_CS::Msg_LoadOtherPlayerData_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_LoadOtherPlayerData_CS)
}
Msg_LoadOtherPlayerData_CS::Msg_LoadOtherPlayerData_CS(const Msg_LoadOtherPlayerData_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acc_id_ = from.acc_id_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_LoadOtherPlayerData_CS)
}

inline void Msg_LoadOtherPlayerData_CS::SharedCtor() {
acc_id_ = int64_t{0};
}

Msg_LoadOtherPlayerData_CS::~Msg_LoadOtherPlayerData_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_LoadOtherPlayerData_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_LoadOtherPlayerData_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_LoadOtherPlayerData_CS::ArenaDtor(void* object) {
  Msg_LoadOtherPlayerData_CS* _this = reinterpret_cast< Msg_LoadOtherPlayerData_CS* >(object);
  (void)_this;
}
void Msg_LoadOtherPlayerData_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_LoadOtherPlayerData_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_LoadOtherPlayerData_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_LoadOtherPlayerData_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acc_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_LoadOtherPlayerData_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_LoadOtherPlayerData_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_LoadOtherPlayerData_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_LoadOtherPlayerData_CS)
  return target;
}

size_t Msg_LoadOtherPlayerData_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_LoadOtherPlayerData_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_LoadOtherPlayerData_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_LoadOtherPlayerData_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_LoadOtherPlayerData_CS::GetClassData() const { return &_class_data_; }

void Msg_LoadOtherPlayerData_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_LoadOtherPlayerData_CS *>(to)->MergeFrom(
      static_cast<const Msg_LoadOtherPlayerData_CS &>(from));
}


void Msg_LoadOtherPlayerData_CS::MergeFrom(const Msg_LoadOtherPlayerData_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_LoadOtherPlayerData_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_LoadOtherPlayerData_CS::CopyFrom(const Msg_LoadOtherPlayerData_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_LoadOtherPlayerData_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_LoadOtherPlayerData_CS::IsInitialized() const {
  return true;
}

void Msg_LoadOtherPlayerData_CS::InternalSwap(Msg_LoadOtherPlayerData_CS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(acc_id_, other->acc_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_LoadOtherPlayerData_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[13]);
}

// ===================================================================

class Msg_LoadOtherPlayerData_SC::_Internal {
 public:
  static const ::XrPb::FormData& form(const Msg_LoadOtherPlayerData_SC* msg);
};

const ::XrPb::FormData&
Msg_LoadOtherPlayerData_SC::_Internal::form(const Msg_LoadOtherPlayerData_SC* msg) {
  return *msg->form_;
}
void Msg_LoadOtherPlayerData_SC::clear_form() {
  if (GetArenaForAllocation() == nullptr && form_ != nullptr) {
    delete form_;
  }
  form_ = nullptr;
}
Msg_LoadOtherPlayerData_SC::Msg_LoadOtherPlayerData_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_LoadOtherPlayerData_SC)
}
Msg_LoadOtherPlayerData_SC::Msg_LoadOtherPlayerData_SC(const Msg_LoadOtherPlayerData_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    role_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role_name().empty()) {
    role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_form()) {
    form_ = new ::XrPb::FormData(*from.form_);
  } else {
    form_ = nullptr;
  }
  ::memcpy(&acc_id_, &from.acc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&acc_id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_LoadOtherPlayerData_SC)
}

inline void Msg_LoadOtherPlayerData_SC::SharedCtor() {
role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  role_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&form_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&form_)) + sizeof(level_));
}

Msg_LoadOtherPlayerData_SC::~Msg_LoadOtherPlayerData_SC() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_LoadOtherPlayerData_SC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_LoadOtherPlayerData_SC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  role_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete form_;
}

void Msg_LoadOtherPlayerData_SC::ArenaDtor(void* object) {
  Msg_LoadOtherPlayerData_SC* _this = reinterpret_cast< Msg_LoadOtherPlayerData_SC* >(object);
  (void)_this;
}
void Msg_LoadOtherPlayerData_SC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_LoadOtherPlayerData_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_LoadOtherPlayerData_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_LoadOtherPlayerData_SC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && form_ != nullptr) {
    delete form_;
  }
  form_ = nullptr;
  ::memset(&acc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&acc_id_)) + sizeof(level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_LoadOtherPlayerData_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.FormData form = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_form(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_role_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_LoadOtherPlayerData_SC.role_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_LoadOtherPlayerData_SC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_LoadOtherPlayerData_SC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  // .XrPb.FormData form = 2;
  if (this->_internal_has_form()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::form(this), target, stream);
  }

  // string role_name = 3;
  if (!this->_internal_role_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_LoadOtherPlayerData_SC.role_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_role_name(), target);
  }

  // uint32 level = 4;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_LoadOtherPlayerData_SC)
  return target;
}

size_t Msg_LoadOtherPlayerData_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_LoadOtherPlayerData_SC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role_name = 3;
  if (!this->_internal_role_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role_name());
  }

  // .XrPb.FormData form = 2;
  if (this->_internal_has_form()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *form_);
  }

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  // uint32 level = 4;
  if (this->_internal_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_LoadOtherPlayerData_SC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_LoadOtherPlayerData_SC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_LoadOtherPlayerData_SC::GetClassData() const { return &_class_data_; }

void Msg_LoadOtherPlayerData_SC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_LoadOtherPlayerData_SC *>(to)->MergeFrom(
      static_cast<const Msg_LoadOtherPlayerData_SC &>(from));
}


void Msg_LoadOtherPlayerData_SC::MergeFrom(const Msg_LoadOtherPlayerData_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_LoadOtherPlayerData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role_name().empty()) {
    _internal_set_role_name(from._internal_role_name());
  }
  if (from._internal_has_form()) {
    _internal_mutable_form()->::XrPb::FormData::MergeFrom(from._internal_form());
  }
  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_LoadOtherPlayerData_SC::CopyFrom(const Msg_LoadOtherPlayerData_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_LoadOtherPlayerData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_LoadOtherPlayerData_SC::IsInitialized() const {
  return true;
}

void Msg_LoadOtherPlayerData_SC::InternalSwap(Msg_LoadOtherPlayerData_SC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &role_name_, lhs_arena,
      &other->role_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_LoadOtherPlayerData_SC, level_)
      + sizeof(Msg_LoadOtherPlayerData_SC::level_)
      - PROTOBUF_FIELD_OFFSET(Msg_LoadOtherPlayerData_SC, form_)>(
          reinterpret_cast<char*>(&form_),
          reinterpret_cast<char*>(&other->form_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_LoadOtherPlayerData_SC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[14]);
}

// ===================================================================

class Msg_ItemList_REQ::_Internal {
 public:
};

Msg_ItemList_REQ::Msg_ItemList_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_ItemList_REQ)
}
Msg_ItemList_REQ::Msg_ItemList_REQ(const Msg_ItemList_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_ItemList_REQ)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_ItemList_REQ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_ItemList_REQ::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Msg_ItemList_REQ::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[15]);
}

// ===================================================================

class Msg_ItemList_PUSH::_Internal {
 public:
};

void Msg_ItemList_PUSH::clear_oitem() {
  oitem_.Clear();
}
Msg_ItemList_PUSH::Msg_ItemList_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  oitem_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_ItemList_PUSH)
}
Msg_ItemList_PUSH::Msg_ItemList_PUSH(const Msg_ItemList_PUSH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      oitem_(from.oitem_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_ItemList_PUSH)
}

inline void Msg_ItemList_PUSH::SharedCtor() {
}

Msg_ItemList_PUSH::~Msg_ItemList_PUSH() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_ItemList_PUSH)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_ItemList_PUSH::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_ItemList_PUSH::ArenaDtor(void* object) {
  Msg_ItemList_PUSH* _this = reinterpret_cast< Msg_ItemList_PUSH* >(object);
  (void)_this;
}
void Msg_ItemList_PUSH::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_ItemList_PUSH::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_ItemList_PUSH::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_ItemList_PUSH)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oitem_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_ItemList_PUSH::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .XrPb.Item oItem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_oitem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_ItemList_PUSH::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_ItemList_PUSH)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .XrPb.Item oItem = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_oitem_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_oitem(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_ItemList_PUSH)
  return target;
}

size_t Msg_ItemList_PUSH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_ItemList_PUSH)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XrPb.Item oItem = 1;
  total_size += 1UL * this->_internal_oitem_size();
  for (const auto& msg : this->oitem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_ItemList_PUSH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_ItemList_PUSH::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_ItemList_PUSH::GetClassData() const { return &_class_data_; }

void Msg_ItemList_PUSH::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_ItemList_PUSH *>(to)->MergeFrom(
      static_cast<const Msg_ItemList_PUSH &>(from));
}


void Msg_ItemList_PUSH::MergeFrom(const Msg_ItemList_PUSH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_ItemList_PUSH)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  oitem_.MergeFrom(from.oitem_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_ItemList_PUSH::CopyFrom(const Msg_ItemList_PUSH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_ItemList_PUSH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_ItemList_PUSH::IsInitialized() const {
  return true;
}

void Msg_ItemList_PUSH::InternalSwap(Msg_ItemList_PUSH* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  oitem_.InternalSwap(&other->oitem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_ItemList_PUSH::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_client_2fMsgLogin_2eproto_getter, &descriptor_table_client_2fMsgLogin_2eproto_once,
      file_level_metadata_client_2fMsgLogin_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XrPb::MsgMod_Login* Arena::CreateMaybeMessage< ::XrPb::MsgMod_Login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::MsgMod_Login >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_LoginFinish_PUSH* Arena::CreateMaybeMessage< ::XrPb::Msg_LoginFinish_PUSH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_LoginFinish_PUSH >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_Login_LineUp_PUSH* Arena::CreateMaybeMessage< ::XrPb::Msg_Login_LineUp_PUSH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_Login_LineUp_PUSH >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_Login_VerifyAccount_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_Login_VerifyAccount_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_Login_VerifyAccount_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_Login_VerifyAccount_SC* Arena::CreateMaybeMessage< ::XrPb::Msg_Login_VerifyAccount_SC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_Login_VerifyAccount_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_CreateRole_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_CreateRole_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_CreateRole_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_CreateRole_SC* Arena::CreateMaybeMessage< ::XrPb::Msg_CreateRole_SC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_CreateRole_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_Role_PUSH* Arena::CreateMaybeMessage< ::XrPb::Msg_Role_PUSH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_Role_PUSH >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_RollName_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_RollName_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_RollName_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_RollName_SC* Arena::CreateMaybeMessage< ::XrPb::Msg_RollName_SC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_RollName_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_Kick_PUSH* Arena::CreateMaybeMessage< ::XrPb::Msg_Kick_PUSH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_Kick_PUSH >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_BeatHeart_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_BeatHeart_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_BeatHeart_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_BeatHeart_SC* Arena::CreateMaybeMessage< ::XrPb::Msg_BeatHeart_SC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_BeatHeart_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_LoadOtherPlayerData_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_LoadOtherPlayerData_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_LoadOtherPlayerData_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_LoadOtherPlayerData_SC* Arena::CreateMaybeMessage< ::XrPb::Msg_LoadOtherPlayerData_SC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_LoadOtherPlayerData_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_ItemList_REQ* Arena::CreateMaybeMessage< ::XrPb::Msg_ItemList_REQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_ItemList_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_ItemList_PUSH* Arena::CreateMaybeMessage< ::XrPb::Msg_ItemList_PUSH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_ItemList_PUSH >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
