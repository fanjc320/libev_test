// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/MsgMatch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_2fMsgMatch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_2fMsgMatch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_2fMsgMatch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_2fMsgMatch_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_2fMsgMatch_2eproto;
namespace XrPb {
class MsgMod_Match;
struct MsgMod_MatchDefaultTypeInternal;
extern MsgMod_MatchDefaultTypeInternal _MsgMod_Match_default_instance_;
class Msg_Dup_Enter_CS;
struct Msg_Dup_Enter_CSDefaultTypeInternal;
extern Msg_Dup_Enter_CSDefaultTypeInternal _Msg_Dup_Enter_CS_default_instance_;
class Msg_Dup_Enter_SC;
struct Msg_Dup_Enter_SCDefaultTypeInternal;
extern Msg_Dup_Enter_SCDefaultTypeInternal _Msg_Dup_Enter_SC_default_instance_;
class Msg_Home_Enter_CS;
struct Msg_Home_Enter_CSDefaultTypeInternal;
extern Msg_Home_Enter_CSDefaultTypeInternal _Msg_Home_Enter_CS_default_instance_;
class Msg_Home_Enter_SC;
struct Msg_Home_Enter_SCDefaultTypeInternal;
extern Msg_Home_Enter_SCDefaultTypeInternal _Msg_Home_Enter_SC_default_instance_;
class Msg_Member_leave_PUSH;
struct Msg_Member_leave_PUSHDefaultTypeInternal;
extern Msg_Member_leave_PUSHDefaultTypeInternal _Msg_Member_leave_PUSH_default_instance_;
class Msg_PlayHall_Enter_CS;
struct Msg_PlayHall_Enter_CSDefaultTypeInternal;
extern Msg_PlayHall_Enter_CSDefaultTypeInternal _Msg_PlayHall_Enter_CS_default_instance_;
class Msg_PlayHall_Enter_SC;
struct Msg_PlayHall_Enter_SCDefaultTypeInternal;
extern Msg_PlayHall_Enter_SCDefaultTypeInternal _Msg_PlayHall_Enter_SC_default_instance_;
class RoomInfoData;
struct RoomInfoDataDefaultTypeInternal;
extern RoomInfoDataDefaultTypeInternal _RoomInfoData_default_instance_;
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> ::XrPb::MsgMod_Match* Arena::CreateMaybeMessage<::XrPb::MsgMod_Match>(Arena*);
template<> ::XrPb::Msg_Dup_Enter_CS* Arena::CreateMaybeMessage<::XrPb::Msg_Dup_Enter_CS>(Arena*);
template<> ::XrPb::Msg_Dup_Enter_SC* Arena::CreateMaybeMessage<::XrPb::Msg_Dup_Enter_SC>(Arena*);
template<> ::XrPb::Msg_Home_Enter_CS* Arena::CreateMaybeMessage<::XrPb::Msg_Home_Enter_CS>(Arena*);
template<> ::XrPb::Msg_Home_Enter_SC* Arena::CreateMaybeMessage<::XrPb::Msg_Home_Enter_SC>(Arena*);
template<> ::XrPb::Msg_Member_leave_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_Member_leave_PUSH>(Arena*);
template<> ::XrPb::Msg_PlayHall_Enter_CS* Arena::CreateMaybeMessage<::XrPb::Msg_PlayHall_Enter_CS>(Arena*);
template<> ::XrPb::Msg_PlayHall_Enter_SC* Arena::CreateMaybeMessage<::XrPb::Msg_PlayHall_Enter_SC>(Arena*);
template<> ::XrPb::RoomInfoData* Arena::CreateMaybeMessage<::XrPb::RoomInfoData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XrPb {

enum MsgMod_Match_MsgId : int {
  MsgMod_Match_MsgId_Msg_None = 0,
  MsgMod_Match_MsgId_Msg_Home_Enter_CS = 1,
  MsgMod_Match_MsgId_Msg_Home_Enter_SC = 2,
  MsgMod_Match_MsgId_Msg_PlayHall_Enter_CS = 3,
  MsgMod_Match_MsgId_Msg_PlayHall_Enter_SC = 4,
  MsgMod_Match_MsgId_Msg_Dup_Enter_CS = 5,
  MsgMod_Match_MsgId_Msg_Dup_Enter_SC = 6,
  MsgMod_Match_MsgId_MsgMod_Match_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgMod_Match_MsgId_MsgMod_Match_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgMod_Match_MsgId_IsValid(int value);
constexpr MsgMod_Match_MsgId MsgMod_Match_MsgId_MsgId_MIN = MsgMod_Match_MsgId_Msg_None;
constexpr MsgMod_Match_MsgId MsgMod_Match_MsgId_MsgId_MAX = MsgMod_Match_MsgId_Msg_Dup_Enter_SC;
constexpr int MsgMod_Match_MsgId_MsgId_ARRAYSIZE = MsgMod_Match_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgMod_Match_MsgId_descriptor();
template<typename T>
inline const std::string& MsgMod_Match_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgMod_Match_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgMod_Match_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgMod_Match_MsgId_descriptor(), enum_t_value);
}
inline bool MsgMod_Match_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgMod_Match_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgMod_Match_MsgId>(
    MsgMod_Match_MsgId_descriptor(), name, value);
}
// ===================================================================

class MsgMod_Match final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.MsgMod_Match) */ {
 public:
  inline MsgMod_Match() : MsgMod_Match(nullptr) {}
  explicit constexpr MsgMod_Match(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgMod_Match(const MsgMod_Match& from);
  MsgMod_Match(MsgMod_Match&& from) noexcept
    : MsgMod_Match() {
    *this = ::std::move(from);
  }

  inline MsgMod_Match& operator=(const MsgMod_Match& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgMod_Match& operator=(MsgMod_Match&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgMod_Match& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgMod_Match* internal_default_instance() {
    return reinterpret_cast<const MsgMod_Match*>(
               &_MsgMod_Match_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgMod_Match& a, MsgMod_Match& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgMod_Match* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgMod_Match* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgMod_Match* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgMod_Match>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgMod_Match& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgMod_Match& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.MsgMod_Match";
  }
  protected:
  explicit MsgMod_Match(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgMod_Match_MsgId MsgId;
  static constexpr MsgId Msg_None =
    MsgMod_Match_MsgId_Msg_None;
  static constexpr MsgId Msg_Home_Enter_CS =
    MsgMod_Match_MsgId_Msg_Home_Enter_CS;
  static constexpr MsgId Msg_Home_Enter_SC =
    MsgMod_Match_MsgId_Msg_Home_Enter_SC;
  static constexpr MsgId Msg_PlayHall_Enter_CS =
    MsgMod_Match_MsgId_Msg_PlayHall_Enter_CS;
  static constexpr MsgId Msg_PlayHall_Enter_SC =
    MsgMod_Match_MsgId_Msg_PlayHall_Enter_SC;
  static constexpr MsgId Msg_Dup_Enter_CS =
    MsgMod_Match_MsgId_Msg_Dup_Enter_CS;
  static constexpr MsgId Msg_Dup_Enter_SC =
    MsgMod_Match_MsgId_Msg_Dup_Enter_SC;
  static inline bool MsgId_IsValid(int value) {
    return MsgMod_Match_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    MsgMod_Match_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    MsgMod_Match_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    MsgMod_Match_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return MsgMod_Match_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return MsgMod_Match_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return MsgMod_Match_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.MsgMod_Match)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgMatch_2eproto;
};
// -------------------------------------------------------------------

class RoomInfoData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.RoomInfoData) */ {
 public:
  inline RoomInfoData() : RoomInfoData(nullptr) {}
  ~RoomInfoData() override;
  explicit constexpr RoomInfoData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomInfoData(const RoomInfoData& from);
  RoomInfoData(RoomInfoData&& from) noexcept
    : RoomInfoData() {
    *this = ::std::move(from);
  }

  inline RoomInfoData& operator=(const RoomInfoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfoData& operator=(RoomInfoData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomInfoData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomInfoData* internal_default_instance() {
    return reinterpret_cast<const RoomInfoData*>(
               &_RoomInfoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoomInfoData& a, RoomInfoData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfoData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInfoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomInfoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomInfoData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomInfoData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoomInfoData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfoData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.RoomInfoData";
  }
  protected:
  explicit RoomInfoData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kMapIdFieldNumber = 2,
    kIpFieldNumber = 3,
    kSessionFieldNumber = 5,
    kPortFieldNumber = 4,
  };
  // string roomId = 1;
  void clear_roomid();
  const std::string& roomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomid();
  PROTOBUF_NODISCARD std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // string mapId = 2;
  void clear_mapid();
  const std::string& mapid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapid();
  PROTOBUF_NODISCARD std::string* release_mapid();
  void set_allocated_mapid(std::string* mapid);
  private:
  const std::string& _internal_mapid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapid(const std::string& value);
  std::string* _internal_mutable_mapid();
  public:

  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string session = 5;
  void clear_session();
  const std::string& session() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session();
  PROTOBUF_NODISCARD std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // uint32 port = 4;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.RoomInfoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  uint32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgMatch_2eproto;
};
// -------------------------------------------------------------------

class Msg_Home_Enter_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_Home_Enter_CS) */ {
 public:
  inline Msg_Home_Enter_CS() : Msg_Home_Enter_CS(nullptr) {}
  ~Msg_Home_Enter_CS() override;
  explicit constexpr Msg_Home_Enter_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Home_Enter_CS(const Msg_Home_Enter_CS& from);
  Msg_Home_Enter_CS(Msg_Home_Enter_CS&& from) noexcept
    : Msg_Home_Enter_CS() {
    *this = ::std::move(from);
  }

  inline Msg_Home_Enter_CS& operator=(const Msg_Home_Enter_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Home_Enter_CS& operator=(Msg_Home_Enter_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Home_Enter_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Home_Enter_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_Home_Enter_CS*>(
               &_Msg_Home_Enter_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Msg_Home_Enter_CS& a, Msg_Home_Enter_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Home_Enter_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Home_Enter_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Home_Enter_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Home_Enter_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Home_Enter_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Home_Enter_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Home_Enter_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_Home_Enter_CS";
  }
  protected:
  explicit Msg_Home_Enter_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapidFieldNumber = 1,
  };
  // string mapid = 1;
  void clear_mapid();
  const std::string& mapid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapid();
  PROTOBUF_NODISCARD std::string* release_mapid();
  void set_allocated_mapid(std::string* mapid);
  private:
  const std::string& _internal_mapid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapid(const std::string& value);
  std::string* _internal_mutable_mapid();
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_Home_Enter_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgMatch_2eproto;
};
// -------------------------------------------------------------------

class Msg_Home_Enter_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_Home_Enter_SC) */ {
 public:
  inline Msg_Home_Enter_SC() : Msg_Home_Enter_SC(nullptr) {}
  ~Msg_Home_Enter_SC() override;
  explicit constexpr Msg_Home_Enter_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Home_Enter_SC(const Msg_Home_Enter_SC& from);
  Msg_Home_Enter_SC(Msg_Home_Enter_SC&& from) noexcept
    : Msg_Home_Enter_SC() {
    *this = ::std::move(from);
  }

  inline Msg_Home_Enter_SC& operator=(const Msg_Home_Enter_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Home_Enter_SC& operator=(Msg_Home_Enter_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Home_Enter_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Home_Enter_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_Home_Enter_SC*>(
               &_Msg_Home_Enter_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Msg_Home_Enter_SC& a, Msg_Home_Enter_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Home_Enter_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Home_Enter_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Home_Enter_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Home_Enter_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Home_Enter_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Home_Enter_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Home_Enter_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_Home_Enter_SC";
  }
  protected:
  explicit Msg_Home_Enter_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSessionFieldNumber = 2,
    kMapFieldNumber = 1,
    kConvidFieldNumber = 3,
  };
  // string playerSession = 2;
  void clear_playersession();
  const std::string& playersession() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playersession(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playersession();
  PROTOBUF_NODISCARD std::string* release_playersession();
  void set_allocated_playersession(std::string* playersession);
  private:
  const std::string& _internal_playersession() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playersession(const std::string& value);
  std::string* _internal_mutable_playersession();
  public:

  // .XrPb.RoomInfoData map = 1;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::XrPb::RoomInfoData& map() const;
  PROTOBUF_NODISCARD ::XrPb::RoomInfoData* release_map();
  ::XrPb::RoomInfoData* mutable_map();
  void set_allocated_map(::XrPb::RoomInfoData* map);
  private:
  const ::XrPb::RoomInfoData& _internal_map() const;
  ::XrPb::RoomInfoData* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::XrPb::RoomInfoData* map);
  ::XrPb::RoomInfoData* unsafe_arena_release_map();

  // uint32 convid = 3;
  void clear_convid();
  uint32_t convid() const;
  void set_convid(uint32_t value);
  private:
  uint32_t _internal_convid() const;
  void _internal_set_convid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_Home_Enter_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playersession_;
  ::XrPb::RoomInfoData* map_;
  uint32_t convid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgMatch_2eproto;
};
// -------------------------------------------------------------------

class Msg_PlayHall_Enter_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_PlayHall_Enter_CS) */ {
 public:
  inline Msg_PlayHall_Enter_CS() : Msg_PlayHall_Enter_CS(nullptr) {}
  ~Msg_PlayHall_Enter_CS() override;
  explicit constexpr Msg_PlayHall_Enter_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_PlayHall_Enter_CS(const Msg_PlayHall_Enter_CS& from);
  Msg_PlayHall_Enter_CS(Msg_PlayHall_Enter_CS&& from) noexcept
    : Msg_PlayHall_Enter_CS() {
    *this = ::std::move(from);
  }

  inline Msg_PlayHall_Enter_CS& operator=(const Msg_PlayHall_Enter_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_PlayHall_Enter_CS& operator=(Msg_PlayHall_Enter_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_PlayHall_Enter_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_PlayHall_Enter_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_PlayHall_Enter_CS*>(
               &_Msg_PlayHall_Enter_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Msg_PlayHall_Enter_CS& a, Msg_PlayHall_Enter_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_PlayHall_Enter_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_PlayHall_Enter_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_PlayHall_Enter_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_PlayHall_Enter_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_PlayHall_Enter_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_PlayHall_Enter_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_PlayHall_Enter_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_PlayHall_Enter_CS";
  }
  protected:
  explicit Msg_PlayHall_Enter_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapidFieldNumber = 1,
  };
  // string mapid = 1;
  void clear_mapid();
  const std::string& mapid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapid();
  PROTOBUF_NODISCARD std::string* release_mapid();
  void set_allocated_mapid(std::string* mapid);
  private:
  const std::string& _internal_mapid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapid(const std::string& value);
  std::string* _internal_mutable_mapid();
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_PlayHall_Enter_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgMatch_2eproto;
};
// -------------------------------------------------------------------

class Msg_PlayHall_Enter_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_PlayHall_Enter_SC) */ {
 public:
  inline Msg_PlayHall_Enter_SC() : Msg_PlayHall_Enter_SC(nullptr) {}
  ~Msg_PlayHall_Enter_SC() override;
  explicit constexpr Msg_PlayHall_Enter_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_PlayHall_Enter_SC(const Msg_PlayHall_Enter_SC& from);
  Msg_PlayHall_Enter_SC(Msg_PlayHall_Enter_SC&& from) noexcept
    : Msg_PlayHall_Enter_SC() {
    *this = ::std::move(from);
  }

  inline Msg_PlayHall_Enter_SC& operator=(const Msg_PlayHall_Enter_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_PlayHall_Enter_SC& operator=(Msg_PlayHall_Enter_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_PlayHall_Enter_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_PlayHall_Enter_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_PlayHall_Enter_SC*>(
               &_Msg_PlayHall_Enter_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Msg_PlayHall_Enter_SC& a, Msg_PlayHall_Enter_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_PlayHall_Enter_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_PlayHall_Enter_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_PlayHall_Enter_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_PlayHall_Enter_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_PlayHall_Enter_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_PlayHall_Enter_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_PlayHall_Enter_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_PlayHall_Enter_SC";
  }
  protected:
  explicit Msg_PlayHall_Enter_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSessionFieldNumber = 2,
    kMapFieldNumber = 1,
    kConvidFieldNumber = 3,
  };
  // string playerSession = 2;
  void clear_playersession();
  const std::string& playersession() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playersession(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playersession();
  PROTOBUF_NODISCARD std::string* release_playersession();
  void set_allocated_playersession(std::string* playersession);
  private:
  const std::string& _internal_playersession() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playersession(const std::string& value);
  std::string* _internal_mutable_playersession();
  public:

  // .XrPb.RoomInfoData map = 1;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::XrPb::RoomInfoData& map() const;
  PROTOBUF_NODISCARD ::XrPb::RoomInfoData* release_map();
  ::XrPb::RoomInfoData* mutable_map();
  void set_allocated_map(::XrPb::RoomInfoData* map);
  private:
  const ::XrPb::RoomInfoData& _internal_map() const;
  ::XrPb::RoomInfoData* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::XrPb::RoomInfoData* map);
  ::XrPb::RoomInfoData* unsafe_arena_release_map();

  // uint32 convid = 3;
  void clear_convid();
  uint32_t convid() const;
  void set_convid(uint32_t value);
  private:
  uint32_t _internal_convid() const;
  void _internal_set_convid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_PlayHall_Enter_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playersession_;
  ::XrPb::RoomInfoData* map_;
  uint32_t convid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgMatch_2eproto;
};
// -------------------------------------------------------------------

class Msg_Dup_Enter_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_Dup_Enter_CS) */ {
 public:
  inline Msg_Dup_Enter_CS() : Msg_Dup_Enter_CS(nullptr) {}
  ~Msg_Dup_Enter_CS() override;
  explicit constexpr Msg_Dup_Enter_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Dup_Enter_CS(const Msg_Dup_Enter_CS& from);
  Msg_Dup_Enter_CS(Msg_Dup_Enter_CS&& from) noexcept
    : Msg_Dup_Enter_CS() {
    *this = ::std::move(from);
  }

  inline Msg_Dup_Enter_CS& operator=(const Msg_Dup_Enter_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Dup_Enter_CS& operator=(Msg_Dup_Enter_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Dup_Enter_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Dup_Enter_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_Dup_Enter_CS*>(
               &_Msg_Dup_Enter_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Msg_Dup_Enter_CS& a, Msg_Dup_Enter_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Dup_Enter_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Dup_Enter_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Dup_Enter_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Dup_Enter_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Dup_Enter_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Dup_Enter_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Dup_Enter_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_Dup_Enter_CS";
  }
  protected:
  explicit Msg_Dup_Enter_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapidFieldNumber = 1,
  };
  // string mapid = 1;
  void clear_mapid();
  const std::string& mapid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapid();
  PROTOBUF_NODISCARD std::string* release_mapid();
  void set_allocated_mapid(std::string* mapid);
  private:
  const std::string& _internal_mapid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapid(const std::string& value);
  std::string* _internal_mutable_mapid();
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_Dup_Enter_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgMatch_2eproto;
};
// -------------------------------------------------------------------

class Msg_Dup_Enter_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_Dup_Enter_SC) */ {
 public:
  inline Msg_Dup_Enter_SC() : Msg_Dup_Enter_SC(nullptr) {}
  ~Msg_Dup_Enter_SC() override;
  explicit constexpr Msg_Dup_Enter_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Dup_Enter_SC(const Msg_Dup_Enter_SC& from);
  Msg_Dup_Enter_SC(Msg_Dup_Enter_SC&& from) noexcept
    : Msg_Dup_Enter_SC() {
    *this = ::std::move(from);
  }

  inline Msg_Dup_Enter_SC& operator=(const Msg_Dup_Enter_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Dup_Enter_SC& operator=(Msg_Dup_Enter_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Dup_Enter_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Dup_Enter_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_Dup_Enter_SC*>(
               &_Msg_Dup_Enter_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Msg_Dup_Enter_SC& a, Msg_Dup_Enter_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Dup_Enter_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Dup_Enter_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Dup_Enter_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Dup_Enter_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Dup_Enter_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Dup_Enter_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Dup_Enter_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_Dup_Enter_SC";
  }
  protected:
  explicit Msg_Dup_Enter_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSessionFieldNumber = 2,
    kMapFieldNumber = 1,
    kConvidFieldNumber = 3,
  };
  // string playerSession = 2;
  void clear_playersession();
  const std::string& playersession() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playersession(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playersession();
  PROTOBUF_NODISCARD std::string* release_playersession();
  void set_allocated_playersession(std::string* playersession);
  private:
  const std::string& _internal_playersession() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playersession(const std::string& value);
  std::string* _internal_mutable_playersession();
  public:

  // .XrPb.RoomInfoData map = 1;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::XrPb::RoomInfoData& map() const;
  PROTOBUF_NODISCARD ::XrPb::RoomInfoData* release_map();
  ::XrPb::RoomInfoData* mutable_map();
  void set_allocated_map(::XrPb::RoomInfoData* map);
  private:
  const ::XrPb::RoomInfoData& _internal_map() const;
  ::XrPb::RoomInfoData* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::XrPb::RoomInfoData* map);
  ::XrPb::RoomInfoData* unsafe_arena_release_map();

  // uint32 convid = 3;
  void clear_convid();
  uint32_t convid() const;
  void set_convid(uint32_t value);
  private:
  uint32_t _internal_convid() const;
  void _internal_set_convid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_Dup_Enter_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playersession_;
  ::XrPb::RoomInfoData* map_;
  uint32_t convid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgMatch_2eproto;
};
// -------------------------------------------------------------------

class Msg_Member_leave_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_Member_leave_PUSH) */ {
 public:
  inline Msg_Member_leave_PUSH() : Msg_Member_leave_PUSH(nullptr) {}
  ~Msg_Member_leave_PUSH() override;
  explicit constexpr Msg_Member_leave_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Member_leave_PUSH(const Msg_Member_leave_PUSH& from);
  Msg_Member_leave_PUSH(Msg_Member_leave_PUSH&& from) noexcept
    : Msg_Member_leave_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_Member_leave_PUSH& operator=(const Msg_Member_leave_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Member_leave_PUSH& operator=(Msg_Member_leave_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Member_leave_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Member_leave_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_Member_leave_PUSH*>(
               &_Msg_Member_leave_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Msg_Member_leave_PUSH& a, Msg_Member_leave_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Member_leave_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Member_leave_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Member_leave_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Member_leave_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Member_leave_PUSH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Member_leave_PUSH& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Member_leave_PUSH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_Member_leave_PUSH";
  }
  protected:
  explicit Msg_Member_leave_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleidFieldNumber = 1,
  };
  // int64 roleid = 1;
  void clear_roleid();
  int64_t roleid() const;
  void set_roleid(int64_t value);
  private:
  int64_t _internal_roleid() const;
  void _internal_set_roleid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_Member_leave_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t roleid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgMatch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgMod_Match

// -------------------------------------------------------------------

// RoomInfoData

// string roomId = 1;
inline void RoomInfoData::clear_roomid() {
  roomid_.ClearToEmpty();
}
inline const std::string& RoomInfoData::roomid() const {
  // @@protoc_insertion_point(field_get:XrPb.RoomInfoData.roomId)
  return _internal_roomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomInfoData::set_roomid(ArgT0&& arg0, ArgT... args) {
 
 roomid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.RoomInfoData.roomId)
}
inline std::string* RoomInfoData::mutable_roomid() {
  std::string* _s = _internal_mutable_roomid();
  // @@protoc_insertion_point(field_mutable:XrPb.RoomInfoData.roomId)
  return _s;
}
inline const std::string& RoomInfoData::_internal_roomid() const {
  return roomid_.Get();
}
inline void RoomInfoData::_internal_set_roomid(const std::string& value) {
  
  roomid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoomInfoData::_internal_mutable_roomid() {
  
  return roomid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoomInfoData::release_roomid() {
  // @@protoc_insertion_point(field_release:XrPb.RoomInfoData.roomId)
  return roomid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoomInfoData::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.RoomInfoData.roomId)
}

// string mapId = 2;
inline void RoomInfoData::clear_mapid() {
  mapid_.ClearToEmpty();
}
inline const std::string& RoomInfoData::mapid() const {
  // @@protoc_insertion_point(field_get:XrPb.RoomInfoData.mapId)
  return _internal_mapid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomInfoData::set_mapid(ArgT0&& arg0, ArgT... args) {
 
 mapid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.RoomInfoData.mapId)
}
inline std::string* RoomInfoData::mutable_mapid() {
  std::string* _s = _internal_mutable_mapid();
  // @@protoc_insertion_point(field_mutable:XrPb.RoomInfoData.mapId)
  return _s;
}
inline const std::string& RoomInfoData::_internal_mapid() const {
  return mapid_.Get();
}
inline void RoomInfoData::_internal_set_mapid(const std::string& value) {
  
  mapid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoomInfoData::_internal_mutable_mapid() {
  
  return mapid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoomInfoData::release_mapid() {
  // @@protoc_insertion_point(field_release:XrPb.RoomInfoData.mapId)
  return mapid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoomInfoData::set_allocated_mapid(std::string* mapid) {
  if (mapid != nullptr) {
    
  } else {
    
  }
  mapid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mapid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.RoomInfoData.mapId)
}

// string ip = 3;
inline void RoomInfoData::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& RoomInfoData::ip() const {
  // @@protoc_insertion_point(field_get:XrPb.RoomInfoData.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomInfoData::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.RoomInfoData.ip)
}
inline std::string* RoomInfoData::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:XrPb.RoomInfoData.ip)
  return _s;
}
inline const std::string& RoomInfoData::_internal_ip() const {
  return ip_.Get();
}
inline void RoomInfoData::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoomInfoData::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoomInfoData::release_ip() {
  // @@protoc_insertion_point(field_release:XrPb.RoomInfoData.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoomInfoData::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.RoomInfoData.ip)
}

// uint32 port = 4;
inline void RoomInfoData::clear_port() {
  port_ = 0u;
}
inline uint32_t RoomInfoData::_internal_port() const {
  return port_;
}
inline uint32_t RoomInfoData::port() const {
  // @@protoc_insertion_point(field_get:XrPb.RoomInfoData.port)
  return _internal_port();
}
inline void RoomInfoData::_internal_set_port(uint32_t value) {
  
  port_ = value;
}
inline void RoomInfoData::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:XrPb.RoomInfoData.port)
}

// string session = 5;
inline void RoomInfoData::clear_session() {
  session_.ClearToEmpty();
}
inline const std::string& RoomInfoData::session() const {
  // @@protoc_insertion_point(field_get:XrPb.RoomInfoData.session)
  return _internal_session();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomInfoData::set_session(ArgT0&& arg0, ArgT... args) {
 
 session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.RoomInfoData.session)
}
inline std::string* RoomInfoData::mutable_session() {
  std::string* _s = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:XrPb.RoomInfoData.session)
  return _s;
}
inline const std::string& RoomInfoData::_internal_session() const {
  return session_.Get();
}
inline void RoomInfoData::_internal_set_session(const std::string& value) {
  
  session_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoomInfoData::_internal_mutable_session() {
  
  return session_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoomInfoData::release_session() {
  // @@protoc_insertion_point(field_release:XrPb.RoomInfoData.session)
  return session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoomInfoData::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.RoomInfoData.session)
}

// -------------------------------------------------------------------

// Msg_Home_Enter_CS

// string mapid = 1;
inline void Msg_Home_Enter_CS::clear_mapid() {
  mapid_.ClearToEmpty();
}
inline const std::string& Msg_Home_Enter_CS::mapid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Home_Enter_CS.mapid)
  return _internal_mapid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_Home_Enter_CS::set_mapid(ArgT0&& arg0, ArgT... args) {
 
 mapid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_Home_Enter_CS.mapid)
}
inline std::string* Msg_Home_Enter_CS::mutable_mapid() {
  std::string* _s = _internal_mutable_mapid();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_Home_Enter_CS.mapid)
  return _s;
}
inline const std::string& Msg_Home_Enter_CS::_internal_mapid() const {
  return mapid_.Get();
}
inline void Msg_Home_Enter_CS::_internal_set_mapid(const std::string& value) {
  
  mapid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_Home_Enter_CS::_internal_mutable_mapid() {
  
  return mapid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_Home_Enter_CS::release_mapid() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_Home_Enter_CS.mapid)
  return mapid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_Home_Enter_CS::set_allocated_mapid(std::string* mapid) {
  if (mapid != nullptr) {
    
  } else {
    
  }
  mapid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mapid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_Home_Enter_CS.mapid)
}

// -------------------------------------------------------------------

// Msg_Home_Enter_SC

// .XrPb.RoomInfoData map = 1;
inline bool Msg_Home_Enter_SC::_internal_has_map() const {
  return this != internal_default_instance() && map_ != nullptr;
}
inline bool Msg_Home_Enter_SC::has_map() const {
  return _internal_has_map();
}
inline void Msg_Home_Enter_SC::clear_map() {
  if (GetArenaForAllocation() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
}
inline const ::XrPb::RoomInfoData& Msg_Home_Enter_SC::_internal_map() const {
  const ::XrPb::RoomInfoData* p = map_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::RoomInfoData&>(
      ::XrPb::_RoomInfoData_default_instance_);
}
inline const ::XrPb::RoomInfoData& Msg_Home_Enter_SC::map() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Home_Enter_SC.map)
  return _internal_map();
}
inline void Msg_Home_Enter_SC::unsafe_arena_set_allocated_map(
    ::XrPb::RoomInfoData* map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_);
  }
  map_ = map;
  if (map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_Home_Enter_SC.map)
}
inline ::XrPb::RoomInfoData* Msg_Home_Enter_SC::release_map() {
  
  ::XrPb::RoomInfoData* temp = map_;
  map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::RoomInfoData* Msg_Home_Enter_SC::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_Home_Enter_SC.map)
  
  ::XrPb::RoomInfoData* temp = map_;
  map_ = nullptr;
  return temp;
}
inline ::XrPb::RoomInfoData* Msg_Home_Enter_SC::_internal_mutable_map() {
  
  if (map_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::RoomInfoData>(GetArenaForAllocation());
    map_ = p;
  }
  return map_;
}
inline ::XrPb::RoomInfoData* Msg_Home_Enter_SC::mutable_map() {
  ::XrPb::RoomInfoData* _msg = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_Home_Enter_SC.map)
  return _msg;
}
inline void Msg_Home_Enter_SC::set_allocated_map(::XrPb::RoomInfoData* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete map_;
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::RoomInfoData>::GetOwningArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    
  } else {
    
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_Home_Enter_SC.map)
}

// string playerSession = 2;
inline void Msg_Home_Enter_SC::clear_playersession() {
  playersession_.ClearToEmpty();
}
inline const std::string& Msg_Home_Enter_SC::playersession() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Home_Enter_SC.playerSession)
  return _internal_playersession();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_Home_Enter_SC::set_playersession(ArgT0&& arg0, ArgT... args) {
 
 playersession_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_Home_Enter_SC.playerSession)
}
inline std::string* Msg_Home_Enter_SC::mutable_playersession() {
  std::string* _s = _internal_mutable_playersession();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_Home_Enter_SC.playerSession)
  return _s;
}
inline const std::string& Msg_Home_Enter_SC::_internal_playersession() const {
  return playersession_.Get();
}
inline void Msg_Home_Enter_SC::_internal_set_playersession(const std::string& value) {
  
  playersession_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_Home_Enter_SC::_internal_mutable_playersession() {
  
  return playersession_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_Home_Enter_SC::release_playersession() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_Home_Enter_SC.playerSession)
  return playersession_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_Home_Enter_SC::set_allocated_playersession(std::string* playersession) {
  if (playersession != nullptr) {
    
  } else {
    
  }
  playersession_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playersession,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (playersession_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    playersession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_Home_Enter_SC.playerSession)
}

// uint32 convid = 3;
inline void Msg_Home_Enter_SC::clear_convid() {
  convid_ = 0u;
}
inline uint32_t Msg_Home_Enter_SC::_internal_convid() const {
  return convid_;
}
inline uint32_t Msg_Home_Enter_SC::convid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Home_Enter_SC.convid)
  return _internal_convid();
}
inline void Msg_Home_Enter_SC::_internal_set_convid(uint32_t value) {
  
  convid_ = value;
}
inline void Msg_Home_Enter_SC::set_convid(uint32_t value) {
  _internal_set_convid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Home_Enter_SC.convid)
}

// -------------------------------------------------------------------

// Msg_PlayHall_Enter_CS

// string mapid = 1;
inline void Msg_PlayHall_Enter_CS::clear_mapid() {
  mapid_.ClearToEmpty();
}
inline const std::string& Msg_PlayHall_Enter_CS::mapid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_PlayHall_Enter_CS.mapid)
  return _internal_mapid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_PlayHall_Enter_CS::set_mapid(ArgT0&& arg0, ArgT... args) {
 
 mapid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_PlayHall_Enter_CS.mapid)
}
inline std::string* Msg_PlayHall_Enter_CS::mutable_mapid() {
  std::string* _s = _internal_mutable_mapid();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_PlayHall_Enter_CS.mapid)
  return _s;
}
inline const std::string& Msg_PlayHall_Enter_CS::_internal_mapid() const {
  return mapid_.Get();
}
inline void Msg_PlayHall_Enter_CS::_internal_set_mapid(const std::string& value) {
  
  mapid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_PlayHall_Enter_CS::_internal_mutable_mapid() {
  
  return mapid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_PlayHall_Enter_CS::release_mapid() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_PlayHall_Enter_CS.mapid)
  return mapid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_PlayHall_Enter_CS::set_allocated_mapid(std::string* mapid) {
  if (mapid != nullptr) {
    
  } else {
    
  }
  mapid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mapid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_PlayHall_Enter_CS.mapid)
}

// -------------------------------------------------------------------

// Msg_PlayHall_Enter_SC

// .XrPb.RoomInfoData map = 1;
inline bool Msg_PlayHall_Enter_SC::_internal_has_map() const {
  return this != internal_default_instance() && map_ != nullptr;
}
inline bool Msg_PlayHall_Enter_SC::has_map() const {
  return _internal_has_map();
}
inline void Msg_PlayHall_Enter_SC::clear_map() {
  if (GetArenaForAllocation() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
}
inline const ::XrPb::RoomInfoData& Msg_PlayHall_Enter_SC::_internal_map() const {
  const ::XrPb::RoomInfoData* p = map_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::RoomInfoData&>(
      ::XrPb::_RoomInfoData_default_instance_);
}
inline const ::XrPb::RoomInfoData& Msg_PlayHall_Enter_SC::map() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_PlayHall_Enter_SC.map)
  return _internal_map();
}
inline void Msg_PlayHall_Enter_SC::unsafe_arena_set_allocated_map(
    ::XrPb::RoomInfoData* map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_);
  }
  map_ = map;
  if (map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_PlayHall_Enter_SC.map)
}
inline ::XrPb::RoomInfoData* Msg_PlayHall_Enter_SC::release_map() {
  
  ::XrPb::RoomInfoData* temp = map_;
  map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::RoomInfoData* Msg_PlayHall_Enter_SC::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_PlayHall_Enter_SC.map)
  
  ::XrPb::RoomInfoData* temp = map_;
  map_ = nullptr;
  return temp;
}
inline ::XrPb::RoomInfoData* Msg_PlayHall_Enter_SC::_internal_mutable_map() {
  
  if (map_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::RoomInfoData>(GetArenaForAllocation());
    map_ = p;
  }
  return map_;
}
inline ::XrPb::RoomInfoData* Msg_PlayHall_Enter_SC::mutable_map() {
  ::XrPb::RoomInfoData* _msg = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_PlayHall_Enter_SC.map)
  return _msg;
}
inline void Msg_PlayHall_Enter_SC::set_allocated_map(::XrPb::RoomInfoData* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete map_;
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::RoomInfoData>::GetOwningArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    
  } else {
    
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_PlayHall_Enter_SC.map)
}

// string playerSession = 2;
inline void Msg_PlayHall_Enter_SC::clear_playersession() {
  playersession_.ClearToEmpty();
}
inline const std::string& Msg_PlayHall_Enter_SC::playersession() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_PlayHall_Enter_SC.playerSession)
  return _internal_playersession();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_PlayHall_Enter_SC::set_playersession(ArgT0&& arg0, ArgT... args) {
 
 playersession_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_PlayHall_Enter_SC.playerSession)
}
inline std::string* Msg_PlayHall_Enter_SC::mutable_playersession() {
  std::string* _s = _internal_mutable_playersession();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_PlayHall_Enter_SC.playerSession)
  return _s;
}
inline const std::string& Msg_PlayHall_Enter_SC::_internal_playersession() const {
  return playersession_.Get();
}
inline void Msg_PlayHall_Enter_SC::_internal_set_playersession(const std::string& value) {
  
  playersession_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_PlayHall_Enter_SC::_internal_mutable_playersession() {
  
  return playersession_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_PlayHall_Enter_SC::release_playersession() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_PlayHall_Enter_SC.playerSession)
  return playersession_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_PlayHall_Enter_SC::set_allocated_playersession(std::string* playersession) {
  if (playersession != nullptr) {
    
  } else {
    
  }
  playersession_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playersession,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (playersession_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    playersession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_PlayHall_Enter_SC.playerSession)
}

// uint32 convid = 3;
inline void Msg_PlayHall_Enter_SC::clear_convid() {
  convid_ = 0u;
}
inline uint32_t Msg_PlayHall_Enter_SC::_internal_convid() const {
  return convid_;
}
inline uint32_t Msg_PlayHall_Enter_SC::convid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_PlayHall_Enter_SC.convid)
  return _internal_convid();
}
inline void Msg_PlayHall_Enter_SC::_internal_set_convid(uint32_t value) {
  
  convid_ = value;
}
inline void Msg_PlayHall_Enter_SC::set_convid(uint32_t value) {
  _internal_set_convid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_PlayHall_Enter_SC.convid)
}

// -------------------------------------------------------------------

// Msg_Dup_Enter_CS

// string mapid = 1;
inline void Msg_Dup_Enter_CS::clear_mapid() {
  mapid_.ClearToEmpty();
}
inline const std::string& Msg_Dup_Enter_CS::mapid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Dup_Enter_CS.mapid)
  return _internal_mapid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_Dup_Enter_CS::set_mapid(ArgT0&& arg0, ArgT... args) {
 
 mapid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_Dup_Enter_CS.mapid)
}
inline std::string* Msg_Dup_Enter_CS::mutable_mapid() {
  std::string* _s = _internal_mutable_mapid();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_Dup_Enter_CS.mapid)
  return _s;
}
inline const std::string& Msg_Dup_Enter_CS::_internal_mapid() const {
  return mapid_.Get();
}
inline void Msg_Dup_Enter_CS::_internal_set_mapid(const std::string& value) {
  
  mapid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_Dup_Enter_CS::_internal_mutable_mapid() {
  
  return mapid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_Dup_Enter_CS::release_mapid() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_Dup_Enter_CS.mapid)
  return mapid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_Dup_Enter_CS::set_allocated_mapid(std::string* mapid) {
  if (mapid != nullptr) {
    
  } else {
    
  }
  mapid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mapid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mapid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_Dup_Enter_CS.mapid)
}

// -------------------------------------------------------------------

// Msg_Dup_Enter_SC

// .XrPb.RoomInfoData map = 1;
inline bool Msg_Dup_Enter_SC::_internal_has_map() const {
  return this != internal_default_instance() && map_ != nullptr;
}
inline bool Msg_Dup_Enter_SC::has_map() const {
  return _internal_has_map();
}
inline void Msg_Dup_Enter_SC::clear_map() {
  if (GetArenaForAllocation() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
}
inline const ::XrPb::RoomInfoData& Msg_Dup_Enter_SC::_internal_map() const {
  const ::XrPb::RoomInfoData* p = map_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::RoomInfoData&>(
      ::XrPb::_RoomInfoData_default_instance_);
}
inline const ::XrPb::RoomInfoData& Msg_Dup_Enter_SC::map() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Dup_Enter_SC.map)
  return _internal_map();
}
inline void Msg_Dup_Enter_SC::unsafe_arena_set_allocated_map(
    ::XrPb::RoomInfoData* map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_);
  }
  map_ = map;
  if (map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_Dup_Enter_SC.map)
}
inline ::XrPb::RoomInfoData* Msg_Dup_Enter_SC::release_map() {
  
  ::XrPb::RoomInfoData* temp = map_;
  map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::RoomInfoData* Msg_Dup_Enter_SC::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_Dup_Enter_SC.map)
  
  ::XrPb::RoomInfoData* temp = map_;
  map_ = nullptr;
  return temp;
}
inline ::XrPb::RoomInfoData* Msg_Dup_Enter_SC::_internal_mutable_map() {
  
  if (map_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::RoomInfoData>(GetArenaForAllocation());
    map_ = p;
  }
  return map_;
}
inline ::XrPb::RoomInfoData* Msg_Dup_Enter_SC::mutable_map() {
  ::XrPb::RoomInfoData* _msg = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_Dup_Enter_SC.map)
  return _msg;
}
inline void Msg_Dup_Enter_SC::set_allocated_map(::XrPb::RoomInfoData* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete map_;
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::RoomInfoData>::GetOwningArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    
  } else {
    
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_Dup_Enter_SC.map)
}

// string playerSession = 2;
inline void Msg_Dup_Enter_SC::clear_playersession() {
  playersession_.ClearToEmpty();
}
inline const std::string& Msg_Dup_Enter_SC::playersession() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Dup_Enter_SC.playerSession)
  return _internal_playersession();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_Dup_Enter_SC::set_playersession(ArgT0&& arg0, ArgT... args) {
 
 playersession_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_Dup_Enter_SC.playerSession)
}
inline std::string* Msg_Dup_Enter_SC::mutable_playersession() {
  std::string* _s = _internal_mutable_playersession();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_Dup_Enter_SC.playerSession)
  return _s;
}
inline const std::string& Msg_Dup_Enter_SC::_internal_playersession() const {
  return playersession_.Get();
}
inline void Msg_Dup_Enter_SC::_internal_set_playersession(const std::string& value) {
  
  playersession_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_Dup_Enter_SC::_internal_mutable_playersession() {
  
  return playersession_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_Dup_Enter_SC::release_playersession() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_Dup_Enter_SC.playerSession)
  return playersession_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_Dup_Enter_SC::set_allocated_playersession(std::string* playersession) {
  if (playersession != nullptr) {
    
  } else {
    
  }
  playersession_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playersession,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (playersession_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    playersession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_Dup_Enter_SC.playerSession)
}

// uint32 convid = 3;
inline void Msg_Dup_Enter_SC::clear_convid() {
  convid_ = 0u;
}
inline uint32_t Msg_Dup_Enter_SC::_internal_convid() const {
  return convid_;
}
inline uint32_t Msg_Dup_Enter_SC::convid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Dup_Enter_SC.convid)
  return _internal_convid();
}
inline void Msg_Dup_Enter_SC::_internal_set_convid(uint32_t value) {
  
  convid_ = value;
}
inline void Msg_Dup_Enter_SC::set_convid(uint32_t value) {
  _internal_set_convid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Dup_Enter_SC.convid)
}

// -------------------------------------------------------------------

// Msg_Member_leave_PUSH

// int64 roleid = 1;
inline void Msg_Member_leave_PUSH::clear_roleid() {
  roleid_ = int64_t{0};
}
inline int64_t Msg_Member_leave_PUSH::_internal_roleid() const {
  return roleid_;
}
inline int64_t Msg_Member_leave_PUSH::roleid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Member_leave_PUSH.roleid)
  return _internal_roleid();
}
inline void Msg_Member_leave_PUSH::_internal_set_roleid(int64_t value) {
  
  roleid_ = value;
}
inline void Msg_Member_leave_PUSH::set_roleid(int64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Member_leave_PUSH.roleid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XrPb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::XrPb::MsgMod_Match_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::MsgMod_Match_MsgId>() {
  return ::XrPb::MsgMod_Match_MsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_2fMsgMatch_2eproto
