// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client/MsgLogin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_2fMsgLogin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_2fMsgLogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client/Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_2fMsgLogin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_2fMsgLogin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_2fMsgLogin_2eproto;
namespace XrPb {
class MsgMod_Login;
struct MsgMod_LoginDefaultTypeInternal;
extern MsgMod_LoginDefaultTypeInternal _MsgMod_Login_default_instance_;
class Msg_BeatHeart_CS;
struct Msg_BeatHeart_CSDefaultTypeInternal;
extern Msg_BeatHeart_CSDefaultTypeInternal _Msg_BeatHeart_CS_default_instance_;
class Msg_BeatHeart_SC;
struct Msg_BeatHeart_SCDefaultTypeInternal;
extern Msg_BeatHeart_SCDefaultTypeInternal _Msg_BeatHeart_SC_default_instance_;
class Msg_CreateRole_CS;
struct Msg_CreateRole_CSDefaultTypeInternal;
extern Msg_CreateRole_CSDefaultTypeInternal _Msg_CreateRole_CS_default_instance_;
class Msg_CreateRole_SC;
struct Msg_CreateRole_SCDefaultTypeInternal;
extern Msg_CreateRole_SCDefaultTypeInternal _Msg_CreateRole_SC_default_instance_;
class Msg_ItemList_PUSH;
struct Msg_ItemList_PUSHDefaultTypeInternal;
extern Msg_ItemList_PUSHDefaultTypeInternal _Msg_ItemList_PUSH_default_instance_;
class Msg_ItemList_REQ;
struct Msg_ItemList_REQDefaultTypeInternal;
extern Msg_ItemList_REQDefaultTypeInternal _Msg_ItemList_REQ_default_instance_;
class Msg_Kick_PUSH;
struct Msg_Kick_PUSHDefaultTypeInternal;
extern Msg_Kick_PUSHDefaultTypeInternal _Msg_Kick_PUSH_default_instance_;
class Msg_LoadOtherPlayerData_CS;
struct Msg_LoadOtherPlayerData_CSDefaultTypeInternal;
extern Msg_LoadOtherPlayerData_CSDefaultTypeInternal _Msg_LoadOtherPlayerData_CS_default_instance_;
class Msg_LoadOtherPlayerData_SC;
struct Msg_LoadOtherPlayerData_SCDefaultTypeInternal;
extern Msg_LoadOtherPlayerData_SCDefaultTypeInternal _Msg_LoadOtherPlayerData_SC_default_instance_;
class Msg_LoginFinish_PUSH;
struct Msg_LoginFinish_PUSHDefaultTypeInternal;
extern Msg_LoginFinish_PUSHDefaultTypeInternal _Msg_LoginFinish_PUSH_default_instance_;
class Msg_Login_LineUp_PUSH;
struct Msg_Login_LineUp_PUSHDefaultTypeInternal;
extern Msg_Login_LineUp_PUSHDefaultTypeInternal _Msg_Login_LineUp_PUSH_default_instance_;
class Msg_Login_VerifyAccount_CS;
struct Msg_Login_VerifyAccount_CSDefaultTypeInternal;
extern Msg_Login_VerifyAccount_CSDefaultTypeInternal _Msg_Login_VerifyAccount_CS_default_instance_;
class Msg_Login_VerifyAccount_SC;
struct Msg_Login_VerifyAccount_SCDefaultTypeInternal;
extern Msg_Login_VerifyAccount_SCDefaultTypeInternal _Msg_Login_VerifyAccount_SC_default_instance_;
class Msg_Role_PUSH;
struct Msg_Role_PUSHDefaultTypeInternal;
extern Msg_Role_PUSHDefaultTypeInternal _Msg_Role_PUSH_default_instance_;
class Msg_RollName_CS;
struct Msg_RollName_CSDefaultTypeInternal;
extern Msg_RollName_CSDefaultTypeInternal _Msg_RollName_CS_default_instance_;
class Msg_RollName_SC;
struct Msg_RollName_SCDefaultTypeInternal;
extern Msg_RollName_SCDefaultTypeInternal _Msg_RollName_SC_default_instance_;
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> ::XrPb::MsgMod_Login* Arena::CreateMaybeMessage<::XrPb::MsgMod_Login>(Arena*);
template<> ::XrPb::Msg_BeatHeart_CS* Arena::CreateMaybeMessage<::XrPb::Msg_BeatHeart_CS>(Arena*);
template<> ::XrPb::Msg_BeatHeart_SC* Arena::CreateMaybeMessage<::XrPb::Msg_BeatHeart_SC>(Arena*);
template<> ::XrPb::Msg_CreateRole_CS* Arena::CreateMaybeMessage<::XrPb::Msg_CreateRole_CS>(Arena*);
template<> ::XrPb::Msg_CreateRole_SC* Arena::CreateMaybeMessage<::XrPb::Msg_CreateRole_SC>(Arena*);
template<> ::XrPb::Msg_ItemList_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_ItemList_PUSH>(Arena*);
template<> ::XrPb::Msg_ItemList_REQ* Arena::CreateMaybeMessage<::XrPb::Msg_ItemList_REQ>(Arena*);
template<> ::XrPb::Msg_Kick_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_Kick_PUSH>(Arena*);
template<> ::XrPb::Msg_LoadOtherPlayerData_CS* Arena::CreateMaybeMessage<::XrPb::Msg_LoadOtherPlayerData_CS>(Arena*);
template<> ::XrPb::Msg_LoadOtherPlayerData_SC* Arena::CreateMaybeMessage<::XrPb::Msg_LoadOtherPlayerData_SC>(Arena*);
template<> ::XrPb::Msg_LoginFinish_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_LoginFinish_PUSH>(Arena*);
template<> ::XrPb::Msg_Login_LineUp_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_Login_LineUp_PUSH>(Arena*);
template<> ::XrPb::Msg_Login_VerifyAccount_CS* Arena::CreateMaybeMessage<::XrPb::Msg_Login_VerifyAccount_CS>(Arena*);
template<> ::XrPb::Msg_Login_VerifyAccount_SC* Arena::CreateMaybeMessage<::XrPb::Msg_Login_VerifyAccount_SC>(Arena*);
template<> ::XrPb::Msg_Role_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_Role_PUSH>(Arena*);
template<> ::XrPb::Msg_RollName_CS* Arena::CreateMaybeMessage<::XrPb::Msg_RollName_CS>(Arena*);
template<> ::XrPb::Msg_RollName_SC* Arena::CreateMaybeMessage<::XrPb::Msg_RollName_SC>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XrPb {

enum MsgMod_Login_MsgId : int {
  MsgMod_Login_MsgId_Msg_None = 0,
  MsgMod_Login_MsgId_Msg_Login_LineUp_PUSH = 1,
  MsgMod_Login_MsgId_Msg_Login_VerifyAccount_CS = 2,
  MsgMod_Login_MsgId_Msg_Login_VerifyAccount_SC = 3,
  MsgMod_Login_MsgId_Msg_CreateRole_CS = 4,
  MsgMod_Login_MsgId_Msg_CreateRole_SC = 5,
  MsgMod_Login_MsgId_Msg_RollName_CS = 6,
  MsgMod_Login_MsgId_Msg_RollName_SC = 7,
  MsgMod_Login_MsgId_Msg_Role_PUSH = 8,
  MsgMod_Login_MsgId_Msg_LoginFinish_PUSH = 9,
  MsgMod_Login_MsgId_Msg_Kick_PUSH = 10,
  MsgMod_Login_MsgId_Msg_LoadOtherPlayerData_CS = 11,
  MsgMod_Login_MsgId_Msg_LoadOtherPlayerData_SC = 12,
  MsgMod_Login_MsgId_Msg_ItemList_REQ = 13,
  MsgMod_Login_MsgId_Msg_ItemList_PUSH = 14,
  MsgMod_Login_MsgId_Msg_BeatHeart_CS = 100,
  MsgMod_Login_MsgId_Msg_BeatHeart_SC = 101,
  MsgMod_Login_MsgId_MsgMod_Login_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgMod_Login_MsgId_MsgMod_Login_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgMod_Login_MsgId_IsValid(int value);
constexpr MsgMod_Login_MsgId MsgMod_Login_MsgId_MsgId_MIN = MsgMod_Login_MsgId_Msg_None;
constexpr MsgMod_Login_MsgId MsgMod_Login_MsgId_MsgId_MAX = MsgMod_Login_MsgId_Msg_BeatHeart_SC;
constexpr int MsgMod_Login_MsgId_MsgId_ARRAYSIZE = MsgMod_Login_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgMod_Login_MsgId_descriptor();
template<typename T>
inline const std::string& MsgMod_Login_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgMod_Login_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgMod_Login_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgMod_Login_MsgId_descriptor(), enum_t_value);
}
inline bool MsgMod_Login_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgMod_Login_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgMod_Login_MsgId>(
    MsgMod_Login_MsgId_descriptor(), name, value);
}
// ===================================================================

class MsgMod_Login final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.MsgMod_Login) */ {
 public:
  inline MsgMod_Login() : MsgMod_Login(nullptr) {}
  explicit constexpr MsgMod_Login(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgMod_Login(const MsgMod_Login& from);
  MsgMod_Login(MsgMod_Login&& from) noexcept
    : MsgMod_Login() {
    *this = ::std::move(from);
  }

  inline MsgMod_Login& operator=(const MsgMod_Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgMod_Login& operator=(MsgMod_Login&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgMod_Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgMod_Login* internal_default_instance() {
    return reinterpret_cast<const MsgMod_Login*>(
               &_MsgMod_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgMod_Login& a, MsgMod_Login& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgMod_Login* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgMod_Login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgMod_Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgMod_Login>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgMod_Login& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgMod_Login& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.MsgMod_Login";
  }
  protected:
  explicit MsgMod_Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgMod_Login_MsgId MsgId;
  static constexpr MsgId Msg_None =
    MsgMod_Login_MsgId_Msg_None;
  static constexpr MsgId Msg_Login_LineUp_PUSH =
    MsgMod_Login_MsgId_Msg_Login_LineUp_PUSH;
  static constexpr MsgId Msg_Login_VerifyAccount_CS =
    MsgMod_Login_MsgId_Msg_Login_VerifyAccount_CS;
  static constexpr MsgId Msg_Login_VerifyAccount_SC =
    MsgMod_Login_MsgId_Msg_Login_VerifyAccount_SC;
  static constexpr MsgId Msg_CreateRole_CS =
    MsgMod_Login_MsgId_Msg_CreateRole_CS;
  static constexpr MsgId Msg_CreateRole_SC =
    MsgMod_Login_MsgId_Msg_CreateRole_SC;
  static constexpr MsgId Msg_RollName_CS =
    MsgMod_Login_MsgId_Msg_RollName_CS;
  static constexpr MsgId Msg_RollName_SC =
    MsgMod_Login_MsgId_Msg_RollName_SC;
  static constexpr MsgId Msg_Role_PUSH =
    MsgMod_Login_MsgId_Msg_Role_PUSH;
  static constexpr MsgId Msg_LoginFinish_PUSH =
    MsgMod_Login_MsgId_Msg_LoginFinish_PUSH;
  static constexpr MsgId Msg_Kick_PUSH =
    MsgMod_Login_MsgId_Msg_Kick_PUSH;
  static constexpr MsgId Msg_LoadOtherPlayerData_CS =
    MsgMod_Login_MsgId_Msg_LoadOtherPlayerData_CS;
  static constexpr MsgId Msg_LoadOtherPlayerData_SC =
    MsgMod_Login_MsgId_Msg_LoadOtherPlayerData_SC;
  static constexpr MsgId Msg_ItemList_REQ =
    MsgMod_Login_MsgId_Msg_ItemList_REQ;
  static constexpr MsgId Msg_ItemList_PUSH =
    MsgMod_Login_MsgId_Msg_ItemList_PUSH;
  static constexpr MsgId Msg_BeatHeart_CS =
    MsgMod_Login_MsgId_Msg_BeatHeart_CS;
  static constexpr MsgId Msg_BeatHeart_SC =
    MsgMod_Login_MsgId_Msg_BeatHeart_SC;
  static inline bool MsgId_IsValid(int value) {
    return MsgMod_Login_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    MsgMod_Login_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    MsgMod_Login_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    MsgMod_Login_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return MsgMod_Login_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return MsgMod_Login_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return MsgMod_Login_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.MsgMod_Login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_LoginFinish_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_LoginFinish_PUSH) */ {
 public:
  inline Msg_LoginFinish_PUSH() : Msg_LoginFinish_PUSH(nullptr) {}
  explicit constexpr Msg_LoginFinish_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_LoginFinish_PUSH(const Msg_LoginFinish_PUSH& from);
  Msg_LoginFinish_PUSH(Msg_LoginFinish_PUSH&& from) noexcept
    : Msg_LoginFinish_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_LoginFinish_PUSH& operator=(const Msg_LoginFinish_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_LoginFinish_PUSH& operator=(Msg_LoginFinish_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_LoginFinish_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_LoginFinish_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_LoginFinish_PUSH*>(
               &_Msg_LoginFinish_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Msg_LoginFinish_PUSH& a, Msg_LoginFinish_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_LoginFinish_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_LoginFinish_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_LoginFinish_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_LoginFinish_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_LoginFinish_PUSH& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_LoginFinish_PUSH& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_LoginFinish_PUSH";
  }
  protected:
  explicit Msg_LoginFinish_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_LoginFinish_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_Login_LineUp_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_Login_LineUp_PUSH) */ {
 public:
  inline Msg_Login_LineUp_PUSH() : Msg_Login_LineUp_PUSH(nullptr) {}
  ~Msg_Login_LineUp_PUSH() override;
  explicit constexpr Msg_Login_LineUp_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Login_LineUp_PUSH(const Msg_Login_LineUp_PUSH& from);
  Msg_Login_LineUp_PUSH(Msg_Login_LineUp_PUSH&& from) noexcept
    : Msg_Login_LineUp_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_Login_LineUp_PUSH& operator=(const Msg_Login_LineUp_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Login_LineUp_PUSH& operator=(Msg_Login_LineUp_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Login_LineUp_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Login_LineUp_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_Login_LineUp_PUSH*>(
               &_Msg_Login_LineUp_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Msg_Login_LineUp_PUSH& a, Msg_Login_LineUp_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Login_LineUp_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Login_LineUp_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Login_LineUp_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Login_LineUp_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Login_LineUp_PUSH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Login_LineUp_PUSH& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Login_LineUp_PUSH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_Login_LineUp_PUSH";
  }
  protected:
  explicit Msg_Login_LineUp_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSunumFieldNumber = 1,
    kCurPosFieldNumber = 2,
    kWaitTimeFieldNumber = 3,
  };
  // uint32 sunum = 1;
  void clear_sunum();
  uint32_t sunum() const;
  void set_sunum(uint32_t value);
  private:
  uint32_t _internal_sunum() const;
  void _internal_set_sunum(uint32_t value);
  public:

  // uint32 cur_pos = 2;
  void clear_cur_pos();
  uint32_t cur_pos() const;
  void set_cur_pos(uint32_t value);
  private:
  uint32_t _internal_cur_pos() const;
  void _internal_set_cur_pos(uint32_t value);
  public:

  // uint32 wait_time = 3;
  void clear_wait_time();
  uint32_t wait_time() const;
  void set_wait_time(uint32_t value);
  private:
  uint32_t _internal_wait_time() const;
  void _internal_set_wait_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_Login_LineUp_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t sunum_;
  uint32_t cur_pos_;
  uint32_t wait_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_Login_VerifyAccount_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_Login_VerifyAccount_CS) */ {
 public:
  inline Msg_Login_VerifyAccount_CS() : Msg_Login_VerifyAccount_CS(nullptr) {}
  ~Msg_Login_VerifyAccount_CS() override;
  explicit constexpr Msg_Login_VerifyAccount_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Login_VerifyAccount_CS(const Msg_Login_VerifyAccount_CS& from);
  Msg_Login_VerifyAccount_CS(Msg_Login_VerifyAccount_CS&& from) noexcept
    : Msg_Login_VerifyAccount_CS() {
    *this = ::std::move(from);
  }

  inline Msg_Login_VerifyAccount_CS& operator=(const Msg_Login_VerifyAccount_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Login_VerifyAccount_CS& operator=(Msg_Login_VerifyAccount_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Login_VerifyAccount_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Login_VerifyAccount_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_Login_VerifyAccount_CS*>(
               &_Msg_Login_VerifyAccount_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Msg_Login_VerifyAccount_CS& a, Msg_Login_VerifyAccount_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Login_VerifyAccount_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Login_VerifyAccount_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Login_VerifyAccount_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Login_VerifyAccount_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Login_VerifyAccount_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Login_VerifyAccount_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Login_VerifyAccount_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_Login_VerifyAccount_CS";
  }
  protected:
  explicit Msg_Login_VerifyAccount_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSzUserNameFieldNumber = 2,
    kSzPasswordFieldNumber = 3,
    kGameVersionFieldNumber = 6,
    kUiAccIDFieldNumber = 1,
    kDwSdkFieldNumber = 4,
    kUn8ReLoginFieldNumber = 5,
  };
  // string szUserName = 2;
  void clear_szusername();
  const std::string& szusername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_szusername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_szusername();
  PROTOBUF_NODISCARD std::string* release_szusername();
  void set_allocated_szusername(std::string* szusername);
  private:
  const std::string& _internal_szusername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_szusername(const std::string& value);
  std::string* _internal_mutable_szusername();
  public:

  // string szPassword = 3;
  void clear_szpassword();
  const std::string& szpassword() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_szpassword(ArgT0&& arg0, ArgT... args);
  std::string* mutable_szpassword();
  PROTOBUF_NODISCARD std::string* release_szpassword();
  void set_allocated_szpassword(std::string* szpassword);
  private:
  const std::string& _internal_szpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_szpassword(const std::string& value);
  std::string* _internal_mutable_szpassword();
  public:

  // .XrPb.GameVersion gameVersion = 6;
  bool has_gameversion() const;
  private:
  bool _internal_has_gameversion() const;
  public:
  void clear_gameversion();
  const ::XrPb::GameVersion& gameversion() const;
  PROTOBUF_NODISCARD ::XrPb::GameVersion* release_gameversion();
  ::XrPb::GameVersion* mutable_gameversion();
  void set_allocated_gameversion(::XrPb::GameVersion* gameversion);
  private:
  const ::XrPb::GameVersion& _internal_gameversion() const;
  ::XrPb::GameVersion* _internal_mutable_gameversion();
  public:
  void unsafe_arena_set_allocated_gameversion(
      ::XrPb::GameVersion* gameversion);
  ::XrPb::GameVersion* unsafe_arena_release_gameversion();

  // int64 uiAccID = 1;
  void clear_uiaccid();
  int64_t uiaccid() const;
  void set_uiaccid(int64_t value);
  private:
  int64_t _internal_uiaccid() const;
  void _internal_set_uiaccid(int64_t value);
  public:

  // uint32 dwSdk = 4;
  void clear_dwsdk();
  uint32_t dwsdk() const;
  void set_dwsdk(uint32_t value);
  private:
  uint32_t _internal_dwsdk() const;
  void _internal_set_dwsdk(uint32_t value);
  public:

  // uint32 un8ReLogin = 5;
  void clear_un8relogin();
  uint32_t un8relogin() const;
  void set_un8relogin(uint32_t value);
  private:
  uint32_t _internal_un8relogin() const;
  void _internal_set_un8relogin(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_Login_VerifyAccount_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr szusername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr szpassword_;
  ::XrPb::GameVersion* gameversion_;
  int64_t uiaccid_;
  uint32_t dwsdk_;
  uint32_t un8relogin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_Login_VerifyAccount_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_Login_VerifyAccount_SC) */ {
 public:
  inline Msg_Login_VerifyAccount_SC() : Msg_Login_VerifyAccount_SC(nullptr) {}
  ~Msg_Login_VerifyAccount_SC() override;
  explicit constexpr Msg_Login_VerifyAccount_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Login_VerifyAccount_SC(const Msg_Login_VerifyAccount_SC& from);
  Msg_Login_VerifyAccount_SC(Msg_Login_VerifyAccount_SC&& from) noexcept
    : Msg_Login_VerifyAccount_SC() {
    *this = ::std::move(from);
  }

  inline Msg_Login_VerifyAccount_SC& operator=(const Msg_Login_VerifyAccount_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Login_VerifyAccount_SC& operator=(Msg_Login_VerifyAccount_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Login_VerifyAccount_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Login_VerifyAccount_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_Login_VerifyAccount_SC*>(
               &_Msg_Login_VerifyAccount_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Msg_Login_VerifyAccount_SC& a, Msg_Login_VerifyAccount_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Login_VerifyAccount_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Login_VerifyAccount_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Login_VerifyAccount_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Login_VerifyAccount_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Login_VerifyAccount_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Login_VerifyAccount_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Login_VerifyAccount_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_Login_VerifyAccount_SC";
  }
  protected:
  explicit Msg_Login_VerifyAccount_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSzUserNameFieldNumber = 2,
    kUiAccIDFieldNumber = 1,
    kNServerTimeFieldNumber = 4,
    kNGameIDFieldNumber = 3,
    kNTimeZoneFieldNumber = 5,
    kOpendateFieldNumber = 6,
    kEStateFieldNumber = 7,
  };
  // string szUserName = 2;
  void clear_szusername();
  const std::string& szusername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_szusername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_szusername();
  PROTOBUF_NODISCARD std::string* release_szusername();
  void set_allocated_szusername(std::string* szusername);
  private:
  const std::string& _internal_szusername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_szusername(const std::string& value);
  std::string* _internal_mutable_szusername();
  public:

  // int64 uiAccID = 1;
  void clear_uiaccid();
  int64_t uiaccid() const;
  void set_uiaccid(int64_t value);
  private:
  int64_t _internal_uiaccid() const;
  void _internal_set_uiaccid(int64_t value);
  public:

  // int64 nServerTime = 4;
  void clear_nservertime();
  int64_t nservertime() const;
  void set_nservertime(int64_t value);
  private:
  int64_t _internal_nservertime() const;
  void _internal_set_nservertime(int64_t value);
  public:

  // uint32 nGameID = 3;
  void clear_ngameid();
  uint32_t ngameid() const;
  void set_ngameid(uint32_t value);
  private:
  uint32_t _internal_ngameid() const;
  void _internal_set_ngameid(uint32_t value);
  public:

  // int32 nTimeZone = 5;
  void clear_ntimezone();
  int32_t ntimezone() const;
  void set_ntimezone(int32_t value);
  private:
  int32_t _internal_ntimezone() const;
  void _internal_set_ntimezone(int32_t value);
  public:

  // int64 opendate = 6;
  void clear_opendate();
  int64_t opendate() const;
  void set_opendate(int64_t value);
  private:
  int64_t _internal_opendate() const;
  void _internal_set_opendate(int64_t value);
  public:

  // .XrPb.PlayerStatus eState = 7;
  void clear_estate();
  ::XrPb::PlayerStatus estate() const;
  void set_estate(::XrPb::PlayerStatus value);
  private:
  ::XrPb::PlayerStatus _internal_estate() const;
  void _internal_set_estate(::XrPb::PlayerStatus value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_Login_VerifyAccount_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr szusername_;
  int64_t uiaccid_;
  int64_t nservertime_;
  uint32_t ngameid_;
  int32_t ntimezone_;
  int64_t opendate_;
  int estate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_CreateRole_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_CreateRole_CS) */ {
 public:
  inline Msg_CreateRole_CS() : Msg_CreateRole_CS(nullptr) {}
  ~Msg_CreateRole_CS() override;
  explicit constexpr Msg_CreateRole_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_CreateRole_CS(const Msg_CreateRole_CS& from);
  Msg_CreateRole_CS(Msg_CreateRole_CS&& from) noexcept
    : Msg_CreateRole_CS() {
    *this = ::std::move(from);
  }

  inline Msg_CreateRole_CS& operator=(const Msg_CreateRole_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_CreateRole_CS& operator=(Msg_CreateRole_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_CreateRole_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_CreateRole_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_CreateRole_CS*>(
               &_Msg_CreateRole_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Msg_CreateRole_CS& a, Msg_CreateRole_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_CreateRole_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_CreateRole_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_CreateRole_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_CreateRole_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_CreateRole_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_CreateRole_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_CreateRole_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_CreateRole_CS";
  }
  protected:
  explicit Msg_CreateRole_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSzRoleNameFieldNumber = 3,
    kFormFieldNumber = 4,
    kNCareerIDFieldNumber = 1,
    kBGenderFieldNumber = 2,
  };
  // string szRoleName = 3;
  void clear_szrolename();
  const std::string& szrolename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_szrolename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_szrolename();
  PROTOBUF_NODISCARD std::string* release_szrolename();
  void set_allocated_szrolename(std::string* szrolename);
  private:
  const std::string& _internal_szrolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_szrolename(const std::string& value);
  std::string* _internal_mutable_szrolename();
  public:

  // .XrPb.FormData form = 4;
  bool has_form() const;
  private:
  bool _internal_has_form() const;
  public:
  void clear_form();
  const ::XrPb::FormData& form() const;
  PROTOBUF_NODISCARD ::XrPb::FormData* release_form();
  ::XrPb::FormData* mutable_form();
  void set_allocated_form(::XrPb::FormData* form);
  private:
  const ::XrPb::FormData& _internal_form() const;
  ::XrPb::FormData* _internal_mutable_form();
  public:
  void unsafe_arena_set_allocated_form(
      ::XrPb::FormData* form);
  ::XrPb::FormData* unsafe_arena_release_form();

  // uint32 nCareerID = 1;
  void clear_ncareerid();
  uint32_t ncareerid() const;
  void set_ncareerid(uint32_t value);
  private:
  uint32_t _internal_ncareerid() const;
  void _internal_set_ncareerid(uint32_t value);
  public:

  // uint32 bGender = 2;
  void clear_bgender();
  uint32_t bgender() const;
  void set_bgender(uint32_t value);
  private:
  uint32_t _internal_bgender() const;
  void _internal_set_bgender(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_CreateRole_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr szrolename_;
  ::XrPb::FormData* form_;
  uint32_t ncareerid_;
  uint32_t bgender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_CreateRole_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_CreateRole_SC) */ {
 public:
  inline Msg_CreateRole_SC() : Msg_CreateRole_SC(nullptr) {}
  ~Msg_CreateRole_SC() override;
  explicit constexpr Msg_CreateRole_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_CreateRole_SC(const Msg_CreateRole_SC& from);
  Msg_CreateRole_SC(Msg_CreateRole_SC&& from) noexcept
    : Msg_CreateRole_SC() {
    *this = ::std::move(from);
  }

  inline Msg_CreateRole_SC& operator=(const Msg_CreateRole_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_CreateRole_SC& operator=(Msg_CreateRole_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_CreateRole_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_CreateRole_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_CreateRole_SC*>(
               &_Msg_CreateRole_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Msg_CreateRole_SC& a, Msg_CreateRole_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_CreateRole_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_CreateRole_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_CreateRole_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_CreateRole_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_CreateRole_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_CreateRole_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_CreateRole_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_CreateRole_SC";
  }
  protected:
  explicit Msg_CreateRole_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSzRoleNameFieldNumber = 2,
    kDwRoleIdFieldNumber = 1,
    kLlCreateTimeFieldNumber = 4,
    kNLevelFieldNumber = 3,
  };
  // string szRoleName = 2;
  void clear_szrolename();
  const std::string& szrolename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_szrolename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_szrolename();
  PROTOBUF_NODISCARD std::string* release_szrolename();
  void set_allocated_szrolename(std::string* szrolename);
  private:
  const std::string& _internal_szrolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_szrolename(const std::string& value);
  std::string* _internal_mutable_szrolename();
  public:

  // int64 dwRoleId = 1;
  void clear_dwroleid();
  int64_t dwroleid() const;
  void set_dwroleid(int64_t value);
  private:
  int64_t _internal_dwroleid() const;
  void _internal_set_dwroleid(int64_t value);
  public:

  // int64 llCreateTime = 4;
  void clear_llcreatetime();
  int64_t llcreatetime() const;
  void set_llcreatetime(int64_t value);
  private:
  int64_t _internal_llcreatetime() const;
  void _internal_set_llcreatetime(int64_t value);
  public:

  // int32 nLevel = 3;
  void clear_nlevel();
  int32_t nlevel() const;
  void set_nlevel(int32_t value);
  private:
  int32_t _internal_nlevel() const;
  void _internal_set_nlevel(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_CreateRole_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr szrolename_;
  int64_t dwroleid_;
  int64_t llcreatetime_;
  int32_t nlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_Role_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_Role_PUSH) */ {
 public:
  inline Msg_Role_PUSH() : Msg_Role_PUSH(nullptr) {}
  ~Msg_Role_PUSH() override;
  explicit constexpr Msg_Role_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Role_PUSH(const Msg_Role_PUSH& from);
  Msg_Role_PUSH(Msg_Role_PUSH&& from) noexcept
    : Msg_Role_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_Role_PUSH& operator=(const Msg_Role_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Role_PUSH& operator=(Msg_Role_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Role_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Role_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_Role_PUSH*>(
               &_Msg_Role_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Msg_Role_PUSH& a, Msg_Role_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Role_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Role_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Role_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Role_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Role_PUSH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Role_PUSH& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Role_PUSH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_Role_PUSH";
  }
  protected:
  explicit Msg_Role_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
    kFormFieldNumber = 4,
    kUn32ExpFieldNumber = 2,
    kGMLevelFieldNumber = 3,
    kCreateTimeFieldNumber = 5,
  };
  // .XrPb.RoleBaseInfo role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::XrPb::RoleBaseInfo& role() const;
  PROTOBUF_NODISCARD ::XrPb::RoleBaseInfo* release_role();
  ::XrPb::RoleBaseInfo* mutable_role();
  void set_allocated_role(::XrPb::RoleBaseInfo* role);
  private:
  const ::XrPb::RoleBaseInfo& _internal_role() const;
  ::XrPb::RoleBaseInfo* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::XrPb::RoleBaseInfo* role);
  ::XrPb::RoleBaseInfo* unsafe_arena_release_role();

  // .XrPb.FormData form = 4;
  bool has_form() const;
  private:
  bool _internal_has_form() const;
  public:
  void clear_form();
  const ::XrPb::FormData& form() const;
  PROTOBUF_NODISCARD ::XrPb::FormData* release_form();
  ::XrPb::FormData* mutable_form();
  void set_allocated_form(::XrPb::FormData* form);
  private:
  const ::XrPb::FormData& _internal_form() const;
  ::XrPb::FormData* _internal_mutable_form();
  public:
  void unsafe_arena_set_allocated_form(
      ::XrPb::FormData* form);
  ::XrPb::FormData* unsafe_arena_release_form();

  // uint32 un32Exp = 2;
  void clear_un32exp();
  uint32_t un32exp() const;
  void set_un32exp(uint32_t value);
  private:
  uint32_t _internal_un32exp() const;
  void _internal_set_un32exp(uint32_t value);
  public:

  // uint32 GMLevel = 3;
  void clear_gmlevel();
  uint32_t gmlevel() const;
  void set_gmlevel(uint32_t value);
  private:
  uint32_t _internal_gmlevel() const;
  void _internal_set_gmlevel(uint32_t value);
  public:

  // int64 create_time = 5;
  void clear_create_time();
  int64_t create_time() const;
  void set_create_time(int64_t value);
  private:
  int64_t _internal_create_time() const;
  void _internal_set_create_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_Role_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::XrPb::RoleBaseInfo* role_;
  ::XrPb::FormData* form_;
  uint32_t un32exp_;
  uint32_t gmlevel_;
  int64_t create_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_RollName_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_RollName_CS) */ {
 public:
  inline Msg_RollName_CS() : Msg_RollName_CS(nullptr) {}
  ~Msg_RollName_CS() override;
  explicit constexpr Msg_RollName_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_RollName_CS(const Msg_RollName_CS& from);
  Msg_RollName_CS(Msg_RollName_CS&& from) noexcept
    : Msg_RollName_CS() {
    *this = ::std::move(from);
  }

  inline Msg_RollName_CS& operator=(const Msg_RollName_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_RollName_CS& operator=(Msg_RollName_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_RollName_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_RollName_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_RollName_CS*>(
               &_Msg_RollName_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Msg_RollName_CS& a, Msg_RollName_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_RollName_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_RollName_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_RollName_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_RollName_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_RollName_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_RollName_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_RollName_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_RollName_CS";
  }
  protected:
  explicit Msg_RollName_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBIsManFieldNumber = 1,
  };
  // bool bIsMan = 1;
  void clear_bisman();
  bool bisman() const;
  void set_bisman(bool value);
  private:
  bool _internal_bisman() const;
  void _internal_set_bisman(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_RollName_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool bisman_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_RollName_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_RollName_SC) */ {
 public:
  inline Msg_RollName_SC() : Msg_RollName_SC(nullptr) {}
  ~Msg_RollName_SC() override;
  explicit constexpr Msg_RollName_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_RollName_SC(const Msg_RollName_SC& from);
  Msg_RollName_SC(Msg_RollName_SC&& from) noexcept
    : Msg_RollName_SC() {
    *this = ::std::move(from);
  }

  inline Msg_RollName_SC& operator=(const Msg_RollName_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_RollName_SC& operator=(Msg_RollName_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_RollName_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_RollName_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_RollName_SC*>(
               &_Msg_RollName_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Msg_RollName_SC& a, Msg_RollName_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_RollName_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_RollName_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_RollName_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_RollName_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_RollName_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_RollName_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_RollName_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_RollName_SC";
  }
  protected:
  explicit Msg_RollName_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrRollNameFieldNumber = 1,
  };
  // string strRollName = 1;
  void clear_strrollname();
  const std::string& strrollname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strrollname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strrollname();
  PROTOBUF_NODISCARD std::string* release_strrollname();
  void set_allocated_strrollname(std::string* strrollname);
  private:
  const std::string& _internal_strrollname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strrollname(const std::string& value);
  std::string* _internal_mutable_strrollname();
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_RollName_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strrollname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_Kick_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_Kick_PUSH) */ {
 public:
  inline Msg_Kick_PUSH() : Msg_Kick_PUSH(nullptr) {}
  ~Msg_Kick_PUSH() override;
  explicit constexpr Msg_Kick_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_Kick_PUSH(const Msg_Kick_PUSH& from);
  Msg_Kick_PUSH(Msg_Kick_PUSH&& from) noexcept
    : Msg_Kick_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_Kick_PUSH& operator=(const Msg_Kick_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_Kick_PUSH& operator=(Msg_Kick_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_Kick_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_Kick_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_Kick_PUSH*>(
               &_Msg_Kick_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Msg_Kick_PUSH& a, Msg_Kick_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_Kick_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_Kick_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_Kick_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_Kick_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_Kick_PUSH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_Kick_PUSH& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_Kick_PUSH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_Kick_PUSH";
  }
  protected:
  explicit Msg_Kick_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrUserNameFieldNumber = 2,
    kUiAccIDFieldNumber = 1,
    kNFlagFieldNumber = 3,
    kNGameIDFieldNumber = 4,
  };
  // string strUserName = 2;
  void clear_strusername();
  const std::string& strusername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strusername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strusername();
  PROTOBUF_NODISCARD std::string* release_strusername();
  void set_allocated_strusername(std::string* strusername);
  private:
  const std::string& _internal_strusername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strusername(const std::string& value);
  std::string* _internal_mutable_strusername();
  public:

  // int64 uiAccID = 1;
  void clear_uiaccid();
  int64_t uiaccid() const;
  void set_uiaccid(int64_t value);
  private:
  int64_t _internal_uiaccid() const;
  void _internal_set_uiaccid(int64_t value);
  public:

  // int32 nFlag = 3;
  void clear_nflag();
  int32_t nflag() const;
  void set_nflag(int32_t value);
  private:
  int32_t _internal_nflag() const;
  void _internal_set_nflag(int32_t value);
  public:

  // uint32 nGameID = 4;
  void clear_ngameid();
  uint32_t ngameid() const;
  void set_ngameid(uint32_t value);
  private:
  uint32_t _internal_ngameid() const;
  void _internal_set_ngameid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_Kick_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strusername_;
  int64_t uiaccid_;
  int32_t nflag_;
  uint32_t ngameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_BeatHeart_CS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_BeatHeart_CS) */ {
 public:
  inline Msg_BeatHeart_CS() : Msg_BeatHeart_CS(nullptr) {}
  explicit constexpr Msg_BeatHeart_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_BeatHeart_CS(const Msg_BeatHeart_CS& from);
  Msg_BeatHeart_CS(Msg_BeatHeart_CS&& from) noexcept
    : Msg_BeatHeart_CS() {
    *this = ::std::move(from);
  }

  inline Msg_BeatHeart_CS& operator=(const Msg_BeatHeart_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_BeatHeart_CS& operator=(Msg_BeatHeart_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_BeatHeart_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_BeatHeart_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_BeatHeart_CS*>(
               &_Msg_BeatHeart_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Msg_BeatHeart_CS& a, Msg_BeatHeart_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_BeatHeart_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_BeatHeart_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_BeatHeart_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_BeatHeart_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_BeatHeart_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_BeatHeart_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_BeatHeart_CS";
  }
  protected:
  explicit Msg_BeatHeart_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_BeatHeart_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_BeatHeart_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_BeatHeart_SC) */ {
 public:
  inline Msg_BeatHeart_SC() : Msg_BeatHeart_SC(nullptr) {}
  ~Msg_BeatHeart_SC() override;
  explicit constexpr Msg_BeatHeart_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_BeatHeart_SC(const Msg_BeatHeart_SC& from);
  Msg_BeatHeart_SC(Msg_BeatHeart_SC&& from) noexcept
    : Msg_BeatHeart_SC() {
    *this = ::std::move(from);
  }

  inline Msg_BeatHeart_SC& operator=(const Msg_BeatHeart_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_BeatHeart_SC& operator=(Msg_BeatHeart_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_BeatHeart_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_BeatHeart_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_BeatHeart_SC*>(
               &_Msg_BeatHeart_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Msg_BeatHeart_SC& a, Msg_BeatHeart_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_BeatHeart_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_BeatHeart_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_BeatHeart_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_BeatHeart_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_BeatHeart_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_BeatHeart_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_BeatHeart_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_BeatHeart_SC";
  }
  protected:
  explicit Msg_BeatHeart_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNServerTimeFieldNumber = 1,
  };
  // int64 nServerTime = 1;
  void clear_nservertime();
  int64_t nservertime() const;
  void set_nservertime(int64_t value);
  private:
  int64_t _internal_nservertime() const;
  void _internal_set_nservertime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_BeatHeart_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t nservertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_LoadOtherPlayerData_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_LoadOtherPlayerData_CS) */ {
 public:
  inline Msg_LoadOtherPlayerData_CS() : Msg_LoadOtherPlayerData_CS(nullptr) {}
  ~Msg_LoadOtherPlayerData_CS() override;
  explicit constexpr Msg_LoadOtherPlayerData_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_LoadOtherPlayerData_CS(const Msg_LoadOtherPlayerData_CS& from);
  Msg_LoadOtherPlayerData_CS(Msg_LoadOtherPlayerData_CS&& from) noexcept
    : Msg_LoadOtherPlayerData_CS() {
    *this = ::std::move(from);
  }

  inline Msg_LoadOtherPlayerData_CS& operator=(const Msg_LoadOtherPlayerData_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_LoadOtherPlayerData_CS& operator=(Msg_LoadOtherPlayerData_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_LoadOtherPlayerData_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_LoadOtherPlayerData_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_LoadOtherPlayerData_CS*>(
               &_Msg_LoadOtherPlayerData_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Msg_LoadOtherPlayerData_CS& a, Msg_LoadOtherPlayerData_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_LoadOtherPlayerData_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_LoadOtherPlayerData_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_LoadOtherPlayerData_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_LoadOtherPlayerData_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_LoadOtherPlayerData_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_LoadOtherPlayerData_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_LoadOtherPlayerData_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_LoadOtherPlayerData_CS";
  }
  protected:
  explicit Msg_LoadOtherPlayerData_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccIdFieldNumber = 1,
  };
  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_LoadOtherPlayerData_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_LoadOtherPlayerData_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_LoadOtherPlayerData_SC) */ {
 public:
  inline Msg_LoadOtherPlayerData_SC() : Msg_LoadOtherPlayerData_SC(nullptr) {}
  ~Msg_LoadOtherPlayerData_SC() override;
  explicit constexpr Msg_LoadOtherPlayerData_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_LoadOtherPlayerData_SC(const Msg_LoadOtherPlayerData_SC& from);
  Msg_LoadOtherPlayerData_SC(Msg_LoadOtherPlayerData_SC&& from) noexcept
    : Msg_LoadOtherPlayerData_SC() {
    *this = ::std::move(from);
  }

  inline Msg_LoadOtherPlayerData_SC& operator=(const Msg_LoadOtherPlayerData_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_LoadOtherPlayerData_SC& operator=(Msg_LoadOtherPlayerData_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_LoadOtherPlayerData_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_LoadOtherPlayerData_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_LoadOtherPlayerData_SC*>(
               &_Msg_LoadOtherPlayerData_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Msg_LoadOtherPlayerData_SC& a, Msg_LoadOtherPlayerData_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_LoadOtherPlayerData_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_LoadOtherPlayerData_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_LoadOtherPlayerData_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_LoadOtherPlayerData_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_LoadOtherPlayerData_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_LoadOtherPlayerData_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_LoadOtherPlayerData_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_LoadOtherPlayerData_SC";
  }
  protected:
  explicit Msg_LoadOtherPlayerData_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNameFieldNumber = 3,
    kFormFieldNumber = 2,
    kAccIdFieldNumber = 1,
    kLevelFieldNumber = 4,
  };
  // string role_name = 3;
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_NODISCARD std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // .XrPb.FormData form = 2;
  bool has_form() const;
  private:
  bool _internal_has_form() const;
  public:
  void clear_form();
  const ::XrPb::FormData& form() const;
  PROTOBUF_NODISCARD ::XrPb::FormData* release_form();
  ::XrPb::FormData* mutable_form();
  void set_allocated_form(::XrPb::FormData* form);
  private:
  const ::XrPb::FormData& _internal_form() const;
  ::XrPb::FormData* _internal_mutable_form();
  public:
  void unsafe_arena_set_allocated_form(
      ::XrPb::FormData* form);
  ::XrPb::FormData* unsafe_arena_release_form();

  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // uint32 level = 4;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_LoadOtherPlayerData_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
  ::XrPb::FormData* form_;
  int64_t acc_id_;
  uint32_t level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_ItemList_REQ final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_ItemList_REQ) */ {
 public:
  inline Msg_ItemList_REQ() : Msg_ItemList_REQ(nullptr) {}
  explicit constexpr Msg_ItemList_REQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_ItemList_REQ(const Msg_ItemList_REQ& from);
  Msg_ItemList_REQ(Msg_ItemList_REQ&& from) noexcept
    : Msg_ItemList_REQ() {
    *this = ::std::move(from);
  }

  inline Msg_ItemList_REQ& operator=(const Msg_ItemList_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_ItemList_REQ& operator=(Msg_ItemList_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_ItemList_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_ItemList_REQ* internal_default_instance() {
    return reinterpret_cast<const Msg_ItemList_REQ*>(
               &_Msg_ItemList_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Msg_ItemList_REQ& a, Msg_ItemList_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_ItemList_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_ItemList_REQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_ItemList_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_ItemList_REQ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_ItemList_REQ& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_ItemList_REQ& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_ItemList_REQ";
  }
  protected:
  explicit Msg_ItemList_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_ItemList_REQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// -------------------------------------------------------------------

class Msg_ItemList_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_ItemList_PUSH) */ {
 public:
  inline Msg_ItemList_PUSH() : Msg_ItemList_PUSH(nullptr) {}
  ~Msg_ItemList_PUSH() override;
  explicit constexpr Msg_ItemList_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_ItemList_PUSH(const Msg_ItemList_PUSH& from);
  Msg_ItemList_PUSH(Msg_ItemList_PUSH&& from) noexcept
    : Msg_ItemList_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_ItemList_PUSH& operator=(const Msg_ItemList_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_ItemList_PUSH& operator=(Msg_ItemList_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_ItemList_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_ItemList_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_ItemList_PUSH*>(
               &_Msg_ItemList_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Msg_ItemList_PUSH& a, Msg_ItemList_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_ItemList_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_ItemList_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_ItemList_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_ItemList_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_ItemList_PUSH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_ItemList_PUSH& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_ItemList_PUSH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_ItemList_PUSH";
  }
  protected:
  explicit Msg_ItemList_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOItemFieldNumber = 1,
  };
  // repeated .XrPb.Item oItem = 1;
  int oitem_size() const;
  private:
  int _internal_oitem_size() const;
  public:
  void clear_oitem();
  ::XrPb::Item* mutable_oitem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::Item >*
      mutable_oitem();
  private:
  const ::XrPb::Item& _internal_oitem(int index) const;
  ::XrPb::Item* _internal_add_oitem();
  public:
  const ::XrPb::Item& oitem(int index) const;
  ::XrPb::Item* add_oitem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::Item >&
      oitem() const;

  // @@protoc_insertion_point(class_scope:XrPb.Msg_ItemList_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::Item > oitem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_2fMsgLogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgMod_Login

// -------------------------------------------------------------------

// Msg_LoginFinish_PUSH

// -------------------------------------------------------------------

// Msg_Login_LineUp_PUSH

// uint32 sunum = 1;
inline void Msg_Login_LineUp_PUSH::clear_sunum() {
  sunum_ = 0u;
}
inline uint32_t Msg_Login_LineUp_PUSH::_internal_sunum() const {
  return sunum_;
}
inline uint32_t Msg_Login_LineUp_PUSH::sunum() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_LineUp_PUSH.sunum)
  return _internal_sunum();
}
inline void Msg_Login_LineUp_PUSH::_internal_set_sunum(uint32_t value) {
  
  sunum_ = value;
}
inline void Msg_Login_LineUp_PUSH::set_sunum(uint32_t value) {
  _internal_set_sunum(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Login_LineUp_PUSH.sunum)
}

// uint32 cur_pos = 2;
inline void Msg_Login_LineUp_PUSH::clear_cur_pos() {
  cur_pos_ = 0u;
}
inline uint32_t Msg_Login_LineUp_PUSH::_internal_cur_pos() const {
  return cur_pos_;
}
inline uint32_t Msg_Login_LineUp_PUSH::cur_pos() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_LineUp_PUSH.cur_pos)
  return _internal_cur_pos();
}
inline void Msg_Login_LineUp_PUSH::_internal_set_cur_pos(uint32_t value) {
  
  cur_pos_ = value;
}
inline void Msg_Login_LineUp_PUSH::set_cur_pos(uint32_t value) {
  _internal_set_cur_pos(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Login_LineUp_PUSH.cur_pos)
}

// uint32 wait_time = 3;
inline void Msg_Login_LineUp_PUSH::clear_wait_time() {
  wait_time_ = 0u;
}
inline uint32_t Msg_Login_LineUp_PUSH::_internal_wait_time() const {
  return wait_time_;
}
inline uint32_t Msg_Login_LineUp_PUSH::wait_time() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_LineUp_PUSH.wait_time)
  return _internal_wait_time();
}
inline void Msg_Login_LineUp_PUSH::_internal_set_wait_time(uint32_t value) {
  
  wait_time_ = value;
}
inline void Msg_Login_LineUp_PUSH::set_wait_time(uint32_t value) {
  _internal_set_wait_time(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Login_LineUp_PUSH.wait_time)
}

// -------------------------------------------------------------------

// Msg_Login_VerifyAccount_CS

// int64 uiAccID = 1;
inline void Msg_Login_VerifyAccount_CS::clear_uiaccid() {
  uiaccid_ = int64_t{0};
}
inline int64_t Msg_Login_VerifyAccount_CS::_internal_uiaccid() const {
  return uiaccid_;
}
inline int64_t Msg_Login_VerifyAccount_CS::uiaccid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_VerifyAccount_CS.uiAccID)
  return _internal_uiaccid();
}
inline void Msg_Login_VerifyAccount_CS::_internal_set_uiaccid(int64_t value) {
  
  uiaccid_ = value;
}
inline void Msg_Login_VerifyAccount_CS::set_uiaccid(int64_t value) {
  _internal_set_uiaccid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Login_VerifyAccount_CS.uiAccID)
}

// string szUserName = 2;
inline void Msg_Login_VerifyAccount_CS::clear_szusername() {
  szusername_.ClearToEmpty();
}
inline const std::string& Msg_Login_VerifyAccount_CS::szusername() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_VerifyAccount_CS.szUserName)
  return _internal_szusername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_Login_VerifyAccount_CS::set_szusername(ArgT0&& arg0, ArgT... args) {
 
 szusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_Login_VerifyAccount_CS.szUserName)
}
inline std::string* Msg_Login_VerifyAccount_CS::mutable_szusername() {
  std::string* _s = _internal_mutable_szusername();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_Login_VerifyAccount_CS.szUserName)
  return _s;
}
inline const std::string& Msg_Login_VerifyAccount_CS::_internal_szusername() const {
  return szusername_.Get();
}
inline void Msg_Login_VerifyAccount_CS::_internal_set_szusername(const std::string& value) {
  
  szusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_Login_VerifyAccount_CS::_internal_mutable_szusername() {
  
  return szusername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_Login_VerifyAccount_CS::release_szusername() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_Login_VerifyAccount_CS.szUserName)
  return szusername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_Login_VerifyAccount_CS::set_allocated_szusername(std::string* szusername) {
  if (szusername != nullptr) {
    
  } else {
    
  }
  szusername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), szusername,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (szusername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    szusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_Login_VerifyAccount_CS.szUserName)
}

// string szPassword = 3;
inline void Msg_Login_VerifyAccount_CS::clear_szpassword() {
  szpassword_.ClearToEmpty();
}
inline const std::string& Msg_Login_VerifyAccount_CS::szpassword() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_VerifyAccount_CS.szPassword)
  return _internal_szpassword();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_Login_VerifyAccount_CS::set_szpassword(ArgT0&& arg0, ArgT... args) {
 
 szpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_Login_VerifyAccount_CS.szPassword)
}
inline std::string* Msg_Login_VerifyAccount_CS::mutable_szpassword() {
  std::string* _s = _internal_mutable_szpassword();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_Login_VerifyAccount_CS.szPassword)
  return _s;
}
inline const std::string& Msg_Login_VerifyAccount_CS::_internal_szpassword() const {
  return szpassword_.Get();
}
inline void Msg_Login_VerifyAccount_CS::_internal_set_szpassword(const std::string& value) {
  
  szpassword_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_Login_VerifyAccount_CS::_internal_mutable_szpassword() {
  
  return szpassword_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_Login_VerifyAccount_CS::release_szpassword() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_Login_VerifyAccount_CS.szPassword)
  return szpassword_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_Login_VerifyAccount_CS::set_allocated_szpassword(std::string* szpassword) {
  if (szpassword != nullptr) {
    
  } else {
    
  }
  szpassword_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), szpassword,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (szpassword_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    szpassword_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_Login_VerifyAccount_CS.szPassword)
}

// uint32 dwSdk = 4;
inline void Msg_Login_VerifyAccount_CS::clear_dwsdk() {
  dwsdk_ = 0u;
}
inline uint32_t Msg_Login_VerifyAccount_CS::_internal_dwsdk() const {
  return dwsdk_;
}
inline uint32_t Msg_Login_VerifyAccount_CS::dwsdk() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_VerifyAccount_CS.dwSdk)
  return _internal_dwsdk();
}
inline void Msg_Login_VerifyAccount_CS::_internal_set_dwsdk(uint32_t value) {
  
  dwsdk_ = value;
}
inline void Msg_Login_VerifyAccount_CS::set_dwsdk(uint32_t value) {
  _internal_set_dwsdk(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Login_VerifyAccount_CS.dwSdk)
}

// uint32 un8ReLogin = 5;
inline void Msg_Login_VerifyAccount_CS::clear_un8relogin() {
  un8relogin_ = 0u;
}
inline uint32_t Msg_Login_VerifyAccount_CS::_internal_un8relogin() const {
  return un8relogin_;
}
inline uint32_t Msg_Login_VerifyAccount_CS::un8relogin() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_VerifyAccount_CS.un8ReLogin)
  return _internal_un8relogin();
}
inline void Msg_Login_VerifyAccount_CS::_internal_set_un8relogin(uint32_t value) {
  
  un8relogin_ = value;
}
inline void Msg_Login_VerifyAccount_CS::set_un8relogin(uint32_t value) {
  _internal_set_un8relogin(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Login_VerifyAccount_CS.un8ReLogin)
}

// .XrPb.GameVersion gameVersion = 6;
inline bool Msg_Login_VerifyAccount_CS::_internal_has_gameversion() const {
  return this != internal_default_instance() && gameversion_ != nullptr;
}
inline bool Msg_Login_VerifyAccount_CS::has_gameversion() const {
  return _internal_has_gameversion();
}
inline const ::XrPb::GameVersion& Msg_Login_VerifyAccount_CS::_internal_gameversion() const {
  const ::XrPb::GameVersion* p = gameversion_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::GameVersion&>(
      ::XrPb::_GameVersion_default_instance_);
}
inline const ::XrPb::GameVersion& Msg_Login_VerifyAccount_CS::gameversion() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_VerifyAccount_CS.gameVersion)
  return _internal_gameversion();
}
inline void Msg_Login_VerifyAccount_CS::unsafe_arena_set_allocated_gameversion(
    ::XrPb::GameVersion* gameversion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameversion_);
  }
  gameversion_ = gameversion;
  if (gameversion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_Login_VerifyAccount_CS.gameVersion)
}
inline ::XrPb::GameVersion* Msg_Login_VerifyAccount_CS::release_gameversion() {
  
  ::XrPb::GameVersion* temp = gameversion_;
  gameversion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::GameVersion* Msg_Login_VerifyAccount_CS::unsafe_arena_release_gameversion() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_Login_VerifyAccount_CS.gameVersion)
  
  ::XrPb::GameVersion* temp = gameversion_;
  gameversion_ = nullptr;
  return temp;
}
inline ::XrPb::GameVersion* Msg_Login_VerifyAccount_CS::_internal_mutable_gameversion() {
  
  if (gameversion_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::GameVersion>(GetArenaForAllocation());
    gameversion_ = p;
  }
  return gameversion_;
}
inline ::XrPb::GameVersion* Msg_Login_VerifyAccount_CS::mutable_gameversion() {
  ::XrPb::GameVersion* _msg = _internal_mutable_gameversion();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_Login_VerifyAccount_CS.gameVersion)
  return _msg;
}
inline void Msg_Login_VerifyAccount_CS::set_allocated_gameversion(::XrPb::GameVersion* gameversion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameversion_);
  }
  if (gameversion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameversion));
    if (message_arena != submessage_arena) {
      gameversion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gameversion, submessage_arena);
    }
    
  } else {
    
  }
  gameversion_ = gameversion;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_Login_VerifyAccount_CS.gameVersion)
}

// -------------------------------------------------------------------

// Msg_Login_VerifyAccount_SC

// int64 uiAccID = 1;
inline void Msg_Login_VerifyAccount_SC::clear_uiaccid() {
  uiaccid_ = int64_t{0};
}
inline int64_t Msg_Login_VerifyAccount_SC::_internal_uiaccid() const {
  return uiaccid_;
}
inline int64_t Msg_Login_VerifyAccount_SC::uiaccid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_VerifyAccount_SC.uiAccID)
  return _internal_uiaccid();
}
inline void Msg_Login_VerifyAccount_SC::_internal_set_uiaccid(int64_t value) {
  
  uiaccid_ = value;
}
inline void Msg_Login_VerifyAccount_SC::set_uiaccid(int64_t value) {
  _internal_set_uiaccid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Login_VerifyAccount_SC.uiAccID)
}

// string szUserName = 2;
inline void Msg_Login_VerifyAccount_SC::clear_szusername() {
  szusername_.ClearToEmpty();
}
inline const std::string& Msg_Login_VerifyAccount_SC::szusername() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_VerifyAccount_SC.szUserName)
  return _internal_szusername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_Login_VerifyAccount_SC::set_szusername(ArgT0&& arg0, ArgT... args) {
 
 szusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_Login_VerifyAccount_SC.szUserName)
}
inline std::string* Msg_Login_VerifyAccount_SC::mutable_szusername() {
  std::string* _s = _internal_mutable_szusername();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_Login_VerifyAccount_SC.szUserName)
  return _s;
}
inline const std::string& Msg_Login_VerifyAccount_SC::_internal_szusername() const {
  return szusername_.Get();
}
inline void Msg_Login_VerifyAccount_SC::_internal_set_szusername(const std::string& value) {
  
  szusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_Login_VerifyAccount_SC::_internal_mutable_szusername() {
  
  return szusername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_Login_VerifyAccount_SC::release_szusername() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_Login_VerifyAccount_SC.szUserName)
  return szusername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_Login_VerifyAccount_SC::set_allocated_szusername(std::string* szusername) {
  if (szusername != nullptr) {
    
  } else {
    
  }
  szusername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), szusername,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (szusername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    szusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_Login_VerifyAccount_SC.szUserName)
}

// uint32 nGameID = 3;
inline void Msg_Login_VerifyAccount_SC::clear_ngameid() {
  ngameid_ = 0u;
}
inline uint32_t Msg_Login_VerifyAccount_SC::_internal_ngameid() const {
  return ngameid_;
}
inline uint32_t Msg_Login_VerifyAccount_SC::ngameid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_VerifyAccount_SC.nGameID)
  return _internal_ngameid();
}
inline void Msg_Login_VerifyAccount_SC::_internal_set_ngameid(uint32_t value) {
  
  ngameid_ = value;
}
inline void Msg_Login_VerifyAccount_SC::set_ngameid(uint32_t value) {
  _internal_set_ngameid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Login_VerifyAccount_SC.nGameID)
}

// int64 nServerTime = 4;
inline void Msg_Login_VerifyAccount_SC::clear_nservertime() {
  nservertime_ = int64_t{0};
}
inline int64_t Msg_Login_VerifyAccount_SC::_internal_nservertime() const {
  return nservertime_;
}
inline int64_t Msg_Login_VerifyAccount_SC::nservertime() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_VerifyAccount_SC.nServerTime)
  return _internal_nservertime();
}
inline void Msg_Login_VerifyAccount_SC::_internal_set_nservertime(int64_t value) {
  
  nservertime_ = value;
}
inline void Msg_Login_VerifyAccount_SC::set_nservertime(int64_t value) {
  _internal_set_nservertime(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Login_VerifyAccount_SC.nServerTime)
}

// int32 nTimeZone = 5;
inline void Msg_Login_VerifyAccount_SC::clear_ntimezone() {
  ntimezone_ = 0;
}
inline int32_t Msg_Login_VerifyAccount_SC::_internal_ntimezone() const {
  return ntimezone_;
}
inline int32_t Msg_Login_VerifyAccount_SC::ntimezone() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_VerifyAccount_SC.nTimeZone)
  return _internal_ntimezone();
}
inline void Msg_Login_VerifyAccount_SC::_internal_set_ntimezone(int32_t value) {
  
  ntimezone_ = value;
}
inline void Msg_Login_VerifyAccount_SC::set_ntimezone(int32_t value) {
  _internal_set_ntimezone(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Login_VerifyAccount_SC.nTimeZone)
}

// int64 opendate = 6;
inline void Msg_Login_VerifyAccount_SC::clear_opendate() {
  opendate_ = int64_t{0};
}
inline int64_t Msg_Login_VerifyAccount_SC::_internal_opendate() const {
  return opendate_;
}
inline int64_t Msg_Login_VerifyAccount_SC::opendate() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_VerifyAccount_SC.opendate)
  return _internal_opendate();
}
inline void Msg_Login_VerifyAccount_SC::_internal_set_opendate(int64_t value) {
  
  opendate_ = value;
}
inline void Msg_Login_VerifyAccount_SC::set_opendate(int64_t value) {
  _internal_set_opendate(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Login_VerifyAccount_SC.opendate)
}

// .XrPb.PlayerStatus eState = 7;
inline void Msg_Login_VerifyAccount_SC::clear_estate() {
  estate_ = 0;
}
inline ::XrPb::PlayerStatus Msg_Login_VerifyAccount_SC::_internal_estate() const {
  return static_cast< ::XrPb::PlayerStatus >(estate_);
}
inline ::XrPb::PlayerStatus Msg_Login_VerifyAccount_SC::estate() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Login_VerifyAccount_SC.eState)
  return _internal_estate();
}
inline void Msg_Login_VerifyAccount_SC::_internal_set_estate(::XrPb::PlayerStatus value) {
  
  estate_ = value;
}
inline void Msg_Login_VerifyAccount_SC::set_estate(::XrPb::PlayerStatus value) {
  _internal_set_estate(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Login_VerifyAccount_SC.eState)
}

// -------------------------------------------------------------------

// Msg_CreateRole_CS

// uint32 nCareerID = 1;
inline void Msg_CreateRole_CS::clear_ncareerid() {
  ncareerid_ = 0u;
}
inline uint32_t Msg_CreateRole_CS::_internal_ncareerid() const {
  return ncareerid_;
}
inline uint32_t Msg_CreateRole_CS::ncareerid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_CreateRole_CS.nCareerID)
  return _internal_ncareerid();
}
inline void Msg_CreateRole_CS::_internal_set_ncareerid(uint32_t value) {
  
  ncareerid_ = value;
}
inline void Msg_CreateRole_CS::set_ncareerid(uint32_t value) {
  _internal_set_ncareerid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_CreateRole_CS.nCareerID)
}

// uint32 bGender = 2;
inline void Msg_CreateRole_CS::clear_bgender() {
  bgender_ = 0u;
}
inline uint32_t Msg_CreateRole_CS::_internal_bgender() const {
  return bgender_;
}
inline uint32_t Msg_CreateRole_CS::bgender() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_CreateRole_CS.bGender)
  return _internal_bgender();
}
inline void Msg_CreateRole_CS::_internal_set_bgender(uint32_t value) {
  
  bgender_ = value;
}
inline void Msg_CreateRole_CS::set_bgender(uint32_t value) {
  _internal_set_bgender(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_CreateRole_CS.bGender)
}

// string szRoleName = 3;
inline void Msg_CreateRole_CS::clear_szrolename() {
  szrolename_.ClearToEmpty();
}
inline const std::string& Msg_CreateRole_CS::szrolename() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_CreateRole_CS.szRoleName)
  return _internal_szrolename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_CreateRole_CS::set_szrolename(ArgT0&& arg0, ArgT... args) {
 
 szrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_CreateRole_CS.szRoleName)
}
inline std::string* Msg_CreateRole_CS::mutable_szrolename() {
  std::string* _s = _internal_mutable_szrolename();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_CreateRole_CS.szRoleName)
  return _s;
}
inline const std::string& Msg_CreateRole_CS::_internal_szrolename() const {
  return szrolename_.Get();
}
inline void Msg_CreateRole_CS::_internal_set_szrolename(const std::string& value) {
  
  szrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_CreateRole_CS::_internal_mutable_szrolename() {
  
  return szrolename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_CreateRole_CS::release_szrolename() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_CreateRole_CS.szRoleName)
  return szrolename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_CreateRole_CS::set_allocated_szrolename(std::string* szrolename) {
  if (szrolename != nullptr) {
    
  } else {
    
  }
  szrolename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), szrolename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (szrolename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    szrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_CreateRole_CS.szRoleName)
}

// .XrPb.FormData form = 4;
inline bool Msg_CreateRole_CS::_internal_has_form() const {
  return this != internal_default_instance() && form_ != nullptr;
}
inline bool Msg_CreateRole_CS::has_form() const {
  return _internal_has_form();
}
inline const ::XrPb::FormData& Msg_CreateRole_CS::_internal_form() const {
  const ::XrPb::FormData* p = form_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::FormData&>(
      ::XrPb::_FormData_default_instance_);
}
inline const ::XrPb::FormData& Msg_CreateRole_CS::form() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_CreateRole_CS.form)
  return _internal_form();
}
inline void Msg_CreateRole_CS::unsafe_arena_set_allocated_form(
    ::XrPb::FormData* form) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(form_);
  }
  form_ = form;
  if (form) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_CreateRole_CS.form)
}
inline ::XrPb::FormData* Msg_CreateRole_CS::release_form() {
  
  ::XrPb::FormData* temp = form_;
  form_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::FormData* Msg_CreateRole_CS::unsafe_arena_release_form() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_CreateRole_CS.form)
  
  ::XrPb::FormData* temp = form_;
  form_ = nullptr;
  return temp;
}
inline ::XrPb::FormData* Msg_CreateRole_CS::_internal_mutable_form() {
  
  if (form_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::FormData>(GetArenaForAllocation());
    form_ = p;
  }
  return form_;
}
inline ::XrPb::FormData* Msg_CreateRole_CS::mutable_form() {
  ::XrPb::FormData* _msg = _internal_mutable_form();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_CreateRole_CS.form)
  return _msg;
}
inline void Msg_CreateRole_CS::set_allocated_form(::XrPb::FormData* form) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(form_);
  }
  if (form) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(form));
    if (message_arena != submessage_arena) {
      form = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, form, submessage_arena);
    }
    
  } else {
    
  }
  form_ = form;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_CreateRole_CS.form)
}

// -------------------------------------------------------------------

// Msg_CreateRole_SC

// int64 dwRoleId = 1;
inline void Msg_CreateRole_SC::clear_dwroleid() {
  dwroleid_ = int64_t{0};
}
inline int64_t Msg_CreateRole_SC::_internal_dwroleid() const {
  return dwroleid_;
}
inline int64_t Msg_CreateRole_SC::dwroleid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_CreateRole_SC.dwRoleId)
  return _internal_dwroleid();
}
inline void Msg_CreateRole_SC::_internal_set_dwroleid(int64_t value) {
  
  dwroleid_ = value;
}
inline void Msg_CreateRole_SC::set_dwroleid(int64_t value) {
  _internal_set_dwroleid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_CreateRole_SC.dwRoleId)
}

// string szRoleName = 2;
inline void Msg_CreateRole_SC::clear_szrolename() {
  szrolename_.ClearToEmpty();
}
inline const std::string& Msg_CreateRole_SC::szrolename() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_CreateRole_SC.szRoleName)
  return _internal_szrolename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_CreateRole_SC::set_szrolename(ArgT0&& arg0, ArgT... args) {
 
 szrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_CreateRole_SC.szRoleName)
}
inline std::string* Msg_CreateRole_SC::mutable_szrolename() {
  std::string* _s = _internal_mutable_szrolename();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_CreateRole_SC.szRoleName)
  return _s;
}
inline const std::string& Msg_CreateRole_SC::_internal_szrolename() const {
  return szrolename_.Get();
}
inline void Msg_CreateRole_SC::_internal_set_szrolename(const std::string& value) {
  
  szrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_CreateRole_SC::_internal_mutable_szrolename() {
  
  return szrolename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_CreateRole_SC::release_szrolename() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_CreateRole_SC.szRoleName)
  return szrolename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_CreateRole_SC::set_allocated_szrolename(std::string* szrolename) {
  if (szrolename != nullptr) {
    
  } else {
    
  }
  szrolename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), szrolename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (szrolename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    szrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_CreateRole_SC.szRoleName)
}

// int32 nLevel = 3;
inline void Msg_CreateRole_SC::clear_nlevel() {
  nlevel_ = 0;
}
inline int32_t Msg_CreateRole_SC::_internal_nlevel() const {
  return nlevel_;
}
inline int32_t Msg_CreateRole_SC::nlevel() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_CreateRole_SC.nLevel)
  return _internal_nlevel();
}
inline void Msg_CreateRole_SC::_internal_set_nlevel(int32_t value) {
  
  nlevel_ = value;
}
inline void Msg_CreateRole_SC::set_nlevel(int32_t value) {
  _internal_set_nlevel(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_CreateRole_SC.nLevel)
}

// int64 llCreateTime = 4;
inline void Msg_CreateRole_SC::clear_llcreatetime() {
  llcreatetime_ = int64_t{0};
}
inline int64_t Msg_CreateRole_SC::_internal_llcreatetime() const {
  return llcreatetime_;
}
inline int64_t Msg_CreateRole_SC::llcreatetime() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_CreateRole_SC.llCreateTime)
  return _internal_llcreatetime();
}
inline void Msg_CreateRole_SC::_internal_set_llcreatetime(int64_t value) {
  
  llcreatetime_ = value;
}
inline void Msg_CreateRole_SC::set_llcreatetime(int64_t value) {
  _internal_set_llcreatetime(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_CreateRole_SC.llCreateTime)
}

// -------------------------------------------------------------------

// Msg_Role_PUSH

// .XrPb.RoleBaseInfo role = 1;
inline bool Msg_Role_PUSH::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool Msg_Role_PUSH::has_role() const {
  return _internal_has_role();
}
inline const ::XrPb::RoleBaseInfo& Msg_Role_PUSH::_internal_role() const {
  const ::XrPb::RoleBaseInfo* p = role_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::RoleBaseInfo&>(
      ::XrPb::_RoleBaseInfo_default_instance_);
}
inline const ::XrPb::RoleBaseInfo& Msg_Role_PUSH::role() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Role_PUSH.role)
  return _internal_role();
}
inline void Msg_Role_PUSH::unsafe_arena_set_allocated_role(
    ::XrPb::RoleBaseInfo* role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_Role_PUSH.role)
}
inline ::XrPb::RoleBaseInfo* Msg_Role_PUSH::release_role() {
  
  ::XrPb::RoleBaseInfo* temp = role_;
  role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::RoleBaseInfo* Msg_Role_PUSH::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_Role_PUSH.role)
  
  ::XrPb::RoleBaseInfo* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::XrPb::RoleBaseInfo* Msg_Role_PUSH::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::RoleBaseInfo>(GetArenaForAllocation());
    role_ = p;
  }
  return role_;
}
inline ::XrPb::RoleBaseInfo* Msg_Role_PUSH::mutable_role() {
  ::XrPb::RoleBaseInfo* _msg = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_Role_PUSH.role)
  return _msg;
}
inline void Msg_Role_PUSH::set_allocated_role(::XrPb::RoleBaseInfo* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role));
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_Role_PUSH.role)
}

// uint32 un32Exp = 2;
inline void Msg_Role_PUSH::clear_un32exp() {
  un32exp_ = 0u;
}
inline uint32_t Msg_Role_PUSH::_internal_un32exp() const {
  return un32exp_;
}
inline uint32_t Msg_Role_PUSH::un32exp() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Role_PUSH.un32Exp)
  return _internal_un32exp();
}
inline void Msg_Role_PUSH::_internal_set_un32exp(uint32_t value) {
  
  un32exp_ = value;
}
inline void Msg_Role_PUSH::set_un32exp(uint32_t value) {
  _internal_set_un32exp(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Role_PUSH.un32Exp)
}

// uint32 GMLevel = 3;
inline void Msg_Role_PUSH::clear_gmlevel() {
  gmlevel_ = 0u;
}
inline uint32_t Msg_Role_PUSH::_internal_gmlevel() const {
  return gmlevel_;
}
inline uint32_t Msg_Role_PUSH::gmlevel() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Role_PUSH.GMLevel)
  return _internal_gmlevel();
}
inline void Msg_Role_PUSH::_internal_set_gmlevel(uint32_t value) {
  
  gmlevel_ = value;
}
inline void Msg_Role_PUSH::set_gmlevel(uint32_t value) {
  _internal_set_gmlevel(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Role_PUSH.GMLevel)
}

// .XrPb.FormData form = 4;
inline bool Msg_Role_PUSH::_internal_has_form() const {
  return this != internal_default_instance() && form_ != nullptr;
}
inline bool Msg_Role_PUSH::has_form() const {
  return _internal_has_form();
}
inline const ::XrPb::FormData& Msg_Role_PUSH::_internal_form() const {
  const ::XrPb::FormData* p = form_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::FormData&>(
      ::XrPb::_FormData_default_instance_);
}
inline const ::XrPb::FormData& Msg_Role_PUSH::form() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Role_PUSH.form)
  return _internal_form();
}
inline void Msg_Role_PUSH::unsafe_arena_set_allocated_form(
    ::XrPb::FormData* form) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(form_);
  }
  form_ = form;
  if (form) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_Role_PUSH.form)
}
inline ::XrPb::FormData* Msg_Role_PUSH::release_form() {
  
  ::XrPb::FormData* temp = form_;
  form_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::FormData* Msg_Role_PUSH::unsafe_arena_release_form() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_Role_PUSH.form)
  
  ::XrPb::FormData* temp = form_;
  form_ = nullptr;
  return temp;
}
inline ::XrPb::FormData* Msg_Role_PUSH::_internal_mutable_form() {
  
  if (form_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::FormData>(GetArenaForAllocation());
    form_ = p;
  }
  return form_;
}
inline ::XrPb::FormData* Msg_Role_PUSH::mutable_form() {
  ::XrPb::FormData* _msg = _internal_mutable_form();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_Role_PUSH.form)
  return _msg;
}
inline void Msg_Role_PUSH::set_allocated_form(::XrPb::FormData* form) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(form_);
  }
  if (form) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(form));
    if (message_arena != submessage_arena) {
      form = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, form, submessage_arena);
    }
    
  } else {
    
  }
  form_ = form;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_Role_PUSH.form)
}

// int64 create_time = 5;
inline void Msg_Role_PUSH::clear_create_time() {
  create_time_ = int64_t{0};
}
inline int64_t Msg_Role_PUSH::_internal_create_time() const {
  return create_time_;
}
inline int64_t Msg_Role_PUSH::create_time() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Role_PUSH.create_time)
  return _internal_create_time();
}
inline void Msg_Role_PUSH::_internal_set_create_time(int64_t value) {
  
  create_time_ = value;
}
inline void Msg_Role_PUSH::set_create_time(int64_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Role_PUSH.create_time)
}

// -------------------------------------------------------------------

// Msg_RollName_CS

// bool bIsMan = 1;
inline void Msg_RollName_CS::clear_bisman() {
  bisman_ = false;
}
inline bool Msg_RollName_CS::_internal_bisman() const {
  return bisman_;
}
inline bool Msg_RollName_CS::bisman() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_RollName_CS.bIsMan)
  return _internal_bisman();
}
inline void Msg_RollName_CS::_internal_set_bisman(bool value) {
  
  bisman_ = value;
}
inline void Msg_RollName_CS::set_bisman(bool value) {
  _internal_set_bisman(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_RollName_CS.bIsMan)
}

// -------------------------------------------------------------------

// Msg_RollName_SC

// string strRollName = 1;
inline void Msg_RollName_SC::clear_strrollname() {
  strrollname_.ClearToEmpty();
}
inline const std::string& Msg_RollName_SC::strrollname() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_RollName_SC.strRollName)
  return _internal_strrollname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_RollName_SC::set_strrollname(ArgT0&& arg0, ArgT... args) {
 
 strrollname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_RollName_SC.strRollName)
}
inline std::string* Msg_RollName_SC::mutable_strrollname() {
  std::string* _s = _internal_mutable_strrollname();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_RollName_SC.strRollName)
  return _s;
}
inline const std::string& Msg_RollName_SC::_internal_strrollname() const {
  return strrollname_.Get();
}
inline void Msg_RollName_SC::_internal_set_strrollname(const std::string& value) {
  
  strrollname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_RollName_SC::_internal_mutable_strrollname() {
  
  return strrollname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_RollName_SC::release_strrollname() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_RollName_SC.strRollName)
  return strrollname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_RollName_SC::set_allocated_strrollname(std::string* strrollname) {
  if (strrollname != nullptr) {
    
  } else {
    
  }
  strrollname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strrollname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strrollname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strrollname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_RollName_SC.strRollName)
}

// -------------------------------------------------------------------

// Msg_Kick_PUSH

// int64 uiAccID = 1;
inline void Msg_Kick_PUSH::clear_uiaccid() {
  uiaccid_ = int64_t{0};
}
inline int64_t Msg_Kick_PUSH::_internal_uiaccid() const {
  return uiaccid_;
}
inline int64_t Msg_Kick_PUSH::uiaccid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Kick_PUSH.uiAccID)
  return _internal_uiaccid();
}
inline void Msg_Kick_PUSH::_internal_set_uiaccid(int64_t value) {
  
  uiaccid_ = value;
}
inline void Msg_Kick_PUSH::set_uiaccid(int64_t value) {
  _internal_set_uiaccid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Kick_PUSH.uiAccID)
}

// string strUserName = 2;
inline void Msg_Kick_PUSH::clear_strusername() {
  strusername_.ClearToEmpty();
}
inline const std::string& Msg_Kick_PUSH::strusername() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Kick_PUSH.strUserName)
  return _internal_strusername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_Kick_PUSH::set_strusername(ArgT0&& arg0, ArgT... args) {
 
 strusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_Kick_PUSH.strUserName)
}
inline std::string* Msg_Kick_PUSH::mutable_strusername() {
  std::string* _s = _internal_mutable_strusername();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_Kick_PUSH.strUserName)
  return _s;
}
inline const std::string& Msg_Kick_PUSH::_internal_strusername() const {
  return strusername_.Get();
}
inline void Msg_Kick_PUSH::_internal_set_strusername(const std::string& value) {
  
  strusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_Kick_PUSH::_internal_mutable_strusername() {
  
  return strusername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_Kick_PUSH::release_strusername() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_Kick_PUSH.strUserName)
  return strusername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_Kick_PUSH::set_allocated_strusername(std::string* strusername) {
  if (strusername != nullptr) {
    
  } else {
    
  }
  strusername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strusername,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strusername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_Kick_PUSH.strUserName)
}

// int32 nFlag = 3;
inline void Msg_Kick_PUSH::clear_nflag() {
  nflag_ = 0;
}
inline int32_t Msg_Kick_PUSH::_internal_nflag() const {
  return nflag_;
}
inline int32_t Msg_Kick_PUSH::nflag() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Kick_PUSH.nFlag)
  return _internal_nflag();
}
inline void Msg_Kick_PUSH::_internal_set_nflag(int32_t value) {
  
  nflag_ = value;
}
inline void Msg_Kick_PUSH::set_nflag(int32_t value) {
  _internal_set_nflag(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Kick_PUSH.nFlag)
}

// uint32 nGameID = 4;
inline void Msg_Kick_PUSH::clear_ngameid() {
  ngameid_ = 0u;
}
inline uint32_t Msg_Kick_PUSH::_internal_ngameid() const {
  return ngameid_;
}
inline uint32_t Msg_Kick_PUSH::ngameid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_Kick_PUSH.nGameID)
  return _internal_ngameid();
}
inline void Msg_Kick_PUSH::_internal_set_ngameid(uint32_t value) {
  
  ngameid_ = value;
}
inline void Msg_Kick_PUSH::set_ngameid(uint32_t value) {
  _internal_set_ngameid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_Kick_PUSH.nGameID)
}

// -------------------------------------------------------------------

// Msg_BeatHeart_CS

// -------------------------------------------------------------------

// Msg_BeatHeart_SC

// int64 nServerTime = 1;
inline void Msg_BeatHeart_SC::clear_nservertime() {
  nservertime_ = int64_t{0};
}
inline int64_t Msg_BeatHeart_SC::_internal_nservertime() const {
  return nservertime_;
}
inline int64_t Msg_BeatHeart_SC::nservertime() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_BeatHeart_SC.nServerTime)
  return _internal_nservertime();
}
inline void Msg_BeatHeart_SC::_internal_set_nservertime(int64_t value) {
  
  nservertime_ = value;
}
inline void Msg_BeatHeart_SC::set_nservertime(int64_t value) {
  _internal_set_nservertime(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_BeatHeart_SC.nServerTime)
}

// -------------------------------------------------------------------

// Msg_LoadOtherPlayerData_CS

// int64 acc_id = 1;
inline void Msg_LoadOtherPlayerData_CS::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_LoadOtherPlayerData_CS::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_LoadOtherPlayerData_CS::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_LoadOtherPlayerData_CS.acc_id)
  return _internal_acc_id();
}
inline void Msg_LoadOtherPlayerData_CS::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_LoadOtherPlayerData_CS::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_LoadOtherPlayerData_CS.acc_id)
}

// -------------------------------------------------------------------

// Msg_LoadOtherPlayerData_SC

// int64 acc_id = 1;
inline void Msg_LoadOtherPlayerData_SC::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_LoadOtherPlayerData_SC::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_LoadOtherPlayerData_SC::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_LoadOtherPlayerData_SC.acc_id)
  return _internal_acc_id();
}
inline void Msg_LoadOtherPlayerData_SC::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_LoadOtherPlayerData_SC::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_LoadOtherPlayerData_SC.acc_id)
}

// .XrPb.FormData form = 2;
inline bool Msg_LoadOtherPlayerData_SC::_internal_has_form() const {
  return this != internal_default_instance() && form_ != nullptr;
}
inline bool Msg_LoadOtherPlayerData_SC::has_form() const {
  return _internal_has_form();
}
inline const ::XrPb::FormData& Msg_LoadOtherPlayerData_SC::_internal_form() const {
  const ::XrPb::FormData* p = form_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::FormData&>(
      ::XrPb::_FormData_default_instance_);
}
inline const ::XrPb::FormData& Msg_LoadOtherPlayerData_SC::form() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_LoadOtherPlayerData_SC.form)
  return _internal_form();
}
inline void Msg_LoadOtherPlayerData_SC::unsafe_arena_set_allocated_form(
    ::XrPb::FormData* form) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(form_);
  }
  form_ = form;
  if (form) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_LoadOtherPlayerData_SC.form)
}
inline ::XrPb::FormData* Msg_LoadOtherPlayerData_SC::release_form() {
  
  ::XrPb::FormData* temp = form_;
  form_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::FormData* Msg_LoadOtherPlayerData_SC::unsafe_arena_release_form() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_LoadOtherPlayerData_SC.form)
  
  ::XrPb::FormData* temp = form_;
  form_ = nullptr;
  return temp;
}
inline ::XrPb::FormData* Msg_LoadOtherPlayerData_SC::_internal_mutable_form() {
  
  if (form_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::FormData>(GetArenaForAllocation());
    form_ = p;
  }
  return form_;
}
inline ::XrPb::FormData* Msg_LoadOtherPlayerData_SC::mutable_form() {
  ::XrPb::FormData* _msg = _internal_mutable_form();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_LoadOtherPlayerData_SC.form)
  return _msg;
}
inline void Msg_LoadOtherPlayerData_SC::set_allocated_form(::XrPb::FormData* form) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(form_);
  }
  if (form) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(form));
    if (message_arena != submessage_arena) {
      form = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, form, submessage_arena);
    }
    
  } else {
    
  }
  form_ = form;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_LoadOtherPlayerData_SC.form)
}

// string role_name = 3;
inline void Msg_LoadOtherPlayerData_SC::clear_role_name() {
  role_name_.ClearToEmpty();
}
inline const std::string& Msg_LoadOtherPlayerData_SC::role_name() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_LoadOtherPlayerData_SC.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_LoadOtherPlayerData_SC::set_role_name(ArgT0&& arg0, ArgT... args) {
 
 role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_LoadOtherPlayerData_SC.role_name)
}
inline std::string* Msg_LoadOtherPlayerData_SC::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_LoadOtherPlayerData_SC.role_name)
  return _s;
}
inline const std::string& Msg_LoadOtherPlayerData_SC::_internal_role_name() const {
  return role_name_.Get();
}
inline void Msg_LoadOtherPlayerData_SC::_internal_set_role_name(const std::string& value) {
  
  role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_LoadOtherPlayerData_SC::_internal_mutable_role_name() {
  
  return role_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_LoadOtherPlayerData_SC::release_role_name() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_LoadOtherPlayerData_SC.role_name)
  return role_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_LoadOtherPlayerData_SC::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    
  } else {
    
  }
  role_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (role_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    role_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_LoadOtherPlayerData_SC.role_name)
}

// uint32 level = 4;
inline void Msg_LoadOtherPlayerData_SC::clear_level() {
  level_ = 0u;
}
inline uint32_t Msg_LoadOtherPlayerData_SC::_internal_level() const {
  return level_;
}
inline uint32_t Msg_LoadOtherPlayerData_SC::level() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_LoadOtherPlayerData_SC.level)
  return _internal_level();
}
inline void Msg_LoadOtherPlayerData_SC::_internal_set_level(uint32_t value) {
  
  level_ = value;
}
inline void Msg_LoadOtherPlayerData_SC::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_LoadOtherPlayerData_SC.level)
}

// -------------------------------------------------------------------

// Msg_ItemList_REQ

// -------------------------------------------------------------------

// Msg_ItemList_PUSH

// repeated .XrPb.Item oItem = 1;
inline int Msg_ItemList_PUSH::_internal_oitem_size() const {
  return oitem_.size();
}
inline int Msg_ItemList_PUSH::oitem_size() const {
  return _internal_oitem_size();
}
inline ::XrPb::Item* Msg_ItemList_PUSH::mutable_oitem(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_ItemList_PUSH.oItem)
  return oitem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::Item >*
Msg_ItemList_PUSH::mutable_oitem() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_ItemList_PUSH.oItem)
  return &oitem_;
}
inline const ::XrPb::Item& Msg_ItemList_PUSH::_internal_oitem(int index) const {
  return oitem_.Get(index);
}
inline const ::XrPb::Item& Msg_ItemList_PUSH::oitem(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_ItemList_PUSH.oItem)
  return _internal_oitem(index);
}
inline ::XrPb::Item* Msg_ItemList_PUSH::_internal_add_oitem() {
  return oitem_.Add();
}
inline ::XrPb::Item* Msg_ItemList_PUSH::add_oitem() {
  ::XrPb::Item* _add = _internal_add_oitem();
  // @@protoc_insertion_point(field_add:XrPb.Msg_ItemList_PUSH.oItem)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::Item >&
Msg_ItemList_PUSH::oitem() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_ItemList_PUSH.oItem)
  return oitem_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XrPb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::XrPb::MsgMod_Login_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::MsgMod_Login_MsgId>() {
  return ::XrPb::MsgMod_Login_MsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_2fMsgLogin_2eproto
