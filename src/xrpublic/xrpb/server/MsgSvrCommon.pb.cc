// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/MsgSvrCommon.proto

#include "server/MsgSvrCommon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace XrPb {
constexpr SvrMod_Com::SvrMod_Com(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SvrMod_ComDefaultTypeInternal {
  constexpr SvrMod_ComDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SvrMod_ComDefaultTypeInternal() {}
  union {
    SvrMod_Com _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SvrMod_ComDefaultTypeInternal _SvrMod_Com_default_instance_;
constexpr RoleFormInfo::RoleFormInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u){}
struct RoleFormInfoDefaultTypeInternal {
  constexpr RoleFormInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoleFormInfoDefaultTypeInternal() {}
  union {
    RoleFormInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoleFormInfoDefaultTypeInternal _RoleFormInfo_default_instance_;
constexpr Msg_SvrCommon::Msg_SvrCommon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Msg_SvrCommonDefaultTypeInternal {
  constexpr Msg_SvrCommonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrCommonDefaultTypeInternal() {}
  union {
    Msg_SvrCommon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrCommonDefaultTypeInternal _Msg_SvrCommon_default_instance_;
constexpr Msg_SS_SvrReg_CS::Msg_SS_SvrReg_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uiserverkind_(0u)
  , uiserverid_(0u)
  , platid_(0u)
  , index_(0u)
  , areano_(0u){}
struct Msg_SS_SvrReg_CSDefaultTypeInternal {
  constexpr Msg_SS_SvrReg_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SS_SvrReg_CSDefaultTypeInternal() {}
  union {
    Msg_SS_SvrReg_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SS_SvrReg_CSDefaultTypeInternal _Msg_SS_SvrReg_CS_default_instance_;
constexpr Msg_SS_SvrReg_SC::Msg_SS_SvrReg_SC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uiserverkind_(0u)
  , uiserverid_(0u){}
struct Msg_SS_SvrReg_SCDefaultTypeInternal {
  constexpr Msg_SS_SvrReg_SCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SS_SvrReg_SCDefaultTypeInternal() {}
  union {
    Msg_SS_SvrReg_SC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SS_SvrReg_SCDefaultTypeInternal _Msg_SS_SvrReg_SC_default_instance_;
constexpr Msg_SS_TransData::Msg_SS_TransData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_lst_()
  , _acc_lst_cached_byte_size_(0)
  , proto_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_id_(0u)
  , mod_id_(0u)
  , proto_id_(0u)
  , ret_code_(0){}
struct Msg_SS_TransDataDefaultTypeInternal {
  constexpr Msg_SS_TransDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SS_TransDataDefaultTypeInternal() {}
  union {
    Msg_SS_TransData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SS_TransDataDefaultTypeInternal _Msg_SS_TransData_default_instance_;
constexpr Svr_Role_Info::Svr_Role_Info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , form_(nullptr)
  , acc_id_(int64_t{0})
  , level_(0u)
  , gender_(0u)
  , logout_time_(int64_t{0})
  , player_status_(0)

  , game_id_(0u)
  , gate_id_(0u){}
struct Svr_Role_InfoDefaultTypeInternal {
  constexpr Svr_Role_InfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Svr_Role_InfoDefaultTypeInternal() {}
  union {
    Svr_Role_Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Svr_Role_InfoDefaultTypeInternal _Svr_Role_Info_default_instance_;
constexpr Msg_SS_UpdateAccData::Msg_SS_UpdateAccData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(nullptr){}
struct Msg_SS_UpdateAccDataDefaultTypeInternal {
  constexpr Msg_SS_UpdateAccDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SS_UpdateAccDataDefaultTypeInternal() {}
  union {
    Msg_SS_UpdateAccData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SS_UpdateAccDataDefaultTypeInternal _Msg_SS_UpdateAccData_default_instance_;
constexpr Msg_SS_UpdateRoleStatus::Msg_SS_UpdateRoleStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(nullptr){}
struct Msg_SS_UpdateRoleStatusDefaultTypeInternal {
  constexpr Msg_SS_UpdateRoleStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SS_UpdateRoleStatusDefaultTypeInternal() {}
  union {
    Msg_SS_UpdateRoleStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SS_UpdateRoleStatusDefaultTypeInternal _Msg_SS_UpdateRoleStatus_default_instance_;
constexpr RoleOnLineStatus::RoleOnLineStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roleid_(int64_t{0})
  , status_(0)
{}
struct RoleOnLineStatusDefaultTypeInternal {
  constexpr RoleOnLineStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoleOnLineStatusDefaultTypeInternal() {}
  union {
    RoleOnLineStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoleOnLineStatusDefaultTypeInternal _RoleOnLineStatus_default_instance_;
}  // namespace XrPb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_2fMsgSvrCommon_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_server_2fMsgSvrCommon_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_2fMsgSvrCommon_2eproto = nullptr;

const uint32_t TableStruct_server_2fMsgSvrCommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::SvrMod_Com, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleFormInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleFormInfo, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_SvrReg_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_SvrReg_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_SvrReg_CS, uiserverkind_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_SvrReg_CS, uiserverid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_SvrReg_CS, platid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_SvrReg_CS, index_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_SvrReg_CS, areano_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_SvrReg_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_SvrReg_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_SvrReg_SC, uiserverkind_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_SvrReg_SC, uiserverid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_TransData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_TransData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_TransData, seq_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_TransData, acc_lst_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_TransData, proto_msg_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_TransData, mod_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_TransData, proto_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_TransData, ret_code_),
  1,
  ~0u,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::XrPb::Svr_Role_Info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Svr_Role_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Svr_Role_Info, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Svr_Role_Info, role_name_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Svr_Role_Info, level_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Svr_Role_Info, form_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Svr_Role_Info, gender_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Svr_Role_Info, player_status_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Svr_Role_Info, logout_time_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Svr_Role_Info, game_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Svr_Role_Info, gate_id_),
  2,
  0,
  3,
  1,
  4,
  6,
  5,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_UpdateAccData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_UpdateAccData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_UpdateAccData, role_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_UpdateRoleStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SS_UpdateRoleStatus, role_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleOnLineStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleOnLineStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleOnLineStatus, roleid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleOnLineStatus, status_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::XrPb::SvrMod_Com)},
  { 6, -1, -1, sizeof(::XrPb::RoleFormInfo)},
  { 13, -1, -1, sizeof(::XrPb::Msg_SvrCommon)},
  { 19, 30, -1, sizeof(::XrPb::Msg_SS_SvrReg_CS)},
  { 35, 43, -1, sizeof(::XrPb::Msg_SS_SvrReg_SC)},
  { 45, 57, -1, sizeof(::XrPb::Msg_SS_TransData)},
  { 63, 78, -1, sizeof(::XrPb::Svr_Role_Info)},
  { 87, 94, -1, sizeof(::XrPb::Msg_SS_UpdateAccData)},
  { 95, -1, -1, sizeof(::XrPb::Msg_SS_UpdateRoleStatus)},
  { 102, 110, -1, sizeof(::XrPb::RoleOnLineStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_SvrMod_Com_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_RoleFormInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrCommon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SS_SvrReg_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SS_SvrReg_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SS_TransData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Svr_Role_Info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SS_UpdateAccData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SS_UpdateRoleStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_RoleOnLineStatus_default_instance_),
};

const char descriptor_table_protodef_server_2fMsgSvrCommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031server/MsgSvrCommon.proto\022\004XrPb\032\023clien"
  "t/Common.proto\"f\n\nSvrMod_Com\"X\n\005MsgId\022\024\n"
  "\020ServerModuleNone\020\000\022\025\n\021ServerModuleBegin"
  "\020d\022\014\n\010SvrInner\020e\022\024\n\017ServerModuleEnd\020\307\001\"\032"
  "\n\014RoleFormInfo\022\n\n\002id\030\001 \001(\r\"\243\001\n\rMsg_SvrCo"
  "mmon\"\221\001\n\005MsgId\022\017\n\013MSG_SS_NONE\020\000\022\024\n\020Msg_S"
  "S_SvrReg_CS\020\001\022\024\n\020Msg_SS_SvrReg_SC\020\002\022\024\n\020M"
  "sg_SS_TransData\020\003\022\030\n\024Msg_SS_UpdateAccDat"
  "a\020\004\022\033\n\027Msg_SS_UpdateRoleStatus\020\005\"\304\001\n\020Msg"
  "_SS_SvrReg_CS\022\031\n\014uiServerKind\030\001 \001(\rH\000\210\001\001"
  "\022\027\n\nuiServerId\030\002 \001(\rH\001\210\001\001\022\023\n\006platid\030\003 \001("
  "\rH\002\210\001\001\022\022\n\005index\030\004 \001(\rH\003\210\001\001\022\023\n\006areano\030\005 \001"
  "(\rH\004\210\001\001B\017\n\r_uiServerKindB\r\n\013_uiServerIdB"
  "\t\n\007_platidB\010\n\006_indexB\t\n\007_areano\"f\n\020Msg_S"
  "S_SvrReg_SC\022\031\n\014uiServerKind\030\001 \001(\rH\000\210\001\001\022\027"
  "\n\nuiServerId\030\002 \001(\rH\001\210\001\001B\017\n\r_uiServerKind"
  "B\r\n\013_uiServerId\"\321\001\n\020Msg_SS_TransData\022\023\n\006"
  "seq_id\030\001 \001(\rH\000\210\001\001\022\017\n\007acc_lst\030\002 \003(\003\022\026\n\tpr"
  "oto_msg\030\003 \001(\014H\001\210\001\001\022\023\n\006mod_id\030\004 \001(\rH\002\210\001\001\022"
  "\025\n\010proto_id\030\005 \001(\rH\003\210\001\001\022\025\n\010ret_code\030\006 \001(\005"
  "H\004\210\001\001B\t\n\007_seq_idB\014\n\n_proto_msgB\t\n\007_mod_i"
  "dB\013\n\t_proto_idB\013\n\t_ret_code\"\357\002\n\rSvr_Role"
  "_Info\022\023\n\006acc_id\030\001 \001(\003H\000\210\001\001\022\026\n\trole_name\030"
  "\002 \001(\tH\001\210\001\001\022\022\n\005level\030\003 \001(\rH\002\210\001\001\022!\n\004form\030\004"
  " \001(\0132\016.XrPb.FormDataH\003\210\001\001\022\023\n\006gender\030\005 \001("
  "\rH\004\210\001\001\022.\n\rplayer_status\030\006 \001(\0162\022.XrPb.Pla"
  "yerStatusH\005\210\001\001\022\030\n\013logout_time\030\007 \001(\003H\006\210\001\001"
  "\022\024\n\007game_id\030\010 \001(\rH\007\210\001\001\022\024\n\007gate_id\030\t \001(\rH"
  "\010\210\001\001B\t\n\007_acc_idB\014\n\n_role_nameB\010\n\006_levelB"
  "\007\n\005_formB\t\n\007_genderB\020\n\016_player_statusB\016\n"
  "\014_logout_timeB\n\n\010_game_idB\n\n\010_gate_id\"G\n"
  "\024Msg_SS_UpdateAccData\022&\n\004role\030\001 \001(\0132\023.Xr"
  "Pb.Svr_Role_InfoH\000\210\001\001B\007\n\005_role\"\?\n\027Msg_SS"
  "_UpdateRoleStatus\022$\n\004role\030\001 \001(\0132\026.XrPb.R"
  "oleOnLineStatus\"f\n\020RoleOnLineStatus\022\023\n\006r"
  "oleid\030\001 \001(\003H\000\210\001\001\022\'\n\006status\030\002 \001(\0162\022.XrPb."
  "PlayerStatusH\001\210\001\001B\t\n\007_roleidB\t\n\007_statusb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_2fMsgSvrCommon_2eproto_deps[1] = {
  &::descriptor_table_client_2fCommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_2fMsgSvrCommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fMsgSvrCommon_2eproto = {
  false, false, 1487, descriptor_table_protodef_server_2fMsgSvrCommon_2eproto, "server/MsgSvrCommon.proto", 
  &descriptor_table_server_2fMsgSvrCommon_2eproto_once, descriptor_table_server_2fMsgSvrCommon_2eproto_deps, 1, 10,
  schemas, file_default_instances, TableStruct_server_2fMsgSvrCommon_2eproto::offsets,
  file_level_metadata_server_2fMsgSvrCommon_2eproto, file_level_enum_descriptors_server_2fMsgSvrCommon_2eproto, file_level_service_descriptors_server_2fMsgSvrCommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_server_2fMsgSvrCommon_2eproto_getter() {
  return &descriptor_table_server_2fMsgSvrCommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_server_2fMsgSvrCommon_2eproto(&descriptor_table_server_2fMsgSvrCommon_2eproto);
namespace XrPb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SvrMod_Com_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fMsgSvrCommon_2eproto);
  return file_level_enum_descriptors_server_2fMsgSvrCommon_2eproto[0];
}
bool SvrMod_Com_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 101:
    case 199:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SvrMod_Com_MsgId SvrMod_Com::ServerModuleNone;
constexpr SvrMod_Com_MsgId SvrMod_Com::ServerModuleBegin;
constexpr SvrMod_Com_MsgId SvrMod_Com::SvrInner;
constexpr SvrMod_Com_MsgId SvrMod_Com::ServerModuleEnd;
constexpr SvrMod_Com_MsgId SvrMod_Com::MsgId_MIN;
constexpr SvrMod_Com_MsgId SvrMod_Com::MsgId_MAX;
constexpr int SvrMod_Com::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Msg_SvrCommon_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fMsgSvrCommon_2eproto);
  return file_level_enum_descriptors_server_2fMsgSvrCommon_2eproto[1];
}
bool Msg_SvrCommon_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Msg_SvrCommon_MsgId Msg_SvrCommon::MSG_SS_NONE;
constexpr Msg_SvrCommon_MsgId Msg_SvrCommon::Msg_SS_SvrReg_CS;
constexpr Msg_SvrCommon_MsgId Msg_SvrCommon::Msg_SS_SvrReg_SC;
constexpr Msg_SvrCommon_MsgId Msg_SvrCommon::Msg_SS_TransData;
constexpr Msg_SvrCommon_MsgId Msg_SvrCommon::Msg_SS_UpdateAccData;
constexpr Msg_SvrCommon_MsgId Msg_SvrCommon::Msg_SS_UpdateRoleStatus;
constexpr Msg_SvrCommon_MsgId Msg_SvrCommon::MsgId_MIN;
constexpr Msg_SvrCommon_MsgId Msg_SvrCommon::MsgId_MAX;
constexpr int Msg_SvrCommon::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SvrMod_Com::_Internal {
 public:
};

SvrMod_Com::SvrMod_Com(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.SvrMod_Com)
}
SvrMod_Com::SvrMod_Com(const SvrMod_Com& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.SvrMod_Com)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SvrMod_Com::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SvrMod_Com::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SvrMod_Com::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgSvrCommon_2eproto_getter, &descriptor_table_server_2fMsgSvrCommon_2eproto_once,
      file_level_metadata_server_2fMsgSvrCommon_2eproto[0]);
}

// ===================================================================

class RoleFormInfo::_Internal {
 public:
};

RoleFormInfo::RoleFormInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.RoleFormInfo)
}
RoleFormInfo::RoleFormInfo(const RoleFormInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:XrPb.RoleFormInfo)
}

inline void RoleFormInfo::SharedCtor() {
id_ = 0u;
}

RoleFormInfo::~RoleFormInfo() {
  // @@protoc_insertion_point(destructor:XrPb.RoleFormInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoleFormInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleFormInfo::ArenaDtor(void* object) {
  RoleFormInfo* _this = reinterpret_cast< RoleFormInfo* >(object);
  (void)_this;
}
void RoleFormInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleFormInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleFormInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.RoleFormInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleFormInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleFormInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.RoleFormInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.RoleFormInfo)
  return target;
}

size_t RoleFormInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.RoleFormInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleFormInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleFormInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleFormInfo::GetClassData() const { return &_class_data_; }

void RoleFormInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleFormInfo *>(to)->MergeFrom(
      static_cast<const RoleFormInfo &>(from));
}


void RoleFormInfo::MergeFrom(const RoleFormInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.RoleFormInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleFormInfo::CopyFrom(const RoleFormInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.RoleFormInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleFormInfo::IsInitialized() const {
  return true;
}

void RoleFormInfo::InternalSwap(RoleFormInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleFormInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgSvrCommon_2eproto_getter, &descriptor_table_server_2fMsgSvrCommon_2eproto_once,
      file_level_metadata_server_2fMsgSvrCommon_2eproto[1]);
}

// ===================================================================

class Msg_SvrCommon::_Internal {
 public:
};

Msg_SvrCommon::Msg_SvrCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrCommon)
}
Msg_SvrCommon::Msg_SvrCommon(const Msg_SvrCommon& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrCommon)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrCommon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrCommon::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrCommon::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgSvrCommon_2eproto_getter, &descriptor_table_server_2fMsgSvrCommon_2eproto_once,
      file_level_metadata_server_2fMsgSvrCommon_2eproto[2]);
}

// ===================================================================

class Msg_SS_SvrReg_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_SS_SvrReg_CS>()._has_bits_);
  static void set_has_uiserverkind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uiserverid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_platid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_areano(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Msg_SS_SvrReg_CS::Msg_SS_SvrReg_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SS_SvrReg_CS)
}
Msg_SS_SvrReg_CS::Msg_SS_SvrReg_CS(const Msg_SS_SvrReg_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uiserverkind_, &from.uiserverkind_,
    static_cast<size_t>(reinterpret_cast<char*>(&areano_) -
    reinterpret_cast<char*>(&uiserverkind_)) + sizeof(areano_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SS_SvrReg_CS)
}

inline void Msg_SS_SvrReg_CS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiserverkind_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&areano_) -
    reinterpret_cast<char*>(&uiserverkind_)) + sizeof(areano_));
}

Msg_SS_SvrReg_CS::~Msg_SS_SvrReg_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SS_SvrReg_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SS_SvrReg_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_SS_SvrReg_CS::ArenaDtor(void* object) {
  Msg_SS_SvrReg_CS* _this = reinterpret_cast< Msg_SS_SvrReg_CS* >(object);
  (void)_this;
}
void Msg_SS_SvrReg_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SS_SvrReg_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SS_SvrReg_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SS_SvrReg_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&uiserverkind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&areano_) -
        reinterpret_cast<char*>(&uiserverkind_)) + sizeof(areano_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SS_SvrReg_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 uiServerKind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_uiserverkind(&has_bits);
          uiserverkind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uiServerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_uiserverid(&has_bits);
          uiserverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 platid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_platid(&has_bits);
          platid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 areano = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_areano(&has_bits);
          areano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SS_SvrReg_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SS_SvrReg_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 uiServerKind = 1;
  if (_internal_has_uiserverkind()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uiserverkind(), target);
  }

  // optional uint32 uiServerId = 2;
  if (_internal_has_uiserverid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uiserverid(), target);
  }

  // optional uint32 platid = 3;
  if (_internal_has_platid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_platid(), target);
  }

  // optional uint32 index = 4;
  if (_internal_has_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_index(), target);
  }

  // optional uint32 areano = 5;
  if (_internal_has_areano()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_areano(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SS_SvrReg_CS)
  return target;
}

size_t Msg_SS_SvrReg_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SS_SvrReg_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 uiServerKind = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uiserverkind());
    }

    // optional uint32 uiServerId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uiserverid());
    }

    // optional uint32 platid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_platid());
    }

    // optional uint32 index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
    }

    // optional uint32 areano = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_areano());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SS_SvrReg_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SS_SvrReg_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SS_SvrReg_CS::GetClassData() const { return &_class_data_; }

void Msg_SS_SvrReg_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SS_SvrReg_CS *>(to)->MergeFrom(
      static_cast<const Msg_SS_SvrReg_CS &>(from));
}


void Msg_SS_SvrReg_CS::MergeFrom(const Msg_SS_SvrReg_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SS_SvrReg_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      uiserverkind_ = from.uiserverkind_;
    }
    if (cached_has_bits & 0x00000002u) {
      uiserverid_ = from.uiserverid_;
    }
    if (cached_has_bits & 0x00000004u) {
      platid_ = from.platid_;
    }
    if (cached_has_bits & 0x00000008u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000010u) {
      areano_ = from.areano_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SS_SvrReg_CS::CopyFrom(const Msg_SS_SvrReg_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SS_SvrReg_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SS_SvrReg_CS::IsInitialized() const {
  return true;
}

void Msg_SS_SvrReg_CS::InternalSwap(Msg_SS_SvrReg_CS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_SS_SvrReg_CS, areano_)
      + sizeof(Msg_SS_SvrReg_CS::areano_)
      - PROTOBUF_FIELD_OFFSET(Msg_SS_SvrReg_CS, uiserverkind_)>(
          reinterpret_cast<char*>(&uiserverkind_),
          reinterpret_cast<char*>(&other->uiserverkind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SS_SvrReg_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgSvrCommon_2eproto_getter, &descriptor_table_server_2fMsgSvrCommon_2eproto_once,
      file_level_metadata_server_2fMsgSvrCommon_2eproto[3]);
}

// ===================================================================

class Msg_SS_SvrReg_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_SS_SvrReg_SC>()._has_bits_);
  static void set_has_uiserverkind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uiserverid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Msg_SS_SvrReg_SC::Msg_SS_SvrReg_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SS_SvrReg_SC)
}
Msg_SS_SvrReg_SC::Msg_SS_SvrReg_SC(const Msg_SS_SvrReg_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uiserverkind_, &from.uiserverkind_,
    static_cast<size_t>(reinterpret_cast<char*>(&uiserverid_) -
    reinterpret_cast<char*>(&uiserverkind_)) + sizeof(uiserverid_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SS_SvrReg_SC)
}

inline void Msg_SS_SvrReg_SC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiserverkind_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uiserverid_) -
    reinterpret_cast<char*>(&uiserverkind_)) + sizeof(uiserverid_));
}

Msg_SS_SvrReg_SC::~Msg_SS_SvrReg_SC() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SS_SvrReg_SC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SS_SvrReg_SC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_SS_SvrReg_SC::ArenaDtor(void* object) {
  Msg_SS_SvrReg_SC* _this = reinterpret_cast< Msg_SS_SvrReg_SC* >(object);
  (void)_this;
}
void Msg_SS_SvrReg_SC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SS_SvrReg_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SS_SvrReg_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SS_SvrReg_SC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&uiserverkind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uiserverid_) -
        reinterpret_cast<char*>(&uiserverkind_)) + sizeof(uiserverid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SS_SvrReg_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 uiServerKind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_uiserverkind(&has_bits);
          uiserverkind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uiServerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_uiserverid(&has_bits);
          uiserverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SS_SvrReg_SC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SS_SvrReg_SC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 uiServerKind = 1;
  if (_internal_has_uiserverkind()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uiserverkind(), target);
  }

  // optional uint32 uiServerId = 2;
  if (_internal_has_uiserverid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uiserverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SS_SvrReg_SC)
  return target;
}

size_t Msg_SS_SvrReg_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SS_SvrReg_SC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 uiServerKind = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uiserverkind());
    }

    // optional uint32 uiServerId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uiserverid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SS_SvrReg_SC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SS_SvrReg_SC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SS_SvrReg_SC::GetClassData() const { return &_class_data_; }

void Msg_SS_SvrReg_SC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SS_SvrReg_SC *>(to)->MergeFrom(
      static_cast<const Msg_SS_SvrReg_SC &>(from));
}


void Msg_SS_SvrReg_SC::MergeFrom(const Msg_SS_SvrReg_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SS_SvrReg_SC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      uiserverkind_ = from.uiserverkind_;
    }
    if (cached_has_bits & 0x00000002u) {
      uiserverid_ = from.uiserverid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SS_SvrReg_SC::CopyFrom(const Msg_SS_SvrReg_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SS_SvrReg_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SS_SvrReg_SC::IsInitialized() const {
  return true;
}

void Msg_SS_SvrReg_SC::InternalSwap(Msg_SS_SvrReg_SC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_SS_SvrReg_SC, uiserverid_)
      + sizeof(Msg_SS_SvrReg_SC::uiserverid_)
      - PROTOBUF_FIELD_OFFSET(Msg_SS_SvrReg_SC, uiserverkind_)>(
          reinterpret_cast<char*>(&uiserverkind_),
          reinterpret_cast<char*>(&other->uiserverkind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SS_SvrReg_SC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgSvrCommon_2eproto_getter, &descriptor_table_server_2fMsgSvrCommon_2eproto_once,
      file_level_metadata_server_2fMsgSvrCommon_2eproto[4]);
}

// ===================================================================

class Msg_SS_TransData::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_SS_TransData>()._has_bits_);
  static void set_has_seq_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_proto_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mod_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_proto_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ret_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Msg_SS_TransData::Msg_SS_TransData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  acc_lst_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SS_TransData)
}
Msg_SS_TransData::Msg_SS_TransData(const Msg_SS_TransData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      acc_lst_(from.acc_lst_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proto_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    proto_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_proto_msg()) {
    proto_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proto_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_id_, &from.seq_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&seq_id_)) + sizeof(ret_code_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SS_TransData)
}

inline void Msg_SS_TransData::SharedCtor() {
proto_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  proto_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&seq_id_)) + sizeof(ret_code_));
}

Msg_SS_TransData::~Msg_SS_TransData() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SS_TransData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SS_TransData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  proto_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_SS_TransData::ArenaDtor(void* object) {
  Msg_SS_TransData* _this = reinterpret_cast< Msg_SS_TransData* >(object);
  (void)_this;
}
void Msg_SS_TransData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SS_TransData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SS_TransData::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SS_TransData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acc_lst_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    proto_msg_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&seq_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_code_) -
        reinterpret_cast<char*>(&seq_id_)) + sizeof(ret_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SS_TransData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 seq_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_seq_id(&has_bits);
          seq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 acc_lst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acc_lst(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_acc_lst(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes proto_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_proto_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mod_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_mod_id(&has_bits);
          mod_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 proto_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_proto_id(&has_bits);
          proto_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ret_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ret_code(&has_bits);
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SS_TransData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SS_TransData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 seq_id = 1;
  if (_internal_has_seq_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seq_id(), target);
  }

  // repeated int64 acc_lst = 2;
  {
    int byte_size = _acc_lst_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_acc_lst(), byte_size, target);
    }
  }

  // optional bytes proto_msg = 3;
  if (_internal_has_proto_msg()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_proto_msg(), target);
  }

  // optional uint32 mod_id = 4;
  if (_internal_has_mod_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mod_id(), target);
  }

  // optional uint32 proto_id = 5;
  if (_internal_has_proto_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_proto_id(), target);
  }

  // optional int32 ret_code = 6;
  if (_internal_has_ret_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ret_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SS_TransData)
  return target;
}

size_t Msg_SS_TransData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SS_TransData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 acc_lst = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->acc_lst_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _acc_lst_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes proto_msg = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_proto_msg());
    }

    // optional uint32 seq_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seq_id());
    }

    // optional uint32 mod_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mod_id());
    }

    // optional uint32 proto_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_proto_id());
    }

    // optional int32 ret_code = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ret_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SS_TransData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SS_TransData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SS_TransData::GetClassData() const { return &_class_data_; }

void Msg_SS_TransData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SS_TransData *>(to)->MergeFrom(
      static_cast<const Msg_SS_TransData &>(from));
}


void Msg_SS_TransData::MergeFrom(const Msg_SS_TransData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SS_TransData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  acc_lst_.MergeFrom(from.acc_lst_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_proto_msg(from._internal_proto_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      seq_id_ = from.seq_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      mod_id_ = from.mod_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      proto_id_ = from.proto_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      ret_code_ = from.ret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SS_TransData::CopyFrom(const Msg_SS_TransData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SS_TransData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SS_TransData::IsInitialized() const {
  return true;
}

void Msg_SS_TransData::InternalSwap(Msg_SS_TransData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  acc_lst_.InternalSwap(&other->acc_lst_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proto_msg_, lhs_arena,
      &other->proto_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_SS_TransData, ret_code_)
      + sizeof(Msg_SS_TransData::ret_code_)
      - PROTOBUF_FIELD_OFFSET(Msg_SS_TransData, seq_id_)>(
          reinterpret_cast<char*>(&seq_id_),
          reinterpret_cast<char*>(&other->seq_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SS_TransData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgSvrCommon_2eproto_getter, &descriptor_table_server_2fMsgSvrCommon_2eproto_once,
      file_level_metadata_server_2fMsgSvrCommon_2eproto[5]);
}

// ===================================================================

class Svr_Role_Info::_Internal {
 public:
  using HasBits = decltype(std::declval<Svr_Role_Info>()._has_bits_);
  static void set_has_acc_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_role_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::XrPb::FormData& form(const Svr_Role_Info* msg);
  static void set_has_form(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gender(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_player_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_logout_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gate_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::XrPb::FormData&
Svr_Role_Info::_Internal::form(const Svr_Role_Info* msg) {
  return *msg->form_;
}
void Svr_Role_Info::clear_form() {
  if (form_ != nullptr) form_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Svr_Role_Info::Svr_Role_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Svr_Role_Info)
}
Svr_Role_Info::Svr_Role_Info(const Svr_Role_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    role_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_role_name()) {
    role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_form()) {
    form_ = new ::XrPb::FormData(*from.form_);
  } else {
    form_ = nullptr;
  }
  ::memcpy(&acc_id_, &from.acc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gate_id_) -
    reinterpret_cast<char*>(&acc_id_)) + sizeof(gate_id_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Svr_Role_Info)
}

inline void Svr_Role_Info::SharedCtor() {
role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  role_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&form_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gate_id_) -
    reinterpret_cast<char*>(&form_)) + sizeof(gate_id_));
}

Svr_Role_Info::~Svr_Role_Info() {
  // @@protoc_insertion_point(destructor:XrPb.Svr_Role_Info)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Svr_Role_Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  role_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete form_;
}

void Svr_Role_Info::ArenaDtor(void* object) {
  Svr_Role_Info* _this = reinterpret_cast< Svr_Role_Info* >(object);
  (void)_this;
}
void Svr_Role_Info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Svr_Role_Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Svr_Role_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Svr_Role_Info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      role_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(form_ != nullptr);
      form_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&acc_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_id_) -
        reinterpret_cast<char*>(&acc_id_)) + sizeof(game_id_));
  }
  gate_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Svr_Role_Info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_acc_id(&has_bits);
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string role_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Svr_Role_Info.role_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.FormData form = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_form(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gender = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_gender(&has_bits);
          gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.PlayerStatus player_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_player_status(static_cast<::XrPb::PlayerStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int64 logout_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_logout_time(&has_bits);
          logout_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gate_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_gate_id(&has_bits);
          gate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Svr_Role_Info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Svr_Role_Info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 acc_id = 1;
  if (_internal_has_acc_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  // optional string role_name = 2;
  if (_internal_has_role_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Svr_Role_Info.role_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_role_name(), target);
  }

  // optional uint32 level = 3;
  if (_internal_has_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional .XrPb.FormData form = 4;
  if (_internal_has_form()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::form(this), target, stream);
  }

  // optional uint32 gender = 5;
  if (_internal_has_gender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_gender(), target);
  }

  // optional .XrPb.PlayerStatus player_status = 6;
  if (_internal_has_player_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_player_status(), target);
  }

  // optional int64 logout_time = 7;
  if (_internal_has_logout_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_logout_time(), target);
  }

  // optional uint32 game_id = 8;
  if (_internal_has_game_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_game_id(), target);
  }

  // optional uint32 gate_id = 9;
  if (_internal_has_gate_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_gate_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Svr_Role_Info)
  return target;
}

size_t Svr_Role_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Svr_Role_Info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string role_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_role_name());
    }

    // optional .XrPb.FormData form = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *form_);
    }

    // optional int64 acc_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

    // optional uint32 gender = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gender());
    }

    // optional int64 logout_time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_logout_time());
    }

    // optional .XrPb.PlayerStatus player_status = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_player_status());
    }

    // optional uint32 game_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_game_id());
    }

  }
  // optional uint32 gate_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gate_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Svr_Role_Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Svr_Role_Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Svr_Role_Info::GetClassData() const { return &_class_data_; }

void Svr_Role_Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Svr_Role_Info *>(to)->MergeFrom(
      static_cast<const Svr_Role_Info &>(from));
}


void Svr_Role_Info::MergeFrom(const Svr_Role_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Svr_Role_Info)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_role_name(from._internal_role_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_form()->::XrPb::FormData::MergeFrom(from._internal_form());
    }
    if (cached_has_bits & 0x00000004u) {
      acc_id_ = from.acc_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      gender_ = from.gender_;
    }
    if (cached_has_bits & 0x00000020u) {
      logout_time_ = from.logout_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      player_status_ = from.player_status_;
    }
    if (cached_has_bits & 0x00000080u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_gate_id(from._internal_gate_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Svr_Role_Info::CopyFrom(const Svr_Role_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Svr_Role_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Svr_Role_Info::IsInitialized() const {
  return true;
}

void Svr_Role_Info::InternalSwap(Svr_Role_Info* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &role_name_, lhs_arena,
      &other->role_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Svr_Role_Info, gate_id_)
      + sizeof(Svr_Role_Info::gate_id_)
      - PROTOBUF_FIELD_OFFSET(Svr_Role_Info, form_)>(
          reinterpret_cast<char*>(&form_),
          reinterpret_cast<char*>(&other->form_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Svr_Role_Info::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgSvrCommon_2eproto_getter, &descriptor_table_server_2fMsgSvrCommon_2eproto_once,
      file_level_metadata_server_2fMsgSvrCommon_2eproto[6]);
}

// ===================================================================

class Msg_SS_UpdateAccData::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_SS_UpdateAccData>()._has_bits_);
  static const ::XrPb::Svr_Role_Info& role(const Msg_SS_UpdateAccData* msg);
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::XrPb::Svr_Role_Info&
Msg_SS_UpdateAccData::_Internal::role(const Msg_SS_UpdateAccData* msg) {
  return *msg->role_;
}
Msg_SS_UpdateAccData::Msg_SS_UpdateAccData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SS_UpdateAccData)
}
Msg_SS_UpdateAccData::Msg_SS_UpdateAccData(const Msg_SS_UpdateAccData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::XrPb::Svr_Role_Info(*from.role_);
  } else {
    role_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SS_UpdateAccData)
}

inline void Msg_SS_UpdateAccData::SharedCtor() {
role_ = nullptr;
}

Msg_SS_UpdateAccData::~Msg_SS_UpdateAccData() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SS_UpdateAccData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SS_UpdateAccData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void Msg_SS_UpdateAccData::ArenaDtor(void* object) {
  Msg_SS_UpdateAccData* _this = reinterpret_cast< Msg_SS_UpdateAccData* >(object);
  (void)_this;
}
void Msg_SS_UpdateAccData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SS_UpdateAccData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SS_UpdateAccData::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SS_UpdateAccData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(role_ != nullptr);
    role_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SS_UpdateAccData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .XrPb.Svr_Role_Info role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SS_UpdateAccData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SS_UpdateAccData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .XrPb.Svr_Role_Info role = 1;
  if (_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SS_UpdateAccData)
  return target;
}

size_t Msg_SS_UpdateAccData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SS_UpdateAccData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .XrPb.Svr_Role_Info role = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SS_UpdateAccData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SS_UpdateAccData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SS_UpdateAccData::GetClassData() const { return &_class_data_; }

void Msg_SS_UpdateAccData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SS_UpdateAccData *>(to)->MergeFrom(
      static_cast<const Msg_SS_UpdateAccData &>(from));
}


void Msg_SS_UpdateAccData::MergeFrom(const Msg_SS_UpdateAccData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SS_UpdateAccData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::Svr_Role_Info::MergeFrom(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SS_UpdateAccData::CopyFrom(const Msg_SS_UpdateAccData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SS_UpdateAccData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SS_UpdateAccData::IsInitialized() const {
  return true;
}

void Msg_SS_UpdateAccData::InternalSwap(Msg_SS_UpdateAccData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SS_UpdateAccData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgSvrCommon_2eproto_getter, &descriptor_table_server_2fMsgSvrCommon_2eproto_once,
      file_level_metadata_server_2fMsgSvrCommon_2eproto[7]);
}

// ===================================================================

class Msg_SS_UpdateRoleStatus::_Internal {
 public:
  static const ::XrPb::RoleOnLineStatus& role(const Msg_SS_UpdateRoleStatus* msg);
};

const ::XrPb::RoleOnLineStatus&
Msg_SS_UpdateRoleStatus::_Internal::role(const Msg_SS_UpdateRoleStatus* msg) {
  return *msg->role_;
}
Msg_SS_UpdateRoleStatus::Msg_SS_UpdateRoleStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SS_UpdateRoleStatus)
}
Msg_SS_UpdateRoleStatus::Msg_SS_UpdateRoleStatus(const Msg_SS_UpdateRoleStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::XrPb::RoleOnLineStatus(*from.role_);
  } else {
    role_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SS_UpdateRoleStatus)
}

inline void Msg_SS_UpdateRoleStatus::SharedCtor() {
role_ = nullptr;
}

Msg_SS_UpdateRoleStatus::~Msg_SS_UpdateRoleStatus() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SS_UpdateRoleStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SS_UpdateRoleStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void Msg_SS_UpdateRoleStatus::ArenaDtor(void* object) {
  Msg_SS_UpdateRoleStatus* _this = reinterpret_cast< Msg_SS_UpdateRoleStatus* >(object);
  (void)_this;
}
void Msg_SS_UpdateRoleStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SS_UpdateRoleStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SS_UpdateRoleStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SS_UpdateRoleStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SS_UpdateRoleStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.RoleOnLineStatus role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SS_UpdateRoleStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SS_UpdateRoleStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.RoleOnLineStatus role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SS_UpdateRoleStatus)
  return target;
}

size_t Msg_SS_UpdateRoleStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SS_UpdateRoleStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.RoleOnLineStatus role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SS_UpdateRoleStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SS_UpdateRoleStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SS_UpdateRoleStatus::GetClassData() const { return &_class_data_; }

void Msg_SS_UpdateRoleStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SS_UpdateRoleStatus *>(to)->MergeFrom(
      static_cast<const Msg_SS_UpdateRoleStatus &>(from));
}


void Msg_SS_UpdateRoleStatus::MergeFrom(const Msg_SS_UpdateRoleStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SS_UpdateRoleStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::RoleOnLineStatus::MergeFrom(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SS_UpdateRoleStatus::CopyFrom(const Msg_SS_UpdateRoleStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SS_UpdateRoleStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SS_UpdateRoleStatus::IsInitialized() const {
  return true;
}

void Msg_SS_UpdateRoleStatus::InternalSwap(Msg_SS_UpdateRoleStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SS_UpdateRoleStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgSvrCommon_2eproto_getter, &descriptor_table_server_2fMsgSvrCommon_2eproto_once,
      file_level_metadata_server_2fMsgSvrCommon_2eproto[8]);
}

// ===================================================================

class RoleOnLineStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleOnLineStatus>()._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RoleOnLineStatus::RoleOnLineStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.RoleOnLineStatus)
}
RoleOnLineStatus::RoleOnLineStatus(const RoleOnLineStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:XrPb.RoleOnLineStatus)
}

inline void RoleOnLineStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(status_));
}

RoleOnLineStatus::~RoleOnLineStatus() {
  // @@protoc_insertion_point(destructor:XrPb.RoleOnLineStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoleOnLineStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleOnLineStatus::ArenaDtor(void* object) {
  RoleOnLineStatus* _this = reinterpret_cast< RoleOnLineStatus* >(object);
  (void)_this;
}
void RoleOnLineStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleOnLineStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleOnLineStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.RoleOnLineStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&roleid_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleOnLineStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.PlayerStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::XrPb::PlayerStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleOnLineStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.RoleOnLineStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 roleid = 1;
  if (_internal_has_roleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional .XrPb.PlayerStatus status = 2;
  if (_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.RoleOnLineStatus)
  return target;
}

size_t RoleOnLineStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.RoleOnLineStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 roleid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_roleid());
    }

    // optional .XrPb.PlayerStatus status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleOnLineStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleOnLineStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleOnLineStatus::GetClassData() const { return &_class_data_; }

void RoleOnLineStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleOnLineStatus *>(to)->MergeFrom(
      static_cast<const RoleOnLineStatus &>(from));
}


void RoleOnLineStatus::MergeFrom(const RoleOnLineStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.RoleOnLineStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      roleid_ = from.roleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleOnLineStatus::CopyFrom(const RoleOnLineStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.RoleOnLineStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleOnLineStatus::IsInitialized() const {
  return true;
}

void RoleOnLineStatus::InternalSwap(RoleOnLineStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleOnLineStatus, status_)
      + sizeof(RoleOnLineStatus::status_)
      - PROTOBUF_FIELD_OFFSET(RoleOnLineStatus, roleid_)>(
          reinterpret_cast<char*>(&roleid_),
          reinterpret_cast<char*>(&other->roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleOnLineStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgSvrCommon_2eproto_getter, &descriptor_table_server_2fMsgSvrCommon_2eproto_once,
      file_level_metadata_server_2fMsgSvrCommon_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XrPb::SvrMod_Com* Arena::CreateMaybeMessage< ::XrPb::SvrMod_Com >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::SvrMod_Com >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::RoleFormInfo* Arena::CreateMaybeMessage< ::XrPb::RoleFormInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::RoleFormInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrCommon* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrCommon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SS_SvrReg_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_SS_SvrReg_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SS_SvrReg_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SS_SvrReg_SC* Arena::CreateMaybeMessage< ::XrPb::Msg_SS_SvrReg_SC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SS_SvrReg_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SS_TransData* Arena::CreateMaybeMessage< ::XrPb::Msg_SS_TransData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SS_TransData >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Svr_Role_Info* Arena::CreateMaybeMessage< ::XrPb::Svr_Role_Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Svr_Role_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SS_UpdateAccData* Arena::CreateMaybeMessage< ::XrPb::Msg_SS_UpdateAccData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SS_UpdateAccData >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SS_UpdateRoleStatus* Arena::CreateMaybeMessage< ::XrPb::Msg_SS_UpdateRoleStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SS_UpdateRoleStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::RoleOnLineStatus* Arena::CreateMaybeMessage< ::XrPb::RoleOnLineStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::RoleOnLineStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
