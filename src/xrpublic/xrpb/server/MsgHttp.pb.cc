// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/MsgHttp.proto

#include "server/MsgHttp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace XrPb {
constexpr MsgSvrMod_Http::MsgSvrMod_Http(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MsgSvrMod_HttpDefaultTypeInternal {
  constexpr MsgSvrMod_HttpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgSvrMod_HttpDefaultTypeInternal() {}
  union {
    MsgSvrMod_Http _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgSvrMod_HttpDefaultTypeInternal _MsgSvrMod_Http_default_instance_;
constexpr HttpRetMsg::HttpRetMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msgid_(0u){}
struct HttpRetMsgDefaultTypeInternal {
  constexpr HttpRetMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HttpRetMsgDefaultTypeInternal() {}
  union {
    HttpRetMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HttpRetMsgDefaultTypeInternal _HttpRetMsg_default_instance_;
constexpr HttpUserLoginRet::HttpUserLoginRet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : provincename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accid_(int64_t{0})
  , eresult_(0)

  , gateid_(0u)
  , province_(0)
  , gmlevel_(0u)
  , proarea_(0u){}
struct HttpUserLoginRetDefaultTypeInternal {
  constexpr HttpUserLoginRetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HttpUserLoginRetDefaultTypeInternal() {}
  union {
    HttpUserLoginRet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HttpUserLoginRetDefaultTypeInternal _HttpUserLoginRet_default_instance_;
constexpr HttpUploadFileRet::HttpUploadFileRet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(0)
  , cos_(false){}
struct HttpUploadFileRetDefaultTypeInternal {
  constexpr HttpUploadFileRetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HttpUploadFileRetDefaultTypeInternal() {}
  union {
    HttpUploadFileRet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HttpUploadFileRetDefaultTypeInternal _HttpUploadFileRet_default_instance_;
constexpr HttpModifyNameRet::HttpModifyNameRet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rolename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accid_(int64_t{0})
  , eresult_(0)

  , serverid_(0u){}
struct HttpModifyNameRetDefaultTypeInternal {
  constexpr HttpModifyNameRetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HttpModifyNameRetDefaultTypeInternal() {}
  union {
    HttpModifyNameRet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HttpModifyNameRetDefaultTypeInternal _HttpModifyNameRet_default_instance_;
}  // namespace XrPb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_2fMsgHttp_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_server_2fMsgHttp_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_2fMsgHttp_2eproto = nullptr;

const uint32_t TableStruct_server_2fMsgHttp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::MsgSvrMod_Http, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpRetMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpRetMsg, msgid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpRetMsg, msg_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUserLoginRet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUserLoginRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUserLoginRet, accid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUserLoginRet, eresult_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUserLoginRet, gateid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUserLoginRet, province_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUserLoginRet, provincename_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUserLoginRet, sessionid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUserLoginRet, gmlevel_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUserLoginRet, devid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUserLoginRet, proarea_),
  ~0u,
  ~0u,
  3,
  4,
  0,
  1,
  5,
  2,
  6,
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUploadFileRet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUploadFileRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUploadFileRet, filename_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUploadFileRet, code_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUploadFileRet, ret_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpUploadFileRet, cos_),
  0,
  2,
  1,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpModifyNameRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpModifyNameRet, accid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpModifyNameRet, eresult_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpModifyNameRet, serverid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::HttpModifyNameRet, rolename_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::XrPb::MsgSvrMod_Http)},
  { 6, -1, -1, sizeof(::XrPb::HttpRetMsg)},
  { 14, 29, -1, sizeof(::XrPb::HttpUserLoginRet)},
  { 38, 48, -1, sizeof(::XrPb::HttpUploadFileRet)},
  { 52, -1, -1, sizeof(::XrPb::HttpModifyNameRet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_MsgSvrMod_Http_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_HttpRetMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_HttpUserLoginRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_HttpUploadFileRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_HttpModifyNameRet_default_instance_),
};

const char descriptor_table_protodef_server_2fMsgHttp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024server/MsgHttp.proto\022\004XrPb\032\023client/Com"
  "mon.proto\"\351\004\n\016MsgSvrMod_Http\"\326\004\n\005MsgId\022\021"
  "\n\rMsg_Http_None\020\000\022\027\n\023Msg_Http_NewMail_CS"
  "\020\001\022\027\n\023Msg_Http_NewMail_SC\020\002\022\030\n\024Msg_Http_"
  "OpenDate_CS\020\003\022\030\n\024Msg_Http_OpenDate_SC\020\004\022"
  "\034\n\030Msg_Http_UpdateNotice_CS\020\005\022\034\n\030Msg_Htt"
  "p_UpdateNotice_SC\020\006\022\036\n\032Msg_Http_NotifyRe"
  "charge_CS\020\007\022\036\n\032Msg_Http_NotifyRecharge_S"
  "C\020\010\022\030\n\024Msg_Http_KickUser_CS\020\t\022\030\n\024Msg_Htt"
  "p_KickUser_SC\020\n\022\032\n\026Msg_Http_ForbidChat_C"
  "S\020\013\022\032\n\026Msg_Http_ForbidChat_SC\020\014\022\034\n\030Msg_H"
  "ttp_UnForbidChat_CS\020\r\022\034\n\030Msg_Http_UnForb"
  "idChat_SC\020\016\022\035\n\031Msg_Http_KillAllPlayer_CS"
  "\020\021\022\035\n\031Msg_Http_KillAllPlayer_SC\020\022\022\032\n\026Msg"
  "_Http_UpdateData_CS\020\023\022\032\n\026Msg_Http_Update"
  "Data_SC\020\024\022\034\n\030Msg_Http_ModifyCredit_CS\020\025\022"
  "\034\n\030Msg_Http_ModifyCredit_SC\020\026\"(\n\nHttpRet"
  "Msg\022\r\n\005msgid\030\001 \001(\r\022\013\n\003msg\030\002 \001(\014\"\274\002\n\020Http"
  "UserLoginRet\022\r\n\005accid\030\001 \001(\003\022!\n\007eResult\030\002"
  " \001(\0162\020.XrPb.ResultCode\022\023\n\006gateid\030\003 \001(\rH\000"
  "\210\001\001\022\025\n\010province\030\004 \001(\005H\001\210\001\001\022\031\n\014provincena"
  "me\030\005 \001(\tH\002\210\001\001\022\026\n\tsessionid\030\006 \001(\tH\003\210\001\001\022\024\n"
  "\007gmlevel\030\007 \001(\rH\004\210\001\001\022\022\n\005devid\030\010 \001(\tH\005\210\001\001\022"
  "\024\n\007proarea\030\t \001(\rH\006\210\001\001B\t\n\007_gateidB\013\n\t_pro"
  "vinceB\017\n\r_provincenameB\014\n\n_sessionidB\n\n\010"
  "_gmlevelB\010\n\006_devidB\n\n\010_proarea\"\207\001\n\021HttpU"
  "ploadFileRet\022\025\n\010filename\030\001 \001(\tH\000\210\001\001\022\021\n\004c"
  "ode\030\002 \001(\005H\001\210\001\001\022\020\n\003ret\030\003 \001(\tH\002\210\001\001\022\020\n\003cos\030"
  "\004 \001(\010H\003\210\001\001B\013\n\t_filenameB\007\n\005_codeB\006\n\004_ret"
  "B\006\n\004_cos\"i\n\021HttpModifyNameRet\022\r\n\005accid\030\001"
  " \001(\003\022!\n\007eResult\030\002 \001(\0162\020.XrPb.ResultCode\022"
  "\020\n\010serverid\030\003 \001(\r\022\020\n\010rolename\030\004 \001(\tb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_2fMsgHttp_2eproto_deps[1] = {
  &::descriptor_table_client_2fCommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_2fMsgHttp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fMsgHttp_2eproto = {
  false, false, 1283, descriptor_table_protodef_server_2fMsgHttp_2eproto, "server/MsgHttp.proto", 
  &descriptor_table_server_2fMsgHttp_2eproto_once, descriptor_table_server_2fMsgHttp_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_server_2fMsgHttp_2eproto::offsets,
  file_level_metadata_server_2fMsgHttp_2eproto, file_level_enum_descriptors_server_2fMsgHttp_2eproto, file_level_service_descriptors_server_2fMsgHttp_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_server_2fMsgHttp_2eproto_getter() {
  return &descriptor_table_server_2fMsgHttp_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_server_2fMsgHttp_2eproto(&descriptor_table_server_2fMsgHttp_2eproto);
namespace XrPb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgSvrMod_Http_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fMsgHttp_2eproto);
  return file_level_enum_descriptors_server_2fMsgHttp_2eproto[0];
}
bool MsgSvrMod_Http_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_None;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_NewMail_CS;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_NewMail_SC;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_OpenDate_CS;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_OpenDate_SC;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_UpdateNotice_CS;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_UpdateNotice_SC;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_NotifyRecharge_CS;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_NotifyRecharge_SC;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_KickUser_CS;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_KickUser_SC;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_ForbidChat_CS;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_ForbidChat_SC;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_UnForbidChat_CS;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_UnForbidChat_SC;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_KillAllPlayer_CS;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_KillAllPlayer_SC;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_UpdateData_CS;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_UpdateData_SC;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_ModifyCredit_CS;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::Msg_Http_ModifyCredit_SC;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::MsgId_MIN;
constexpr MsgSvrMod_Http_MsgId MsgSvrMod_Http::MsgId_MAX;
constexpr int MsgSvrMod_Http::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MsgSvrMod_Http::_Internal {
 public:
};

MsgSvrMod_Http::MsgSvrMod_Http(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.MsgSvrMod_Http)
}
MsgSvrMod_Http::MsgSvrMod_Http(const MsgSvrMod_Http& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.MsgSvrMod_Http)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgSvrMod_Http::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgSvrMod_Http::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgSvrMod_Http::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgHttp_2eproto_getter, &descriptor_table_server_2fMsgHttp_2eproto_once,
      file_level_metadata_server_2fMsgHttp_2eproto[0]);
}

// ===================================================================

class HttpRetMsg::_Internal {
 public:
};

HttpRetMsg::HttpRetMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.HttpRetMsg)
}
HttpRetMsg::HttpRetMsg(const HttpRetMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  msgid_ = from.msgid_;
  // @@protoc_insertion_point(copy_constructor:XrPb.HttpRetMsg)
}

inline void HttpRetMsg::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
msgid_ = 0u;
}

HttpRetMsg::~HttpRetMsg() {
  // @@protoc_insertion_point(destructor:XrPb.HttpRetMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HttpRetMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HttpRetMsg::ArenaDtor(void* object) {
  HttpRetMsg* _this = reinterpret_cast< HttpRetMsg* >(object);
  (void)_this;
}
void HttpRetMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HttpRetMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HttpRetMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.HttpRetMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  msgid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HttpRetMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 msgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HttpRetMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.HttpRetMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msgid = 1;
  if (this->_internal_msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msgid(), target);
  }

  // bytes msg = 2;
  if (!this->_internal_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.HttpRetMsg)
  return target;
}

size_t HttpRetMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.HttpRetMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // uint32 msgid = 1;
  if (this->_internal_msgid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HttpRetMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HttpRetMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HttpRetMsg::GetClassData() const { return &_class_data_; }

void HttpRetMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HttpRetMsg *>(to)->MergeFrom(
      static_cast<const HttpRetMsg &>(from));
}


void HttpRetMsg::MergeFrom(const HttpRetMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.HttpRetMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_msgid() != 0) {
    _internal_set_msgid(from._internal_msgid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HttpRetMsg::CopyFrom(const HttpRetMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.HttpRetMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpRetMsg::IsInitialized() const {
  return true;
}

void HttpRetMsg::InternalSwap(HttpRetMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  swap(msgid_, other->msgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpRetMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgHttp_2eproto_getter, &descriptor_table_server_2fMsgHttp_2eproto_once,
      file_level_metadata_server_2fMsgHttp_2eproto[1]);
}

// ===================================================================

class HttpUserLoginRet::_Internal {
 public:
  using HasBits = decltype(std::declval<HttpUserLoginRet>()._has_bits_);
  static void set_has_gateid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_province(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_provincename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gmlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_devid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_proarea(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

HttpUserLoginRet::HttpUserLoginRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.HttpUserLoginRet)
}
HttpUserLoginRet::HttpUserLoginRet(const HttpUserLoginRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  provincename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    provincename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_provincename()) {
    provincename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provincename(), 
      GetArenaForAllocation());
  }
  sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sessionid()) {
    sessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sessionid(), 
      GetArenaForAllocation());
  }
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    devid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_devid()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&accid_, &from.accid_,
    static_cast<size_t>(reinterpret_cast<char*>(&proarea_) -
    reinterpret_cast<char*>(&accid_)) + sizeof(proarea_));
  // @@protoc_insertion_point(copy_constructor:XrPb.HttpUserLoginRet)
}

inline void HttpUserLoginRet::SharedCtor() {
provincename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  provincename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sessionid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  devid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&proarea_) -
    reinterpret_cast<char*>(&accid_)) + sizeof(proarea_));
}

HttpUserLoginRet::~HttpUserLoginRet() {
  // @@protoc_insertion_point(destructor:XrPb.HttpUserLoginRet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HttpUserLoginRet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  provincename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HttpUserLoginRet::ArenaDtor(void* object) {
  HttpUserLoginRet* _this = reinterpret_cast< HttpUserLoginRet* >(object);
  (void)_this;
}
void HttpUserLoginRet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HttpUserLoginRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HttpUserLoginRet::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.HttpUserLoginRet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      provincename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      sessionid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      devid_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&accid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eresult_) -
      reinterpret_cast<char*>(&accid_)) + sizeof(eresult_));
  if (cached_has_bits & 0x00000078u) {
    ::memset(&gateid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&proarea_) -
        reinterpret_cast<char*>(&gateid_)) + sizeof(proarea_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HttpUserLoginRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 accid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          accid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.ResultCode eResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eresult(static_cast<::XrPb::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gateid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gateid(&has_bits);
          gateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 province = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_province(&has_bits);
          province_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string provincename = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_provincename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.HttpUserLoginRet.provincename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sessionid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.HttpUserLoginRet.sessionid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gmlevel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_gmlevel(&has_bits);
          gmlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string devid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.HttpUserLoginRet.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 proarea = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_proarea(&has_bits);
          proarea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HttpUserLoginRet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.HttpUserLoginRet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 accid = 1;
  if (this->_internal_accid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_accid(), target);
  }

  // .XrPb.ResultCode eResult = 2;
  if (this->_internal_eresult() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_eresult(), target);
  }

  // optional uint32 gateid = 3;
  if (_internal_has_gateid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gateid(), target);
  }

  // optional int32 province = 4;
  if (_internal_has_province()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_province(), target);
  }

  // optional string provincename = 5;
  if (_internal_has_provincename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provincename().data(), static_cast<int>(this->_internal_provincename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.HttpUserLoginRet.provincename");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_provincename(), target);
  }

  // optional string sessionid = 6;
  if (_internal_has_sessionid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.HttpUserLoginRet.sessionid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sessionid(), target);
  }

  // optional uint32 gmlevel = 7;
  if (_internal_has_gmlevel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_gmlevel(), target);
  }

  // optional string devid = 8;
  if (_internal_has_devid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.HttpUserLoginRet.devid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_devid(), target);
  }

  // optional uint32 proarea = 9;
  if (_internal_has_proarea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_proarea(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.HttpUserLoginRet)
  return target;
}

size_t HttpUserLoginRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.HttpUserLoginRet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string provincename = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_provincename());
    }

    // optional string sessionid = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sessionid());
    }

    // optional string devid = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_devid());
    }

  }
  // int64 accid = 1;
  if (this->_internal_accid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_accid());
  }

  // .XrPb.ResultCode eResult = 2;
  if (this->_internal_eresult() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eresult());
  }

  if (cached_has_bits & 0x00000078u) {
    // optional uint32 gateid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gateid());
    }

    // optional int32 province = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_province());
    }

    // optional uint32 gmlevel = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gmlevel());
    }

    // optional uint32 proarea = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_proarea());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HttpUserLoginRet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HttpUserLoginRet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HttpUserLoginRet::GetClassData() const { return &_class_data_; }

void HttpUserLoginRet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HttpUserLoginRet *>(to)->MergeFrom(
      static_cast<const HttpUserLoginRet &>(from));
}


void HttpUserLoginRet::MergeFrom(const HttpUserLoginRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.HttpUserLoginRet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_provincename(from._internal_provincename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_sessionid(from._internal_sessionid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_devid(from._internal_devid());
    }
  }
  if (from._internal_accid() != 0) {
    _internal_set_accid(from._internal_accid());
  }
  if (from._internal_eresult() != 0) {
    _internal_set_eresult(from._internal_eresult());
  }
  if (cached_has_bits & 0x00000078u) {
    if (cached_has_bits & 0x00000008u) {
      gateid_ = from.gateid_;
    }
    if (cached_has_bits & 0x00000010u) {
      province_ = from.province_;
    }
    if (cached_has_bits & 0x00000020u) {
      gmlevel_ = from.gmlevel_;
    }
    if (cached_has_bits & 0x00000040u) {
      proarea_ = from.proarea_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HttpUserLoginRet::CopyFrom(const HttpUserLoginRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.HttpUserLoginRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpUserLoginRet::IsInitialized() const {
  return true;
}

void HttpUserLoginRet::InternalSwap(HttpUserLoginRet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &provincename_, lhs_arena,
      &other->provincename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sessionid_, lhs_arena,
      &other->sessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HttpUserLoginRet, proarea_)
      + sizeof(HttpUserLoginRet::proarea_)
      - PROTOBUF_FIELD_OFFSET(HttpUserLoginRet, accid_)>(
          reinterpret_cast<char*>(&accid_),
          reinterpret_cast<char*>(&other->accid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpUserLoginRet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgHttp_2eproto_getter, &descriptor_table_server_2fMsgHttp_2eproto_once,
      file_level_metadata_server_2fMsgHttp_2eproto[2]);
}

// ===================================================================

class HttpUploadFileRet::_Internal {
 public:
  using HasBits = decltype(std::declval<HttpUploadFileRet>()._has_bits_);
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

HttpUploadFileRet::HttpUploadFileRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.HttpUploadFileRet)
}
HttpUploadFileRet::HttpUploadFileRet(const HttpUploadFileRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  ret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ret()) {
    ret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ret(), 
      GetArenaForAllocation());
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&cos_) -
    reinterpret_cast<char*>(&code_)) + sizeof(cos_));
  // @@protoc_insertion_point(copy_constructor:XrPb.HttpUploadFileRet)
}

inline void HttpUploadFileRet::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cos_) -
    reinterpret_cast<char*>(&code_)) + sizeof(cos_));
}

HttpUploadFileRet::~HttpUploadFileRet() {
  // @@protoc_insertion_point(destructor:XrPb.HttpUploadFileRet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HttpUploadFileRet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HttpUploadFileRet::ArenaDtor(void* object) {
  HttpUploadFileRet* _this = reinterpret_cast< HttpUploadFileRet* >(object);
  (void)_this;
}
void HttpUploadFileRet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HttpUploadFileRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HttpUploadFileRet::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.HttpUploadFileRet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ret_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cos_) -
        reinterpret_cast<char*>(&code_)) + sizeof(cos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HttpUploadFileRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.HttpUploadFileRet.filename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_code(&has_bits);
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.HttpUploadFileRet.ret"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cos(&has_bits);
          cos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HttpUploadFileRet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.HttpUploadFileRet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string filename = 1;
  if (_internal_has_filename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.HttpUploadFileRet.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // optional int32 code = 2;
  if (_internal_has_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // optional string ret = 3;
  if (_internal_has_ret()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ret().data(), static_cast<int>(this->_internal_ret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.HttpUploadFileRet.ret");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ret(), target);
  }

  // optional bool cos = 4;
  if (_internal_has_cos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_cos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.HttpUploadFileRet)
  return target;
}

size_t HttpUploadFileRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.HttpUploadFileRet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string ret = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ret());
    }

    // optional int32 code = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_code());
    }

    // optional bool cos = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HttpUploadFileRet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HttpUploadFileRet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HttpUploadFileRet::GetClassData() const { return &_class_data_; }

void HttpUploadFileRet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HttpUploadFileRet *>(to)->MergeFrom(
      static_cast<const HttpUploadFileRet &>(from));
}


void HttpUploadFileRet::MergeFrom(const HttpUploadFileRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.HttpUploadFileRet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ret(from._internal_ret());
    }
    if (cached_has_bits & 0x00000004u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000008u) {
      cos_ = from.cos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HttpUploadFileRet::CopyFrom(const HttpUploadFileRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.HttpUploadFileRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpUploadFileRet::IsInitialized() const {
  return true;
}

void HttpUploadFileRet::InternalSwap(HttpUploadFileRet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ret_, lhs_arena,
      &other->ret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HttpUploadFileRet, cos_)
      + sizeof(HttpUploadFileRet::cos_)
      - PROTOBUF_FIELD_OFFSET(HttpUploadFileRet, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpUploadFileRet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgHttp_2eproto_getter, &descriptor_table_server_2fMsgHttp_2eproto_once,
      file_level_metadata_server_2fMsgHttp_2eproto[3]);
}

// ===================================================================

class HttpModifyNameRet::_Internal {
 public:
};

HttpModifyNameRet::HttpModifyNameRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.HttpModifyNameRet)
}
HttpModifyNameRet::HttpModifyNameRet(const HttpModifyNameRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rolename().empty()) {
    rolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rolename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&accid_, &from.accid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&accid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:XrPb.HttpModifyNameRet)
}

inline void HttpModifyNameRet::SharedCtor() {
rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&accid_)) + sizeof(serverid_));
}

HttpModifyNameRet::~HttpModifyNameRet() {
  // @@protoc_insertion_point(destructor:XrPb.HttpModifyNameRet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HttpModifyNameRet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HttpModifyNameRet::ArenaDtor(void* object) {
  HttpModifyNameRet* _this = reinterpret_cast< HttpModifyNameRet* >(object);
  (void)_this;
}
void HttpModifyNameRet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HttpModifyNameRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HttpModifyNameRet::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.HttpModifyNameRet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rolename_.ClearToEmpty();
  ::memset(&accid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&accid_)) + sizeof(serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HttpModifyNameRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 accid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          accid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.ResultCode eResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eresult(static_cast<::XrPb::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 serverid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rolename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_rolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.HttpModifyNameRet.rolename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HttpModifyNameRet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.HttpModifyNameRet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 accid = 1;
  if (this->_internal_accid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_accid(), target);
  }

  // .XrPb.ResultCode eResult = 2;
  if (this->_internal_eresult() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_eresult(), target);
  }

  // uint32 serverid = 3;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_serverid(), target);
  }

  // string rolename = 4;
  if (!this->_internal_rolename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rolename().data(), static_cast<int>(this->_internal_rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.HttpModifyNameRet.rolename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rolename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.HttpModifyNameRet)
  return target;
}

size_t HttpModifyNameRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.HttpModifyNameRet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rolename = 4;
  if (!this->_internal_rolename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rolename());
  }

  // int64 accid = 1;
  if (this->_internal_accid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_accid());
  }

  // .XrPb.ResultCode eResult = 2;
  if (this->_internal_eresult() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eresult());
  }

  // uint32 serverid = 3;
  if (this->_internal_serverid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HttpModifyNameRet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HttpModifyNameRet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HttpModifyNameRet::GetClassData() const { return &_class_data_; }

void HttpModifyNameRet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HttpModifyNameRet *>(to)->MergeFrom(
      static_cast<const HttpModifyNameRet &>(from));
}


void HttpModifyNameRet::MergeFrom(const HttpModifyNameRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.HttpModifyNameRet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rolename().empty()) {
    _internal_set_rolename(from._internal_rolename());
  }
  if (from._internal_accid() != 0) {
    _internal_set_accid(from._internal_accid());
  }
  if (from._internal_eresult() != 0) {
    _internal_set_eresult(from._internal_eresult());
  }
  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HttpModifyNameRet::CopyFrom(const HttpModifyNameRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.HttpModifyNameRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpModifyNameRet::IsInitialized() const {
  return true;
}

void HttpModifyNameRet::InternalSwap(HttpModifyNameRet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rolename_, lhs_arena,
      &other->rolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HttpModifyNameRet, serverid_)
      + sizeof(HttpModifyNameRet::serverid_)
      - PROTOBUF_FIELD_OFFSET(HttpModifyNameRet, accid_)>(
          reinterpret_cast<char*>(&accid_),
          reinterpret_cast<char*>(&other->accid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpModifyNameRet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgHttp_2eproto_getter, &descriptor_table_server_2fMsgHttp_2eproto_once,
      file_level_metadata_server_2fMsgHttp_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XrPb::MsgSvrMod_Http* Arena::CreateMaybeMessage< ::XrPb::MsgSvrMod_Http >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::MsgSvrMod_Http >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::HttpRetMsg* Arena::CreateMaybeMessage< ::XrPb::HttpRetMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::HttpRetMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::HttpUserLoginRet* Arena::CreateMaybeMessage< ::XrPb::HttpUserLoginRet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::HttpUserLoginRet >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::HttpUploadFileRet* Arena::CreateMaybeMessage< ::XrPb::HttpUploadFileRet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::HttpUploadFileRet >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::HttpModifyNameRet* Arena::CreateMaybeMessage< ::XrPb::HttpModifyNameRet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::HttpModifyNameRet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
