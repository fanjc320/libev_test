// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/MsgGGGS.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_2fMsgGGGS_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_2fMsgGGGS_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client/Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_2fMsgGGGS_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_2fMsgGGGS_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fMsgGGGS_2eproto;
namespace XrPb {
class MsgSvrMod_GGGS;
struct MsgSvrMod_GGGSDefaultTypeInternal;
extern MsgSvrMod_GGGSDefaultTypeInternal _MsgSvrMod_GGGS_default_instance_;
class Msg_GG_CreateRole_CS;
struct Msg_GG_CreateRole_CSDefaultTypeInternal;
extern Msg_GG_CreateRole_CSDefaultTypeInternal _Msg_GG_CreateRole_CS_default_instance_;
class Msg_GG_CreateRole_SC;
struct Msg_GG_CreateRole_SCDefaultTypeInternal;
extern Msg_GG_CreateRole_SCDefaultTypeInternal _Msg_GG_CreateRole_SC_default_instance_;
class Msg_GG_KickPlayer_CS;
struct Msg_GG_KickPlayer_CSDefaultTypeInternal;
extern Msg_GG_KickPlayer_CSDefaultTypeInternal _Msg_GG_KickPlayer_CS_default_instance_;
class Msg_GG_Login_CS;
struct Msg_GG_Login_CSDefaultTypeInternal;
extern Msg_GG_Login_CSDefaultTypeInternal _Msg_GG_Login_CS_default_instance_;
class Msg_GG_Login_SC;
struct Msg_GG_Login_SCDefaultTypeInternal;
extern Msg_GG_Login_SCDefaultTypeInternal _Msg_GG_Login_SC_default_instance_;
class Msg_GG_Notice_PUSH;
struct Msg_GG_Notice_PUSHDefaultTypeInternal;
extern Msg_GG_Notice_PUSHDefaultTypeInternal _Msg_GG_Notice_PUSH_default_instance_;
class Msg_GG_SavePlayer_CS;
struct Msg_GG_SavePlayer_CSDefaultTypeInternal;
extern Msg_GG_SavePlayer_CSDefaultTypeInternal _Msg_GG_SavePlayer_CS_default_instance_;
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> ::XrPb::MsgSvrMod_GGGS* Arena::CreateMaybeMessage<::XrPb::MsgSvrMod_GGGS>(Arena*);
template<> ::XrPb::Msg_GG_CreateRole_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GG_CreateRole_CS>(Arena*);
template<> ::XrPb::Msg_GG_CreateRole_SC* Arena::CreateMaybeMessage<::XrPb::Msg_GG_CreateRole_SC>(Arena*);
template<> ::XrPb::Msg_GG_KickPlayer_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GG_KickPlayer_CS>(Arena*);
template<> ::XrPb::Msg_GG_Login_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GG_Login_CS>(Arena*);
template<> ::XrPb::Msg_GG_Login_SC* Arena::CreateMaybeMessage<::XrPb::Msg_GG_Login_SC>(Arena*);
template<> ::XrPb::Msg_GG_Notice_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_GG_Notice_PUSH>(Arena*);
template<> ::XrPb::Msg_GG_SavePlayer_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GG_SavePlayer_CS>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XrPb {

enum MsgSvrMod_GGGS_MsgId : int {
  MsgSvrMod_GGGS_MsgId_Msg_GG_None = 0,
  MsgSvrMod_GGGS_MsgId_Msg_GG_Login_CS = 1,
  MsgSvrMod_GGGS_MsgId_Msg_GG_Login_SC = 2,
  MsgSvrMod_GGGS_MsgId_Msg_GG_CreateRole_CS = 3,
  MsgSvrMod_GGGS_MsgId_Msg_GG_CreateRole_SC = 4,
  MsgSvrMod_GGGS_MsgId_Msg_GG_SavePlayer_CS = 5,
  MsgSvrMod_GGGS_MsgId_Msg_GG_KickPlayer_CS = 6,
  MsgSvrMod_GGGS_MsgId_Msg_GG_Notice_PUSH = 7,
  MsgSvrMod_GGGS_MsgId_MsgSvrMod_GGGS_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgSvrMod_GGGS_MsgId_MsgSvrMod_GGGS_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgSvrMod_GGGS_MsgId_IsValid(int value);
constexpr MsgSvrMod_GGGS_MsgId MsgSvrMod_GGGS_MsgId_MsgId_MIN = MsgSvrMod_GGGS_MsgId_Msg_GG_None;
constexpr MsgSvrMod_GGGS_MsgId MsgSvrMod_GGGS_MsgId_MsgId_MAX = MsgSvrMod_GGGS_MsgId_Msg_GG_Notice_PUSH;
constexpr int MsgSvrMod_GGGS_MsgId_MsgId_ARRAYSIZE = MsgSvrMod_GGGS_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgSvrMod_GGGS_MsgId_descriptor();
template<typename T>
inline const std::string& MsgSvrMod_GGGS_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgSvrMod_GGGS_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgSvrMod_GGGS_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgSvrMod_GGGS_MsgId_descriptor(), enum_t_value);
}
inline bool MsgSvrMod_GGGS_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgSvrMod_GGGS_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgSvrMod_GGGS_MsgId>(
    MsgSvrMod_GGGS_MsgId_descriptor(), name, value);
}
// ===================================================================

class MsgSvrMod_GGGS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.MsgSvrMod_GGGS) */ {
 public:
  inline MsgSvrMod_GGGS() : MsgSvrMod_GGGS(nullptr) {}
  explicit constexpr MsgSvrMod_GGGS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSvrMod_GGGS(const MsgSvrMod_GGGS& from);
  MsgSvrMod_GGGS(MsgSvrMod_GGGS&& from) noexcept
    : MsgSvrMod_GGGS() {
    *this = ::std::move(from);
  }

  inline MsgSvrMod_GGGS& operator=(const MsgSvrMod_GGGS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSvrMod_GGGS& operator=(MsgSvrMod_GGGS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSvrMod_GGGS& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSvrMod_GGGS* internal_default_instance() {
    return reinterpret_cast<const MsgSvrMod_GGGS*>(
               &_MsgSvrMod_GGGS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgSvrMod_GGGS& a, MsgSvrMod_GGGS& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSvrMod_GGGS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSvrMod_GGGS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSvrMod_GGGS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSvrMod_GGGS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgSvrMod_GGGS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgSvrMod_GGGS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.MsgSvrMod_GGGS";
  }
  protected:
  explicit MsgSvrMod_GGGS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgSvrMod_GGGS_MsgId MsgId;
  static constexpr MsgId Msg_GG_None =
    MsgSvrMod_GGGS_MsgId_Msg_GG_None;
  static constexpr MsgId Msg_GG_Login_CS =
    MsgSvrMod_GGGS_MsgId_Msg_GG_Login_CS;
  static constexpr MsgId Msg_GG_Login_SC =
    MsgSvrMod_GGGS_MsgId_Msg_GG_Login_SC;
  static constexpr MsgId Msg_GG_CreateRole_CS =
    MsgSvrMod_GGGS_MsgId_Msg_GG_CreateRole_CS;
  static constexpr MsgId Msg_GG_CreateRole_SC =
    MsgSvrMod_GGGS_MsgId_Msg_GG_CreateRole_SC;
  static constexpr MsgId Msg_GG_SavePlayer_CS =
    MsgSvrMod_GGGS_MsgId_Msg_GG_SavePlayer_CS;
  static constexpr MsgId Msg_GG_KickPlayer_CS =
    MsgSvrMod_GGGS_MsgId_Msg_GG_KickPlayer_CS;
  static constexpr MsgId Msg_GG_Notice_PUSH =
    MsgSvrMod_GGGS_MsgId_Msg_GG_Notice_PUSH;
  static inline bool MsgId_IsValid(int value) {
    return MsgSvrMod_GGGS_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    MsgSvrMod_GGGS_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    MsgSvrMod_GGGS_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    MsgSvrMod_GGGS_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return MsgSvrMod_GGGS_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return MsgSvrMod_GGGS_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return MsgSvrMod_GGGS_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.MsgSvrMod_GGGS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgGGGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_GG_Login_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GG_Login_CS) */ {
 public:
  inline Msg_GG_Login_CS() : Msg_GG_Login_CS(nullptr) {}
  ~Msg_GG_Login_CS() override;
  explicit constexpr Msg_GG_Login_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GG_Login_CS(const Msg_GG_Login_CS& from);
  Msg_GG_Login_CS(Msg_GG_Login_CS&& from) noexcept
    : Msg_GG_Login_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GG_Login_CS& operator=(const Msg_GG_Login_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GG_Login_CS& operator=(Msg_GG_Login_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GG_Login_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GG_Login_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GG_Login_CS*>(
               &_Msg_GG_Login_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Msg_GG_Login_CS& a, Msg_GG_Login_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GG_Login_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GG_Login_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GG_Login_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GG_Login_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GG_Login_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GG_Login_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GG_Login_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GG_Login_CS";
  }
  protected:
  explicit Msg_GG_Login_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrUsernameFieldNumber = 2,
    kStrSessionFieldNumber = 3,
    kProvincenameFieldNumber = 9,
    kDeviceidFieldNumber = 11,
    kGameVersionFieldNumber = 13,
    kUiAccIDFieldNumber = 1,
    kUiSdkFieldNumber = 4,
    kUiClientIpFieldNumber = 5,
    kUiReLoginFieldNumber = 6,
    kGateidFieldNumber = 7,
    kProvinceFieldNumber = 8,
    kGmlevelFieldNumber = 10,
    kProareaFieldNumber = 12,
  };
  // optional string strUsername = 2;
  bool has_strusername() const;
  private:
  bool _internal_has_strusername() const;
  public:
  void clear_strusername();
  const std::string& strusername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strusername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strusername();
  PROTOBUF_NODISCARD std::string* release_strusername();
  void set_allocated_strusername(std::string* strusername);
  private:
  const std::string& _internal_strusername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strusername(const std::string& value);
  std::string* _internal_mutable_strusername();
  public:

  // optional string strSession = 3;
  bool has_strsession() const;
  private:
  bool _internal_has_strsession() const;
  public:
  void clear_strsession();
  const std::string& strsession() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strsession(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strsession();
  PROTOBUF_NODISCARD std::string* release_strsession();
  void set_allocated_strsession(std::string* strsession);
  private:
  const std::string& _internal_strsession() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strsession(const std::string& value);
  std::string* _internal_mutable_strsession();
  public:

  // optional string provincename = 9;
  bool has_provincename() const;
  private:
  bool _internal_has_provincename() const;
  public:
  void clear_provincename();
  const std::string& provincename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_provincename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_provincename();
  PROTOBUF_NODISCARD std::string* release_provincename();
  void set_allocated_provincename(std::string* provincename);
  private:
  const std::string& _internal_provincename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provincename(const std::string& value);
  std::string* _internal_mutable_provincename();
  public:

  // optional string deviceid = 11;
  bool has_deviceid() const;
  private:
  bool _internal_has_deviceid() const;
  public:
  void clear_deviceid();
  const std::string& deviceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deviceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* deviceid);
  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(const std::string& value);
  std::string* _internal_mutable_deviceid();
  public:

  // optional .XrPb.GameVersion game_version = 13;
  bool has_game_version() const;
  private:
  bool _internal_has_game_version() const;
  public:
  void clear_game_version();
  const ::XrPb::GameVersion& game_version() const;
  PROTOBUF_NODISCARD ::XrPb::GameVersion* release_game_version();
  ::XrPb::GameVersion* mutable_game_version();
  void set_allocated_game_version(::XrPb::GameVersion* game_version);
  private:
  const ::XrPb::GameVersion& _internal_game_version() const;
  ::XrPb::GameVersion* _internal_mutable_game_version();
  public:
  void unsafe_arena_set_allocated_game_version(
      ::XrPb::GameVersion* game_version);
  ::XrPb::GameVersion* unsafe_arena_release_game_version();

  // optional int64 uiAccID = 1;
  bool has_uiaccid() const;
  private:
  bool _internal_has_uiaccid() const;
  public:
  void clear_uiaccid();
  int64_t uiaccid() const;
  void set_uiaccid(int64_t value);
  private:
  int64_t _internal_uiaccid() const;
  void _internal_set_uiaccid(int64_t value);
  public:

  // optional uint32 uiSdk = 4;
  bool has_uisdk() const;
  private:
  bool _internal_has_uisdk() const;
  public:
  void clear_uisdk();
  uint32_t uisdk() const;
  void set_uisdk(uint32_t value);
  private:
  uint32_t _internal_uisdk() const;
  void _internal_set_uisdk(uint32_t value);
  public:

  // optional uint32 uiClientIp = 5;
  bool has_uiclientip() const;
  private:
  bool _internal_has_uiclientip() const;
  public:
  void clear_uiclientip();
  uint32_t uiclientip() const;
  void set_uiclientip(uint32_t value);
  private:
  uint32_t _internal_uiclientip() const;
  void _internal_set_uiclientip(uint32_t value);
  public:

  // optional uint32 uiReLogin = 6;
  bool has_uirelogin() const;
  private:
  bool _internal_has_uirelogin() const;
  public:
  void clear_uirelogin();
  uint32_t uirelogin() const;
  void set_uirelogin(uint32_t value);
  private:
  uint32_t _internal_uirelogin() const;
  void _internal_set_uirelogin(uint32_t value);
  public:

  // optional uint32 gateid = 7;
  bool has_gateid() const;
  private:
  bool _internal_has_gateid() const;
  public:
  void clear_gateid();
  uint32_t gateid() const;
  void set_gateid(uint32_t value);
  private:
  uint32_t _internal_gateid() const;
  void _internal_set_gateid(uint32_t value);
  public:

  // optional int32 province = 8;
  bool has_province() const;
  private:
  bool _internal_has_province() const;
  public:
  void clear_province();
  int32_t province() const;
  void set_province(int32_t value);
  private:
  int32_t _internal_province() const;
  void _internal_set_province(int32_t value);
  public:

  // optional uint32 gmlevel = 10;
  bool has_gmlevel() const;
  private:
  bool _internal_has_gmlevel() const;
  public:
  void clear_gmlevel();
  uint32_t gmlevel() const;
  void set_gmlevel(uint32_t value);
  private:
  uint32_t _internal_gmlevel() const;
  void _internal_set_gmlevel(uint32_t value);
  public:

  // optional uint32 proarea = 12;
  bool has_proarea() const;
  private:
  bool _internal_has_proarea() const;
  public:
  void clear_proarea();
  uint32_t proarea() const;
  void set_proarea(uint32_t value);
  private:
  uint32_t _internal_proarea() const;
  void _internal_set_proarea(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GG_Login_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strusername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strsession_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provincename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  ::XrPb::GameVersion* game_version_;
  int64_t uiaccid_;
  uint32_t uisdk_;
  uint32_t uiclientip_;
  uint32_t uirelogin_;
  uint32_t gateid_;
  int32_t province_;
  uint32_t gmlevel_;
  uint32_t proarea_;
  friend struct ::TableStruct_server_2fMsgGGGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_GG_Login_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GG_Login_SC) */ {
 public:
  inline Msg_GG_Login_SC() : Msg_GG_Login_SC(nullptr) {}
  ~Msg_GG_Login_SC() override;
  explicit constexpr Msg_GG_Login_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GG_Login_SC(const Msg_GG_Login_SC& from);
  Msg_GG_Login_SC(Msg_GG_Login_SC&& from) noexcept
    : Msg_GG_Login_SC() {
    *this = ::std::move(from);
  }

  inline Msg_GG_Login_SC& operator=(const Msg_GG_Login_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GG_Login_SC& operator=(Msg_GG_Login_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GG_Login_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GG_Login_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_GG_Login_SC*>(
               &_Msg_GG_Login_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Msg_GG_Login_SC& a, Msg_GG_Login_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GG_Login_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GG_Login_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GG_Login_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GG_Login_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GG_Login_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GG_Login_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GG_Login_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GG_Login_SC";
  }
  protected:
  explicit Msg_GG_Login_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrRoleNameFieldNumber = 4,
    kUiAccIDFieldNumber = 1,
    kUiRoleIDFieldNumber = 2,
    kEStateFieldNumber = 3,
  };
  // optional string strRoleName = 4;
  bool has_strrolename() const;
  private:
  bool _internal_has_strrolename() const;
  public:
  void clear_strrolename();
  const std::string& strrolename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strrolename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strrolename();
  PROTOBUF_NODISCARD std::string* release_strrolename();
  void set_allocated_strrolename(std::string* strrolename);
  private:
  const std::string& _internal_strrolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strrolename(const std::string& value);
  std::string* _internal_mutable_strrolename();
  public:

  // optional int64 uiAccID = 1;
  bool has_uiaccid() const;
  private:
  bool _internal_has_uiaccid() const;
  public:
  void clear_uiaccid();
  int64_t uiaccid() const;
  void set_uiaccid(int64_t value);
  private:
  int64_t _internal_uiaccid() const;
  void _internal_set_uiaccid(int64_t value);
  public:

  // optional int64 uiRoleID = 2;
  bool has_uiroleid() const;
  private:
  bool _internal_has_uiroleid() const;
  public:
  void clear_uiroleid();
  int64_t uiroleid() const;
  void set_uiroleid(int64_t value);
  private:
  int64_t _internal_uiroleid() const;
  void _internal_set_uiroleid(int64_t value);
  public:

  // optional .XrPb.PlayerStatus eState = 3;
  bool has_estate() const;
  private:
  bool _internal_has_estate() const;
  public:
  void clear_estate();
  ::XrPb::PlayerStatus estate() const;
  void set_estate(::XrPb::PlayerStatus value);
  private:
  ::XrPb::PlayerStatus _internal_estate() const;
  void _internal_set_estate(::XrPb::PlayerStatus value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GG_Login_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strrolename_;
  int64_t uiaccid_;
  int64_t uiroleid_;
  int estate_;
  friend struct ::TableStruct_server_2fMsgGGGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_GG_CreateRole_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GG_CreateRole_CS) */ {
 public:
  inline Msg_GG_CreateRole_CS() : Msg_GG_CreateRole_CS(nullptr) {}
  ~Msg_GG_CreateRole_CS() override;
  explicit constexpr Msg_GG_CreateRole_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GG_CreateRole_CS(const Msg_GG_CreateRole_CS& from);
  Msg_GG_CreateRole_CS(Msg_GG_CreateRole_CS&& from) noexcept
    : Msg_GG_CreateRole_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GG_CreateRole_CS& operator=(const Msg_GG_CreateRole_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GG_CreateRole_CS& operator=(Msg_GG_CreateRole_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GG_CreateRole_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GG_CreateRole_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GG_CreateRole_CS*>(
               &_Msg_GG_CreateRole_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Msg_GG_CreateRole_CS& a, Msg_GG_CreateRole_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GG_CreateRole_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GG_CreateRole_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GG_CreateRole_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GG_CreateRole_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GG_CreateRole_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GG_CreateRole_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GG_CreateRole_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GG_CreateRole_CS";
  }
  protected:
  explicit Msg_GG_CreateRole_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrRoleNameFieldNumber = 4,
    kUiAccIDFieldNumber = 1,
    kICareerIdFieldNumber = 2,
    kUiGenderFieldNumber = 3,
    kUiIconIdFieldNumber = 5,
  };
  // optional string strRoleName = 4;
  bool has_strrolename() const;
  private:
  bool _internal_has_strrolename() const;
  public:
  void clear_strrolename();
  const std::string& strrolename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strrolename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strrolename();
  PROTOBUF_NODISCARD std::string* release_strrolename();
  void set_allocated_strrolename(std::string* strrolename);
  private:
  const std::string& _internal_strrolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strrolename(const std::string& value);
  std::string* _internal_mutable_strrolename();
  public:

  // optional int64 uiAccID = 1;
  bool has_uiaccid() const;
  private:
  bool _internal_has_uiaccid() const;
  public:
  void clear_uiaccid();
  int64_t uiaccid() const;
  void set_uiaccid(int64_t value);
  private:
  int64_t _internal_uiaccid() const;
  void _internal_set_uiaccid(int64_t value);
  public:

  // optional int32 iCareerId = 2;
  bool has_icareerid() const;
  private:
  bool _internal_has_icareerid() const;
  public:
  void clear_icareerid();
  int32_t icareerid() const;
  void set_icareerid(int32_t value);
  private:
  int32_t _internal_icareerid() const;
  void _internal_set_icareerid(int32_t value);
  public:

  // optional uint32 uiGender = 3;
  bool has_uigender() const;
  private:
  bool _internal_has_uigender() const;
  public:
  void clear_uigender();
  uint32_t uigender() const;
  void set_uigender(uint32_t value);
  private:
  uint32_t _internal_uigender() const;
  void _internal_set_uigender(uint32_t value);
  public:

  // optional uint32 uiIconId = 5;
  bool has_uiiconid() const;
  private:
  bool _internal_has_uiiconid() const;
  public:
  void clear_uiiconid();
  uint32_t uiiconid() const;
  void set_uiiconid(uint32_t value);
  private:
  uint32_t _internal_uiiconid() const;
  void _internal_set_uiiconid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GG_CreateRole_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strrolename_;
  int64_t uiaccid_;
  int32_t icareerid_;
  uint32_t uigender_;
  uint32_t uiiconid_;
  friend struct ::TableStruct_server_2fMsgGGGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_GG_CreateRole_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GG_CreateRole_SC) */ {
 public:
  inline Msg_GG_CreateRole_SC() : Msg_GG_CreateRole_SC(nullptr) {}
  ~Msg_GG_CreateRole_SC() override;
  explicit constexpr Msg_GG_CreateRole_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GG_CreateRole_SC(const Msg_GG_CreateRole_SC& from);
  Msg_GG_CreateRole_SC(Msg_GG_CreateRole_SC&& from) noexcept
    : Msg_GG_CreateRole_SC() {
    *this = ::std::move(from);
  }

  inline Msg_GG_CreateRole_SC& operator=(const Msg_GG_CreateRole_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GG_CreateRole_SC& operator=(Msg_GG_CreateRole_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GG_CreateRole_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GG_CreateRole_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_GG_CreateRole_SC*>(
               &_Msg_GG_CreateRole_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Msg_GG_CreateRole_SC& a, Msg_GG_CreateRole_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GG_CreateRole_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GG_CreateRole_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GG_CreateRole_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GG_CreateRole_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GG_CreateRole_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GG_CreateRole_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GG_CreateRole_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GG_CreateRole_SC";
  }
  protected:
  explicit Msg_GG_CreateRole_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrRoleNameFieldNumber = 3,
    kUiAccIDFieldNumber = 1,
    kUiRoleIDFieldNumber = 2,
    kLlCreateTimeFieldNumber = 5,
    kUiLevelFieldNumber = 4,
    kNRetCodeFieldNumber = 6,
  };
  // optional string strRoleName = 3;
  bool has_strrolename() const;
  private:
  bool _internal_has_strrolename() const;
  public:
  void clear_strrolename();
  const std::string& strrolename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strrolename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strrolename();
  PROTOBUF_NODISCARD std::string* release_strrolename();
  void set_allocated_strrolename(std::string* strrolename);
  private:
  const std::string& _internal_strrolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strrolename(const std::string& value);
  std::string* _internal_mutable_strrolename();
  public:

  // optional int64 uiAccID = 1;
  bool has_uiaccid() const;
  private:
  bool _internal_has_uiaccid() const;
  public:
  void clear_uiaccid();
  int64_t uiaccid() const;
  void set_uiaccid(int64_t value);
  private:
  int64_t _internal_uiaccid() const;
  void _internal_set_uiaccid(int64_t value);
  public:

  // optional int64 uiRoleID = 2;
  bool has_uiroleid() const;
  private:
  bool _internal_has_uiroleid() const;
  public:
  void clear_uiroleid();
  int64_t uiroleid() const;
  void set_uiroleid(int64_t value);
  private:
  int64_t _internal_uiroleid() const;
  void _internal_set_uiroleid(int64_t value);
  public:

  // optional int64 llCreateTime = 5;
  bool has_llcreatetime() const;
  private:
  bool _internal_has_llcreatetime() const;
  public:
  void clear_llcreatetime();
  int64_t llcreatetime() const;
  void set_llcreatetime(int64_t value);
  private:
  int64_t _internal_llcreatetime() const;
  void _internal_set_llcreatetime(int64_t value);
  public:

  // optional uint32 uiLevel = 4;
  bool has_uilevel() const;
  private:
  bool _internal_has_uilevel() const;
  public:
  void clear_uilevel();
  uint32_t uilevel() const;
  void set_uilevel(uint32_t value);
  private:
  uint32_t _internal_uilevel() const;
  void _internal_set_uilevel(uint32_t value);
  public:

  // optional int32 nRetCode = 6;
  bool has_nretcode() const;
  private:
  bool _internal_has_nretcode() const;
  public:
  void clear_nretcode();
  int32_t nretcode() const;
  void set_nretcode(int32_t value);
  private:
  int32_t _internal_nretcode() const;
  void _internal_set_nretcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GG_CreateRole_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strrolename_;
  int64_t uiaccid_;
  int64_t uiroleid_;
  int64_t llcreatetime_;
  uint32_t uilevel_;
  int32_t nretcode_;
  friend struct ::TableStruct_server_2fMsgGGGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_GG_SavePlayer_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GG_SavePlayer_CS) */ {
 public:
  inline Msg_GG_SavePlayer_CS() : Msg_GG_SavePlayer_CS(nullptr) {}
  ~Msg_GG_SavePlayer_CS() override;
  explicit constexpr Msg_GG_SavePlayer_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GG_SavePlayer_CS(const Msg_GG_SavePlayer_CS& from);
  Msg_GG_SavePlayer_CS(Msg_GG_SavePlayer_CS&& from) noexcept
    : Msg_GG_SavePlayer_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GG_SavePlayer_CS& operator=(const Msg_GG_SavePlayer_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GG_SavePlayer_CS& operator=(Msg_GG_SavePlayer_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GG_SavePlayer_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GG_SavePlayer_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GG_SavePlayer_CS*>(
               &_Msg_GG_SavePlayer_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Msg_GG_SavePlayer_CS& a, Msg_GG_SavePlayer_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GG_SavePlayer_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GG_SavePlayer_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GG_SavePlayer_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GG_SavePlayer_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GG_SavePlayer_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GG_SavePlayer_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GG_SavePlayer_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GG_SavePlayer_CS";
  }
  protected:
  explicit Msg_GG_SavePlayer_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiAccIDFieldNumber = 1,
    kGateIDFieldNumber = 2,
  };
  // optional int64 uiAccID = 1;
  bool has_uiaccid() const;
  private:
  bool _internal_has_uiaccid() const;
  public:
  void clear_uiaccid();
  int64_t uiaccid() const;
  void set_uiaccid(int64_t value);
  private:
  int64_t _internal_uiaccid() const;
  void _internal_set_uiaccid(int64_t value);
  public:

  // optional uint32 GateID = 2;
  bool has_gateid() const;
  private:
  bool _internal_has_gateid() const;
  public:
  void clear_gateid();
  uint32_t gateid() const;
  void set_gateid(uint32_t value);
  private:
  uint32_t _internal_gateid() const;
  void _internal_set_gateid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GG_SavePlayer_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t uiaccid_;
  uint32_t gateid_;
  friend struct ::TableStruct_server_2fMsgGGGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_GG_KickPlayer_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GG_KickPlayer_CS) */ {
 public:
  inline Msg_GG_KickPlayer_CS() : Msg_GG_KickPlayer_CS(nullptr) {}
  ~Msg_GG_KickPlayer_CS() override;
  explicit constexpr Msg_GG_KickPlayer_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GG_KickPlayer_CS(const Msg_GG_KickPlayer_CS& from);
  Msg_GG_KickPlayer_CS(Msg_GG_KickPlayer_CS&& from) noexcept
    : Msg_GG_KickPlayer_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GG_KickPlayer_CS& operator=(const Msg_GG_KickPlayer_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GG_KickPlayer_CS& operator=(Msg_GG_KickPlayer_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GG_KickPlayer_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GG_KickPlayer_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GG_KickPlayer_CS*>(
               &_Msg_GG_KickPlayer_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Msg_GG_KickPlayer_CS& a, Msg_GG_KickPlayer_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GG_KickPlayer_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GG_KickPlayer_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GG_KickPlayer_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GG_KickPlayer_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GG_KickPlayer_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GG_KickPlayer_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GG_KickPlayer_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GG_KickPlayer_CS";
  }
  protected:
  explicit Msg_GG_KickPlayer_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiAccIDFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // optional int64 uiAccID = 1;
  bool has_uiaccid() const;
  private:
  bool _internal_has_uiaccid() const;
  public:
  void clear_uiaccid();
  int64_t uiaccid() const;
  void set_uiaccid(int64_t value);
  private:
  int64_t _internal_uiaccid() const;
  void _internal_set_uiaccid(int64_t value);
  public:

  // optional .XrPb.ResultCode code = 2;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::XrPb::ResultCode code() const;
  void set_code(::XrPb::ResultCode value);
  private:
  ::XrPb::ResultCode _internal_code() const;
  void _internal_set_code(::XrPb::ResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GG_KickPlayer_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t uiaccid_;
  int code_;
  friend struct ::TableStruct_server_2fMsgGGGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_GG_Notice_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GG_Notice_PUSH) */ {
 public:
  inline Msg_GG_Notice_PUSH() : Msg_GG_Notice_PUSH(nullptr) {}
  ~Msg_GG_Notice_PUSH() override;
  explicit constexpr Msg_GG_Notice_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GG_Notice_PUSH(const Msg_GG_Notice_PUSH& from);
  Msg_GG_Notice_PUSH(Msg_GG_Notice_PUSH&& from) noexcept
    : Msg_GG_Notice_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_GG_Notice_PUSH& operator=(const Msg_GG_Notice_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GG_Notice_PUSH& operator=(Msg_GG_Notice_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GG_Notice_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GG_Notice_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_GG_Notice_PUSH*>(
               &_Msg_GG_Notice_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Msg_GG_Notice_PUSH& a, Msg_GG_Notice_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GG_Notice_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GG_Notice_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GG_Notice_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GG_Notice_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GG_Notice_PUSH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GG_Notice_PUSH& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GG_Notice_PUSH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GG_Notice_PUSH";
  }
  protected:
  explicit Msg_GG_Notice_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccLstFieldNumber = 1,
    kProtoMsgFieldNumber = 2,
    kModIdFieldNumber = 3,
    kProtoIdFieldNumber = 4,
    kIntervalFieldNumber = 5,
  };
  // repeated int64 acc_lst = 1;
  int acc_lst_size() const;
  private:
  int _internal_acc_lst_size() const;
  public:
  void clear_acc_lst();
  private:
  int64_t _internal_acc_lst(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_acc_lst() const;
  void _internal_add_acc_lst(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_acc_lst();
  public:
  int64_t acc_lst(int index) const;
  void set_acc_lst(int index, int64_t value);
  void add_acc_lst(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      acc_lst() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_acc_lst();

  // optional bytes proto_msg = 2;
  bool has_proto_msg() const;
  private:
  bool _internal_has_proto_msg() const;
  public:
  void clear_proto_msg();
  const std::string& proto_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_msg();
  PROTOBUF_NODISCARD std::string* release_proto_msg();
  void set_allocated_proto_msg(std::string* proto_msg);
  private:
  const std::string& _internal_proto_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_msg(const std::string& value);
  std::string* _internal_mutable_proto_msg();
  public:

  // optional uint32 mod_id = 3;
  bool has_mod_id() const;
  private:
  bool _internal_has_mod_id() const;
  public:
  void clear_mod_id();
  uint32_t mod_id() const;
  void set_mod_id(uint32_t value);
  private:
  uint32_t _internal_mod_id() const;
  void _internal_set_mod_id(uint32_t value);
  public:

  // optional uint32 proto_id = 4;
  bool has_proto_id() const;
  private:
  bool _internal_has_proto_id() const;
  public:
  void clear_proto_id();
  uint32_t proto_id() const;
  void set_proto_id(uint32_t value);
  private:
  uint32_t _internal_proto_id() const;
  void _internal_set_proto_id(uint32_t value);
  public:

  // optional uint32 interval = 5;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  uint32_t interval() const;
  void set_interval(uint32_t value);
  private:
  uint32_t _internal_interval() const;
  void _internal_set_interval(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GG_Notice_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > acc_lst_;
  mutable std::atomic<int> _acc_lst_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_msg_;
  uint32_t mod_id_;
  uint32_t proto_id_;
  uint32_t interval_;
  friend struct ::TableStruct_server_2fMsgGGGS_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgSvrMod_GGGS

// -------------------------------------------------------------------

// Msg_GG_Login_CS

// optional int64 uiAccID = 1;
inline bool Msg_GG_Login_CS::_internal_has_uiaccid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Msg_GG_Login_CS::has_uiaccid() const {
  return _internal_has_uiaccid();
}
inline void Msg_GG_Login_CS::clear_uiaccid() {
  uiaccid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t Msg_GG_Login_CS::_internal_uiaccid() const {
  return uiaccid_;
}
inline int64_t Msg_GG_Login_CS::uiaccid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_CS.uiAccID)
  return _internal_uiaccid();
}
inline void Msg_GG_Login_CS::_internal_set_uiaccid(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  uiaccid_ = value;
}
inline void Msg_GG_Login_CS::set_uiaccid(int64_t value) {
  _internal_set_uiaccid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_CS.uiAccID)
}

// optional string strUsername = 2;
inline bool Msg_GG_Login_CS::_internal_has_strusername() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_GG_Login_CS::has_strusername() const {
  return _internal_has_strusername();
}
inline void Msg_GG_Login_CS::clear_strusername() {
  strusername_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Msg_GG_Login_CS::strusername() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_CS.strUsername)
  return _internal_strusername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_GG_Login_CS::set_strusername(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 strusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_CS.strUsername)
}
inline std::string* Msg_GG_Login_CS::mutable_strusername() {
  std::string* _s = _internal_mutable_strusername();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GG_Login_CS.strUsername)
  return _s;
}
inline const std::string& Msg_GG_Login_CS::_internal_strusername() const {
  return strusername_.Get();
}
inline void Msg_GG_Login_CS::_internal_set_strusername(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  strusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_GG_Login_CS::_internal_mutable_strusername() {
  _has_bits_[0] |= 0x00000001u;
  return strusername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_GG_Login_CS::release_strusername() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_GG_Login_CS.strUsername)
  if (!_internal_has_strusername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = strusername_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strusername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_GG_Login_CS::set_allocated_strusername(std::string* strusername) {
  if (strusername != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  strusername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strusername,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strusername_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_GG_Login_CS.strUsername)
}

// optional string strSession = 3;
inline bool Msg_GG_Login_CS::_internal_has_strsession() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_GG_Login_CS::has_strsession() const {
  return _internal_has_strsession();
}
inline void Msg_GG_Login_CS::clear_strsession() {
  strsession_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Msg_GG_Login_CS::strsession() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_CS.strSession)
  return _internal_strsession();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_GG_Login_CS::set_strsession(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 strsession_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_CS.strSession)
}
inline std::string* Msg_GG_Login_CS::mutable_strsession() {
  std::string* _s = _internal_mutable_strsession();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GG_Login_CS.strSession)
  return _s;
}
inline const std::string& Msg_GG_Login_CS::_internal_strsession() const {
  return strsession_.Get();
}
inline void Msg_GG_Login_CS::_internal_set_strsession(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  strsession_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_GG_Login_CS::_internal_mutable_strsession() {
  _has_bits_[0] |= 0x00000002u;
  return strsession_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_GG_Login_CS::release_strsession() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_GG_Login_CS.strSession)
  if (!_internal_has_strsession()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = strsession_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strsession_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strsession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_GG_Login_CS::set_allocated_strsession(std::string* strsession) {
  if (strsession != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  strsession_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strsession,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strsession_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strsession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_GG_Login_CS.strSession)
}

// optional uint32 uiSdk = 4;
inline bool Msg_GG_Login_CS::_internal_has_uisdk() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Msg_GG_Login_CS::has_uisdk() const {
  return _internal_has_uisdk();
}
inline void Msg_GG_Login_CS::clear_uisdk() {
  uisdk_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t Msg_GG_Login_CS::_internal_uisdk() const {
  return uisdk_;
}
inline uint32_t Msg_GG_Login_CS::uisdk() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_CS.uiSdk)
  return _internal_uisdk();
}
inline void Msg_GG_Login_CS::_internal_set_uisdk(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  uisdk_ = value;
}
inline void Msg_GG_Login_CS::set_uisdk(uint32_t value) {
  _internal_set_uisdk(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_CS.uiSdk)
}

// optional uint32 uiClientIp = 5;
inline bool Msg_GG_Login_CS::_internal_has_uiclientip() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Msg_GG_Login_CS::has_uiclientip() const {
  return _internal_has_uiclientip();
}
inline void Msg_GG_Login_CS::clear_uiclientip() {
  uiclientip_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t Msg_GG_Login_CS::_internal_uiclientip() const {
  return uiclientip_;
}
inline uint32_t Msg_GG_Login_CS::uiclientip() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_CS.uiClientIp)
  return _internal_uiclientip();
}
inline void Msg_GG_Login_CS::_internal_set_uiclientip(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  uiclientip_ = value;
}
inline void Msg_GG_Login_CS::set_uiclientip(uint32_t value) {
  _internal_set_uiclientip(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_CS.uiClientIp)
}

// optional uint32 uiReLogin = 6;
inline bool Msg_GG_Login_CS::_internal_has_uirelogin() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Msg_GG_Login_CS::has_uirelogin() const {
  return _internal_has_uirelogin();
}
inline void Msg_GG_Login_CS::clear_uirelogin() {
  uirelogin_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t Msg_GG_Login_CS::_internal_uirelogin() const {
  return uirelogin_;
}
inline uint32_t Msg_GG_Login_CS::uirelogin() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_CS.uiReLogin)
  return _internal_uirelogin();
}
inline void Msg_GG_Login_CS::_internal_set_uirelogin(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  uirelogin_ = value;
}
inline void Msg_GG_Login_CS::set_uirelogin(uint32_t value) {
  _internal_set_uirelogin(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_CS.uiReLogin)
}

// optional uint32 gateid = 7;
inline bool Msg_GG_Login_CS::_internal_has_gateid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Msg_GG_Login_CS::has_gateid() const {
  return _internal_has_gateid();
}
inline void Msg_GG_Login_CS::clear_gateid() {
  gateid_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline uint32_t Msg_GG_Login_CS::_internal_gateid() const {
  return gateid_;
}
inline uint32_t Msg_GG_Login_CS::gateid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_CS.gateid)
  return _internal_gateid();
}
inline void Msg_GG_Login_CS::_internal_set_gateid(uint32_t value) {
  _has_bits_[0] |= 0x00000200u;
  gateid_ = value;
}
inline void Msg_GG_Login_CS::set_gateid(uint32_t value) {
  _internal_set_gateid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_CS.gateid)
}

// optional int32 province = 8;
inline bool Msg_GG_Login_CS::_internal_has_province() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Msg_GG_Login_CS::has_province() const {
  return _internal_has_province();
}
inline void Msg_GG_Login_CS::clear_province() {
  province_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t Msg_GG_Login_CS::_internal_province() const {
  return province_;
}
inline int32_t Msg_GG_Login_CS::province() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_CS.province)
  return _internal_province();
}
inline void Msg_GG_Login_CS::_internal_set_province(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  province_ = value;
}
inline void Msg_GG_Login_CS::set_province(int32_t value) {
  _internal_set_province(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_CS.province)
}

// optional string provincename = 9;
inline bool Msg_GG_Login_CS::_internal_has_provincename() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Msg_GG_Login_CS::has_provincename() const {
  return _internal_has_provincename();
}
inline void Msg_GG_Login_CS::clear_provincename() {
  provincename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Msg_GG_Login_CS::provincename() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_CS.provincename)
  return _internal_provincename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_GG_Login_CS::set_provincename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 provincename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_CS.provincename)
}
inline std::string* Msg_GG_Login_CS::mutable_provincename() {
  std::string* _s = _internal_mutable_provincename();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GG_Login_CS.provincename)
  return _s;
}
inline const std::string& Msg_GG_Login_CS::_internal_provincename() const {
  return provincename_.Get();
}
inline void Msg_GG_Login_CS::_internal_set_provincename(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  provincename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_GG_Login_CS::_internal_mutable_provincename() {
  _has_bits_[0] |= 0x00000004u;
  return provincename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_GG_Login_CS::release_provincename() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_GG_Login_CS.provincename)
  if (!_internal_has_provincename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = provincename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (provincename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    provincename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_GG_Login_CS::set_allocated_provincename(std::string* provincename) {
  if (provincename != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  provincename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provincename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (provincename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    provincename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_GG_Login_CS.provincename)
}

// optional uint32 gmlevel = 10;
inline bool Msg_GG_Login_CS::_internal_has_gmlevel() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Msg_GG_Login_CS::has_gmlevel() const {
  return _internal_has_gmlevel();
}
inline void Msg_GG_Login_CS::clear_gmlevel() {
  gmlevel_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t Msg_GG_Login_CS::_internal_gmlevel() const {
  return gmlevel_;
}
inline uint32_t Msg_GG_Login_CS::gmlevel() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_CS.gmlevel)
  return _internal_gmlevel();
}
inline void Msg_GG_Login_CS::_internal_set_gmlevel(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  gmlevel_ = value;
}
inline void Msg_GG_Login_CS::set_gmlevel(uint32_t value) {
  _internal_set_gmlevel(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_CS.gmlevel)
}

// optional string deviceid = 11;
inline bool Msg_GG_Login_CS::_internal_has_deviceid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Msg_GG_Login_CS::has_deviceid() const {
  return _internal_has_deviceid();
}
inline void Msg_GG_Login_CS::clear_deviceid() {
  deviceid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Msg_GG_Login_CS::deviceid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_CS.deviceid)
  return _internal_deviceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_GG_Login_CS::set_deviceid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_CS.deviceid)
}
inline std::string* Msg_GG_Login_CS::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GG_Login_CS.deviceid)
  return _s;
}
inline const std::string& Msg_GG_Login_CS::_internal_deviceid() const {
  return deviceid_.Get();
}
inline void Msg_GG_Login_CS::_internal_set_deviceid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_GG_Login_CS::_internal_mutable_deviceid() {
  _has_bits_[0] |= 0x00000008u;
  return deviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_GG_Login_CS::release_deviceid() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_GG_Login_CS.deviceid)
  if (!_internal_has_deviceid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = deviceid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deviceid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_GG_Login_CS::set_allocated_deviceid(std::string* deviceid) {
  if (deviceid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  deviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (deviceid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_GG_Login_CS.deviceid)
}

// optional uint32 proarea = 12;
inline bool Msg_GG_Login_CS::_internal_has_proarea() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Msg_GG_Login_CS::has_proarea() const {
  return _internal_has_proarea();
}
inline void Msg_GG_Login_CS::clear_proarea() {
  proarea_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline uint32_t Msg_GG_Login_CS::_internal_proarea() const {
  return proarea_;
}
inline uint32_t Msg_GG_Login_CS::proarea() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_CS.proarea)
  return _internal_proarea();
}
inline void Msg_GG_Login_CS::_internal_set_proarea(uint32_t value) {
  _has_bits_[0] |= 0x00001000u;
  proarea_ = value;
}
inline void Msg_GG_Login_CS::set_proarea(uint32_t value) {
  _internal_set_proarea(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_CS.proarea)
}

// optional .XrPb.GameVersion game_version = 13;
inline bool Msg_GG_Login_CS::_internal_has_game_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || game_version_ != nullptr);
  return value;
}
inline bool Msg_GG_Login_CS::has_game_version() const {
  return _internal_has_game_version();
}
inline const ::XrPb::GameVersion& Msg_GG_Login_CS::_internal_game_version() const {
  const ::XrPb::GameVersion* p = game_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::GameVersion&>(
      ::XrPb::_GameVersion_default_instance_);
}
inline const ::XrPb::GameVersion& Msg_GG_Login_CS::game_version() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_CS.game_version)
  return _internal_game_version();
}
inline void Msg_GG_Login_CS::unsafe_arena_set_allocated_game_version(
    ::XrPb::GameVersion* game_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_version_);
  }
  game_version_ = game_version;
  if (game_version) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_GG_Login_CS.game_version)
}
inline ::XrPb::GameVersion* Msg_GG_Login_CS::release_game_version() {
  _has_bits_[0] &= ~0x00000010u;
  ::XrPb::GameVersion* temp = game_version_;
  game_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::GameVersion* Msg_GG_Login_CS::unsafe_arena_release_game_version() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_GG_Login_CS.game_version)
  _has_bits_[0] &= ~0x00000010u;
  ::XrPb::GameVersion* temp = game_version_;
  game_version_ = nullptr;
  return temp;
}
inline ::XrPb::GameVersion* Msg_GG_Login_CS::_internal_mutable_game_version() {
  _has_bits_[0] |= 0x00000010u;
  if (game_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::GameVersion>(GetArenaForAllocation());
    game_version_ = p;
  }
  return game_version_;
}
inline ::XrPb::GameVersion* Msg_GG_Login_CS::mutable_game_version() {
  ::XrPb::GameVersion* _msg = _internal_mutable_game_version();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GG_Login_CS.game_version)
  return _msg;
}
inline void Msg_GG_Login_CS::set_allocated_game_version(::XrPb::GameVersion* game_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_version_);
  }
  if (game_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_version));
    if (message_arena != submessage_arena) {
      game_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_version, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  game_version_ = game_version;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_GG_Login_CS.game_version)
}

// -------------------------------------------------------------------

// Msg_GG_Login_SC

// optional int64 uiAccID = 1;
inline bool Msg_GG_Login_SC::_internal_has_uiaccid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_GG_Login_SC::has_uiaccid() const {
  return _internal_has_uiaccid();
}
inline void Msg_GG_Login_SC::clear_uiaccid() {
  uiaccid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t Msg_GG_Login_SC::_internal_uiaccid() const {
  return uiaccid_;
}
inline int64_t Msg_GG_Login_SC::uiaccid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_SC.uiAccID)
  return _internal_uiaccid();
}
inline void Msg_GG_Login_SC::_internal_set_uiaccid(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  uiaccid_ = value;
}
inline void Msg_GG_Login_SC::set_uiaccid(int64_t value) {
  _internal_set_uiaccid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_SC.uiAccID)
}

// optional int64 uiRoleID = 2;
inline bool Msg_GG_Login_SC::_internal_has_uiroleid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Msg_GG_Login_SC::has_uiroleid() const {
  return _internal_has_uiroleid();
}
inline void Msg_GG_Login_SC::clear_uiroleid() {
  uiroleid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t Msg_GG_Login_SC::_internal_uiroleid() const {
  return uiroleid_;
}
inline int64_t Msg_GG_Login_SC::uiroleid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_SC.uiRoleID)
  return _internal_uiroleid();
}
inline void Msg_GG_Login_SC::_internal_set_uiroleid(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  uiroleid_ = value;
}
inline void Msg_GG_Login_SC::set_uiroleid(int64_t value) {
  _internal_set_uiroleid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_SC.uiRoleID)
}

// optional .XrPb.PlayerStatus eState = 3;
inline bool Msg_GG_Login_SC::_internal_has_estate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Msg_GG_Login_SC::has_estate() const {
  return _internal_has_estate();
}
inline void Msg_GG_Login_SC::clear_estate() {
  estate_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::XrPb::PlayerStatus Msg_GG_Login_SC::_internal_estate() const {
  return static_cast< ::XrPb::PlayerStatus >(estate_);
}
inline ::XrPb::PlayerStatus Msg_GG_Login_SC::estate() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_SC.eState)
  return _internal_estate();
}
inline void Msg_GG_Login_SC::_internal_set_estate(::XrPb::PlayerStatus value) {
  _has_bits_[0] |= 0x00000008u;
  estate_ = value;
}
inline void Msg_GG_Login_SC::set_estate(::XrPb::PlayerStatus value) {
  _internal_set_estate(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_SC.eState)
}

// optional string strRoleName = 4;
inline bool Msg_GG_Login_SC::_internal_has_strrolename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_GG_Login_SC::has_strrolename() const {
  return _internal_has_strrolename();
}
inline void Msg_GG_Login_SC::clear_strrolename() {
  strrolename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Msg_GG_Login_SC::strrolename() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Login_SC.strRoleName)
  return _internal_strrolename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_GG_Login_SC::set_strrolename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 strrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Login_SC.strRoleName)
}
inline std::string* Msg_GG_Login_SC::mutable_strrolename() {
  std::string* _s = _internal_mutable_strrolename();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GG_Login_SC.strRoleName)
  return _s;
}
inline const std::string& Msg_GG_Login_SC::_internal_strrolename() const {
  return strrolename_.Get();
}
inline void Msg_GG_Login_SC::_internal_set_strrolename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  strrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_GG_Login_SC::_internal_mutable_strrolename() {
  _has_bits_[0] |= 0x00000001u;
  return strrolename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_GG_Login_SC::release_strrolename() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_GG_Login_SC.strRoleName)
  if (!_internal_has_strrolename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = strrolename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strrolename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_GG_Login_SC::set_allocated_strrolename(std::string* strrolename) {
  if (strrolename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  strrolename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strrolename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strrolename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_GG_Login_SC.strRoleName)
}

// -------------------------------------------------------------------

// Msg_GG_CreateRole_CS

// optional int64 uiAccID = 1;
inline bool Msg_GG_CreateRole_CS::_internal_has_uiaccid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_GG_CreateRole_CS::has_uiaccid() const {
  return _internal_has_uiaccid();
}
inline void Msg_GG_CreateRole_CS::clear_uiaccid() {
  uiaccid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t Msg_GG_CreateRole_CS::_internal_uiaccid() const {
  return uiaccid_;
}
inline int64_t Msg_GG_CreateRole_CS::uiaccid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_CreateRole_CS.uiAccID)
  return _internal_uiaccid();
}
inline void Msg_GG_CreateRole_CS::_internal_set_uiaccid(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  uiaccid_ = value;
}
inline void Msg_GG_CreateRole_CS::set_uiaccid(int64_t value) {
  _internal_set_uiaccid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_CreateRole_CS.uiAccID)
}

// optional int32 iCareerId = 2;
inline bool Msg_GG_CreateRole_CS::_internal_has_icareerid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Msg_GG_CreateRole_CS::has_icareerid() const {
  return _internal_has_icareerid();
}
inline void Msg_GG_CreateRole_CS::clear_icareerid() {
  icareerid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t Msg_GG_CreateRole_CS::_internal_icareerid() const {
  return icareerid_;
}
inline int32_t Msg_GG_CreateRole_CS::icareerid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_CreateRole_CS.iCareerId)
  return _internal_icareerid();
}
inline void Msg_GG_CreateRole_CS::_internal_set_icareerid(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  icareerid_ = value;
}
inline void Msg_GG_CreateRole_CS::set_icareerid(int32_t value) {
  _internal_set_icareerid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_CreateRole_CS.iCareerId)
}

// optional uint32 uiGender = 3;
inline bool Msg_GG_CreateRole_CS::_internal_has_uigender() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Msg_GG_CreateRole_CS::has_uigender() const {
  return _internal_has_uigender();
}
inline void Msg_GG_CreateRole_CS::clear_uigender() {
  uigender_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t Msg_GG_CreateRole_CS::_internal_uigender() const {
  return uigender_;
}
inline uint32_t Msg_GG_CreateRole_CS::uigender() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_CreateRole_CS.uiGender)
  return _internal_uigender();
}
inline void Msg_GG_CreateRole_CS::_internal_set_uigender(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  uigender_ = value;
}
inline void Msg_GG_CreateRole_CS::set_uigender(uint32_t value) {
  _internal_set_uigender(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_CreateRole_CS.uiGender)
}

// optional string strRoleName = 4;
inline bool Msg_GG_CreateRole_CS::_internal_has_strrolename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_GG_CreateRole_CS::has_strrolename() const {
  return _internal_has_strrolename();
}
inline void Msg_GG_CreateRole_CS::clear_strrolename() {
  strrolename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Msg_GG_CreateRole_CS::strrolename() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_CreateRole_CS.strRoleName)
  return _internal_strrolename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_GG_CreateRole_CS::set_strrolename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 strrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_CreateRole_CS.strRoleName)
}
inline std::string* Msg_GG_CreateRole_CS::mutable_strrolename() {
  std::string* _s = _internal_mutable_strrolename();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GG_CreateRole_CS.strRoleName)
  return _s;
}
inline const std::string& Msg_GG_CreateRole_CS::_internal_strrolename() const {
  return strrolename_.Get();
}
inline void Msg_GG_CreateRole_CS::_internal_set_strrolename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  strrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_GG_CreateRole_CS::_internal_mutable_strrolename() {
  _has_bits_[0] |= 0x00000001u;
  return strrolename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_GG_CreateRole_CS::release_strrolename() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_GG_CreateRole_CS.strRoleName)
  if (!_internal_has_strrolename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = strrolename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strrolename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_GG_CreateRole_CS::set_allocated_strrolename(std::string* strrolename) {
  if (strrolename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  strrolename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strrolename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strrolename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_GG_CreateRole_CS.strRoleName)
}

// optional uint32 uiIconId = 5;
inline bool Msg_GG_CreateRole_CS::_internal_has_uiiconid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Msg_GG_CreateRole_CS::has_uiiconid() const {
  return _internal_has_uiiconid();
}
inline void Msg_GG_CreateRole_CS::clear_uiiconid() {
  uiiconid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t Msg_GG_CreateRole_CS::_internal_uiiconid() const {
  return uiiconid_;
}
inline uint32_t Msg_GG_CreateRole_CS::uiiconid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_CreateRole_CS.uiIconId)
  return _internal_uiiconid();
}
inline void Msg_GG_CreateRole_CS::_internal_set_uiiconid(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  uiiconid_ = value;
}
inline void Msg_GG_CreateRole_CS::set_uiiconid(uint32_t value) {
  _internal_set_uiiconid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_CreateRole_CS.uiIconId)
}

// -------------------------------------------------------------------

// Msg_GG_CreateRole_SC

// optional int64 uiAccID = 1;
inline bool Msg_GG_CreateRole_SC::_internal_has_uiaccid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_GG_CreateRole_SC::has_uiaccid() const {
  return _internal_has_uiaccid();
}
inline void Msg_GG_CreateRole_SC::clear_uiaccid() {
  uiaccid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t Msg_GG_CreateRole_SC::_internal_uiaccid() const {
  return uiaccid_;
}
inline int64_t Msg_GG_CreateRole_SC::uiaccid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_CreateRole_SC.uiAccID)
  return _internal_uiaccid();
}
inline void Msg_GG_CreateRole_SC::_internal_set_uiaccid(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  uiaccid_ = value;
}
inline void Msg_GG_CreateRole_SC::set_uiaccid(int64_t value) {
  _internal_set_uiaccid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_CreateRole_SC.uiAccID)
}

// optional int64 uiRoleID = 2;
inline bool Msg_GG_CreateRole_SC::_internal_has_uiroleid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Msg_GG_CreateRole_SC::has_uiroleid() const {
  return _internal_has_uiroleid();
}
inline void Msg_GG_CreateRole_SC::clear_uiroleid() {
  uiroleid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t Msg_GG_CreateRole_SC::_internal_uiroleid() const {
  return uiroleid_;
}
inline int64_t Msg_GG_CreateRole_SC::uiroleid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_CreateRole_SC.uiRoleID)
  return _internal_uiroleid();
}
inline void Msg_GG_CreateRole_SC::_internal_set_uiroleid(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  uiroleid_ = value;
}
inline void Msg_GG_CreateRole_SC::set_uiroleid(int64_t value) {
  _internal_set_uiroleid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_CreateRole_SC.uiRoleID)
}

// optional string strRoleName = 3;
inline bool Msg_GG_CreateRole_SC::_internal_has_strrolename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_GG_CreateRole_SC::has_strrolename() const {
  return _internal_has_strrolename();
}
inline void Msg_GG_CreateRole_SC::clear_strrolename() {
  strrolename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Msg_GG_CreateRole_SC::strrolename() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_CreateRole_SC.strRoleName)
  return _internal_strrolename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_GG_CreateRole_SC::set_strrolename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 strrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_CreateRole_SC.strRoleName)
}
inline std::string* Msg_GG_CreateRole_SC::mutable_strrolename() {
  std::string* _s = _internal_mutable_strrolename();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GG_CreateRole_SC.strRoleName)
  return _s;
}
inline const std::string& Msg_GG_CreateRole_SC::_internal_strrolename() const {
  return strrolename_.Get();
}
inline void Msg_GG_CreateRole_SC::_internal_set_strrolename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  strrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_GG_CreateRole_SC::_internal_mutable_strrolename() {
  _has_bits_[0] |= 0x00000001u;
  return strrolename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_GG_CreateRole_SC::release_strrolename() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_GG_CreateRole_SC.strRoleName)
  if (!_internal_has_strrolename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = strrolename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strrolename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_GG_CreateRole_SC::set_allocated_strrolename(std::string* strrolename) {
  if (strrolename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  strrolename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strrolename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strrolename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_GG_CreateRole_SC.strRoleName)
}

// optional uint32 uiLevel = 4;
inline bool Msg_GG_CreateRole_SC::_internal_has_uilevel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Msg_GG_CreateRole_SC::has_uilevel() const {
  return _internal_has_uilevel();
}
inline void Msg_GG_CreateRole_SC::clear_uilevel() {
  uilevel_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t Msg_GG_CreateRole_SC::_internal_uilevel() const {
  return uilevel_;
}
inline uint32_t Msg_GG_CreateRole_SC::uilevel() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_CreateRole_SC.uiLevel)
  return _internal_uilevel();
}
inline void Msg_GG_CreateRole_SC::_internal_set_uilevel(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  uilevel_ = value;
}
inline void Msg_GG_CreateRole_SC::set_uilevel(uint32_t value) {
  _internal_set_uilevel(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_CreateRole_SC.uiLevel)
}

// optional int64 llCreateTime = 5;
inline bool Msg_GG_CreateRole_SC::_internal_has_llcreatetime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Msg_GG_CreateRole_SC::has_llcreatetime() const {
  return _internal_has_llcreatetime();
}
inline void Msg_GG_CreateRole_SC::clear_llcreatetime() {
  llcreatetime_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t Msg_GG_CreateRole_SC::_internal_llcreatetime() const {
  return llcreatetime_;
}
inline int64_t Msg_GG_CreateRole_SC::llcreatetime() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_CreateRole_SC.llCreateTime)
  return _internal_llcreatetime();
}
inline void Msg_GG_CreateRole_SC::_internal_set_llcreatetime(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  llcreatetime_ = value;
}
inline void Msg_GG_CreateRole_SC::set_llcreatetime(int64_t value) {
  _internal_set_llcreatetime(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_CreateRole_SC.llCreateTime)
}

// optional int32 nRetCode = 6;
inline bool Msg_GG_CreateRole_SC::_internal_has_nretcode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Msg_GG_CreateRole_SC::has_nretcode() const {
  return _internal_has_nretcode();
}
inline void Msg_GG_CreateRole_SC::clear_nretcode() {
  nretcode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t Msg_GG_CreateRole_SC::_internal_nretcode() const {
  return nretcode_;
}
inline int32_t Msg_GG_CreateRole_SC::nretcode() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_CreateRole_SC.nRetCode)
  return _internal_nretcode();
}
inline void Msg_GG_CreateRole_SC::_internal_set_nretcode(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  nretcode_ = value;
}
inline void Msg_GG_CreateRole_SC::set_nretcode(int32_t value) {
  _internal_set_nretcode(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_CreateRole_SC.nRetCode)
}

// -------------------------------------------------------------------

// Msg_GG_SavePlayer_CS

// optional int64 uiAccID = 1;
inline bool Msg_GG_SavePlayer_CS::_internal_has_uiaccid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_GG_SavePlayer_CS::has_uiaccid() const {
  return _internal_has_uiaccid();
}
inline void Msg_GG_SavePlayer_CS::clear_uiaccid() {
  uiaccid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Msg_GG_SavePlayer_CS::_internal_uiaccid() const {
  return uiaccid_;
}
inline int64_t Msg_GG_SavePlayer_CS::uiaccid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_SavePlayer_CS.uiAccID)
  return _internal_uiaccid();
}
inline void Msg_GG_SavePlayer_CS::_internal_set_uiaccid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  uiaccid_ = value;
}
inline void Msg_GG_SavePlayer_CS::set_uiaccid(int64_t value) {
  _internal_set_uiaccid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_SavePlayer_CS.uiAccID)
}

// optional uint32 GateID = 2;
inline bool Msg_GG_SavePlayer_CS::_internal_has_gateid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_GG_SavePlayer_CS::has_gateid() const {
  return _internal_has_gateid();
}
inline void Msg_GG_SavePlayer_CS::clear_gateid() {
  gateid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Msg_GG_SavePlayer_CS::_internal_gateid() const {
  return gateid_;
}
inline uint32_t Msg_GG_SavePlayer_CS::gateid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_SavePlayer_CS.GateID)
  return _internal_gateid();
}
inline void Msg_GG_SavePlayer_CS::_internal_set_gateid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  gateid_ = value;
}
inline void Msg_GG_SavePlayer_CS::set_gateid(uint32_t value) {
  _internal_set_gateid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_SavePlayer_CS.GateID)
}

// -------------------------------------------------------------------

// Msg_GG_KickPlayer_CS

// optional int64 uiAccID = 1;
inline bool Msg_GG_KickPlayer_CS::_internal_has_uiaccid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_GG_KickPlayer_CS::has_uiaccid() const {
  return _internal_has_uiaccid();
}
inline void Msg_GG_KickPlayer_CS::clear_uiaccid() {
  uiaccid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Msg_GG_KickPlayer_CS::_internal_uiaccid() const {
  return uiaccid_;
}
inline int64_t Msg_GG_KickPlayer_CS::uiaccid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_KickPlayer_CS.uiAccID)
  return _internal_uiaccid();
}
inline void Msg_GG_KickPlayer_CS::_internal_set_uiaccid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  uiaccid_ = value;
}
inline void Msg_GG_KickPlayer_CS::set_uiaccid(int64_t value) {
  _internal_set_uiaccid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_KickPlayer_CS.uiAccID)
}

// optional .XrPb.ResultCode code = 2;
inline bool Msg_GG_KickPlayer_CS::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_GG_KickPlayer_CS::has_code() const {
  return _internal_has_code();
}
inline void Msg_GG_KickPlayer_CS::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::XrPb::ResultCode Msg_GG_KickPlayer_CS::_internal_code() const {
  return static_cast< ::XrPb::ResultCode >(code_);
}
inline ::XrPb::ResultCode Msg_GG_KickPlayer_CS::code() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_KickPlayer_CS.code)
  return _internal_code();
}
inline void Msg_GG_KickPlayer_CS::_internal_set_code(::XrPb::ResultCode value) {
  _has_bits_[0] |= 0x00000002u;
  code_ = value;
}
inline void Msg_GG_KickPlayer_CS::set_code(::XrPb::ResultCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_KickPlayer_CS.code)
}

// -------------------------------------------------------------------

// Msg_GG_Notice_PUSH

// repeated int64 acc_lst = 1;
inline int Msg_GG_Notice_PUSH::_internal_acc_lst_size() const {
  return acc_lst_.size();
}
inline int Msg_GG_Notice_PUSH::acc_lst_size() const {
  return _internal_acc_lst_size();
}
inline void Msg_GG_Notice_PUSH::clear_acc_lst() {
  acc_lst_.Clear();
}
inline int64_t Msg_GG_Notice_PUSH::_internal_acc_lst(int index) const {
  return acc_lst_.Get(index);
}
inline int64_t Msg_GG_Notice_PUSH::acc_lst(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Notice_PUSH.acc_lst)
  return _internal_acc_lst(index);
}
inline void Msg_GG_Notice_PUSH::set_acc_lst(int index, int64_t value) {
  acc_lst_.Set(index, value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Notice_PUSH.acc_lst)
}
inline void Msg_GG_Notice_PUSH::_internal_add_acc_lst(int64_t value) {
  acc_lst_.Add(value);
}
inline void Msg_GG_Notice_PUSH::add_acc_lst(int64_t value) {
  _internal_add_acc_lst(value);
  // @@protoc_insertion_point(field_add:XrPb.Msg_GG_Notice_PUSH.acc_lst)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Msg_GG_Notice_PUSH::_internal_acc_lst() const {
  return acc_lst_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Msg_GG_Notice_PUSH::acc_lst() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_GG_Notice_PUSH.acc_lst)
  return _internal_acc_lst();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Msg_GG_Notice_PUSH::_internal_mutable_acc_lst() {
  return &acc_lst_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Msg_GG_Notice_PUSH::mutable_acc_lst() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_GG_Notice_PUSH.acc_lst)
  return _internal_mutable_acc_lst();
}

// optional bytes proto_msg = 2;
inline bool Msg_GG_Notice_PUSH::_internal_has_proto_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_GG_Notice_PUSH::has_proto_msg() const {
  return _internal_has_proto_msg();
}
inline void Msg_GG_Notice_PUSH::clear_proto_msg() {
  proto_msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Msg_GG_Notice_PUSH::proto_msg() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Notice_PUSH.proto_msg)
  return _internal_proto_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_GG_Notice_PUSH::set_proto_msg(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 proto_msg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Notice_PUSH.proto_msg)
}
inline std::string* Msg_GG_Notice_PUSH::mutable_proto_msg() {
  std::string* _s = _internal_mutable_proto_msg();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GG_Notice_PUSH.proto_msg)
  return _s;
}
inline const std::string& Msg_GG_Notice_PUSH::_internal_proto_msg() const {
  return proto_msg_.Get();
}
inline void Msg_GG_Notice_PUSH::_internal_set_proto_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  proto_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_GG_Notice_PUSH::_internal_mutable_proto_msg() {
  _has_bits_[0] |= 0x00000001u;
  return proto_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_GG_Notice_PUSH::release_proto_msg() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_GG_Notice_PUSH.proto_msg)
  if (!_internal_has_proto_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = proto_msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proto_msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proto_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_GG_Notice_PUSH::set_allocated_proto_msg(std::string* proto_msg) {
  if (proto_msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  proto_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto_msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proto_msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    proto_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_GG_Notice_PUSH.proto_msg)
}

// optional uint32 mod_id = 3;
inline bool Msg_GG_Notice_PUSH::_internal_has_mod_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_GG_Notice_PUSH::has_mod_id() const {
  return _internal_has_mod_id();
}
inline void Msg_GG_Notice_PUSH::clear_mod_id() {
  mod_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Msg_GG_Notice_PUSH::_internal_mod_id() const {
  return mod_id_;
}
inline uint32_t Msg_GG_Notice_PUSH::mod_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Notice_PUSH.mod_id)
  return _internal_mod_id();
}
inline void Msg_GG_Notice_PUSH::_internal_set_mod_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  mod_id_ = value;
}
inline void Msg_GG_Notice_PUSH::set_mod_id(uint32_t value) {
  _internal_set_mod_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Notice_PUSH.mod_id)
}

// optional uint32 proto_id = 4;
inline bool Msg_GG_Notice_PUSH::_internal_has_proto_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Msg_GG_Notice_PUSH::has_proto_id() const {
  return _internal_has_proto_id();
}
inline void Msg_GG_Notice_PUSH::clear_proto_id() {
  proto_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Msg_GG_Notice_PUSH::_internal_proto_id() const {
  return proto_id_;
}
inline uint32_t Msg_GG_Notice_PUSH::proto_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Notice_PUSH.proto_id)
  return _internal_proto_id();
}
inline void Msg_GG_Notice_PUSH::_internal_set_proto_id(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  proto_id_ = value;
}
inline void Msg_GG_Notice_PUSH::set_proto_id(uint32_t value) {
  _internal_set_proto_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Notice_PUSH.proto_id)
}

// optional uint32 interval = 5;
inline bool Msg_GG_Notice_PUSH::_internal_has_interval() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Msg_GG_Notice_PUSH::has_interval() const {
  return _internal_has_interval();
}
inline void Msg_GG_Notice_PUSH::clear_interval() {
  interval_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t Msg_GG_Notice_PUSH::_internal_interval() const {
  return interval_;
}
inline uint32_t Msg_GG_Notice_PUSH::interval() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GG_Notice_PUSH.interval)
  return _internal_interval();
}
inline void Msg_GG_Notice_PUSH::_internal_set_interval(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  interval_ = value;
}
inline void Msg_GG_Notice_PUSH::set_interval(uint32_t value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GG_Notice_PUSH.interval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XrPb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::XrPb::MsgSvrMod_GGGS_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::MsgSvrMod_GGGS_MsgId>() {
  return ::XrPb::MsgSvrMod_GGGS_MsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_2fMsgGGGS_2eproto
