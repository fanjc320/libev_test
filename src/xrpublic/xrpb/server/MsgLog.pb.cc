// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/MsgLog.proto

#include "server/MsgLog.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace XrPb {
constexpr MsgSvrMod_Log::MsgSvrMod_Log(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MsgSvrMod_LogDefaultTypeInternal {
  constexpr MsgSvrMod_LogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgSvrMod_LogDefaultTypeInternal() {}
  union {
    MsgSvrMod_Log _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgSvrMod_LogDefaultTypeInternal _MsgSvrMod_Log_default_instance_;
constexpr LogRoleBase::LogRoleBase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dev_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , acc_id_(int64_t{0})
  , level_(0u)
  , arena_type_(0u)
  , arena_level_(0u)
  , areanno_(0u)
  , time_(int64_t{0})
  , platid_(0u){}
struct LogRoleBaseDefaultTypeInternal {
  constexpr LogRoleBaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogRoleBaseDefaultTypeInternal() {}
  union {
    LogRoleBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogRoleBaseDefaultTypeInternal _LogRoleBase_default_instance_;
constexpr Msg_Log_UpLoadFile::Msg_Log_UpLoadFile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roomlog_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logpath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roomid_(int64_t{0})
  , areano_(0u)
  , serverid_(0u)
  , size_(0u)
  , failres_(false){}
struct Msg_Log_UpLoadFileDefaultTypeInternal {
  constexpr Msg_Log_UpLoadFileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_Log_UpLoadFileDefaultTypeInternal() {}
  union {
    Msg_Log_UpLoadFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_Log_UpLoadFileDefaultTypeInternal _Msg_Log_UpLoadFile_default_instance_;
constexpr Msg_LOG_RoleLoginLogout::Msg_LOG_RoleLoginLogout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(nullptr)
  , game_version_(nullptr)
  , enter_time_(int64_t{0})
  , in_out_(0u)
  , coin_gp_(0u)
  , coin_mb_(0u)
  , vip_(false)
  , leave_time_(int64_t{0}){}
struct Msg_LOG_RoleLoginLogoutDefaultTypeInternal {
  constexpr Msg_LOG_RoleLoginLogoutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_LOG_RoleLoginLogoutDefaultTypeInternal() {}
  union {
    Msg_LOG_RoleLoginLogout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_LOG_RoleLoginLogoutDefaultTypeInternal _Msg_LOG_RoleLoginLogout_default_instance_;
constexpr ItemLogInfo::ItemLogInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
  , id_(0u)
  , new_val_(0)
  , old_val_(0)
  , from_(0)

  , to_(0)

  , get_id_(int64_t{0}){}
struct ItemLogInfoDefaultTypeInternal {
  constexpr ItemLogInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemLogInfoDefaultTypeInternal() {}
  union {
    ItemLogInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemLogInfoDefaultTypeInternal _ItemLogInfo_default_instance_;
constexpr Msg_LOG_RoleItem::Msg_LOG_RoleItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : comment_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_(nullptr)
  , items_(nullptr){}
struct Msg_LOG_RoleItemDefaultTypeInternal {
  constexpr Msg_LOG_RoleItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_LOG_RoleItemDefaultTypeInternal() {}
  union {
    Msg_LOG_RoleItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_LOG_RoleItemDefaultTypeInternal _Msg_LOG_RoleItem_default_instance_;
constexpr Msg_LOG_RoleProgress::Msg_LOG_RoleProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(nullptr)
  , type_(0)

  , progress_(0u){}
struct Msg_LOG_RoleProgressDefaultTypeInternal {
  constexpr Msg_LOG_RoleProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_LOG_RoleProgressDefaultTypeInternal() {}
  union {
    Msg_LOG_RoleProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_LOG_RoleProgressDefaultTypeInternal _Msg_LOG_RoleProgress_default_instance_;
constexpr Msg_LOG_RoleAttribute::Msg_LOG_RoleAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(nullptr)
  , type_(0)

  , level_(0u)
  , id_(0u)
  , exp_(0u)
  , from_(0)

  , config_id_(0u){}
struct Msg_LOG_RoleAttributeDefaultTypeInternal {
  constexpr Msg_LOG_RoleAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_LOG_RoleAttributeDefaultTypeInternal() {}
  union {
    Msg_LOG_RoleAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_LOG_RoleAttributeDefaultTypeInternal _Msg_LOG_RoleAttribute_default_instance_;
constexpr Msg_LOG_RoleFriend::Msg_LOG_RoleFriend(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(nullptr)
  , friend_id_(int64_t{0})
  , type_(0)
{}
struct Msg_LOG_RoleFriendDefaultTypeInternal {
  constexpr Msg_LOG_RoleFriendDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_LOG_RoleFriendDefaultTypeInternal() {}
  union {
    Msg_LOG_RoleFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_LOG_RoleFriendDefaultTypeInternal _Msg_LOG_RoleFriend_default_instance_;
constexpr Msg_LOG_GMRecord::Msg_LOG_GMRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gm_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_(nullptr){}
struct Msg_LOG_GMRecordDefaultTypeInternal {
  constexpr Msg_LOG_GMRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_LOG_GMRecordDefaultTypeInternal() {}
  union {
    Msg_LOG_GMRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_LOG_GMRecordDefaultTypeInternal _Msg_LOG_GMRecord_default_instance_;
constexpr Msg_LOG_BuyMB::Msg_LOG_BuyMB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(nullptr)
  , uicharge_(0u)
  , uitotal_(0u)
  , llordernum_(int64_t{0})
  , uiid_(0u)
  , uirmb_(0u)
  , llstart_(int64_t{0})
  , llend_(int64_t{0})
  , uistatus_(0u){}
struct Msg_LOG_BuyMBDefaultTypeInternal {
  constexpr Msg_LOG_BuyMBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_LOG_BuyMBDefaultTypeInternal() {}
  union {
    Msg_LOG_BuyMB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_LOG_BuyMBDefaultTypeInternal _Msg_LOG_BuyMB_default_instance_;
constexpr Msg_LOG_BuyGP::Msg_LOG_BuyGP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(nullptr)
  , uisequence_(0u)
  , uigp_(0u)
  , uimb_(0u)
  , uicost_(0u){}
struct Msg_LOG_BuyGPDefaultTypeInternal {
  constexpr Msg_LOG_BuyGPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_LOG_BuyGPDefaultTypeInternal() {}
  union {
    Msg_LOG_BuyGP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_LOG_BuyGPDefaultTypeInternal _Msg_LOG_BuyGP_default_instance_;
constexpr Msg_Log_RecordOnline::Msg_Log_RecordOnline(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : areanno_(0u)
  , online_num_(0u)
  , time_(int64_t{0})
  , platid_(0u){}
struct Msg_Log_RecordOnlineDefaultTypeInternal {
  constexpr Msg_Log_RecordOnlineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_Log_RecordOnlineDefaultTypeInternal() {}
  union {
    Msg_Log_RecordOnline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_Log_RecordOnlineDefaultTypeInternal _Msg_Log_RecordOnline_default_instance_;
constexpr Msg_Log_CreateRole::Msg_Log_CreateRole(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rolename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_(nullptr){}
struct Msg_Log_CreateRoleDefaultTypeInternal {
  constexpr Msg_Log_CreateRoleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_Log_CreateRoleDefaultTypeInternal() {}
  union {
    Msg_Log_CreateRole _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_Log_CreateRoleDefaultTypeInternal _Msg_Log_CreateRole_default_instance_;
constexpr Msg_Log_ModifyRoleName::Msg_Log_ModifyRoleName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rolename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , old_rolename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_(nullptr){}
struct Msg_Log_ModifyRoleNameDefaultTypeInternal {
  constexpr Msg_Log_ModifyRoleNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_Log_ModifyRoleNameDefaultTypeInternal() {}
  union {
    Msg_Log_ModifyRoleName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_Log_ModifyRoleNameDefaultTypeInternal _Msg_Log_ModifyRoleName_default_instance_;
constexpr Msg_LOG_RoleChatMsg::Msg_LOG_RoleChatMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_(nullptr)
  , type_(0)
{}
struct Msg_LOG_RoleChatMsgDefaultTypeInternal {
  constexpr Msg_LOG_RoleChatMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_LOG_RoleChatMsgDefaultTypeInternal() {}
  union {
    Msg_LOG_RoleChatMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_LOG_RoleChatMsgDefaultTypeInternal _Msg_LOG_RoleChatMsg_default_instance_;
}  // namespace XrPb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_2fMsgLog_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_server_2fMsgLog_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_2fMsgLog_2eproto = nullptr;

const uint32_t TableStruct_server_2fMsgLog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::MsgSvrMod_Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::LogRoleBase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::LogRoleBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::LogRoleBase, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::LogRoleBase, level_),
  PROTOBUF_FIELD_OFFSET(::XrPb::LogRoleBase, arena_type_),
  PROTOBUF_FIELD_OFFSET(::XrPb::LogRoleBase, arena_level_),
  PROTOBUF_FIELD_OFFSET(::XrPb::LogRoleBase, dev_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::LogRoleBase, areanno_),
  PROTOBUF_FIELD_OFFSET(::XrPb::LogRoleBase, time_),
  PROTOBUF_FIELD_OFFSET(::XrPb::LogRoleBase, platid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::LogRoleBase, channel_),
  PROTOBUF_FIELD_OFFSET(::XrPb::LogRoleBase, role_name_),
  PROTOBUF_FIELD_OFFSET(::XrPb::LogRoleBase, client_ip_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  4,
  5,
  6,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_UpLoadFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_UpLoadFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_UpLoadFile, areano_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_UpLoadFile, roomid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_UpLoadFile, roomlog_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_UpLoadFile, logpath_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_UpLoadFile, serverid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_UpLoadFile, size_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_UpLoadFile, failres_),
  3,
  2,
  0,
  1,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleLoginLogout, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleLoginLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleLoginLogout, role_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleLoginLogout, in_out_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleLoginLogout, enter_time_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleLoginLogout, coin_gp_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleLoginLogout, coin_mb_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleLoginLogout, vip_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleLoginLogout, leave_time_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleLoginLogout, game_version_),
  ~0u,
  1,
  0,
  2,
  3,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::XrPb::ItemLogInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::ItemLogInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::ItemLogInfo, type_),
  PROTOBUF_FIELD_OFFSET(::XrPb::ItemLogInfo, id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::ItemLogInfo, new_val_),
  PROTOBUF_FIELD_OFFSET(::XrPb::ItemLogInfo, old_val_),
  PROTOBUF_FIELD_OFFSET(::XrPb::ItemLogInfo, from_),
  PROTOBUF_FIELD_OFFSET(::XrPb::ItemLogInfo, to_),
  PROTOBUF_FIELD_OFFSET(::XrPb::ItemLogInfo, get_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleItem, role_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleItem, comment_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleItem, items_),
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleProgress, role_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleProgress, type_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleProgress, progress_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleAttribute, role_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleAttribute, type_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleAttribute, level_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleAttribute, id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleAttribute, exp_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleAttribute, from_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleAttribute, config_id_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleFriend, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleFriend, role_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleFriend, type_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleFriend, friend_id_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_GMRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_GMRecord, role_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_GMRecord, gm_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyMB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyMB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyMB, role_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyMB, uicharge_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyMB, uitotal_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyMB, uiid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyMB, llordernum_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyMB, uirmb_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyMB, uistatus_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyMB, llstart_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyMB, llend_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyGP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyGP, role_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyGP, uisequence_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyGP, uigp_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyGP, uimb_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_BuyGP, uicost_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_RecordOnline, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_RecordOnline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_RecordOnline, areanno_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_RecordOnline, online_num_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_RecordOnline, time_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_RecordOnline, platid_),
  ~0u,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_CreateRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_CreateRole, role_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_CreateRole, rolename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_ModifyRoleName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_ModifyRoleName, role_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_ModifyRoleName, rolename_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_Log_ModifyRoleName, old_rolename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleChatMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleChatMsg, role_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleChatMsg, type_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LOG_RoleChatMsg, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::XrPb::MsgSvrMod_Log)},
  { 6, 23, -1, sizeof(::XrPb::LogRoleBase)},
  { 34, 47, -1, sizeof(::XrPb::Msg_Log_UpLoadFile)},
  { 54, 68, -1, sizeof(::XrPb::Msg_LOG_RoleLoginLogout)},
  { 76, 89, -1, sizeof(::XrPb::ItemLogInfo)},
  { 96, 105, -1, sizeof(::XrPb::Msg_LOG_RoleItem)},
  { 108, 117, -1, sizeof(::XrPb::Msg_LOG_RoleProgress)},
  { 120, 133, -1, sizeof(::XrPb::Msg_LOG_RoleAttribute)},
  { 140, 149, -1, sizeof(::XrPb::Msg_LOG_RoleFriend)},
  { 152, -1, -1, sizeof(::XrPb::Msg_LOG_GMRecord)},
  { 160, 175, -1, sizeof(::XrPb::Msg_LOG_BuyMB)},
  { 184, -1, -1, sizeof(::XrPb::Msg_LOG_BuyGP)},
  { 195, 205, -1, sizeof(::XrPb::Msg_Log_RecordOnline)},
  { 209, -1, -1, sizeof(::XrPb::Msg_Log_CreateRole)},
  { 217, -1, -1, sizeof(::XrPb::Msg_Log_ModifyRoleName)},
  { 226, -1, -1, sizeof(::XrPb::Msg_LOG_RoleChatMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_MsgSvrMod_Log_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_LogRoleBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_Log_UpLoadFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_LOG_RoleLoginLogout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_ItemLogInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_LOG_RoleItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_LOG_RoleProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_LOG_RoleAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_LOG_RoleFriend_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_LOG_GMRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_LOG_BuyMB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_LOG_BuyGP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_Log_RecordOnline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_Log_CreateRole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_Log_ModifyRoleName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_LOG_RoleChatMsg_default_instance_),
};

const char descriptor_table_protodef_server_2fMsgLog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023server/MsgLog.proto\022\004XrPb\032\023client/Comm"
  "on.proto\"\320\002\n\rMsgSvrMod_Log\"\276\002\n\005MsgId\022\020\n\014"
  "Msg_LOG_None\020\000\022\033\n\027Msg_LOG_RoleLoginLogou"
  "t\020\001\022\024\n\020Msg_LOG_RoleItem\020\002\022\030\n\024Msg_LOG_Rol"
  "eProgress\020\003\022\031\n\025Msg_LOG_RoleAttribute\020\004\022\026"
  "\n\022Msg_LOG_RoleFriend\020\005\022\030\n\024Msg_Log_Record"
  "Online\020\006\022\021\n\rMsg_LOG_BuyMB\020\007\022\021\n\rMsg_LOG_B"
  "uyGP\020\010\022\026\n\022Msg_Log_CreateRole\020\t\022\026\n\022Msg_Lo"
  "g_UpLoadFile\020\n\022\032\n\026Msg_Log_ModifyRoleName"
  "\020\013\022\027\n\023Msg_LOG_RoleChatMsg\020\014\"\301\002\n\013LogRoleB"
  "ase\022\016\n\006acc_id\030\001 \001(\003\022\r\n\005level\030\002 \001(\r\022\022\n\nar"
  "ena_type\030\003 \001(\r\022\023\n\013arena_level\030\004 \001(\r\022\023\n\006d"
  "ev_id\030\005 \001(\tH\000\210\001\001\022\024\n\007areanno\030\006 \001(\rH\001\210\001\001\022\021"
  "\n\004time\030\007 \001(\003H\002\210\001\001\022\023\n\006platid\030\010 \001(\rH\003\210\001\001\022\024"
  "\n\007channel\030\t \001(\tH\004\210\001\001\022\026\n\trole_name\030\n \001(\tH"
  "\005\210\001\001\022\026\n\tclient_ip\030\013 \001(\tH\006\210\001\001B\t\n\007_dev_idB"
  "\n\n\010_areannoB\007\n\005_timeB\t\n\007_platidB\n\n\010_chan"
  "nelB\014\n\n_role_nameB\014\n\n_client_ip\"\372\001\n\022Msg_"
  "Log_UpLoadFile\022\023\n\006areano\030\001 \001(\rH\000\210\001\001\022\023\n\006r"
  "oomid\030\002 \001(\003H\001\210\001\001\022\024\n\007roomLog\030\003 \001(\tH\002\210\001\001\022\024"
  "\n\007logpath\030\004 \001(\tH\003\210\001\001\022\025\n\010serverid\030\005 \001(\rH\004"
  "\210\001\001\022\021\n\004size\030\006 \001(\rH\005\210\001\001\022\024\n\007failres\030\007 \001(\010H"
  "\006\210\001\001B\t\n\007_areanoB\t\n\007_roomidB\n\n\010_roomLogB\n"
  "\n\010_logpathB\013\n\t_serveridB\007\n\005_sizeB\n\n\010_fai"
  "lres\"\261\002\n\027Msg_LOG_RoleLoginLogout\022\037\n\004role"
  "\030\001 \001(\0132\021.XrPb.LogRoleBase\022\023\n\006in_out\030\002 \001("
  "\rH\000\210\001\001\022\027\n\nenter_time\030\003 \001(\003H\001\210\001\001\022\024\n\007coin_"
  "GP\030\004 \001(\rH\002\210\001\001\022\024\n\007coin_MB\030\005 \001(\rH\003\210\001\001\022\020\n\003v"
  "ip\030\006 \001(\010H\004\210\001\001\022\027\n\nleave_time\030\007 \001(\003H\005\210\001\001\022\'"
  "\n\014game_version\030\010 \001(\0132\021.XrPb.GameVersionB"
  "\t\n\007_in_outB\r\n\013_enter_timeB\n\n\010_coin_GPB\n\n"
  "\010_coin_MBB\006\n\004_vipB\r\n\013_leave_time\"\371\001\n\013Ite"
  "mLogInfo\022\021\n\004type\030\001 \001(\005H\000\210\001\001\022\017\n\002id\030\002 \001(\rH"
  "\001\210\001\001\022\024\n\007new_val\030\003 \001(\005H\002\210\001\001\022\024\n\007old_val\030\004 "
  "\001(\005H\003\210\001\001\022\"\n\004from\030\005 \001(\0162\017.XrPb.EFromTypeH"
  "\004\210\001\001\022\036\n\002to\030\006 \001(\0162\r.XrPb.EToTypeH\005\210\001\001\022\023\n\006"
  "get_id\030\007 \001(\003H\006\210\001\001B\007\n\005_typeB\005\n\003_idB\n\n\010_ne"
  "w_valB\n\n\010_old_valB\007\n\005_fromB\005\n\003_toB\t\n\007_ge"
  "t_id\"w\n\020Msg_LOG_RoleItem\022\037\n\004role\030\001 \001(\0132\021"
  ".XrPb.LogRoleBase\022\024\n\007comment\030\002 \001(\tH\000\210\001\001\022"
  " \n\005items\030\003 \001(\0132\021.XrPb.ItemLogInfoB\n\n\010_co"
  "mment\"\201\001\n\024Msg_LOG_RoleProgress\022\037\n\004role\030\001"
  " \001(\0132\021.XrPb.LogRoleBase\022$\n\004type\030\002 \001(\0162\026."
  "XrPb.ELogProgressType\022\025\n\010progress\030\003 \001(\rH"
  "\000\210\001\001B\013\n\t_progress\"\375\001\n\025Msg_LOG_RoleAttrib"
  "ute\022\037\n\004role\030\001 \001(\0132\021.XrPb.LogRoleBase\022 \n\004"
  "type\030\002 \001(\0162\022.XrPb.ELogAttrType\022\022\n\005level\030"
  "\003 \001(\rH\000\210\001\001\022\017\n\002id\030\004 \001(\rH\001\210\001\001\022\020\n\003exp\030\005 \001(\r"
  "H\002\210\001\001\022\"\n\004from\030\006 \001(\0162\017.XrPb.EFromTypeH\003\210\001"
  "\001\022\026\n\tconfig_id\030\007 \001(\rH\004\210\001\001B\010\n\006_levelB\005\n\003_"
  "idB\006\n\004_expB\007\n\005_fromB\014\n\n_config_id\"\177\n\022Msg"
  "_LOG_RoleFriend\022\037\n\004role\030\001 \001(\0132\021.XrPb.Log"
  "RoleBase\022\"\n\004type\030\002 \001(\0162\024.XrPb.ELogFriend"
  "Type\022\026\n\tfriend_id\030\003 \001(\003H\000\210\001\001B\014\n\n_friend_"
  "id\"\?\n\020Msg_LOG_GMRecord\022\037\n\004role\030\001 \001(\0132\021.X"
  "rPb.LogRoleBase\022\n\n\002gm\030\002 \001(\t\"\326\001\n\rMsg_LOG_"
  "BuyMB\022\037\n\004role\030\001 \001(\0132\021.XrPb.LogRoleBase\022\020"
  "\n\010uiCharge\030\002 \001(\r\022\017\n\007uiTotal\030\003 \001(\r\022\014\n\004uiI"
  "d\030\004 \001(\r\022\022\n\nllOrderNum\030\005 \001(\003\022\r\n\005uiRmb\030\006 \001"
  "(\r\022\020\n\010uiStatus\030\007 \001(\r\022\024\n\007llStart\030\010 \001(\003H\000\210"
  "\001\001\022\022\n\005llEnd\030\t \001(\003H\001\210\001\001B\n\n\010_llStartB\010\n\006_l"
  "lEnd\"p\n\rMsg_LOG_BuyGP\022\037\n\004role\030\001 \001(\0132\021.Xr"
  "Pb.LogRoleBase\022\022\n\nuiSequence\030\002 \001(\r\022\014\n\004ui"
  "Gp\030\003 \001(\r\022\014\n\004uiMb\030\004 \001(\r\022\016\n\006uiCost\030\005 \001(\r\"\213"
  "\001\n\024Msg_Log_RecordOnline\022\017\n\007areanno\030\001 \001(\r"
  "\022\027\n\nonline_num\030\002 \001(\rH\000\210\001\001\022\021\n\004time\030\003 \001(\003H"
  "\001\210\001\001\022\023\n\006platid\030\004 \001(\rH\002\210\001\001B\r\n\013_online_num"
  "B\007\n\005_timeB\t\n\007_platid\"G\n\022Msg_Log_CreateRo"
  "le\022\037\n\004role\030\001 \001(\0132\021.XrPb.LogRoleBase\022\020\n\010r"
  "olename\030\002 \001(\t\"a\n\026Msg_Log_ModifyRoleName\022"
  "\037\n\004role\030\001 \001(\0132\021.XrPb.LogRoleBase\022\020\n\010role"
  "name\030\002 \001(\t\022\024\n\014old_rolename\030\003 \001(\t\"b\n\023Msg_"
  "LOG_RoleChatMsg\022\037\n\004role\030\001 \001(\0132\021.XrPb.Log"
  "RoleBase\022\035\n\004type\030\002 \001(\0162\017.XrPb.EChatType\022"
  "\013\n\003msg\030\003 \001(\t*\241\002\n\tEFromType\022\016\n\neFrom_None"
  "\020\000\022\027\n\023eFrom_FirstRecharge\020\001\022\027\n\023eFrom_Cre"
  "ateNewRole\020\002\022\020\n\014eFrom_OnLine\020\004\022\022\n\016eFrom_"
  "NewGuide\020\005\022\020\n\014eFrom_Charge\020\006\022\030\n\024eFrom_Fi"
  "nishNewGuide\020\007\022\017\n\013eFrom_GMAdd\020\010\022\016\n\neFrom"
  "_Mail\020\t\022\023\n\017eFrom_MonthSign\020\n\022\035\n\031eFrom_Su"
  "pplementMonthSign\020\013\022\026\n\022eFrom_MonthSignVi"
  "p\020\014\022\023\n\017eFrom_LoginSign\020\r*f\n\007EToType\022\014\n\010e"
  "To_None\020\000\022\021\n\reTo_WorldChat\020\001\022\016\n\neTo_GMTa"
  "ke\020\002\022\026\n\022eTo_SupplementSign\020\003\022\022\n\016eTo_Inta"
  "llPart\020\005*A\n\020ELogProgressType\022\025\n\021eLogProg"
  "ress_None\020\000\022\026\n\022eLogProgress_Guide\020\001*9\n\014E"
  "LogAttrType\022\021\n\reLogAttr_None\020\000\022\026\n\022eLogAt"
  "tr_RoleLevel\020\001*f\n\016ELogFriendType\022\023\n\017eLog"
  "Friend_None\020\000\022\024\n\020eLogFriend_Apply\020\001\022\022\n\016e"
  "LogFriend_Add\020\002\022\025\n\021eLogFriend_Delete\020\003b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_2fMsgLog_2eproto_deps[1] = {
  &::descriptor_table_client_2fCommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_2fMsgLog_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fMsgLog_2eproto = {
  false, false, 3606, descriptor_table_protodef_server_2fMsgLog_2eproto, "server/MsgLog.proto", 
  &descriptor_table_server_2fMsgLog_2eproto_once, descriptor_table_server_2fMsgLog_2eproto_deps, 1, 16,
  schemas, file_default_instances, TableStruct_server_2fMsgLog_2eproto::offsets,
  file_level_metadata_server_2fMsgLog_2eproto, file_level_enum_descriptors_server_2fMsgLog_2eproto, file_level_service_descriptors_server_2fMsgLog_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_server_2fMsgLog_2eproto_getter() {
  return &descriptor_table_server_2fMsgLog_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_server_2fMsgLog_2eproto(&descriptor_table_server_2fMsgLog_2eproto);
namespace XrPb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgSvrMod_Log_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fMsgLog_2eproto);
  return file_level_enum_descriptors_server_2fMsgLog_2eproto[0];
}
bool MsgSvrMod_Log_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MsgSvrMod_Log_MsgId MsgSvrMod_Log::Msg_LOG_None;
constexpr MsgSvrMod_Log_MsgId MsgSvrMod_Log::Msg_LOG_RoleLoginLogout;
constexpr MsgSvrMod_Log_MsgId MsgSvrMod_Log::Msg_LOG_RoleItem;
constexpr MsgSvrMod_Log_MsgId MsgSvrMod_Log::Msg_LOG_RoleProgress;
constexpr MsgSvrMod_Log_MsgId MsgSvrMod_Log::Msg_LOG_RoleAttribute;
constexpr MsgSvrMod_Log_MsgId MsgSvrMod_Log::Msg_LOG_RoleFriend;
constexpr MsgSvrMod_Log_MsgId MsgSvrMod_Log::Msg_Log_RecordOnline;
constexpr MsgSvrMod_Log_MsgId MsgSvrMod_Log::Msg_LOG_BuyMB;
constexpr MsgSvrMod_Log_MsgId MsgSvrMod_Log::Msg_LOG_BuyGP;
constexpr MsgSvrMod_Log_MsgId MsgSvrMod_Log::Msg_Log_CreateRole;
constexpr MsgSvrMod_Log_MsgId MsgSvrMod_Log::Msg_Log_UpLoadFile;
constexpr MsgSvrMod_Log_MsgId MsgSvrMod_Log::Msg_Log_ModifyRoleName;
constexpr MsgSvrMod_Log_MsgId MsgSvrMod_Log::Msg_LOG_RoleChatMsg;
constexpr MsgSvrMod_Log_MsgId MsgSvrMod_Log::MsgId_MIN;
constexpr MsgSvrMod_Log_MsgId MsgSvrMod_Log::MsgId_MAX;
constexpr int MsgSvrMod_Log::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EFromType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fMsgLog_2eproto);
  return file_level_enum_descriptors_server_2fMsgLog_2eproto[1];
}
bool EFromType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EToType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fMsgLog_2eproto);
  return file_level_enum_descriptors_server_2fMsgLog_2eproto[2];
}
bool EToType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELogProgressType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fMsgLog_2eproto);
  return file_level_enum_descriptors_server_2fMsgLog_2eproto[3];
}
bool ELogProgressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELogAttrType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fMsgLog_2eproto);
  return file_level_enum_descriptors_server_2fMsgLog_2eproto[4];
}
bool ELogAttrType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELogFriendType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fMsgLog_2eproto);
  return file_level_enum_descriptors_server_2fMsgLog_2eproto[5];
}
bool ELogFriendType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MsgSvrMod_Log::_Internal {
 public:
};

MsgSvrMod_Log::MsgSvrMod_Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.MsgSvrMod_Log)
}
MsgSvrMod_Log::MsgSvrMod_Log(const MsgSvrMod_Log& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.MsgSvrMod_Log)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgSvrMod_Log::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgSvrMod_Log::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgSvrMod_Log::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[0]);
}

// ===================================================================

class LogRoleBase::_Internal {
 public:
  using HasBits = decltype(std::declval<LogRoleBase>()._has_bits_);
  static void set_has_dev_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_areanno(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_platid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_role_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LogRoleBase::LogRoleBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.LogRoleBase)
}
LogRoleBase::LogRoleBase(const LogRoleBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dev_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_dev_id()) {
    dev_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dev_id(), 
      GetArenaForAllocation());
  }
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_channel()) {
    channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel(), 
      GetArenaForAllocation());
  }
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    role_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_role_name()) {
    role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role_name(), 
      GetArenaForAllocation());
  }
  client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_ip()) {
    client_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&acc_id_, &from.acc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&platid_) -
    reinterpret_cast<char*>(&acc_id_)) + sizeof(platid_));
  // @@protoc_insertion_point(copy_constructor:XrPb.LogRoleBase)
}

inline void LogRoleBase::SharedCtor() {
dev_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dev_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  role_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acc_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&platid_) -
    reinterpret_cast<char*>(&acc_id_)) + sizeof(platid_));
}

LogRoleBase::~LogRoleBase() {
  // @@protoc_insertion_point(destructor:XrPb.LogRoleBase)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogRoleBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dev_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  client_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogRoleBase::ArenaDtor(void* object) {
  LogRoleBase* _this = reinterpret_cast< LogRoleBase* >(object);
  (void)_this;
}
void LogRoleBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogRoleBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogRoleBase::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.LogRoleBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      dev_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      channel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      role_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      client_ip_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&acc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arena_level_) -
      reinterpret_cast<char*>(&acc_id_)) + sizeof(arena_level_));
  if (cached_has_bits & 0x00000070u) {
    ::memset(&areanno_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&platid_) -
        reinterpret_cast<char*>(&areanno_)) + sizeof(platid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogRoleBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 arena_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          arena_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 arena_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          arena_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string dev_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_dev_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.LogRoleBase.dev_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 areanno = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_areanno(&has_bits);
          areanno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 platid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_platid(&has_bits);
          platid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string channel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_channel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.LogRoleBase.channel"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string role_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_role_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.LogRoleBase.role_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string client_ip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_client_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.LogRoleBase.client_ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogRoleBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.LogRoleBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // uint32 arena_type = 3;
  if (this->_internal_arena_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_arena_type(), target);
  }

  // uint32 arena_level = 4;
  if (this->_internal_arena_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_arena_level(), target);
  }

  // optional string dev_id = 5;
  if (_internal_has_dev_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_id().data(), static_cast<int>(this->_internal_dev_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.LogRoleBase.dev_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dev_id(), target);
  }

  // optional uint32 areanno = 6;
  if (_internal_has_areanno()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_areanno(), target);
  }

  // optional int64 time = 7;
  if (_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_time(), target);
  }

  // optional uint32 platid = 8;
  if (_internal_has_platid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_platid(), target);
  }

  // optional string channel = 9;
  if (_internal_has_channel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel().data(), static_cast<int>(this->_internal_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.LogRoleBase.channel");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_channel(), target);
  }

  // optional string role_name = 10;
  if (_internal_has_role_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.LogRoleBase.role_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_role_name(), target);
  }

  // optional string client_ip = 11;
  if (_internal_has_client_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_ip().data(), static_cast<int>(this->_internal_client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.LogRoleBase.client_ip");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_client_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.LogRoleBase)
  return target;
}

size_t LogRoleBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.LogRoleBase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string dev_id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dev_id());
    }

    // optional string channel = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel());
    }

    // optional string role_name = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_role_name());
    }

    // optional string client_ip = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_ip());
    }

  }
  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 arena_type = 3;
  if (this->_internal_arena_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_arena_type());
  }

  // uint32 arena_level = 4;
  if (this->_internal_arena_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_arena_level());
  }

  if (cached_has_bits & 0x00000070u) {
    // optional uint32 areanno = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_areanno());
    }

    // optional int64 time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_time());
    }

    // optional uint32 platid = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_platid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogRoleBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogRoleBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogRoleBase::GetClassData() const { return &_class_data_; }

void LogRoleBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogRoleBase *>(to)->MergeFrom(
      static_cast<const LogRoleBase &>(from));
}


void LogRoleBase::MergeFrom(const LogRoleBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.LogRoleBase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_dev_id(from._internal_dev_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_channel(from._internal_channel());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_role_name(from._internal_role_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_client_ip(from._internal_client_ip());
    }
  }
  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from._internal_arena_type() != 0) {
    _internal_set_arena_type(from._internal_arena_type());
  }
  if (from._internal_arena_level() != 0) {
    _internal_set_arena_level(from._internal_arena_level());
  }
  if (cached_has_bits & 0x00000070u) {
    if (cached_has_bits & 0x00000010u) {
      areanno_ = from.areanno_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000040u) {
      platid_ = from.platid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogRoleBase::CopyFrom(const LogRoleBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.LogRoleBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRoleBase::IsInitialized() const {
  return true;
}

void LogRoleBase::InternalSwap(LogRoleBase* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dev_id_, lhs_arena,
      &other->dev_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &channel_, lhs_arena,
      &other->channel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &role_name_, lhs_arena,
      &other->role_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &client_ip_, lhs_arena,
      &other->client_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogRoleBase, platid_)
      + sizeof(LogRoleBase::platid_)
      - PROTOBUF_FIELD_OFFSET(LogRoleBase, acc_id_)>(
          reinterpret_cast<char*>(&acc_id_),
          reinterpret_cast<char*>(&other->acc_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogRoleBase::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[1]);
}

// ===================================================================

class Msg_Log_UpLoadFile::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_Log_UpLoadFile>()._has_bits_);
  static void set_has_areano(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_roomid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_roomlog(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_logpath(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serverid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_failres(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Msg_Log_UpLoadFile::Msg_Log_UpLoadFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_Log_UpLoadFile)
}
Msg_Log_UpLoadFile::Msg_Log_UpLoadFile(const Msg_Log_UpLoadFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomlog_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomlog_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_roomlog()) {
    roomlog_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roomlog(), 
      GetArenaForAllocation());
  }
  logpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    logpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_logpath()) {
    logpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logpath(), 
      GetArenaForAllocation());
  }
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&failres_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(failres_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_Log_UpLoadFile)
}

inline void Msg_Log_UpLoadFile::SharedCtor() {
roomlog_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomlog_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
logpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  logpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roomid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&failres_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(failres_));
}

Msg_Log_UpLoadFile::~Msg_Log_UpLoadFile() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_Log_UpLoadFile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_Log_UpLoadFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomlog_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_Log_UpLoadFile::ArenaDtor(void* object) {
  Msg_Log_UpLoadFile* _this = reinterpret_cast< Msg_Log_UpLoadFile* >(object);
  (void)_this;
}
void Msg_Log_UpLoadFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_Log_UpLoadFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_Log_UpLoadFile::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_Log_UpLoadFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      roomlog_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      logpath_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&roomid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failres_) -
        reinterpret_cast<char*>(&roomid_)) + sizeof(failres_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_Log_UpLoadFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 areano = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_areano(&has_bits);
          areano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 roomid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_roomid(&has_bits);
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string roomLog = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_roomlog();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_Log_UpLoadFile.roomLog"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string logpath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_logpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_Log_UpLoadFile.logpath"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 serverid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_serverid(&has_bits);
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool failres = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_failres(&has_bits);
          failres_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_Log_UpLoadFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_Log_UpLoadFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 areano = 1;
  if (_internal_has_areano()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_areano(), target);
  }

  // optional int64 roomid = 2;
  if (_internal_has_roomid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_roomid(), target);
  }

  // optional string roomLog = 3;
  if (_internal_has_roomlog()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomlog().data(), static_cast<int>(this->_internal_roomlog().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_Log_UpLoadFile.roomLog");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_roomlog(), target);
  }

  // optional string logpath = 4;
  if (_internal_has_logpath()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logpath().data(), static_cast<int>(this->_internal_logpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_Log_UpLoadFile.logpath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_logpath(), target);
  }

  // optional uint32 serverid = 5;
  if (_internal_has_serverid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_serverid(), target);
  }

  // optional uint32 size = 6;
  if (_internal_has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_size(), target);
  }

  // optional bool failres = 7;
  if (_internal_has_failres()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_failres(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_Log_UpLoadFile)
  return target;
}

size_t Msg_Log_UpLoadFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_Log_UpLoadFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string roomLog = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_roomlog());
    }

    // optional string logpath = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_logpath());
    }

    // optional int64 roomid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_roomid());
    }

    // optional uint32 areano = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_areano());
    }

    // optional uint32 serverid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
    }

    // optional uint32 size = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
    }

    // optional bool failres = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_Log_UpLoadFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_Log_UpLoadFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_Log_UpLoadFile::GetClassData() const { return &_class_data_; }

void Msg_Log_UpLoadFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_Log_UpLoadFile *>(to)->MergeFrom(
      static_cast<const Msg_Log_UpLoadFile &>(from));
}


void Msg_Log_UpLoadFile::MergeFrom(const Msg_Log_UpLoadFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_Log_UpLoadFile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_roomlog(from._internal_roomlog());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_logpath(from._internal_logpath());
    }
    if (cached_has_bits & 0x00000004u) {
      roomid_ = from.roomid_;
    }
    if (cached_has_bits & 0x00000008u) {
      areano_ = from.areano_;
    }
    if (cached_has_bits & 0x00000010u) {
      serverid_ = from.serverid_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000040u) {
      failres_ = from.failres_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_Log_UpLoadFile::CopyFrom(const Msg_Log_UpLoadFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_Log_UpLoadFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Log_UpLoadFile::IsInitialized() const {
  return true;
}

void Msg_Log_UpLoadFile::InternalSwap(Msg_Log_UpLoadFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roomlog_, lhs_arena,
      &other->roomlog_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &logpath_, lhs_arena,
      &other->logpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_Log_UpLoadFile, failres_)
      + sizeof(Msg_Log_UpLoadFile::failres_)
      - PROTOBUF_FIELD_OFFSET(Msg_Log_UpLoadFile, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Log_UpLoadFile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[2]);
}

// ===================================================================

class Msg_LOG_RoleLoginLogout::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_LOG_RoleLoginLogout>()._has_bits_);
  static const ::XrPb::LogRoleBase& role(const Msg_LOG_RoleLoginLogout* msg);
  static void set_has_in_out(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enter_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coin_gp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_coin_mb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_vip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_leave_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::XrPb::GameVersion& game_version(const Msg_LOG_RoleLoginLogout* msg);
};

const ::XrPb::LogRoleBase&
Msg_LOG_RoleLoginLogout::_Internal::role(const Msg_LOG_RoleLoginLogout* msg) {
  return *msg->role_;
}
const ::XrPb::GameVersion&
Msg_LOG_RoleLoginLogout::_Internal::game_version(const Msg_LOG_RoleLoginLogout* msg) {
  return *msg->game_version_;
}
void Msg_LOG_RoleLoginLogout::clear_game_version() {
  if (GetArenaForAllocation() == nullptr && game_version_ != nullptr) {
    delete game_version_;
  }
  game_version_ = nullptr;
}
Msg_LOG_RoleLoginLogout::Msg_LOG_RoleLoginLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_LOG_RoleLoginLogout)
}
Msg_LOG_RoleLoginLogout::Msg_LOG_RoleLoginLogout(const Msg_LOG_RoleLoginLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::XrPb::LogRoleBase(*from.role_);
  } else {
    role_ = nullptr;
  }
  if (from._internal_has_game_version()) {
    game_version_ = new ::XrPb::GameVersion(*from.game_version_);
  } else {
    game_version_ = nullptr;
  }
  ::memcpy(&enter_time_, &from.enter_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&leave_time_) -
    reinterpret_cast<char*>(&enter_time_)) + sizeof(leave_time_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_LOG_RoleLoginLogout)
}

inline void Msg_LOG_RoleLoginLogout::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leave_time_) -
    reinterpret_cast<char*>(&role_)) + sizeof(leave_time_));
}

Msg_LOG_RoleLoginLogout::~Msg_LOG_RoleLoginLogout() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_LOG_RoleLoginLogout)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_LOG_RoleLoginLogout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
  if (this != internal_default_instance()) delete game_version_;
}

void Msg_LOG_RoleLoginLogout::ArenaDtor(void* object) {
  Msg_LOG_RoleLoginLogout* _this = reinterpret_cast< Msg_LOG_RoleLoginLogout* >(object);
  (void)_this;
}
void Msg_LOG_RoleLoginLogout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_LOG_RoleLoginLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_LOG_RoleLoginLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_LOG_RoleLoginLogout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  if (GetArenaForAllocation() == nullptr && game_version_ != nullptr) {
    delete game_version_;
  }
  game_version_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&enter_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leave_time_) -
        reinterpret_cast<char*>(&enter_time_)) + sizeof(leave_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_LOG_RoleLoginLogout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.LogRoleBase role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 in_out = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_in_out(&has_bits);
          in_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 enter_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_enter_time(&has_bits);
          enter_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 coin_GP = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_coin_gp(&has_bits);
          coin_gp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 coin_MB = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_coin_mb(&has_bits);
          coin_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool vip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_vip(&has_bits);
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 leave_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_leave_time(&has_bits);
          leave_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.GameVersion game_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_LOG_RoleLoginLogout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_LOG_RoleLoginLogout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // optional uint32 in_out = 2;
  if (_internal_has_in_out()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_in_out(), target);
  }

  // optional int64 enter_time = 3;
  if (_internal_has_enter_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_enter_time(), target);
  }

  // optional uint32 coin_GP = 4;
  if (_internal_has_coin_gp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_coin_gp(), target);
  }

  // optional uint32 coin_MB = 5;
  if (_internal_has_coin_mb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_coin_mb(), target);
  }

  // optional bool vip = 6;
  if (_internal_has_vip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_vip(), target);
  }

  // optional int64 leave_time = 7;
  if (_internal_has_leave_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_leave_time(), target);
  }

  // .XrPb.GameVersion game_version = 8;
  if (this->_internal_has_game_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::game_version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_LOG_RoleLoginLogout)
  return target;
}

size_t Msg_LOG_RoleLoginLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_LOG_RoleLoginLogout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // .XrPb.GameVersion game_version = 8;
  if (this->_internal_has_game_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *game_version_);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 enter_time = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_enter_time());
    }

    // optional uint32 in_out = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_in_out());
    }

    // optional uint32 coin_GP = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_coin_gp());
    }

    // optional uint32 coin_MB = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_coin_mb());
    }

    // optional bool vip = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int64 leave_time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_leave_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_LOG_RoleLoginLogout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_LOG_RoleLoginLogout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_LOG_RoleLoginLogout::GetClassData() const { return &_class_data_; }

void Msg_LOG_RoleLoginLogout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_LOG_RoleLoginLogout *>(to)->MergeFrom(
      static_cast<const Msg_LOG_RoleLoginLogout &>(from));
}


void Msg_LOG_RoleLoginLogout::MergeFrom(const Msg_LOG_RoleLoginLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_LOG_RoleLoginLogout)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::LogRoleBase::MergeFrom(from._internal_role());
  }
  if (from._internal_has_game_version()) {
    _internal_mutable_game_version()->::XrPb::GameVersion::MergeFrom(from._internal_game_version());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      enter_time_ = from.enter_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      in_out_ = from.in_out_;
    }
    if (cached_has_bits & 0x00000004u) {
      coin_gp_ = from.coin_gp_;
    }
    if (cached_has_bits & 0x00000008u) {
      coin_mb_ = from.coin_mb_;
    }
    if (cached_has_bits & 0x00000010u) {
      vip_ = from.vip_;
    }
    if (cached_has_bits & 0x00000020u) {
      leave_time_ = from.leave_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_LOG_RoleLoginLogout::CopyFrom(const Msg_LOG_RoleLoginLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_LOG_RoleLoginLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_LOG_RoleLoginLogout::IsInitialized() const {
  return true;
}

void Msg_LOG_RoleLoginLogout::InternalSwap(Msg_LOG_RoleLoginLogout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_LOG_RoleLoginLogout, leave_time_)
      + sizeof(Msg_LOG_RoleLoginLogout::leave_time_)
      - PROTOBUF_FIELD_OFFSET(Msg_LOG_RoleLoginLogout, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_LOG_RoleLoginLogout::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[3]);
}

// ===================================================================

class ItemLogInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ItemLogInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_old_val(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_get_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ItemLogInfo::ItemLogInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.ItemLogInfo)
}
ItemLogInfo::ItemLogInfo(const ItemLogInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(get_id_));
  // @@protoc_insertion_point(copy_constructor:XrPb.ItemLogInfo)
}

inline void ItemLogInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&get_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(get_id_));
}

ItemLogInfo::~ItemLogInfo() {
  // @@protoc_insertion_point(destructor:XrPb.ItemLogInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ItemLogInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemLogInfo::ArenaDtor(void* object) {
  ItemLogInfo* _this = reinterpret_cast< ItemLogInfo* >(object);
  (void)_this;
}
void ItemLogInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemLogInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemLogInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.ItemLogInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&get_id_) -
        reinterpret_cast<char*>(&type_)) + sizeof(get_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemLogInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 new_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_new_val(&has_bits);
          new_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 old_val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_old_val(&has_bits);
          old_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.EFromType from = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_from(static_cast<::XrPb::EFromType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.EToType to = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_to(static_cast<::XrPb::EToType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int64 get_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_get_id(&has_bits);
          get_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemLogInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.ItemLogInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 type = 1;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint32 id = 2;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // optional int32 new_val = 3;
  if (_internal_has_new_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_new_val(), target);
  }

  // optional int32 old_val = 4;
  if (_internal_has_old_val()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_old_val(), target);
  }

  // optional .XrPb.EFromType from = 5;
  if (_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_from(), target);
  }

  // optional .XrPb.EToType to = 6;
  if (_internal_has_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_to(), target);
  }

  // optional int64 get_id = 7;
  if (_internal_has_get_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_get_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.ItemLogInfo)
  return target;
}

size_t ItemLogInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.ItemLogInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional int32 new_val = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_new_val());
    }

    // optional int32 old_val = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_old_val());
    }

    // optional .XrPb.EFromType from = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_from());
    }

    // optional .XrPb.EToType to = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_to());
    }

    // optional int64 get_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_get_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemLogInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemLogInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemLogInfo::GetClassData() const { return &_class_data_; }

void ItemLogInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemLogInfo *>(to)->MergeFrom(
      static_cast<const ItemLogInfo &>(from));
}


void ItemLogInfo::MergeFrom(const ItemLogInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.ItemLogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_val_ = from.new_val_;
    }
    if (cached_has_bits & 0x00000008u) {
      old_val_ = from.old_val_;
    }
    if (cached_has_bits & 0x00000010u) {
      from_ = from.from_;
    }
    if (cached_has_bits & 0x00000020u) {
      to_ = from.to_;
    }
    if (cached_has_bits & 0x00000040u) {
      get_id_ = from.get_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemLogInfo::CopyFrom(const ItemLogInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.ItemLogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemLogInfo::IsInitialized() const {
  return true;
}

void ItemLogInfo::InternalSwap(ItemLogInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemLogInfo, get_id_)
      + sizeof(ItemLogInfo::get_id_)
      - PROTOBUF_FIELD_OFFSET(ItemLogInfo, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemLogInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[4]);
}

// ===================================================================

class Msg_LOG_RoleItem::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_LOG_RoleItem>()._has_bits_);
  static const ::XrPb::LogRoleBase& role(const Msg_LOG_RoleItem* msg);
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::XrPb::ItemLogInfo& items(const Msg_LOG_RoleItem* msg);
};

const ::XrPb::LogRoleBase&
Msg_LOG_RoleItem::_Internal::role(const Msg_LOG_RoleItem* msg) {
  return *msg->role_;
}
const ::XrPb::ItemLogInfo&
Msg_LOG_RoleItem::_Internal::items(const Msg_LOG_RoleItem* msg) {
  return *msg->items_;
}
Msg_LOG_RoleItem::Msg_LOG_RoleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_LOG_RoleItem)
}
Msg_LOG_RoleItem::Msg_LOG_RoleItem(const Msg_LOG_RoleItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_comment()) {
    comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_role()) {
    role_ = new ::XrPb::LogRoleBase(*from.role_);
  } else {
    role_ = nullptr;
  }
  if (from._internal_has_items()) {
    items_ = new ::XrPb::ItemLogInfo(*from.items_);
  } else {
    items_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_LOG_RoleItem)
}

inline void Msg_LOG_RoleItem::SharedCtor() {
comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&items_) -
    reinterpret_cast<char*>(&role_)) + sizeof(items_));
}

Msg_LOG_RoleItem::~Msg_LOG_RoleItem() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_LOG_RoleItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_LOG_RoleItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete role_;
  if (this != internal_default_instance()) delete items_;
}

void Msg_LOG_RoleItem::ArenaDtor(void* object) {
  Msg_LOG_RoleItem* _this = reinterpret_cast< Msg_LOG_RoleItem* >(object);
  (void)_this;
}
void Msg_LOG_RoleItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_LOG_RoleItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_LOG_RoleItem::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_LOG_RoleItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    comment_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  if (GetArenaForAllocation() == nullptr && items_ != nullptr) {
    delete items_;
  }
  items_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_LOG_RoleItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.LogRoleBase role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_LOG_RoleItem.comment"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.ItemLogInfo items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_items(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_LOG_RoleItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_LOG_RoleItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // optional string comment = 2;
  if (_internal_has_comment()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_LOG_RoleItem.comment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comment(), target);
  }

  // .XrPb.ItemLogInfo items = 3;
  if (this->_internal_has_items()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::items(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_LOG_RoleItem)
  return target;
}

size_t Msg_LOG_RoleItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_LOG_RoleItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string comment = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // .XrPb.ItemLogInfo items = 3;
  if (this->_internal_has_items()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *items_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_LOG_RoleItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_LOG_RoleItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_LOG_RoleItem::GetClassData() const { return &_class_data_; }

void Msg_LOG_RoleItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_LOG_RoleItem *>(to)->MergeFrom(
      static_cast<const Msg_LOG_RoleItem &>(from));
}


void Msg_LOG_RoleItem::MergeFrom(const Msg_LOG_RoleItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_LOG_RoleItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_comment()) {
    _internal_set_comment(from._internal_comment());
  }
  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::LogRoleBase::MergeFrom(from._internal_role());
  }
  if (from._internal_has_items()) {
    _internal_mutable_items()->::XrPb::ItemLogInfo::MergeFrom(from._internal_items());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_LOG_RoleItem::CopyFrom(const Msg_LOG_RoleItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_LOG_RoleItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_LOG_RoleItem::IsInitialized() const {
  return true;
}

void Msg_LOG_RoleItem::InternalSwap(Msg_LOG_RoleItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &comment_, lhs_arena,
      &other->comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_LOG_RoleItem, items_)
      + sizeof(Msg_LOG_RoleItem::items_)
      - PROTOBUF_FIELD_OFFSET(Msg_LOG_RoleItem, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_LOG_RoleItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[5]);
}

// ===================================================================

class Msg_LOG_RoleProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_LOG_RoleProgress>()._has_bits_);
  static const ::XrPb::LogRoleBase& role(const Msg_LOG_RoleProgress* msg);
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::XrPb::LogRoleBase&
Msg_LOG_RoleProgress::_Internal::role(const Msg_LOG_RoleProgress* msg) {
  return *msg->role_;
}
Msg_LOG_RoleProgress::Msg_LOG_RoleProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_LOG_RoleProgress)
}
Msg_LOG_RoleProgress::Msg_LOG_RoleProgress(const Msg_LOG_RoleProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::XrPb::LogRoleBase(*from.role_);
  } else {
    role_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&type_)) + sizeof(progress_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_LOG_RoleProgress)
}

inline void Msg_LOG_RoleProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&role_)) + sizeof(progress_));
}

Msg_LOG_RoleProgress::~Msg_LOG_RoleProgress() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_LOG_RoleProgress)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_LOG_RoleProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void Msg_LOG_RoleProgress::ArenaDtor(void* object) {
  Msg_LOG_RoleProgress* _this = reinterpret_cast< Msg_LOG_RoleProgress* >(object);
  (void)_this;
}
void Msg_LOG_RoleProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_LOG_RoleProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_LOG_RoleProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_LOG_RoleProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  type_ = 0;
  progress_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_LOG_RoleProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.LogRoleBase role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.ELogProgressType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::XrPb::ELogProgressType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_LOG_RoleProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_LOG_RoleProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // .XrPb.ELogProgressType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional uint32 progress = 3;
  if (_internal_has_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_LOG_RoleProgress)
  return target;
}

size_t Msg_LOG_RoleProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_LOG_RoleProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // .XrPb.ELogProgressType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // optional uint32 progress = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_progress());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_LOG_RoleProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_LOG_RoleProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_LOG_RoleProgress::GetClassData() const { return &_class_data_; }

void Msg_LOG_RoleProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_LOG_RoleProgress *>(to)->MergeFrom(
      static_cast<const Msg_LOG_RoleProgress &>(from));
}


void Msg_LOG_RoleProgress::MergeFrom(const Msg_LOG_RoleProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_LOG_RoleProgress)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::LogRoleBase::MergeFrom(from._internal_role());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_has_progress()) {
    _internal_set_progress(from._internal_progress());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_LOG_RoleProgress::CopyFrom(const Msg_LOG_RoleProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_LOG_RoleProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_LOG_RoleProgress::IsInitialized() const {
  return true;
}

void Msg_LOG_RoleProgress::InternalSwap(Msg_LOG_RoleProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_LOG_RoleProgress, progress_)
      + sizeof(Msg_LOG_RoleProgress::progress_)
      - PROTOBUF_FIELD_OFFSET(Msg_LOG_RoleProgress, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_LOG_RoleProgress::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[6]);
}

// ===================================================================

class Msg_LOG_RoleAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_LOG_RoleAttribute>()._has_bits_);
  static const ::XrPb::LogRoleBase& role(const Msg_LOG_RoleAttribute* msg);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_config_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::XrPb::LogRoleBase&
Msg_LOG_RoleAttribute::_Internal::role(const Msg_LOG_RoleAttribute* msg) {
  return *msg->role_;
}
Msg_LOG_RoleAttribute::Msg_LOG_RoleAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_LOG_RoleAttribute)
}
Msg_LOG_RoleAttribute::Msg_LOG_RoleAttribute(const Msg_LOG_RoleAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::XrPb::LogRoleBase(*from.role_);
  } else {
    role_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&config_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(config_id_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_LOG_RoleAttribute)
}

inline void Msg_LOG_RoleAttribute::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&config_id_) -
    reinterpret_cast<char*>(&role_)) + sizeof(config_id_));
}

Msg_LOG_RoleAttribute::~Msg_LOG_RoleAttribute() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_LOG_RoleAttribute)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_LOG_RoleAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void Msg_LOG_RoleAttribute::ArenaDtor(void* object) {
  Msg_LOG_RoleAttribute* _this = reinterpret_cast< Msg_LOG_RoleAttribute* >(object);
  (void)_this;
}
void Msg_LOG_RoleAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_LOG_RoleAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_LOG_RoleAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_LOG_RoleAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  type_ = 0;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&config_id_) -
        reinterpret_cast<char*>(&level_)) + sizeof(config_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_LOG_RoleAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.LogRoleBase role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.ELogAttrType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::XrPb::ELogAttrType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 exp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_exp(&has_bits);
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.EFromType from = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_from(static_cast<::XrPb::EFromType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 config_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_config_id(&has_bits);
          config_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_LOG_RoleAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_LOG_RoleAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // .XrPb.ELogAttrType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional uint32 level = 3;
  if (_internal_has_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional uint32 id = 4;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_id(), target);
  }

  // optional uint32 exp = 5;
  if (_internal_has_exp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_exp(), target);
  }

  // optional .XrPb.EFromType from = 6;
  if (_internal_has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_from(), target);
  }

  // optional uint32 config_id = 7;
  if (_internal_has_config_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_config_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_LOG_RoleAttribute)
  return target;
}

size_t Msg_LOG_RoleAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_LOG_RoleAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // .XrPb.ELogAttrType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

    // optional uint32 id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional uint32 exp = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_exp());
    }

    // optional .XrPb.EFromType from = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_from());
    }

    // optional uint32 config_id = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_config_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_LOG_RoleAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_LOG_RoleAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_LOG_RoleAttribute::GetClassData() const { return &_class_data_; }

void Msg_LOG_RoleAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_LOG_RoleAttribute *>(to)->MergeFrom(
      static_cast<const Msg_LOG_RoleAttribute &>(from));
}


void Msg_LOG_RoleAttribute::MergeFrom(const Msg_LOG_RoleAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_LOG_RoleAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::LogRoleBase::MergeFrom(from._internal_role());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      exp_ = from.exp_;
    }
    if (cached_has_bits & 0x00000008u) {
      from_ = from.from_;
    }
    if (cached_has_bits & 0x00000010u) {
      config_id_ = from.config_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_LOG_RoleAttribute::CopyFrom(const Msg_LOG_RoleAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_LOG_RoleAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_LOG_RoleAttribute::IsInitialized() const {
  return true;
}

void Msg_LOG_RoleAttribute::InternalSwap(Msg_LOG_RoleAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_LOG_RoleAttribute, config_id_)
      + sizeof(Msg_LOG_RoleAttribute::config_id_)
      - PROTOBUF_FIELD_OFFSET(Msg_LOG_RoleAttribute, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_LOG_RoleAttribute::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[7]);
}

// ===================================================================

class Msg_LOG_RoleFriend::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_LOG_RoleFriend>()._has_bits_);
  static const ::XrPb::LogRoleBase& role(const Msg_LOG_RoleFriend* msg);
  static void set_has_friend_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::XrPb::LogRoleBase&
Msg_LOG_RoleFriend::_Internal::role(const Msg_LOG_RoleFriend* msg) {
  return *msg->role_;
}
Msg_LOG_RoleFriend::Msg_LOG_RoleFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_LOG_RoleFriend)
}
Msg_LOG_RoleFriend::Msg_LOG_RoleFriend(const Msg_LOG_RoleFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::XrPb::LogRoleBase(*from.role_);
  } else {
    role_ = nullptr;
  }
  ::memcpy(&friend_id_, &from.friend_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&friend_id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_LOG_RoleFriend)
}

inline void Msg_LOG_RoleFriend::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&role_)) + sizeof(type_));
}

Msg_LOG_RoleFriend::~Msg_LOG_RoleFriend() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_LOG_RoleFriend)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_LOG_RoleFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void Msg_LOG_RoleFriend::ArenaDtor(void* object) {
  Msg_LOG_RoleFriend* _this = reinterpret_cast< Msg_LOG_RoleFriend* >(object);
  (void)_this;
}
void Msg_LOG_RoleFriend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_LOG_RoleFriend::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_LOG_RoleFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_LOG_RoleFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  friend_id_ = int64_t{0};
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_LOG_RoleFriend::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.LogRoleBase role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.ELogFriendType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::XrPb::ELogFriendType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int64 friend_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_friend_id(&has_bits);
          friend_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_LOG_RoleFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_LOG_RoleFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // .XrPb.ELogFriendType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional int64 friend_id = 3;
  if (_internal_has_friend_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_friend_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_LOG_RoleFriend)
  return target;
}

size_t Msg_LOG_RoleFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_LOG_RoleFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // optional int64 friend_id = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_friend_id());
  }

  // .XrPb.ELogFriendType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_LOG_RoleFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_LOG_RoleFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_LOG_RoleFriend::GetClassData() const { return &_class_data_; }

void Msg_LOG_RoleFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_LOG_RoleFriend *>(to)->MergeFrom(
      static_cast<const Msg_LOG_RoleFriend &>(from));
}


void Msg_LOG_RoleFriend::MergeFrom(const Msg_LOG_RoleFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_LOG_RoleFriend)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::LogRoleBase::MergeFrom(from._internal_role());
  }
  if (from._internal_has_friend_id()) {
    _internal_set_friend_id(from._internal_friend_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_LOG_RoleFriend::CopyFrom(const Msg_LOG_RoleFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_LOG_RoleFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_LOG_RoleFriend::IsInitialized() const {
  return true;
}

void Msg_LOG_RoleFriend::InternalSwap(Msg_LOG_RoleFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_LOG_RoleFriend, type_)
      + sizeof(Msg_LOG_RoleFriend::type_)
      - PROTOBUF_FIELD_OFFSET(Msg_LOG_RoleFriend, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_LOG_RoleFriend::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[8]);
}

// ===================================================================

class Msg_LOG_GMRecord::_Internal {
 public:
  static const ::XrPb::LogRoleBase& role(const Msg_LOG_GMRecord* msg);
};

const ::XrPb::LogRoleBase&
Msg_LOG_GMRecord::_Internal::role(const Msg_LOG_GMRecord* msg) {
  return *msg->role_;
}
Msg_LOG_GMRecord::Msg_LOG_GMRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_LOG_GMRecord)
}
Msg_LOG_GMRecord::Msg_LOG_GMRecord(const Msg_LOG_GMRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gm().empty()) {
    gm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gm(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_role()) {
    role_ = new ::XrPb::LogRoleBase(*from.role_);
  } else {
    role_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_LOG_GMRecord)
}

inline void Msg_LOG_GMRecord::SharedCtor() {
gm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
role_ = nullptr;
}

Msg_LOG_GMRecord::~Msg_LOG_GMRecord() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_LOG_GMRecord)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_LOG_GMRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete role_;
}

void Msg_LOG_GMRecord::ArenaDtor(void* object) {
  Msg_LOG_GMRecord* _this = reinterpret_cast< Msg_LOG_GMRecord* >(object);
  (void)_this;
}
void Msg_LOG_GMRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_LOG_GMRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_LOG_GMRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_LOG_GMRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gm_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_LOG_GMRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.LogRoleBase role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string gm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_LOG_GMRecord.gm"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_LOG_GMRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_LOG_GMRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // string gm = 2;
  if (!this->_internal_gm().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gm().data(), static_cast<int>(this->_internal_gm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_LOG_GMRecord.gm");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_LOG_GMRecord)
  return target;
}

size_t Msg_LOG_GMRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_LOG_GMRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gm = 2;
  if (!this->_internal_gm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gm());
  }

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_LOG_GMRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_LOG_GMRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_LOG_GMRecord::GetClassData() const { return &_class_data_; }

void Msg_LOG_GMRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_LOG_GMRecord *>(to)->MergeFrom(
      static_cast<const Msg_LOG_GMRecord &>(from));
}


void Msg_LOG_GMRecord::MergeFrom(const Msg_LOG_GMRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_LOG_GMRecord)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gm().empty()) {
    _internal_set_gm(from._internal_gm());
  }
  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::LogRoleBase::MergeFrom(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_LOG_GMRecord::CopyFrom(const Msg_LOG_GMRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_LOG_GMRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_LOG_GMRecord::IsInitialized() const {
  return true;
}

void Msg_LOG_GMRecord::InternalSwap(Msg_LOG_GMRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gm_, lhs_arena,
      &other->gm_, rhs_arena
  );
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_LOG_GMRecord::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[9]);
}

// ===================================================================

class Msg_LOG_BuyMB::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_LOG_BuyMB>()._has_bits_);
  static const ::XrPb::LogRoleBase& role(const Msg_LOG_BuyMB* msg);
  static void set_has_llstart(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_llend(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::XrPb::LogRoleBase&
Msg_LOG_BuyMB::_Internal::role(const Msg_LOG_BuyMB* msg) {
  return *msg->role_;
}
Msg_LOG_BuyMB::Msg_LOG_BuyMB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_LOG_BuyMB)
}
Msg_LOG_BuyMB::Msg_LOG_BuyMB(const Msg_LOG_BuyMB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::XrPb::LogRoleBase(*from.role_);
  } else {
    role_ = nullptr;
  }
  ::memcpy(&uicharge_, &from.uicharge_,
    static_cast<size_t>(reinterpret_cast<char*>(&uistatus_) -
    reinterpret_cast<char*>(&uicharge_)) + sizeof(uistatus_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_LOG_BuyMB)
}

inline void Msg_LOG_BuyMB::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uistatus_) -
    reinterpret_cast<char*>(&role_)) + sizeof(uistatus_));
}

Msg_LOG_BuyMB::~Msg_LOG_BuyMB() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_LOG_BuyMB)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_LOG_BuyMB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void Msg_LOG_BuyMB::ArenaDtor(void* object) {
  Msg_LOG_BuyMB* _this = reinterpret_cast< Msg_LOG_BuyMB* >(object);
  (void)_this;
}
void Msg_LOG_BuyMB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_LOG_BuyMB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_LOG_BuyMB::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_LOG_BuyMB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  ::memset(&uicharge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uirmb_) -
      reinterpret_cast<char*>(&uicharge_)) + sizeof(uirmb_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&llstart_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&llend_) -
        reinterpret_cast<char*>(&llstart_)) + sizeof(llend_));
  }
  uistatus_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_LOG_BuyMB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.LogRoleBase role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiCharge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uicharge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiTotal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uitotal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 llOrderNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          llordernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiRmb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uirmb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiStatus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uistatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 llStart = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_llstart(&has_bits);
          llstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 llEnd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_llend(&has_bits);
          llend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_LOG_BuyMB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_LOG_BuyMB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // uint32 uiCharge = 2;
  if (this->_internal_uicharge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uicharge(), target);
  }

  // uint32 uiTotal = 3;
  if (this->_internal_uitotal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uitotal(), target);
  }

  // uint32 uiId = 4;
  if (this->_internal_uiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uiid(), target);
  }

  // int64 llOrderNum = 5;
  if (this->_internal_llordernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_llordernum(), target);
  }

  // uint32 uiRmb = 6;
  if (this->_internal_uirmb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_uirmb(), target);
  }

  // uint32 uiStatus = 7;
  if (this->_internal_uistatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_uistatus(), target);
  }

  // optional int64 llStart = 8;
  if (_internal_has_llstart()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_llstart(), target);
  }

  // optional int64 llEnd = 9;
  if (_internal_has_llend()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_llend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_LOG_BuyMB)
  return target;
}

size_t Msg_LOG_BuyMB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_LOG_BuyMB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // uint32 uiCharge = 2;
  if (this->_internal_uicharge() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uicharge());
  }

  // uint32 uiTotal = 3;
  if (this->_internal_uitotal() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uitotal());
  }

  // int64 llOrderNum = 5;
  if (this->_internal_llordernum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_llordernum());
  }

  // uint32 uiId = 4;
  if (this->_internal_uiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uiid());
  }

  // uint32 uiRmb = 6;
  if (this->_internal_uirmb() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uirmb());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 llStart = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_llstart());
    }

    // optional int64 llEnd = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_llend());
    }

  }
  // uint32 uiStatus = 7;
  if (this->_internal_uistatus() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uistatus());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_LOG_BuyMB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_LOG_BuyMB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_LOG_BuyMB::GetClassData() const { return &_class_data_; }

void Msg_LOG_BuyMB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_LOG_BuyMB *>(to)->MergeFrom(
      static_cast<const Msg_LOG_BuyMB &>(from));
}


void Msg_LOG_BuyMB::MergeFrom(const Msg_LOG_BuyMB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_LOG_BuyMB)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::LogRoleBase::MergeFrom(from._internal_role());
  }
  if (from._internal_uicharge() != 0) {
    _internal_set_uicharge(from._internal_uicharge());
  }
  if (from._internal_uitotal() != 0) {
    _internal_set_uitotal(from._internal_uitotal());
  }
  if (from._internal_llordernum() != 0) {
    _internal_set_llordernum(from._internal_llordernum());
  }
  if (from._internal_uiid() != 0) {
    _internal_set_uiid(from._internal_uiid());
  }
  if (from._internal_uirmb() != 0) {
    _internal_set_uirmb(from._internal_uirmb());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      llstart_ = from.llstart_;
    }
    if (cached_has_bits & 0x00000002u) {
      llend_ = from.llend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_uistatus() != 0) {
    _internal_set_uistatus(from._internal_uistatus());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_LOG_BuyMB::CopyFrom(const Msg_LOG_BuyMB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_LOG_BuyMB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_LOG_BuyMB::IsInitialized() const {
  return true;
}

void Msg_LOG_BuyMB::InternalSwap(Msg_LOG_BuyMB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_LOG_BuyMB, uistatus_)
      + sizeof(Msg_LOG_BuyMB::uistatus_)
      - PROTOBUF_FIELD_OFFSET(Msg_LOG_BuyMB, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_LOG_BuyMB::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[10]);
}

// ===================================================================

class Msg_LOG_BuyGP::_Internal {
 public:
  static const ::XrPb::LogRoleBase& role(const Msg_LOG_BuyGP* msg);
};

const ::XrPb::LogRoleBase&
Msg_LOG_BuyGP::_Internal::role(const Msg_LOG_BuyGP* msg) {
  return *msg->role_;
}
Msg_LOG_BuyGP::Msg_LOG_BuyGP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_LOG_BuyGP)
}
Msg_LOG_BuyGP::Msg_LOG_BuyGP(const Msg_LOG_BuyGP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::XrPb::LogRoleBase(*from.role_);
  } else {
    role_ = nullptr;
  }
  ::memcpy(&uisequence_, &from.uisequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&uicost_) -
    reinterpret_cast<char*>(&uisequence_)) + sizeof(uicost_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_LOG_BuyGP)
}

inline void Msg_LOG_BuyGP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uicost_) -
    reinterpret_cast<char*>(&role_)) + sizeof(uicost_));
}

Msg_LOG_BuyGP::~Msg_LOG_BuyGP() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_LOG_BuyGP)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_LOG_BuyGP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void Msg_LOG_BuyGP::ArenaDtor(void* object) {
  Msg_LOG_BuyGP* _this = reinterpret_cast< Msg_LOG_BuyGP* >(object);
  (void)_this;
}
void Msg_LOG_BuyGP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_LOG_BuyGP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_LOG_BuyGP::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_LOG_BuyGP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  ::memset(&uisequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uicost_) -
      reinterpret_cast<char*>(&uisequence_)) + sizeof(uicost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_LOG_BuyGP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.LogRoleBase role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiSequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uisequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiGp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uigp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiMb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uimb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiCost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uicost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_LOG_BuyGP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_LOG_BuyGP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // uint32 uiSequence = 2;
  if (this->_internal_uisequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uisequence(), target);
  }

  // uint32 uiGp = 3;
  if (this->_internal_uigp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uigp(), target);
  }

  // uint32 uiMb = 4;
  if (this->_internal_uimb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uimb(), target);
  }

  // uint32 uiCost = 5;
  if (this->_internal_uicost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uicost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_LOG_BuyGP)
  return target;
}

size_t Msg_LOG_BuyGP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_LOG_BuyGP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // uint32 uiSequence = 2;
  if (this->_internal_uisequence() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uisequence());
  }

  // uint32 uiGp = 3;
  if (this->_internal_uigp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uigp());
  }

  // uint32 uiMb = 4;
  if (this->_internal_uimb() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uimb());
  }

  // uint32 uiCost = 5;
  if (this->_internal_uicost() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uicost());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_LOG_BuyGP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_LOG_BuyGP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_LOG_BuyGP::GetClassData() const { return &_class_data_; }

void Msg_LOG_BuyGP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_LOG_BuyGP *>(to)->MergeFrom(
      static_cast<const Msg_LOG_BuyGP &>(from));
}


void Msg_LOG_BuyGP::MergeFrom(const Msg_LOG_BuyGP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_LOG_BuyGP)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::LogRoleBase::MergeFrom(from._internal_role());
  }
  if (from._internal_uisequence() != 0) {
    _internal_set_uisequence(from._internal_uisequence());
  }
  if (from._internal_uigp() != 0) {
    _internal_set_uigp(from._internal_uigp());
  }
  if (from._internal_uimb() != 0) {
    _internal_set_uimb(from._internal_uimb());
  }
  if (from._internal_uicost() != 0) {
    _internal_set_uicost(from._internal_uicost());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_LOG_BuyGP::CopyFrom(const Msg_LOG_BuyGP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_LOG_BuyGP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_LOG_BuyGP::IsInitialized() const {
  return true;
}

void Msg_LOG_BuyGP::InternalSwap(Msg_LOG_BuyGP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_LOG_BuyGP, uicost_)
      + sizeof(Msg_LOG_BuyGP::uicost_)
      - PROTOBUF_FIELD_OFFSET(Msg_LOG_BuyGP, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_LOG_BuyGP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[11]);
}

// ===================================================================

class Msg_Log_RecordOnline::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_Log_RecordOnline>()._has_bits_);
  static void set_has_online_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_platid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Msg_Log_RecordOnline::Msg_Log_RecordOnline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_Log_RecordOnline)
}
Msg_Log_RecordOnline::Msg_Log_RecordOnline(const Msg_Log_RecordOnline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&areanno_, &from.areanno_,
    static_cast<size_t>(reinterpret_cast<char*>(&platid_) -
    reinterpret_cast<char*>(&areanno_)) + sizeof(platid_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_Log_RecordOnline)
}

inline void Msg_Log_RecordOnline::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&areanno_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&platid_) -
    reinterpret_cast<char*>(&areanno_)) + sizeof(platid_));
}

Msg_Log_RecordOnline::~Msg_Log_RecordOnline() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_Log_RecordOnline)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_Log_RecordOnline::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_Log_RecordOnline::ArenaDtor(void* object) {
  Msg_Log_RecordOnline* _this = reinterpret_cast< Msg_Log_RecordOnline* >(object);
  (void)_this;
}
void Msg_Log_RecordOnline::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_Log_RecordOnline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_Log_RecordOnline::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_Log_RecordOnline)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  areanno_ = 0u;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&online_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&platid_) -
        reinterpret_cast<char*>(&online_num_)) + sizeof(platid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_Log_RecordOnline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 areanno = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          areanno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 online_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_online_num(&has_bits);
          online_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 platid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_platid(&has_bits);
          platid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_Log_RecordOnline::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_Log_RecordOnline)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 areanno = 1;
  if (this->_internal_areanno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_areanno(), target);
  }

  // optional uint32 online_num = 2;
  if (_internal_has_online_num()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_online_num(), target);
  }

  // optional int64 time = 3;
  if (_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  // optional uint32 platid = 4;
  if (_internal_has_platid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_platid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_Log_RecordOnline)
  return target;
}

size_t Msg_Log_RecordOnline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_Log_RecordOnline)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 areanno = 1;
  if (this->_internal_areanno() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_areanno());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 online_num = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_online_num());
    }

    // optional int64 time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_time());
    }

    // optional uint32 platid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_platid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_Log_RecordOnline::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_Log_RecordOnline::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_Log_RecordOnline::GetClassData() const { return &_class_data_; }

void Msg_Log_RecordOnline::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_Log_RecordOnline *>(to)->MergeFrom(
      static_cast<const Msg_Log_RecordOnline &>(from));
}


void Msg_Log_RecordOnline::MergeFrom(const Msg_Log_RecordOnline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_Log_RecordOnline)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_areanno() != 0) {
    _internal_set_areanno(from._internal_areanno());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      online_num_ = from.online_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000004u) {
      platid_ = from.platid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_Log_RecordOnline::CopyFrom(const Msg_Log_RecordOnline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_Log_RecordOnline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Log_RecordOnline::IsInitialized() const {
  return true;
}

void Msg_Log_RecordOnline::InternalSwap(Msg_Log_RecordOnline* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_Log_RecordOnline, platid_)
      + sizeof(Msg_Log_RecordOnline::platid_)
      - PROTOBUF_FIELD_OFFSET(Msg_Log_RecordOnline, areanno_)>(
          reinterpret_cast<char*>(&areanno_),
          reinterpret_cast<char*>(&other->areanno_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Log_RecordOnline::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[12]);
}

// ===================================================================

class Msg_Log_CreateRole::_Internal {
 public:
  static const ::XrPb::LogRoleBase& role(const Msg_Log_CreateRole* msg);
};

const ::XrPb::LogRoleBase&
Msg_Log_CreateRole::_Internal::role(const Msg_Log_CreateRole* msg) {
  return *msg->role_;
}
Msg_Log_CreateRole::Msg_Log_CreateRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_Log_CreateRole)
}
Msg_Log_CreateRole::Msg_Log_CreateRole(const Msg_Log_CreateRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rolename().empty()) {
    rolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rolename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_role()) {
    role_ = new ::XrPb::LogRoleBase(*from.role_);
  } else {
    role_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_Log_CreateRole)
}

inline void Msg_Log_CreateRole::SharedCtor() {
rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
role_ = nullptr;
}

Msg_Log_CreateRole::~Msg_Log_CreateRole() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_Log_CreateRole)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_Log_CreateRole::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete role_;
}

void Msg_Log_CreateRole::ArenaDtor(void* object) {
  Msg_Log_CreateRole* _this = reinterpret_cast< Msg_Log_CreateRole* >(object);
  (void)_this;
}
void Msg_Log_CreateRole::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_Log_CreateRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_Log_CreateRole::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_Log_CreateRole)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rolename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_Log_CreateRole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.LogRoleBase role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rolename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_Log_CreateRole.rolename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_Log_CreateRole::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_Log_CreateRole)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // string rolename = 2;
  if (!this->_internal_rolename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rolename().data(), static_cast<int>(this->_internal_rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_Log_CreateRole.rolename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rolename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_Log_CreateRole)
  return target;
}

size_t Msg_Log_CreateRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_Log_CreateRole)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rolename = 2;
  if (!this->_internal_rolename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rolename());
  }

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_Log_CreateRole::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_Log_CreateRole::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_Log_CreateRole::GetClassData() const { return &_class_data_; }

void Msg_Log_CreateRole::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_Log_CreateRole *>(to)->MergeFrom(
      static_cast<const Msg_Log_CreateRole &>(from));
}


void Msg_Log_CreateRole::MergeFrom(const Msg_Log_CreateRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_Log_CreateRole)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rolename().empty()) {
    _internal_set_rolename(from._internal_rolename());
  }
  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::LogRoleBase::MergeFrom(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_Log_CreateRole::CopyFrom(const Msg_Log_CreateRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_Log_CreateRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Log_CreateRole::IsInitialized() const {
  return true;
}

void Msg_Log_CreateRole::InternalSwap(Msg_Log_CreateRole* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rolename_, lhs_arena,
      &other->rolename_, rhs_arena
  );
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Log_CreateRole::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[13]);
}

// ===================================================================

class Msg_Log_ModifyRoleName::_Internal {
 public:
  static const ::XrPb::LogRoleBase& role(const Msg_Log_ModifyRoleName* msg);
};

const ::XrPb::LogRoleBase&
Msg_Log_ModifyRoleName::_Internal::role(const Msg_Log_ModifyRoleName* msg) {
  return *msg->role_;
}
Msg_Log_ModifyRoleName::Msg_Log_ModifyRoleName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_Log_ModifyRoleName)
}
Msg_Log_ModifyRoleName::Msg_Log_ModifyRoleName(const Msg_Log_ModifyRoleName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rolename().empty()) {
    rolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rolename(), 
      GetArenaForAllocation());
  }
  old_rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    old_rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_old_rolename().empty()) {
    old_rolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_old_rolename(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_role()) {
    role_ = new ::XrPb::LogRoleBase(*from.role_);
  } else {
    role_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_Log_ModifyRoleName)
}

inline void Msg_Log_ModifyRoleName::SharedCtor() {
rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
old_rolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  old_rolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
role_ = nullptr;
}

Msg_Log_ModifyRoleName::~Msg_Log_ModifyRoleName() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_Log_ModifyRoleName)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_Log_ModifyRoleName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  old_rolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete role_;
}

void Msg_Log_ModifyRoleName::ArenaDtor(void* object) {
  Msg_Log_ModifyRoleName* _this = reinterpret_cast< Msg_Log_ModifyRoleName* >(object);
  (void)_this;
}
void Msg_Log_ModifyRoleName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_Log_ModifyRoleName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_Log_ModifyRoleName::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_Log_ModifyRoleName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rolename_.ClearToEmpty();
  old_rolename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_Log_ModifyRoleName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.LogRoleBase role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string rolename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_Log_ModifyRoleName.rolename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string old_rolename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_old_rolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_Log_ModifyRoleName.old_rolename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_Log_ModifyRoleName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_Log_ModifyRoleName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // string rolename = 2;
  if (!this->_internal_rolename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rolename().data(), static_cast<int>(this->_internal_rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_Log_ModifyRoleName.rolename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rolename(), target);
  }

  // string old_rolename = 3;
  if (!this->_internal_old_rolename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_old_rolename().data(), static_cast<int>(this->_internal_old_rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_Log_ModifyRoleName.old_rolename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_old_rolename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_Log_ModifyRoleName)
  return target;
}

size_t Msg_Log_ModifyRoleName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_Log_ModifyRoleName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rolename = 2;
  if (!this->_internal_rolename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rolename());
  }

  // string old_rolename = 3;
  if (!this->_internal_old_rolename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_old_rolename());
  }

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_Log_ModifyRoleName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_Log_ModifyRoleName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_Log_ModifyRoleName::GetClassData() const { return &_class_data_; }

void Msg_Log_ModifyRoleName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_Log_ModifyRoleName *>(to)->MergeFrom(
      static_cast<const Msg_Log_ModifyRoleName &>(from));
}


void Msg_Log_ModifyRoleName::MergeFrom(const Msg_Log_ModifyRoleName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_Log_ModifyRoleName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rolename().empty()) {
    _internal_set_rolename(from._internal_rolename());
  }
  if (!from._internal_old_rolename().empty()) {
    _internal_set_old_rolename(from._internal_old_rolename());
  }
  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::LogRoleBase::MergeFrom(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_Log_ModifyRoleName::CopyFrom(const Msg_Log_ModifyRoleName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_Log_ModifyRoleName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Log_ModifyRoleName::IsInitialized() const {
  return true;
}

void Msg_Log_ModifyRoleName::InternalSwap(Msg_Log_ModifyRoleName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rolename_, lhs_arena,
      &other->rolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &old_rolename_, lhs_arena,
      &other->old_rolename_, rhs_arena
  );
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Log_ModifyRoleName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[14]);
}

// ===================================================================

class Msg_LOG_RoleChatMsg::_Internal {
 public:
  static const ::XrPb::LogRoleBase& role(const Msg_LOG_RoleChatMsg* msg);
};

const ::XrPb::LogRoleBase&
Msg_LOG_RoleChatMsg::_Internal::role(const Msg_LOG_RoleChatMsg* msg) {
  return *msg->role_;
}
Msg_LOG_RoleChatMsg::Msg_LOG_RoleChatMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_LOG_RoleChatMsg)
}
Msg_LOG_RoleChatMsg::Msg_LOG_RoleChatMsg(const Msg_LOG_RoleChatMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_role()) {
    role_ = new ::XrPb::LogRoleBase(*from.role_);
  } else {
    role_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_LOG_RoleChatMsg)
}

inline void Msg_LOG_RoleChatMsg::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&role_)) + sizeof(type_));
}

Msg_LOG_RoleChatMsg::~Msg_LOG_RoleChatMsg() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_LOG_RoleChatMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_LOG_RoleChatMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete role_;
}

void Msg_LOG_RoleChatMsg::ArenaDtor(void* object) {
  Msg_LOG_RoleChatMsg* _this = reinterpret_cast< Msg_LOG_RoleChatMsg* >(object);
  (void)_this;
}
void Msg_LOG_RoleChatMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_LOG_RoleChatMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_LOG_RoleChatMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_LOG_RoleChatMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_LOG_RoleChatMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.LogRoleBase role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.EChatType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::XrPb::EChatType>(val));
        } else
          goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_LOG_RoleChatMsg.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_LOG_RoleChatMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_LOG_RoleChatMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  // .XrPb.EChatType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_LOG_RoleChatMsg.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_LOG_RoleChatMsg)
  return target;
}

size_t Msg_LOG_RoleChatMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_LOG_RoleChatMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .XrPb.LogRoleBase role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  // .XrPb.EChatType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_LOG_RoleChatMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_LOG_RoleChatMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_LOG_RoleChatMsg::GetClassData() const { return &_class_data_; }

void Msg_LOG_RoleChatMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_LOG_RoleChatMsg *>(to)->MergeFrom(
      static_cast<const Msg_LOG_RoleChatMsg &>(from));
}


void Msg_LOG_RoleChatMsg::MergeFrom(const Msg_LOG_RoleChatMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_LOG_RoleChatMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::LogRoleBase::MergeFrom(from._internal_role());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_LOG_RoleChatMsg::CopyFrom(const Msg_LOG_RoleChatMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_LOG_RoleChatMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_LOG_RoleChatMsg::IsInitialized() const {
  return true;
}

void Msg_LOG_RoleChatMsg::InternalSwap(Msg_LOG_RoleChatMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_LOG_RoleChatMsg, type_)
      + sizeof(Msg_LOG_RoleChatMsg::type_)
      - PROTOBUF_FIELD_OFFSET(Msg_LOG_RoleChatMsg, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_LOG_RoleChatMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgLog_2eproto_getter, &descriptor_table_server_2fMsgLog_2eproto_once,
      file_level_metadata_server_2fMsgLog_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XrPb::MsgSvrMod_Log* Arena::CreateMaybeMessage< ::XrPb::MsgSvrMod_Log >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::MsgSvrMod_Log >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::LogRoleBase* Arena::CreateMaybeMessage< ::XrPb::LogRoleBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::LogRoleBase >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_Log_UpLoadFile* Arena::CreateMaybeMessage< ::XrPb::Msg_Log_UpLoadFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_Log_UpLoadFile >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_LOG_RoleLoginLogout* Arena::CreateMaybeMessage< ::XrPb::Msg_LOG_RoleLoginLogout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_LOG_RoleLoginLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::ItemLogInfo* Arena::CreateMaybeMessage< ::XrPb::ItemLogInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::ItemLogInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_LOG_RoleItem* Arena::CreateMaybeMessage< ::XrPb::Msg_LOG_RoleItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_LOG_RoleItem >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_LOG_RoleProgress* Arena::CreateMaybeMessage< ::XrPb::Msg_LOG_RoleProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_LOG_RoleProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_LOG_RoleAttribute* Arena::CreateMaybeMessage< ::XrPb::Msg_LOG_RoleAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_LOG_RoleAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_LOG_RoleFriend* Arena::CreateMaybeMessage< ::XrPb::Msg_LOG_RoleFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_LOG_RoleFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_LOG_GMRecord* Arena::CreateMaybeMessage< ::XrPb::Msg_LOG_GMRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_LOG_GMRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_LOG_BuyMB* Arena::CreateMaybeMessage< ::XrPb::Msg_LOG_BuyMB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_LOG_BuyMB >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_LOG_BuyGP* Arena::CreateMaybeMessage< ::XrPb::Msg_LOG_BuyGP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_LOG_BuyGP >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_Log_RecordOnline* Arena::CreateMaybeMessage< ::XrPb::Msg_Log_RecordOnline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_Log_RecordOnline >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_Log_CreateRole* Arena::CreateMaybeMessage< ::XrPb::Msg_Log_CreateRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_Log_CreateRole >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_Log_ModifyRoleName* Arena::CreateMaybeMessage< ::XrPb::Msg_Log_ModifyRoleName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_Log_ModifyRoleName >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_LOG_RoleChatMsg* Arena::CreateMaybeMessage< ::XrPb::Msg_LOG_RoleChatMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_LOG_RoleChatMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
