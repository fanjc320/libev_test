// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/MsgFriendGS.proto

#include "server/MsgFriendGS.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace XrPb {
constexpr MsgSvrMod_FriendGS::MsgSvrMod_FriendGS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MsgSvrMod_FriendGSDefaultTypeInternal {
  constexpr MsgSvrMod_FriendGSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgSvrMod_FriendGSDefaultTypeInternal() {}
  union {
    MsgSvrMod_FriendGS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgSvrMod_FriendGSDefaultTypeInternal _MsgSvrMod_FriendGS_default_instance_;
constexpr Msg_LoginFriendServer::Msg_LoginFriendServer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(nullptr){}
struct Msg_LoginFriendServerDefaultTypeInternal {
  constexpr Msg_LoginFriendServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_LoginFriendServerDefaultTypeInternal() {}
  union {
    Msg_LoginFriendServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_LoginFriendServerDefaultTypeInternal _Msg_LoginFriendServer_default_instance_;
constexpr Msg_LogoutFriendServer::Msg_LogoutFriendServer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_id_(int64_t{0}){}
struct Msg_LogoutFriendServerDefaultTypeInternal {
  constexpr Msg_LogoutFriendServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_LogoutFriendServerDefaultTypeInternal() {}
  union {
    Msg_LogoutFriendServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_LogoutFriendServerDefaultTypeInternal _Msg_LogoutFriendServer_default_instance_;
constexpr Msg_FriendPlayerInfoUpdate::Msg_FriendPlayerInfoUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(nullptr){}
struct Msg_FriendPlayerInfoUpdateDefaultTypeInternal {
  constexpr Msg_FriendPlayerInfoUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_FriendPlayerInfoUpdateDefaultTypeInternal() {}
  union {
    Msg_FriendPlayerInfoUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_FriendPlayerInfoUpdateDefaultTypeInternal _Msg_FriendPlayerInfoUpdate_default_instance_;
constexpr Msg_FriendInviteCondition::Msg_FriendInviteCondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_id_(int64_t{0})
  , type_(0)
  , value_(0u){}
struct Msg_FriendInviteConditionDefaultTypeInternal {
  constexpr Msg_FriendInviteConditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_FriendInviteConditionDefaultTypeInternal() {}
  union {
    Msg_FriendInviteCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_FriendInviteConditionDefaultTypeInternal _Msg_FriendInviteCondition_default_instance_;
constexpr Msg_GetOtherPlayerDataReq::Msg_GetOtherPlayerDataReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : check_id_(int64_t{0})
  , checked_id_(int64_t{0})
  , proto_id_(0u)
  , seq_id_(0u)
  , id_(0u){}
struct Msg_GetOtherPlayerDataReqDefaultTypeInternal {
  constexpr Msg_GetOtherPlayerDataReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_GetOtherPlayerDataReqDefaultTypeInternal() {}
  union {
    Msg_GetOtherPlayerDataReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_GetOtherPlayerDataReqDefaultTypeInternal _Msg_GetOtherPlayerDataReq_default_instance_;
constexpr Msg_GetOtherPlayerDataAck::Msg_GetOtherPlayerDataAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , check_id_(int64_t{0})
  , checked_id_(int64_t{0})
  , proto_id_(0u)
  , seq_id_(0u)
  , id_(0u)
  , ret_code_(0u){}
struct Msg_GetOtherPlayerDataAckDefaultTypeInternal {
  constexpr Msg_GetOtherPlayerDataAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_GetOtherPlayerDataAckDefaultTypeInternal() {}
  union {
    Msg_GetOtherPlayerDataAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_GetOtherPlayerDataAckDefaultTypeInternal _Msg_GetOtherPlayerDataAck_default_instance_;
}  // namespace XrPb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_2fMsgFriendGS_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_server_2fMsgFriendGS_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_2fMsgFriendGS_2eproto = nullptr;

const uint32_t TableStruct_server_2fMsgFriendGS_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::MsgSvrMod_FriendGS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LoginFriendServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LoginFriendServer, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LogoutFriendServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_LogoutFriendServer, acc_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_FriendPlayerInfoUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_FriendPlayerInfoUpdate, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_FriendInviteCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_FriendInviteCondition, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_FriendInviteCondition, type_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_FriendInviteCondition, value_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataReq, check_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataReq, checked_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataReq, proto_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataReq, seq_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataReq, id_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataAck, check_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataAck, checked_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataAck, proto_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataAck, seq_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataAck, id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataAck, ret_code_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GetOtherPlayerDataAck, data_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::XrPb::MsgSvrMod_FriendGS)},
  { 6, -1, -1, sizeof(::XrPb::Msg_LoginFriendServer)},
  { 13, -1, -1, sizeof(::XrPb::Msg_LogoutFriendServer)},
  { 20, -1, -1, sizeof(::XrPb::Msg_FriendPlayerInfoUpdate)},
  { 27, -1, -1, sizeof(::XrPb::Msg_FriendInviteCondition)},
  { 36, 47, -1, sizeof(::XrPb::Msg_GetOtherPlayerDataReq)},
  { 52, 65, -1, sizeof(::XrPb::Msg_GetOtherPlayerDataAck)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_MsgSvrMod_FriendGS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_LoginFriendServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_LogoutFriendServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_FriendPlayerInfoUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_FriendInviteCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_GetOtherPlayerDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_GetOtherPlayerDataAck_default_instance_),
};

const char descriptor_table_protodef_server_2fMsgFriendGS_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030server/MsgFriendGS.proto\022\004XrPb\032\031server"
  "/MsgSvrCommon.proto\"\340\001\n\022MsgSvrMod_Friend"
  "GS\"\311\001\n\005MsgId\022\014\n\010Msg_None\020\000\022\031\n\025Msg_LoginF"
  "riendServer\020\001\022\032\n\026Msg_LogoutFriendServer\020"
  "\002\022\036\n\032Msg_FriendPlayerInfoUpdate\020\003\022\035\n\031Msg"
  "_FriendInviteCondition\020\004\022\035\n\031Msg_GetOther"
  "PlayerDataReq\020\005\022\035\n\031Msg_GetOtherPlayerDat"
  "aAck\020\006\":\n\025Msg_LoginFriendServer\022!\n\004role\030"
  "\001 \001(\0132\023.XrPb.Svr_Role_Info\"(\n\026Msg_Logout"
  "FriendServer\022\016\n\006acc_id\030\001 \001(\003\"\?\n\032Msg_Frie"
  "ndPlayerInfoUpdate\022!\n\004role\030\001 \001(\0132\023.XrPb."
  "Svr_Role_Info\"H\n\031Msg_FriendInviteConditi"
  "on\022\016\n\006acc_id\030\001 \001(\003\022\014\n\004type\030\002 \001(\005\022\r\n\005valu"
  "e\030\003 \001(\r\"{\n\031Msg_GetOtherPlayerDataReq\022\020\n\010"
  "check_id\030\001 \001(\003\022\022\n\nchecked_id\030\002 \001(\003\022\020\n\010pr"
  "oto_id\030\003 \001(\r\022\016\n\006seq_id\030\004 \001(\r\022\017\n\002id\030\005 \001(\r"
  "H\000\210\001\001B\005\n\003_id\"\251\001\n\031Msg_GetOtherPlayerDataA"
  "ck\022\020\n\010check_id\030\001 \001(\003\022\022\n\nchecked_id\030\002 \001(\003"
  "\022\020\n\010proto_id\030\003 \001(\r\022\016\n\006seq_id\030\004 \001(\r\022\017\n\002id"
  "\030\005 \001(\rH\000\210\001\001\022\020\n\010ret_code\030\006 \001(\r\022\021\n\004data\030\007 "
  "\001(\014H\001\210\001\001B\005\n\003_idB\007\n\005_datab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_2fMsgFriendGS_2eproto_deps[1] = {
  &::descriptor_table_server_2fMsgSvrCommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_2fMsgFriendGS_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fMsgFriendGS_2eproto = {
  false, false, 832, descriptor_table_protodef_server_2fMsgFriendGS_2eproto, "server/MsgFriendGS.proto", 
  &descriptor_table_server_2fMsgFriendGS_2eproto_once, descriptor_table_server_2fMsgFriendGS_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_server_2fMsgFriendGS_2eproto::offsets,
  file_level_metadata_server_2fMsgFriendGS_2eproto, file_level_enum_descriptors_server_2fMsgFriendGS_2eproto, file_level_service_descriptors_server_2fMsgFriendGS_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_server_2fMsgFriendGS_2eproto_getter() {
  return &descriptor_table_server_2fMsgFriendGS_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_server_2fMsgFriendGS_2eproto(&descriptor_table_server_2fMsgFriendGS_2eproto);
namespace XrPb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgSvrMod_FriendGS_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fMsgFriendGS_2eproto);
  return file_level_enum_descriptors_server_2fMsgFriendGS_2eproto[0];
}
bool MsgSvrMod_FriendGS_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MsgSvrMod_FriendGS_MsgId MsgSvrMod_FriendGS::Msg_None;
constexpr MsgSvrMod_FriendGS_MsgId MsgSvrMod_FriendGS::Msg_LoginFriendServer;
constexpr MsgSvrMod_FriendGS_MsgId MsgSvrMod_FriendGS::Msg_LogoutFriendServer;
constexpr MsgSvrMod_FriendGS_MsgId MsgSvrMod_FriendGS::Msg_FriendPlayerInfoUpdate;
constexpr MsgSvrMod_FriendGS_MsgId MsgSvrMod_FriendGS::Msg_FriendInviteCondition;
constexpr MsgSvrMod_FriendGS_MsgId MsgSvrMod_FriendGS::Msg_GetOtherPlayerDataReq;
constexpr MsgSvrMod_FriendGS_MsgId MsgSvrMod_FriendGS::Msg_GetOtherPlayerDataAck;
constexpr MsgSvrMod_FriendGS_MsgId MsgSvrMod_FriendGS::MsgId_MIN;
constexpr MsgSvrMod_FriendGS_MsgId MsgSvrMod_FriendGS::MsgId_MAX;
constexpr int MsgSvrMod_FriendGS::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MsgSvrMod_FriendGS::_Internal {
 public:
};

MsgSvrMod_FriendGS::MsgSvrMod_FriendGS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.MsgSvrMod_FriendGS)
}
MsgSvrMod_FriendGS::MsgSvrMod_FriendGS(const MsgSvrMod_FriendGS& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.MsgSvrMod_FriendGS)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgSvrMod_FriendGS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgSvrMod_FriendGS::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgSvrMod_FriendGS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgFriendGS_2eproto_getter, &descriptor_table_server_2fMsgFriendGS_2eproto_once,
      file_level_metadata_server_2fMsgFriendGS_2eproto[0]);
}

// ===================================================================

class Msg_LoginFriendServer::_Internal {
 public:
  static const ::XrPb::Svr_Role_Info& role(const Msg_LoginFriendServer* msg);
};

const ::XrPb::Svr_Role_Info&
Msg_LoginFriendServer::_Internal::role(const Msg_LoginFriendServer* msg) {
  return *msg->role_;
}
void Msg_LoginFriendServer::clear_role() {
  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
Msg_LoginFriendServer::Msg_LoginFriendServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_LoginFriendServer)
}
Msg_LoginFriendServer::Msg_LoginFriendServer(const Msg_LoginFriendServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::XrPb::Svr_Role_Info(*from.role_);
  } else {
    role_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_LoginFriendServer)
}

inline void Msg_LoginFriendServer::SharedCtor() {
role_ = nullptr;
}

Msg_LoginFriendServer::~Msg_LoginFriendServer() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_LoginFriendServer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_LoginFriendServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void Msg_LoginFriendServer::ArenaDtor(void* object) {
  Msg_LoginFriendServer* _this = reinterpret_cast< Msg_LoginFriendServer* >(object);
  (void)_this;
}
void Msg_LoginFriendServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_LoginFriendServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_LoginFriendServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_LoginFriendServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_LoginFriendServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.Svr_Role_Info role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_LoginFriendServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_LoginFriendServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.Svr_Role_Info role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_LoginFriendServer)
  return target;
}

size_t Msg_LoginFriendServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_LoginFriendServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.Svr_Role_Info role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_LoginFriendServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_LoginFriendServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_LoginFriendServer::GetClassData() const { return &_class_data_; }

void Msg_LoginFriendServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_LoginFriendServer *>(to)->MergeFrom(
      static_cast<const Msg_LoginFriendServer &>(from));
}


void Msg_LoginFriendServer::MergeFrom(const Msg_LoginFriendServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_LoginFriendServer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::Svr_Role_Info::MergeFrom(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_LoginFriendServer::CopyFrom(const Msg_LoginFriendServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_LoginFriendServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_LoginFriendServer::IsInitialized() const {
  return true;
}

void Msg_LoginFriendServer::InternalSwap(Msg_LoginFriendServer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_LoginFriendServer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgFriendGS_2eproto_getter, &descriptor_table_server_2fMsgFriendGS_2eproto_once,
      file_level_metadata_server_2fMsgFriendGS_2eproto[1]);
}

// ===================================================================

class Msg_LogoutFriendServer::_Internal {
 public:
};

Msg_LogoutFriendServer::Msg_LogoutFriendServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_LogoutFriendServer)
}
Msg_LogoutFriendServer::Msg_LogoutFriendServer(const Msg_LogoutFriendServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acc_id_ = from.acc_id_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_LogoutFriendServer)
}

inline void Msg_LogoutFriendServer::SharedCtor() {
acc_id_ = int64_t{0};
}

Msg_LogoutFriendServer::~Msg_LogoutFriendServer() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_LogoutFriendServer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_LogoutFriendServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_LogoutFriendServer::ArenaDtor(void* object) {
  Msg_LogoutFriendServer* _this = reinterpret_cast< Msg_LogoutFriendServer* >(object);
  (void)_this;
}
void Msg_LogoutFriendServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_LogoutFriendServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_LogoutFriendServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_LogoutFriendServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acc_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_LogoutFriendServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_LogoutFriendServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_LogoutFriendServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_LogoutFriendServer)
  return target;
}

size_t Msg_LogoutFriendServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_LogoutFriendServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_LogoutFriendServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_LogoutFriendServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_LogoutFriendServer::GetClassData() const { return &_class_data_; }

void Msg_LogoutFriendServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_LogoutFriendServer *>(to)->MergeFrom(
      static_cast<const Msg_LogoutFriendServer &>(from));
}


void Msg_LogoutFriendServer::MergeFrom(const Msg_LogoutFriendServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_LogoutFriendServer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_LogoutFriendServer::CopyFrom(const Msg_LogoutFriendServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_LogoutFriendServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_LogoutFriendServer::IsInitialized() const {
  return true;
}

void Msg_LogoutFriendServer::InternalSwap(Msg_LogoutFriendServer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(acc_id_, other->acc_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_LogoutFriendServer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgFriendGS_2eproto_getter, &descriptor_table_server_2fMsgFriendGS_2eproto_once,
      file_level_metadata_server_2fMsgFriendGS_2eproto[2]);
}

// ===================================================================

class Msg_FriendPlayerInfoUpdate::_Internal {
 public:
  static const ::XrPb::Svr_Role_Info& role(const Msg_FriendPlayerInfoUpdate* msg);
};

const ::XrPb::Svr_Role_Info&
Msg_FriendPlayerInfoUpdate::_Internal::role(const Msg_FriendPlayerInfoUpdate* msg) {
  return *msg->role_;
}
void Msg_FriendPlayerInfoUpdate::clear_role() {
  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
}
Msg_FriendPlayerInfoUpdate::Msg_FriendPlayerInfoUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_FriendPlayerInfoUpdate)
}
Msg_FriendPlayerInfoUpdate::Msg_FriendPlayerInfoUpdate(const Msg_FriendPlayerInfoUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role()) {
    role_ = new ::XrPb::Svr_Role_Info(*from.role_);
  } else {
    role_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_FriendPlayerInfoUpdate)
}

inline void Msg_FriendPlayerInfoUpdate::SharedCtor() {
role_ = nullptr;
}

Msg_FriendPlayerInfoUpdate::~Msg_FriendPlayerInfoUpdate() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_FriendPlayerInfoUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_FriendPlayerInfoUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_;
}

void Msg_FriendPlayerInfoUpdate::ArenaDtor(void* object) {
  Msg_FriendPlayerInfoUpdate* _this = reinterpret_cast< Msg_FriendPlayerInfoUpdate* >(object);
  (void)_this;
}
void Msg_FriendPlayerInfoUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_FriendPlayerInfoUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_FriendPlayerInfoUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_FriendPlayerInfoUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_ != nullptr) {
    delete role_;
  }
  role_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_FriendPlayerInfoUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.Svr_Role_Info role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_FriendPlayerInfoUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_FriendPlayerInfoUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.Svr_Role_Info role = 1;
  if (this->_internal_has_role()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::role(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_FriendPlayerInfoUpdate)
  return target;
}

size_t Msg_FriendPlayerInfoUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_FriendPlayerInfoUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.Svr_Role_Info role = 1;
  if (this->_internal_has_role()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_FriendPlayerInfoUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_FriendPlayerInfoUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_FriendPlayerInfoUpdate::GetClassData() const { return &_class_data_; }

void Msg_FriendPlayerInfoUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_FriendPlayerInfoUpdate *>(to)->MergeFrom(
      static_cast<const Msg_FriendPlayerInfoUpdate &>(from));
}


void Msg_FriendPlayerInfoUpdate::MergeFrom(const Msg_FriendPlayerInfoUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_FriendPlayerInfoUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role()) {
    _internal_mutable_role()->::XrPb::Svr_Role_Info::MergeFrom(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_FriendPlayerInfoUpdate::CopyFrom(const Msg_FriendPlayerInfoUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_FriendPlayerInfoUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_FriendPlayerInfoUpdate::IsInitialized() const {
  return true;
}

void Msg_FriendPlayerInfoUpdate::InternalSwap(Msg_FriendPlayerInfoUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_FriendPlayerInfoUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgFriendGS_2eproto_getter, &descriptor_table_server_2fMsgFriendGS_2eproto_once,
      file_level_metadata_server_2fMsgFriendGS_2eproto[3]);
}

// ===================================================================

class Msg_FriendInviteCondition::_Internal {
 public:
};

Msg_FriendInviteCondition::Msg_FriendInviteCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_FriendInviteCondition)
}
Msg_FriendInviteCondition::Msg_FriendInviteCondition(const Msg_FriendInviteCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&acc_id_, &from.acc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&acc_id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_FriendInviteCondition)
}

inline void Msg_FriendInviteCondition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acc_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&acc_id_)) + sizeof(value_));
}

Msg_FriendInviteCondition::~Msg_FriendInviteCondition() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_FriendInviteCondition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_FriendInviteCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_FriendInviteCondition::ArenaDtor(void* object) {
  Msg_FriendInviteCondition* _this = reinterpret_cast< Msg_FriendInviteCondition* >(object);
  (void)_this;
}
void Msg_FriendInviteCondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_FriendInviteCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_FriendInviteCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_FriendInviteCondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&acc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&acc_id_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_FriendInviteCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_FriendInviteCondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_FriendInviteCondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 value = 3;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_FriendInviteCondition)
  return target;
}

size_t Msg_FriendInviteCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_FriendInviteCondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // uint32 value = 3;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_FriendInviteCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_FriendInviteCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_FriendInviteCondition::GetClassData() const { return &_class_data_; }

void Msg_FriendInviteCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_FriendInviteCondition *>(to)->MergeFrom(
      static_cast<const Msg_FriendInviteCondition &>(from));
}


void Msg_FriendInviteCondition::MergeFrom(const Msg_FriendInviteCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_FriendInviteCondition)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_FriendInviteCondition::CopyFrom(const Msg_FriendInviteCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_FriendInviteCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_FriendInviteCondition::IsInitialized() const {
  return true;
}

void Msg_FriendInviteCondition::InternalSwap(Msg_FriendInviteCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_FriendInviteCondition, value_)
      + sizeof(Msg_FriendInviteCondition::value_)
      - PROTOBUF_FIELD_OFFSET(Msg_FriendInviteCondition, acc_id_)>(
          reinterpret_cast<char*>(&acc_id_),
          reinterpret_cast<char*>(&other->acc_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_FriendInviteCondition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgFriendGS_2eproto_getter, &descriptor_table_server_2fMsgFriendGS_2eproto_once,
      file_level_metadata_server_2fMsgFriendGS_2eproto[4]);
}

// ===================================================================

class Msg_GetOtherPlayerDataReq::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_GetOtherPlayerDataReq>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Msg_GetOtherPlayerDataReq::Msg_GetOtherPlayerDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_GetOtherPlayerDataReq)
}
Msg_GetOtherPlayerDataReq::Msg_GetOtherPlayerDataReq(const Msg_GetOtherPlayerDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&check_id_, &from.check_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&check_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_GetOtherPlayerDataReq)
}

inline void Msg_GetOtherPlayerDataReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&check_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&check_id_)) + sizeof(id_));
}

Msg_GetOtherPlayerDataReq::~Msg_GetOtherPlayerDataReq() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_GetOtherPlayerDataReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_GetOtherPlayerDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_GetOtherPlayerDataReq::ArenaDtor(void* object) {
  Msg_GetOtherPlayerDataReq* _this = reinterpret_cast< Msg_GetOtherPlayerDataReq* >(object);
  (void)_this;
}
void Msg_GetOtherPlayerDataReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_GetOtherPlayerDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_GetOtherPlayerDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_GetOtherPlayerDataReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&check_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_id_) -
      reinterpret_cast<char*>(&check_id_)) + sizeof(seq_id_));
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GetOtherPlayerDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 check_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          check_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 checked_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          checked_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 proto_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          proto_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 seq_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          seq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_GetOtherPlayerDataReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_GetOtherPlayerDataReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 check_id = 1;
  if (this->_internal_check_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_check_id(), target);
  }

  // int64 checked_id = 2;
  if (this->_internal_checked_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_checked_id(), target);
  }

  // uint32 proto_id = 3;
  if (this->_internal_proto_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_proto_id(), target);
  }

  // uint32 seq_id = 4;
  if (this->_internal_seq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_seq_id(), target);
  }

  // optional uint32 id = 5;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_GetOtherPlayerDataReq)
  return target;
}

size_t Msg_GetOtherPlayerDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_GetOtherPlayerDataReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 check_id = 1;
  if (this->_internal_check_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_check_id());
  }

  // int64 checked_id = 2;
  if (this->_internal_checked_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_checked_id());
  }

  // uint32 proto_id = 3;
  if (this->_internal_proto_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_proto_id());
  }

  // uint32 seq_id = 4;
  if (this->_internal_seq_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seq_id());
  }

  // optional uint32 id = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_GetOtherPlayerDataReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_GetOtherPlayerDataReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_GetOtherPlayerDataReq::GetClassData() const { return &_class_data_; }

void Msg_GetOtherPlayerDataReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_GetOtherPlayerDataReq *>(to)->MergeFrom(
      static_cast<const Msg_GetOtherPlayerDataReq &>(from));
}


void Msg_GetOtherPlayerDataReq::MergeFrom(const Msg_GetOtherPlayerDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_GetOtherPlayerDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_check_id() != 0) {
    _internal_set_check_id(from._internal_check_id());
  }
  if (from._internal_checked_id() != 0) {
    _internal_set_checked_id(from._internal_checked_id());
  }
  if (from._internal_proto_id() != 0) {
    _internal_set_proto_id(from._internal_proto_id());
  }
  if (from._internal_seq_id() != 0) {
    _internal_set_seq_id(from._internal_seq_id());
  }
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_GetOtherPlayerDataReq::CopyFrom(const Msg_GetOtherPlayerDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_GetOtherPlayerDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GetOtherPlayerDataReq::IsInitialized() const {
  return true;
}

void Msg_GetOtherPlayerDataReq::InternalSwap(Msg_GetOtherPlayerDataReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_GetOtherPlayerDataReq, id_)
      + sizeof(Msg_GetOtherPlayerDataReq::id_)
      - PROTOBUF_FIELD_OFFSET(Msg_GetOtherPlayerDataReq, check_id_)>(
          reinterpret_cast<char*>(&check_id_),
          reinterpret_cast<char*>(&other->check_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GetOtherPlayerDataReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgFriendGS_2eproto_getter, &descriptor_table_server_2fMsgFriendGS_2eproto_once,
      file_level_metadata_server_2fMsgFriendGS_2eproto[5]);
}

// ===================================================================

class Msg_GetOtherPlayerDataAck::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_GetOtherPlayerDataAck>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Msg_GetOtherPlayerDataAck::Msg_GetOtherPlayerDataAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_GetOtherPlayerDataAck)
}
Msg_GetOtherPlayerDataAck::Msg_GetOtherPlayerDataAck(const Msg_GetOtherPlayerDataAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&check_id_, &from.check_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&check_id_)) + sizeof(ret_code_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_GetOtherPlayerDataAck)
}

inline void Msg_GetOtherPlayerDataAck::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&check_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&check_id_)) + sizeof(ret_code_));
}

Msg_GetOtherPlayerDataAck::~Msg_GetOtherPlayerDataAck() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_GetOtherPlayerDataAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_GetOtherPlayerDataAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_GetOtherPlayerDataAck::ArenaDtor(void* object) {
  Msg_GetOtherPlayerDataAck* _this = reinterpret_cast< Msg_GetOtherPlayerDataAck* >(object);
  (void)_this;
}
void Msg_GetOtherPlayerDataAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_GetOtherPlayerDataAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_GetOtherPlayerDataAck::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_GetOtherPlayerDataAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  ::memset(&check_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_id_) -
      reinterpret_cast<char*>(&check_id_)) + sizeof(seq_id_));
  id_ = 0u;
  ret_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GetOtherPlayerDataAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 check_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          check_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 checked_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          checked_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 proto_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          proto_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 seq_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          seq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ret_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_GetOtherPlayerDataAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_GetOtherPlayerDataAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 check_id = 1;
  if (this->_internal_check_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_check_id(), target);
  }

  // int64 checked_id = 2;
  if (this->_internal_checked_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_checked_id(), target);
  }

  // uint32 proto_id = 3;
  if (this->_internal_proto_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_proto_id(), target);
  }

  // uint32 seq_id = 4;
  if (this->_internal_seq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_seq_id(), target);
  }

  // optional uint32 id = 5;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_id(), target);
  }

  // uint32 ret_code = 6;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ret_code(), target);
  }

  // optional bytes data = 7;
  if (_internal_has_data()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_GetOtherPlayerDataAck)
  return target;
}

size_t Msg_GetOtherPlayerDataAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_GetOtherPlayerDataAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes data = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 check_id = 1;
  if (this->_internal_check_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_check_id());
  }

  // int64 checked_id = 2;
  if (this->_internal_checked_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_checked_id());
  }

  // uint32 proto_id = 3;
  if (this->_internal_proto_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_proto_id());
  }

  // uint32 seq_id = 4;
  if (this->_internal_seq_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seq_id());
  }

  // optional uint32 id = 5;
  if (cached_has_bits & 0x00000002u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 ret_code = 6;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ret_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_GetOtherPlayerDataAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_GetOtherPlayerDataAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_GetOtherPlayerDataAck::GetClassData() const { return &_class_data_; }

void Msg_GetOtherPlayerDataAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_GetOtherPlayerDataAck *>(to)->MergeFrom(
      static_cast<const Msg_GetOtherPlayerDataAck &>(from));
}


void Msg_GetOtherPlayerDataAck::MergeFrom(const Msg_GetOtherPlayerDataAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_GetOtherPlayerDataAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_check_id() != 0) {
    _internal_set_check_id(from._internal_check_id());
  }
  if (from._internal_checked_id() != 0) {
    _internal_set_checked_id(from._internal_checked_id());
  }
  if (from._internal_proto_id() != 0) {
    _internal_set_proto_id(from._internal_proto_id());
  }
  if (from._internal_seq_id() != 0) {
    _internal_set_seq_id(from._internal_seq_id());
  }
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_GetOtherPlayerDataAck::CopyFrom(const Msg_GetOtherPlayerDataAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_GetOtherPlayerDataAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GetOtherPlayerDataAck::IsInitialized() const {
  return true;
}

void Msg_GetOtherPlayerDataAck::InternalSwap(Msg_GetOtherPlayerDataAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_GetOtherPlayerDataAck, ret_code_)
      + sizeof(Msg_GetOtherPlayerDataAck::ret_code_)
      - PROTOBUF_FIELD_OFFSET(Msg_GetOtherPlayerDataAck, check_id_)>(
          reinterpret_cast<char*>(&check_id_),
          reinterpret_cast<char*>(&other->check_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GetOtherPlayerDataAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgFriendGS_2eproto_getter, &descriptor_table_server_2fMsgFriendGS_2eproto_once,
      file_level_metadata_server_2fMsgFriendGS_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XrPb::MsgSvrMod_FriendGS* Arena::CreateMaybeMessage< ::XrPb::MsgSvrMod_FriendGS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::MsgSvrMod_FriendGS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_LoginFriendServer* Arena::CreateMaybeMessage< ::XrPb::Msg_LoginFriendServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_LoginFriendServer >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_LogoutFriendServer* Arena::CreateMaybeMessage< ::XrPb::Msg_LogoutFriendServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_LogoutFriendServer >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_FriendPlayerInfoUpdate* Arena::CreateMaybeMessage< ::XrPb::Msg_FriendPlayerInfoUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_FriendPlayerInfoUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_FriendInviteCondition* Arena::CreateMaybeMessage< ::XrPb::Msg_FriendInviteCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_FriendInviteCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_GetOtherPlayerDataReq* Arena::CreateMaybeMessage< ::XrPb::Msg_GetOtherPlayerDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_GetOtherPlayerDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_GetOtherPlayerDataAck* Arena::CreateMaybeMessage< ::XrPb::Msg_GetOtherPlayerDataAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_GetOtherPlayerDataAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
