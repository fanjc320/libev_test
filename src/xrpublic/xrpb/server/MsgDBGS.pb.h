// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/MsgDBGS.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_2fMsgDBGS_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_2fMsgDBGS_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client/Common.pb.h"
#include "server/MsgSvrCommon.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_2fMsgDBGS_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_2fMsgDBGS_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[28]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fMsgDBGS_2eproto;
namespace XrPb {
class DBGS_RoleData;
struct DBGS_RoleDataDefaultTypeInternal;
extern DBGS_RoleDataDefaultTypeInternal _DBGS_RoleData_default_instance_;
class MsgSvrMod_DBGS;
struct MsgSvrMod_DBGSDefaultTypeInternal;
extern MsgSvrMod_DBGSDefaultTypeInternal _MsgSvrMod_DBGS_default_instance_;
class Msg_DBGS_AddItemReq;
struct Msg_DBGS_AddItemReqDefaultTypeInternal;
extern Msg_DBGS_AddItemReqDefaultTypeInternal _Msg_DBGS_AddItemReq_default_instance_;
class Msg_DBGS_AddRoleBackground;
struct Msg_DBGS_AddRoleBackgroundDefaultTypeInternal;
extern Msg_DBGS_AddRoleBackgroundDefaultTypeInternal _Msg_DBGS_AddRoleBackground_default_instance_;
class Msg_DBGS_AddRoleMessager;
struct Msg_DBGS_AddRoleMessagerDefaultTypeInternal;
extern Msg_DBGS_AddRoleMessagerDefaultTypeInternal _Msg_DBGS_AddRoleMessager_default_instance_;
class Msg_DBGS_AddRolePortrait;
struct Msg_DBGS_AddRolePortraitDefaultTypeInternal;
extern Msg_DBGS_AddRolePortraitDefaultTypeInternal _Msg_DBGS_AddRolePortrait_default_instance_;
class Msg_DBGS_ClearMonthSign;
struct Msg_DBGS_ClearMonthSignDefaultTypeInternal;
extern Msg_DBGS_ClearMonthSignDefaultTypeInternal _Msg_DBGS_ClearMonthSign_default_instance_;
class Msg_DBGS_CreateRoleAck;
struct Msg_DBGS_CreateRoleAckDefaultTypeInternal;
extern Msg_DBGS_CreateRoleAckDefaultTypeInternal _Msg_DBGS_CreateRoleAck_default_instance_;
class Msg_DBGS_CreateRoleReq;
struct Msg_DBGS_CreateRoleReqDefaultTypeInternal;
extern Msg_DBGS_CreateRoleReqDefaultTypeInternal _Msg_DBGS_CreateRoleReq_default_instance_;
class Msg_DBGS_DeleteBackground;
struct Msg_DBGS_DeleteBackgroundDefaultTypeInternal;
extern Msg_DBGS_DeleteBackgroundDefaultTypeInternal _Msg_DBGS_DeleteBackground_default_instance_;
class Msg_DBGS_DeleteMessager;
struct Msg_DBGS_DeleteMessagerDefaultTypeInternal;
extern Msg_DBGS_DeleteMessagerDefaultTypeInternal _Msg_DBGS_DeleteMessager_default_instance_;
class Msg_DBGS_DeletePortrait;
struct Msg_DBGS_DeletePortraitDefaultTypeInternal;
extern Msg_DBGS_DeletePortraitDefaultTypeInternal _Msg_DBGS_DeletePortrait_default_instance_;
class Msg_DBGS_LoadBaseInfoAck;
struct Msg_DBGS_LoadBaseInfoAckDefaultTypeInternal;
extern Msg_DBGS_LoadBaseInfoAckDefaultTypeInternal _Msg_DBGS_LoadBaseInfoAck_default_instance_;
class Msg_DBGS_LoadBaseInfoReq;
struct Msg_DBGS_LoadBaseInfoReqDefaultTypeInternal;
extern Msg_DBGS_LoadBaseInfoReqDefaultTypeInternal _Msg_DBGS_LoadBaseInfoReq_default_instance_;
class Msg_DBGS_Player_Del;
struct Msg_DBGS_Player_DelDefaultTypeInternal;
extern Msg_DBGS_Player_DelDefaultTypeInternal _Msg_DBGS_Player_Del_default_instance_;
class Msg_DBGS_Player_In;
struct Msg_DBGS_Player_InDefaultTypeInternal;
extern Msg_DBGS_Player_InDefaultTypeInternal _Msg_DBGS_Player_In_default_instance_;
class Msg_DBGS_RoleInfoAck;
struct Msg_DBGS_RoleInfoAckDefaultTypeInternal;
extern Msg_DBGS_RoleInfoAckDefaultTypeInternal _Msg_DBGS_RoleInfoAck_default_instance_;
class Msg_DBGS_RoleInfoReq;
struct Msg_DBGS_RoleInfoReqDefaultTypeInternal;
extern Msg_DBGS_RoleInfoReqDefaultTypeInternal _Msg_DBGS_RoleInfoReq_default_instance_;
class Msg_DBGS_UpdateDailyAward;
struct Msg_DBGS_UpdateDailyAwardDefaultTypeInternal;
extern Msg_DBGS_UpdateDailyAwardDefaultTypeInternal _Msg_DBGS_UpdateDailyAward_default_instance_;
class Msg_DBGS_UpdateItemReq;
struct Msg_DBGS_UpdateItemReqDefaultTypeInternal;
extern Msg_DBGS_UpdateItemReqDefaultTypeInternal _Msg_DBGS_UpdateItemReq_default_instance_;
class Msg_DBGS_UpdateLoginedSign;
struct Msg_DBGS_UpdateLoginedSignDefaultTypeInternal;
extern Msg_DBGS_UpdateLoginedSignDefaultTypeInternal _Msg_DBGS_UpdateLoginedSign_default_instance_;
class Msg_DBGS_UpdateMonthSign;
struct Msg_DBGS_UpdateMonthSignDefaultTypeInternal;
extern Msg_DBGS_UpdateMonthSignDefaultTypeInternal _Msg_DBGS_UpdateMonthSign_default_instance_;
class Msg_DBGS_UpdateRoleInfo;
struct Msg_DBGS_UpdateRoleInfoDefaultTypeInternal;
extern Msg_DBGS_UpdateRoleInfoDefaultTypeInternal _Msg_DBGS_UpdateRoleInfo_default_instance_;
class RoleDailyAward;
struct RoleDailyAwardDefaultTypeInternal;
extern RoleDailyAwardDefaultTypeInternal _RoleDailyAward_default_instance_;
class RoleInfo;
struct RoleInfoDefaultTypeInternal;
extern RoleInfoDefaultTypeInternal _RoleInfo_default_instance_;
class RoleItem;
struct RoleItemDefaultTypeInternal;
extern RoleItemDefaultTypeInternal _RoleItem_default_instance_;
class RoleLoginedSign;
struct RoleLoginedSignDefaultTypeInternal;
extern RoleLoginedSignDefaultTypeInternal _RoleLoginedSign_default_instance_;
class RoleMonthSign;
struct RoleMonthSignDefaultTypeInternal;
extern RoleMonthSignDefaultTypeInternal _RoleMonthSign_default_instance_;
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> ::XrPb::DBGS_RoleData* Arena::CreateMaybeMessage<::XrPb::DBGS_RoleData>(Arena*);
template<> ::XrPb::MsgSvrMod_DBGS* Arena::CreateMaybeMessage<::XrPb::MsgSvrMod_DBGS>(Arena*);
template<> ::XrPb::Msg_DBGS_AddItemReq* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_AddItemReq>(Arena*);
template<> ::XrPb::Msg_DBGS_AddRoleBackground* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_AddRoleBackground>(Arena*);
template<> ::XrPb::Msg_DBGS_AddRoleMessager* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_AddRoleMessager>(Arena*);
template<> ::XrPb::Msg_DBGS_AddRolePortrait* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_AddRolePortrait>(Arena*);
template<> ::XrPb::Msg_DBGS_ClearMonthSign* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_ClearMonthSign>(Arena*);
template<> ::XrPb::Msg_DBGS_CreateRoleAck* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_CreateRoleAck>(Arena*);
template<> ::XrPb::Msg_DBGS_CreateRoleReq* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_CreateRoleReq>(Arena*);
template<> ::XrPb::Msg_DBGS_DeleteBackground* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_DeleteBackground>(Arena*);
template<> ::XrPb::Msg_DBGS_DeleteMessager* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_DeleteMessager>(Arena*);
template<> ::XrPb::Msg_DBGS_DeletePortrait* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_DeletePortrait>(Arena*);
template<> ::XrPb::Msg_DBGS_LoadBaseInfoAck* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_LoadBaseInfoAck>(Arena*);
template<> ::XrPb::Msg_DBGS_LoadBaseInfoReq* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_LoadBaseInfoReq>(Arena*);
template<> ::XrPb::Msg_DBGS_Player_Del* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_Player_Del>(Arena*);
template<> ::XrPb::Msg_DBGS_Player_In* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_Player_In>(Arena*);
template<> ::XrPb::Msg_DBGS_RoleInfoAck* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_RoleInfoAck>(Arena*);
template<> ::XrPb::Msg_DBGS_RoleInfoReq* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_RoleInfoReq>(Arena*);
template<> ::XrPb::Msg_DBGS_UpdateDailyAward* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_UpdateDailyAward>(Arena*);
template<> ::XrPb::Msg_DBGS_UpdateItemReq* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_UpdateItemReq>(Arena*);
template<> ::XrPb::Msg_DBGS_UpdateLoginedSign* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_UpdateLoginedSign>(Arena*);
template<> ::XrPb::Msg_DBGS_UpdateMonthSign* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_UpdateMonthSign>(Arena*);
template<> ::XrPb::Msg_DBGS_UpdateRoleInfo* Arena::CreateMaybeMessage<::XrPb::Msg_DBGS_UpdateRoleInfo>(Arena*);
template<> ::XrPb::RoleDailyAward* Arena::CreateMaybeMessage<::XrPb::RoleDailyAward>(Arena*);
template<> ::XrPb::RoleInfo* Arena::CreateMaybeMessage<::XrPb::RoleInfo>(Arena*);
template<> ::XrPb::RoleItem* Arena::CreateMaybeMessage<::XrPb::RoleItem>(Arena*);
template<> ::XrPb::RoleLoginedSign* Arena::CreateMaybeMessage<::XrPb::RoleLoginedSign>(Arena*);
template<> ::XrPb::RoleMonthSign* Arena::CreateMaybeMessage<::XrPb::RoleMonthSign>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XrPb {

enum MsgSvrMod_DBGS_MsgId : int {
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_None = 0,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_RoleInfoReq = 1,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_RoleInfoAck = 2,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_CreateRoleReq = 3,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_CreateRoleAck = 4,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_UpdateRoleInfo = 5,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_AddRolePortrait = 6,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_DeletePortrait = 7,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_AddRoleBackground = 8,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_DeleteBackground = 9,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_AddRoleMessager = 10,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_DeleteMessager = 11,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_LoadBaseInfoReq = 12,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_LoadBaseInfoAck = 13,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_Player_Del = 14,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_AddItemReq = 15,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_UpdateItemReq = 16,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_UpdateLoginedSign = 17,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_UpdateMonthSign = 18,
  MsgSvrMod_DBGS_MsgId_Msg_DBGS_ClearMonthSign = 19,
  MsgSvrMod_DBGS_MsgId_MsgSvrMod_DBGS_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgSvrMod_DBGS_MsgId_MsgSvrMod_DBGS_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgSvrMod_DBGS_MsgId_IsValid(int value);
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS_MsgId_MsgId_MIN = MsgSvrMod_DBGS_MsgId_Msg_DBGS_None;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS_MsgId_MsgId_MAX = MsgSvrMod_DBGS_MsgId_Msg_DBGS_ClearMonthSign;
constexpr int MsgSvrMod_DBGS_MsgId_MsgId_ARRAYSIZE = MsgSvrMod_DBGS_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgSvrMod_DBGS_MsgId_descriptor();
template<typename T>
inline const std::string& MsgSvrMod_DBGS_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgSvrMod_DBGS_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgSvrMod_DBGS_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgSvrMod_DBGS_MsgId_descriptor(), enum_t_value);
}
inline bool MsgSvrMod_DBGS_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgSvrMod_DBGS_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgSvrMod_DBGS_MsgId>(
    MsgSvrMod_DBGS_MsgId_descriptor(), name, value);
}
// ===================================================================

class MsgSvrMod_DBGS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.MsgSvrMod_DBGS) */ {
 public:
  inline MsgSvrMod_DBGS() : MsgSvrMod_DBGS(nullptr) {}
  explicit constexpr MsgSvrMod_DBGS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSvrMod_DBGS(const MsgSvrMod_DBGS& from);
  MsgSvrMod_DBGS(MsgSvrMod_DBGS&& from) noexcept
    : MsgSvrMod_DBGS() {
    *this = ::std::move(from);
  }

  inline MsgSvrMod_DBGS& operator=(const MsgSvrMod_DBGS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSvrMod_DBGS& operator=(MsgSvrMod_DBGS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSvrMod_DBGS& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSvrMod_DBGS* internal_default_instance() {
    return reinterpret_cast<const MsgSvrMod_DBGS*>(
               &_MsgSvrMod_DBGS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgSvrMod_DBGS& a, MsgSvrMod_DBGS& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSvrMod_DBGS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSvrMod_DBGS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSvrMod_DBGS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSvrMod_DBGS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgSvrMod_DBGS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgSvrMod_DBGS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.MsgSvrMod_DBGS";
  }
  protected:
  explicit MsgSvrMod_DBGS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgSvrMod_DBGS_MsgId MsgId;
  static constexpr MsgId Msg_DBGS_None =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_None;
  static constexpr MsgId Msg_DBGS_RoleInfoReq =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_RoleInfoReq;
  static constexpr MsgId Msg_DBGS_RoleInfoAck =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_RoleInfoAck;
  static constexpr MsgId Msg_DBGS_CreateRoleReq =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_CreateRoleReq;
  static constexpr MsgId Msg_DBGS_CreateRoleAck =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_CreateRoleAck;
  static constexpr MsgId Msg_DBGS_UpdateRoleInfo =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_UpdateRoleInfo;
  static constexpr MsgId Msg_DBGS_AddRolePortrait =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_AddRolePortrait;
  static constexpr MsgId Msg_DBGS_DeletePortrait =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_DeletePortrait;
  static constexpr MsgId Msg_DBGS_AddRoleBackground =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_AddRoleBackground;
  static constexpr MsgId Msg_DBGS_DeleteBackground =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_DeleteBackground;
  static constexpr MsgId Msg_DBGS_AddRoleMessager =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_AddRoleMessager;
  static constexpr MsgId Msg_DBGS_DeleteMessager =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_DeleteMessager;
  static constexpr MsgId Msg_DBGS_LoadBaseInfoReq =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_LoadBaseInfoReq;
  static constexpr MsgId Msg_DBGS_LoadBaseInfoAck =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_LoadBaseInfoAck;
  static constexpr MsgId Msg_DBGS_Player_Del =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_Player_Del;
  static constexpr MsgId Msg_DBGS_AddItemReq =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_AddItemReq;
  static constexpr MsgId Msg_DBGS_UpdateItemReq =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_UpdateItemReq;
  static constexpr MsgId Msg_DBGS_UpdateLoginedSign =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_UpdateLoginedSign;
  static constexpr MsgId Msg_DBGS_UpdateMonthSign =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_UpdateMonthSign;
  static constexpr MsgId Msg_DBGS_ClearMonthSign =
    MsgSvrMod_DBGS_MsgId_Msg_DBGS_ClearMonthSign;
  static inline bool MsgId_IsValid(int value) {
    return MsgSvrMod_DBGS_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    MsgSvrMod_DBGS_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    MsgSvrMod_DBGS_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    MsgSvrMod_DBGS_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return MsgSvrMod_DBGS_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return MsgSvrMod_DBGS_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return MsgSvrMod_DBGS_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.MsgSvrMod_DBGS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_RoleInfoReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_RoleInfoReq) */ {
 public:
  inline Msg_DBGS_RoleInfoReq() : Msg_DBGS_RoleInfoReq(nullptr) {}
  ~Msg_DBGS_RoleInfoReq() override;
  explicit constexpr Msg_DBGS_RoleInfoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_RoleInfoReq(const Msg_DBGS_RoleInfoReq& from);
  Msg_DBGS_RoleInfoReq(Msg_DBGS_RoleInfoReq&& from) noexcept
    : Msg_DBGS_RoleInfoReq() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_RoleInfoReq& operator=(const Msg_DBGS_RoleInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_RoleInfoReq& operator=(Msg_DBGS_RoleInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_RoleInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_RoleInfoReq* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_RoleInfoReq*>(
               &_Msg_DBGS_RoleInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Msg_DBGS_RoleInfoReq& a, Msg_DBGS_RoleInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_RoleInfoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_RoleInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_RoleInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_RoleInfoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_RoleInfoReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_RoleInfoReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_RoleInfoReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_RoleInfoReq";
  }
  protected:
  explicit Msg_DBGS_RoleInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccIdFieldNumber = 1,
  };
  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_RoleInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class RoleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.RoleInfo) */ {
 public:
  inline RoleInfo() : RoleInfo(nullptr) {}
  ~RoleInfo() override;
  explicit constexpr RoleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleInfo(const RoleInfo& from);
  RoleInfo(RoleInfo&& from) noexcept
    : RoleInfo() {
    *this = ::std::move(from);
  }

  inline RoleInfo& operator=(const RoleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleInfo& operator=(RoleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleInfo* internal_default_instance() {
    return reinterpret_cast<const RoleInfo*>(
               &_RoleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoleInfo& a, RoleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.RoleInfo";
  }
  protected:
  explicit RoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccNameFieldNumber = 3,
    kRoleNameFieldNumber = 4,
    kFormFieldNumber = 12,
    kAccIdFieldNumber = 1,
    kRoleIdFieldNumber = 2,
    kCareerIdFieldNumber = 5,
    kGenderFieldNumber = 6,
    kLevelFieldNumber = 7,
    kExpFieldNumber = 8,
    kPunishTimeFieldNumber = 10,
    kGmLevelFieldNumber = 9,
    kRoleSdkFieldNumber = 11,
    kCreateTimeFieldNumber = 14,
    kLastLoginTimeFieldNumber = 15,
    kLogoutTimeFieldNumber = 16,
    kServerIdFieldNumber = 13,
    kForbidChatTypeFieldNumber = 19,
    kMonthSignTimeFieldNumber = 17,
    kForbidChatTimeFieldNumber = 18,
    kRoleMessagerFieldNumber = 20,
    kDuringDayFieldNumber = 21,
    kTotalOnlineFieldNumber = 22,
    kUiLoginTimesFieldNumber = 23,
  };
  // optional string acc_name = 3;
  bool has_acc_name() const;
  private:
  bool _internal_has_acc_name() const;
  public:
  void clear_acc_name();
  const std::string& acc_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_acc_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_acc_name();
  PROTOBUF_NODISCARD std::string* release_acc_name();
  void set_allocated_acc_name(std::string* acc_name);
  private:
  const std::string& _internal_acc_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acc_name(const std::string& value);
  std::string* _internal_mutable_acc_name();
  public:

  // optional string role_name = 4;
  bool has_role_name() const;
  private:
  bool _internal_has_role_name() const;
  public:
  void clear_role_name();
  const std::string& role_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_name();
  PROTOBUF_NODISCARD std::string* release_role_name();
  void set_allocated_role_name(std::string* role_name);
  private:
  const std::string& _internal_role_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_name(const std::string& value);
  std::string* _internal_mutable_role_name();
  public:

  // optional .XrPb.FormData form = 12;
  bool has_form() const;
  private:
  bool _internal_has_form() const;
  public:
  void clear_form();
  const ::XrPb::FormData& form() const;
  PROTOBUF_NODISCARD ::XrPb::FormData* release_form();
  ::XrPb::FormData* mutable_form();
  void set_allocated_form(::XrPb::FormData* form);
  private:
  const ::XrPb::FormData& _internal_form() const;
  ::XrPb::FormData* _internal_mutable_form();
  public:
  void unsafe_arena_set_allocated_form(
      ::XrPb::FormData* form);
  ::XrPb::FormData* unsafe_arena_release_form();

  // optional int64 acc_id = 1;
  bool has_acc_id() const;
  private:
  bool _internal_has_acc_id() const;
  public:
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // optional int64 role_id = 2;
  bool has_role_id() const;
  private:
  bool _internal_has_role_id() const;
  public:
  void clear_role_id();
  int64_t role_id() const;
  void set_role_id(int64_t value);
  private:
  int64_t _internal_role_id() const;
  void _internal_set_role_id(int64_t value);
  public:

  // optional uint32 career_id = 5;
  bool has_career_id() const;
  private:
  bool _internal_has_career_id() const;
  public:
  void clear_career_id();
  uint32_t career_id() const;
  void set_career_id(uint32_t value);
  private:
  uint32_t _internal_career_id() const;
  void _internal_set_career_id(uint32_t value);
  public:

  // optional uint32 gender = 6;
  bool has_gender() const;
  private:
  bool _internal_has_gender() const;
  public:
  void clear_gender();
  uint32_t gender() const;
  void set_gender(uint32_t value);
  private:
  uint32_t _internal_gender() const;
  void _internal_set_gender(uint32_t value);
  public:

  // optional uint32 level = 7;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional uint32 exp = 8;
  bool has_exp() const;
  private:
  bool _internal_has_exp() const;
  public:
  void clear_exp();
  uint32_t exp() const;
  void set_exp(uint32_t value);
  private:
  uint32_t _internal_exp() const;
  void _internal_set_exp(uint32_t value);
  public:

  // optional int64 punish_time = 10;
  bool has_punish_time() const;
  private:
  bool _internal_has_punish_time() const;
  public:
  void clear_punish_time();
  int64_t punish_time() const;
  void set_punish_time(int64_t value);
  private:
  int64_t _internal_punish_time() const;
  void _internal_set_punish_time(int64_t value);
  public:

  // optional uint32 gm_level = 9;
  bool has_gm_level() const;
  private:
  bool _internal_has_gm_level() const;
  public:
  void clear_gm_level();
  uint32_t gm_level() const;
  void set_gm_level(uint32_t value);
  private:
  uint32_t _internal_gm_level() const;
  void _internal_set_gm_level(uint32_t value);
  public:

  // optional uint32 role_sdk = 11;
  bool has_role_sdk() const;
  private:
  bool _internal_has_role_sdk() const;
  public:
  void clear_role_sdk();
  uint32_t role_sdk() const;
  void set_role_sdk(uint32_t value);
  private:
  uint32_t _internal_role_sdk() const;
  void _internal_set_role_sdk(uint32_t value);
  public:

  // optional int64 create_time = 14;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  int64_t create_time() const;
  void set_create_time(int64_t value);
  private:
  int64_t _internal_create_time() const;
  void _internal_set_create_time(int64_t value);
  public:

  // optional int64 last_login_time = 15;
  bool has_last_login_time() const;
  private:
  bool _internal_has_last_login_time() const;
  public:
  void clear_last_login_time();
  int64_t last_login_time() const;
  void set_last_login_time(int64_t value);
  private:
  int64_t _internal_last_login_time() const;
  void _internal_set_last_login_time(int64_t value);
  public:

  // optional int64 logout_time = 16;
  bool has_logout_time() const;
  private:
  bool _internal_has_logout_time() const;
  public:
  void clear_logout_time();
  int64_t logout_time() const;
  void set_logout_time(int64_t value);
  private:
  int64_t _internal_logout_time() const;
  void _internal_set_logout_time(int64_t value);
  public:

  // optional uint32 server_id = 13;
  bool has_server_id() const;
  private:
  bool _internal_has_server_id() const;
  public:
  void clear_server_id();
  uint32_t server_id() const;
  void set_server_id(uint32_t value);
  private:
  uint32_t _internal_server_id() const;
  void _internal_set_server_id(uint32_t value);
  public:

  // optional uint32 forbid_chat_type = 19;
  bool has_forbid_chat_type() const;
  private:
  bool _internal_has_forbid_chat_type() const;
  public:
  void clear_forbid_chat_type();
  uint32_t forbid_chat_type() const;
  void set_forbid_chat_type(uint32_t value);
  private:
  uint32_t _internal_forbid_chat_type() const;
  void _internal_set_forbid_chat_type(uint32_t value);
  public:

  // optional int64 month_sign_time = 17;
  bool has_month_sign_time() const;
  private:
  bool _internal_has_month_sign_time() const;
  public:
  void clear_month_sign_time();
  int64_t month_sign_time() const;
  void set_month_sign_time(int64_t value);
  private:
  int64_t _internal_month_sign_time() const;
  void _internal_set_month_sign_time(int64_t value);
  public:

  // optional int64 forbid_chat_time = 18;
  bool has_forbid_chat_time() const;
  private:
  bool _internal_has_forbid_chat_time() const;
  public:
  void clear_forbid_chat_time();
  int64_t forbid_chat_time() const;
  void set_forbid_chat_time(int64_t value);
  private:
  int64_t _internal_forbid_chat_time() const;
  void _internal_set_forbid_chat_time(int64_t value);
  public:

  // optional uint32 role_messager = 20;
  bool has_role_messager() const;
  private:
  bool _internal_has_role_messager() const;
  public:
  void clear_role_messager();
  uint32_t role_messager() const;
  void set_role_messager(uint32_t value);
  private:
  uint32_t _internal_role_messager() const;
  void _internal_set_role_messager(uint32_t value);
  public:

  // optional uint32 during_day = 21;
  bool has_during_day() const;
  private:
  bool _internal_has_during_day() const;
  public:
  void clear_during_day();
  uint32_t during_day() const;
  void set_during_day(uint32_t value);
  private:
  uint32_t _internal_during_day() const;
  void _internal_set_during_day(uint32_t value);
  public:

  // optional uint32 total_online = 22;
  bool has_total_online() const;
  private:
  bool _internal_has_total_online() const;
  public:
  void clear_total_online();
  uint32_t total_online() const;
  void set_total_online(uint32_t value);
  private:
  uint32_t _internal_total_online() const;
  void _internal_set_total_online(uint32_t value);
  public:

  // optional uint32 uiLoginTimes = 23;
  bool has_uilogintimes() const;
  private:
  bool _internal_has_uilogintimes() const;
  public:
  void clear_uilogintimes();
  uint32_t uilogintimes() const;
  void set_uilogintimes(uint32_t value);
  private:
  uint32_t _internal_uilogintimes() const;
  void _internal_set_uilogintimes(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.RoleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acc_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_name_;
  ::XrPb::FormData* form_;
  int64_t acc_id_;
  int64_t role_id_;
  uint32_t career_id_;
  uint32_t gender_;
  uint32_t level_;
  uint32_t exp_;
  int64_t punish_time_;
  uint32_t gm_level_;
  uint32_t role_sdk_;
  int64_t create_time_;
  int64_t last_login_time_;
  int64_t logout_time_;
  uint32_t server_id_;
  uint32_t forbid_chat_type_;
  int64_t month_sign_time_;
  int64_t forbid_chat_time_;
  uint32_t role_messager_;
  uint32_t during_day_;
  uint32_t total_online_;
  uint32_t uilogintimes_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class RoleItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.RoleItem) */ {
 public:
  inline RoleItem() : RoleItem(nullptr) {}
  ~RoleItem() override;
  explicit constexpr RoleItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleItem(const RoleItem& from);
  RoleItem(RoleItem&& from) noexcept
    : RoleItem() {
    *this = ::std::move(from);
  }

  inline RoleItem& operator=(const RoleItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleItem& operator=(RoleItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleItem* internal_default_instance() {
    return reinterpret_cast<const RoleItem*>(
               &_RoleItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoleItem& a, RoleItem& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.RoleItem";
  }
  protected:
  explicit RoleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiIdFieldNumber = 1,
    kUiCountFieldNumber = 2,
    kLlIncTimeFieldNumber = 3,
  };
  // uint32 uiId = 1;
  void clear_uiid();
  uint32_t uiid() const;
  void set_uiid(uint32_t value);
  private:
  uint32_t _internal_uiid() const;
  void _internal_set_uiid(uint32_t value);
  public:

  // uint32 uiCount = 2;
  void clear_uicount();
  uint32_t uicount() const;
  void set_uicount(uint32_t value);
  private:
  uint32_t _internal_uicount() const;
  void _internal_set_uicount(uint32_t value);
  public:

  // optional int64 llIncTime = 3;
  bool has_llinctime() const;
  private:
  bool _internal_has_llinctime() const;
  public:
  void clear_llinctime();
  int64_t llinctime() const;
  void set_llinctime(int64_t value);
  private:
  int64_t _internal_llinctime() const;
  void _internal_set_llinctime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.RoleItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t uiid_;
  uint32_t uicount_;
  int64_t llinctime_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class RoleDailyAward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.RoleDailyAward) */ {
 public:
  inline RoleDailyAward() : RoleDailyAward(nullptr) {}
  ~RoleDailyAward() override;
  explicit constexpr RoleDailyAward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleDailyAward(const RoleDailyAward& from);
  RoleDailyAward(RoleDailyAward&& from) noexcept
    : RoleDailyAward() {
    *this = ::std::move(from);
  }

  inline RoleDailyAward& operator=(const RoleDailyAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleDailyAward& operator=(RoleDailyAward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleDailyAward& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleDailyAward* internal_default_instance() {
    return reinterpret_cast<const RoleDailyAward*>(
               &_RoleDailyAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoleDailyAward& a, RoleDailyAward& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleDailyAward* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleDailyAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleDailyAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleDailyAward>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleDailyAward& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleDailyAward& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleDailyAward* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.RoleDailyAward";
  }
  protected:
  explicit RoleDailyAward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiIdFieldNumber = 1,
    kUiCountFieldNumber = 2,
  };
  // uint32 uiId = 1;
  void clear_uiid();
  uint32_t uiid() const;
  void set_uiid(uint32_t value);
  private:
  uint32_t _internal_uiid() const;
  void _internal_set_uiid(uint32_t value);
  public:

  // uint32 uiCount = 2;
  void clear_uicount();
  uint32_t uicount() const;
  void set_uicount(uint32_t value);
  private:
  uint32_t _internal_uicount() const;
  void _internal_set_uicount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.RoleDailyAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t uiid_;
  uint32_t uicount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class RoleLoginedSign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.RoleLoginedSign) */ {
 public:
  inline RoleLoginedSign() : RoleLoginedSign(nullptr) {}
  ~RoleLoginedSign() override;
  explicit constexpr RoleLoginedSign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleLoginedSign(const RoleLoginedSign& from);
  RoleLoginedSign(RoleLoginedSign&& from) noexcept
    : RoleLoginedSign() {
    *this = ::std::move(from);
  }

  inline RoleLoginedSign& operator=(const RoleLoginedSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleLoginedSign& operator=(RoleLoginedSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleLoginedSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleLoginedSign* internal_default_instance() {
    return reinterpret_cast<const RoleLoginedSign*>(
               &_RoleLoginedSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoleLoginedSign& a, RoleLoginedSign& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleLoginedSign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleLoginedSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleLoginedSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleLoginedSign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleLoginedSign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleLoginedSign& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleLoginedSign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.RoleLoginedSign";
  }
  protected:
  explicit RoleLoginedSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecSignFieldNumber = 4,
    kStrVersionFieldNumber = 2,
    kLlTimeFieldNumber = 3,
    kUiIdFieldNumber = 1,
  };
  // repeated uint32 vecSign = 4;
  int vecsign_size() const;
  private:
  int _internal_vecsign_size() const;
  public:
  void clear_vecsign();
  private:
  uint32_t _internal_vecsign(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_vecsign() const;
  void _internal_add_vecsign(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_vecsign();
  public:
  uint32_t vecsign(int index) const;
  void set_vecsign(int index, uint32_t value);
  void add_vecsign(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      vecsign() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_vecsign();

  // string strVersion = 2;
  void clear_strversion();
  const std::string& strversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strversion();
  PROTOBUF_NODISCARD std::string* release_strversion();
  void set_allocated_strversion(std::string* strversion);
  private:
  const std::string& _internal_strversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strversion(const std::string& value);
  std::string* _internal_mutable_strversion();
  public:

  // int64 llTime = 3;
  void clear_lltime();
  int64_t lltime() const;
  void set_lltime(int64_t value);
  private:
  int64_t _internal_lltime() const;
  void _internal_set_lltime(int64_t value);
  public:

  // uint32 uiId = 1;
  void clear_uiid();
  uint32_t uiid() const;
  void set_uiid(uint32_t value);
  private:
  uint32_t _internal_uiid() const;
  void _internal_set_uiid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.RoleLoginedSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > vecsign_;
  mutable std::atomic<int> _vecsign_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strversion_;
  int64_t lltime_;
  uint32_t uiid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class RoleMonthSign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.RoleMonthSign) */ {
 public:
  inline RoleMonthSign() : RoleMonthSign(nullptr) {}
  ~RoleMonthSign() override;
  explicit constexpr RoleMonthSign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleMonthSign(const RoleMonthSign& from);
  RoleMonthSign(RoleMonthSign&& from) noexcept
    : RoleMonthSign() {
    *this = ::std::move(from);
  }

  inline RoleMonthSign& operator=(const RoleMonthSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleMonthSign& operator=(RoleMonthSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleMonthSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleMonthSign* internal_default_instance() {
    return reinterpret_cast<const RoleMonthSign*>(
               &_RoleMonthSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RoleMonthSign& a, RoleMonthSign& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleMonthSign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleMonthSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleMonthSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleMonthSign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleMonthSign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoleMonthSign& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleMonthSign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.RoleMonthSign";
  }
  protected:
  explicit RoleMonthSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlDayFieldNumber = 1,
    kBVipFieldNumber = 2,
  };
  // int64 llDay = 1;
  void clear_llday();
  int64_t llday() const;
  void set_llday(int64_t value);
  private:
  int64_t _internal_llday() const;
  void _internal_set_llday(int64_t value);
  public:

  // bool bVip = 2;
  void clear_bvip();
  bool bvip() const;
  void set_bvip(bool value);
  private:
  bool _internal_bvip() const;
  void _internal_set_bvip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.RoleMonthSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t llday_;
  bool bvip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class DBGS_RoleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.DBGS_RoleData) */ {
 public:
  inline DBGS_RoleData() : DBGS_RoleData(nullptr) {}
  ~DBGS_RoleData() override;
  explicit constexpr DBGS_RoleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBGS_RoleData(const DBGS_RoleData& from);
  DBGS_RoleData(DBGS_RoleData&& from) noexcept
    : DBGS_RoleData() {
    *this = ::std::move(from);
  }

  inline DBGS_RoleData& operator=(const DBGS_RoleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBGS_RoleData& operator=(DBGS_RoleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBGS_RoleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBGS_RoleData* internal_default_instance() {
    return reinterpret_cast<const DBGS_RoleData*>(
               &_DBGS_RoleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DBGS_RoleData& a, DBGS_RoleData& b) {
    a.Swap(&b);
  }
  inline void Swap(DBGS_RoleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBGS_RoleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBGS_RoleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBGS_RoleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBGS_RoleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DBGS_RoleData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBGS_RoleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.DBGS_RoleData";
  }
  protected:
  explicit DBGS_RoleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolePortraitFieldNumber = 4,
    kRoleItemFieldNumber = 5,
    kDailyAwardFieldNumber = 6,
    kVecLoginedSignFieldNumber = 7,
    kMonthSignFieldNumber = 8,
    kRoleBackgroundFieldNumber = 9,
    kRoleMessagerFieldNumber = 10,
    kRoleInfoFieldNumber = 2,
    kAccIdFieldNumber = 1,
  };
  // repeated .XrPb.RoleFormInfo role_portrait = 4;
  int role_portrait_size() const;
  private:
  int _internal_role_portrait_size() const;
  public:
  void clear_role_portrait();
  ::XrPb::RoleFormInfo* mutable_role_portrait(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleFormInfo >*
      mutable_role_portrait();
  private:
  const ::XrPb::RoleFormInfo& _internal_role_portrait(int index) const;
  ::XrPb::RoleFormInfo* _internal_add_role_portrait();
  public:
  const ::XrPb::RoleFormInfo& role_portrait(int index) const;
  ::XrPb::RoleFormInfo* add_role_portrait();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleFormInfo >&
      role_portrait() const;

  // repeated .XrPb.RoleItem role_item = 5;
  int role_item_size() const;
  private:
  int _internal_role_item_size() const;
  public:
  void clear_role_item();
  ::XrPb::RoleItem* mutable_role_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleItem >*
      mutable_role_item();
  private:
  const ::XrPb::RoleItem& _internal_role_item(int index) const;
  ::XrPb::RoleItem* _internal_add_role_item();
  public:
  const ::XrPb::RoleItem& role_item(int index) const;
  ::XrPb::RoleItem* add_role_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleItem >&
      role_item() const;

  // repeated .XrPb.RoleDailyAward daily_award = 6;
  int daily_award_size() const;
  private:
  int _internal_daily_award_size() const;
  public:
  void clear_daily_award();
  ::XrPb::RoleDailyAward* mutable_daily_award(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleDailyAward >*
      mutable_daily_award();
  private:
  const ::XrPb::RoleDailyAward& _internal_daily_award(int index) const;
  ::XrPb::RoleDailyAward* _internal_add_daily_award();
  public:
  const ::XrPb::RoleDailyAward& daily_award(int index) const;
  ::XrPb::RoleDailyAward* add_daily_award();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleDailyAward >&
      daily_award() const;

  // repeated .XrPb.RoleLoginedSign vecLoginedSign = 7;
  int vecloginedsign_size() const;
  private:
  int _internal_vecloginedsign_size() const;
  public:
  void clear_vecloginedsign();
  ::XrPb::RoleLoginedSign* mutable_vecloginedsign(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleLoginedSign >*
      mutable_vecloginedsign();
  private:
  const ::XrPb::RoleLoginedSign& _internal_vecloginedsign(int index) const;
  ::XrPb::RoleLoginedSign* _internal_add_vecloginedsign();
  public:
  const ::XrPb::RoleLoginedSign& vecloginedsign(int index) const;
  ::XrPb::RoleLoginedSign* add_vecloginedsign();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleLoginedSign >&
      vecloginedsign() const;

  // repeated .XrPb.RoleMonthSign month_sign = 8;
  int month_sign_size() const;
  private:
  int _internal_month_sign_size() const;
  public:
  void clear_month_sign();
  ::XrPb::RoleMonthSign* mutable_month_sign(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleMonthSign >*
      mutable_month_sign();
  private:
  const ::XrPb::RoleMonthSign& _internal_month_sign(int index) const;
  ::XrPb::RoleMonthSign* _internal_add_month_sign();
  public:
  const ::XrPb::RoleMonthSign& month_sign(int index) const;
  ::XrPb::RoleMonthSign* add_month_sign();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleMonthSign >&
      month_sign() const;

  // repeated .XrPb.RoleFormInfo role_background = 9;
  int role_background_size() const;
  private:
  int _internal_role_background_size() const;
  public:
  void clear_role_background();
  ::XrPb::RoleFormInfo* mutable_role_background(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleFormInfo >*
      mutable_role_background();
  private:
  const ::XrPb::RoleFormInfo& _internal_role_background(int index) const;
  ::XrPb::RoleFormInfo* _internal_add_role_background();
  public:
  const ::XrPb::RoleFormInfo& role_background(int index) const;
  ::XrPb::RoleFormInfo* add_role_background();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleFormInfo >&
      role_background() const;

  // repeated .XrPb.RoleFormInfo role_messager = 10;
  int role_messager_size() const;
  private:
  int _internal_role_messager_size() const;
  public:
  void clear_role_messager();
  ::XrPb::RoleFormInfo* mutable_role_messager(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleFormInfo >*
      mutable_role_messager();
  private:
  const ::XrPb::RoleFormInfo& _internal_role_messager(int index) const;
  ::XrPb::RoleFormInfo* _internal_add_role_messager();
  public:
  const ::XrPb::RoleFormInfo& role_messager(int index) const;
  ::XrPb::RoleFormInfo* add_role_messager();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleFormInfo >&
      role_messager() const;

  // optional .XrPb.RoleInfo role_info = 2;
  bool has_role_info() const;
  private:
  bool _internal_has_role_info() const;
  public:
  void clear_role_info();
  const ::XrPb::RoleInfo& role_info() const;
  PROTOBUF_NODISCARD ::XrPb::RoleInfo* release_role_info();
  ::XrPb::RoleInfo* mutable_role_info();
  void set_allocated_role_info(::XrPb::RoleInfo* role_info);
  private:
  const ::XrPb::RoleInfo& _internal_role_info() const;
  ::XrPb::RoleInfo* _internal_mutable_role_info();
  public:
  void unsafe_arena_set_allocated_role_info(
      ::XrPb::RoleInfo* role_info);
  ::XrPb::RoleInfo* unsafe_arena_release_role_info();

  // optional int64 acc_id = 1;
  bool has_acc_id() const;
  private:
  bool _internal_has_acc_id() const;
  public:
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.DBGS_RoleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleFormInfo > role_portrait_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleItem > role_item_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleDailyAward > daily_award_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleLoginedSign > vecloginedsign_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleMonthSign > month_sign_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleFormInfo > role_background_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleFormInfo > role_messager_;
  ::XrPb::RoleInfo* role_info_;
  int64_t acc_id_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_RoleInfoAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_RoleInfoAck) */ {
 public:
  inline Msg_DBGS_RoleInfoAck() : Msg_DBGS_RoleInfoAck(nullptr) {}
  ~Msg_DBGS_RoleInfoAck() override;
  explicit constexpr Msg_DBGS_RoleInfoAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_RoleInfoAck(const Msg_DBGS_RoleInfoAck& from);
  Msg_DBGS_RoleInfoAck(Msg_DBGS_RoleInfoAck&& from) noexcept
    : Msg_DBGS_RoleInfoAck() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_RoleInfoAck& operator=(const Msg_DBGS_RoleInfoAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_RoleInfoAck& operator=(Msg_DBGS_RoleInfoAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_RoleInfoAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_RoleInfoAck* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_RoleInfoAck*>(
               &_Msg_DBGS_RoleInfoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Msg_DBGS_RoleInfoAck& a, Msg_DBGS_RoleInfoAck& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_RoleInfoAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_RoleInfoAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_RoleInfoAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_RoleInfoAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_RoleInfoAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_RoleInfoAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_RoleInfoAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_RoleInfoAck";
  }
  protected:
  explicit Msg_DBGS_RoleInfoAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccIdFieldNumber = 2,
    kRetFieldNumber = 3,
  };
  // optional int64 acc_id = 2;
  bool has_acc_id() const;
  private:
  bool _internal_has_acc_id() const;
  public:
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // optional .XrPb.ResultCode ret = 3;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  ::XrPb::ResultCode ret() const;
  void set_ret(::XrPb::ResultCode value);
  private:
  ::XrPb::ResultCode _internal_ret() const;
  void _internal_set_ret(::XrPb::ResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_RoleInfoAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t acc_id_;
  int ret_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_CreateRoleReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_CreateRoleReq) */ {
 public:
  inline Msg_DBGS_CreateRoleReq() : Msg_DBGS_CreateRoleReq(nullptr) {}
  ~Msg_DBGS_CreateRoleReq() override;
  explicit constexpr Msg_DBGS_CreateRoleReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_CreateRoleReq(const Msg_DBGS_CreateRoleReq& from);
  Msg_DBGS_CreateRoleReq(Msg_DBGS_CreateRoleReq&& from) noexcept
    : Msg_DBGS_CreateRoleReq() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_CreateRoleReq& operator=(const Msg_DBGS_CreateRoleReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_CreateRoleReq& operator=(Msg_DBGS_CreateRoleReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_CreateRoleReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_CreateRoleReq* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_CreateRoleReq*>(
               &_Msg_DBGS_CreateRoleReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Msg_DBGS_CreateRoleReq& a, Msg_DBGS_CreateRoleReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_CreateRoleReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_CreateRoleReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_CreateRoleReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_CreateRoleReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_CreateRoleReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_CreateRoleReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_CreateRoleReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_CreateRoleReq";
  }
  protected:
  explicit Msg_DBGS_CreateRoleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleInfoFieldNumber = 2,
    kAccIdFieldNumber = 1,
  };
  // .XrPb.RoleInfo role_info = 2;
  bool has_role_info() const;
  private:
  bool _internal_has_role_info() const;
  public:
  void clear_role_info();
  const ::XrPb::RoleInfo& role_info() const;
  PROTOBUF_NODISCARD ::XrPb::RoleInfo* release_role_info();
  ::XrPb::RoleInfo* mutable_role_info();
  void set_allocated_role_info(::XrPb::RoleInfo* role_info);
  private:
  const ::XrPb::RoleInfo& _internal_role_info() const;
  ::XrPb::RoleInfo* _internal_mutable_role_info();
  public:
  void unsafe_arena_set_allocated_role_info(
      ::XrPb::RoleInfo* role_info);
  ::XrPb::RoleInfo* unsafe_arena_release_role_info();

  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_CreateRoleReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::XrPb::RoleInfo* role_info_;
  int64_t acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_CreateRoleAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_CreateRoleAck) */ {
 public:
  inline Msg_DBGS_CreateRoleAck() : Msg_DBGS_CreateRoleAck(nullptr) {}
  ~Msg_DBGS_CreateRoleAck() override;
  explicit constexpr Msg_DBGS_CreateRoleAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_CreateRoleAck(const Msg_DBGS_CreateRoleAck& from);
  Msg_DBGS_CreateRoleAck(Msg_DBGS_CreateRoleAck&& from) noexcept
    : Msg_DBGS_CreateRoleAck() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_CreateRoleAck& operator=(const Msg_DBGS_CreateRoleAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_CreateRoleAck& operator=(Msg_DBGS_CreateRoleAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_CreateRoleAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_CreateRoleAck* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_CreateRoleAck*>(
               &_Msg_DBGS_CreateRoleAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Msg_DBGS_CreateRoleAck& a, Msg_DBGS_CreateRoleAck& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_CreateRoleAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_CreateRoleAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_CreateRoleAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_CreateRoleAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_CreateRoleAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_CreateRoleAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_CreateRoleAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_CreateRoleAck";
  }
  protected:
  explicit Msg_DBGS_CreateRoleAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccIdFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // int64 acc_id = 2;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // int32 ret = 1;
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_CreateRoleAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t acc_id_;
  int32_t ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_UpdateRoleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_UpdateRoleInfo) */ {
 public:
  inline Msg_DBGS_UpdateRoleInfo() : Msg_DBGS_UpdateRoleInfo(nullptr) {}
  ~Msg_DBGS_UpdateRoleInfo() override;
  explicit constexpr Msg_DBGS_UpdateRoleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_UpdateRoleInfo(const Msg_DBGS_UpdateRoleInfo& from);
  Msg_DBGS_UpdateRoleInfo(Msg_DBGS_UpdateRoleInfo&& from) noexcept
    : Msg_DBGS_UpdateRoleInfo() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_UpdateRoleInfo& operator=(const Msg_DBGS_UpdateRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_UpdateRoleInfo& operator=(Msg_DBGS_UpdateRoleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_UpdateRoleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_UpdateRoleInfo* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_UpdateRoleInfo*>(
               &_Msg_DBGS_UpdateRoleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Msg_DBGS_UpdateRoleInfo& a, Msg_DBGS_UpdateRoleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_UpdateRoleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_UpdateRoleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_UpdateRoleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_UpdateRoleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_UpdateRoleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_UpdateRoleInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_UpdateRoleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_UpdateRoleInfo";
  }
  protected:
  explicit Msg_DBGS_UpdateRoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleInfoFieldNumber = 2,
    kAccIdFieldNumber = 1,
  };
  // optional .XrPb.RoleInfo role_info = 2;
  bool has_role_info() const;
  private:
  bool _internal_has_role_info() const;
  public:
  void clear_role_info();
  const ::XrPb::RoleInfo& role_info() const;
  PROTOBUF_NODISCARD ::XrPb::RoleInfo* release_role_info();
  ::XrPb::RoleInfo* mutable_role_info();
  void set_allocated_role_info(::XrPb::RoleInfo* role_info);
  private:
  const ::XrPb::RoleInfo& _internal_role_info() const;
  ::XrPb::RoleInfo* _internal_mutable_role_info();
  public:
  void unsafe_arena_set_allocated_role_info(
      ::XrPb::RoleInfo* role_info);
  ::XrPb::RoleInfo* unsafe_arena_release_role_info();

  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_UpdateRoleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::XrPb::RoleInfo* role_info_;
  int64_t acc_id_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_Player_Del final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_Player_Del) */ {
 public:
  inline Msg_DBGS_Player_Del() : Msg_DBGS_Player_Del(nullptr) {}
  ~Msg_DBGS_Player_Del() override;
  explicit constexpr Msg_DBGS_Player_Del(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_Player_Del(const Msg_DBGS_Player_Del& from);
  Msg_DBGS_Player_Del(Msg_DBGS_Player_Del&& from) noexcept
    : Msg_DBGS_Player_Del() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_Player_Del& operator=(const Msg_DBGS_Player_Del& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_Player_Del& operator=(Msg_DBGS_Player_Del&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_Player_Del& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_Player_Del* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_Player_Del*>(
               &_Msg_DBGS_Player_Del_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Msg_DBGS_Player_Del& a, Msg_DBGS_Player_Del& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_Player_Del* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_Player_Del* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_Player_Del* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_Player_Del>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_Player_Del& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_Player_Del& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_Player_Del* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_Player_Del";
  }
  protected:
  explicit Msg_DBGS_Player_Del(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccIdFieldNumber = 1,
  };
  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_Player_Del)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_Player_In final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_Player_In) */ {
 public:
  inline Msg_DBGS_Player_In() : Msg_DBGS_Player_In(nullptr) {}
  ~Msg_DBGS_Player_In() override;
  explicit constexpr Msg_DBGS_Player_In(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_Player_In(const Msg_DBGS_Player_In& from);
  Msg_DBGS_Player_In(Msg_DBGS_Player_In&& from) noexcept
    : Msg_DBGS_Player_In() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_Player_In& operator=(const Msg_DBGS_Player_In& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_Player_In& operator=(Msg_DBGS_Player_In&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_Player_In& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_Player_In* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_Player_In*>(
               &_Msg_DBGS_Player_In_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Msg_DBGS_Player_In& a, Msg_DBGS_Player_In& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_Player_In* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_Player_In* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_Player_In* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_Player_In>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_Player_In& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_Player_In& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_Player_In* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_Player_In";
  }
  protected:
  explicit Msg_DBGS_Player_In(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccIdFieldNumber = 1,
  };
  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_Player_In)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_AddRoleBackground final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_AddRoleBackground) */ {
 public:
  inline Msg_DBGS_AddRoleBackground() : Msg_DBGS_AddRoleBackground(nullptr) {}
  ~Msg_DBGS_AddRoleBackground() override;
  explicit constexpr Msg_DBGS_AddRoleBackground(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_AddRoleBackground(const Msg_DBGS_AddRoleBackground& from);
  Msg_DBGS_AddRoleBackground(Msg_DBGS_AddRoleBackground&& from) noexcept
    : Msg_DBGS_AddRoleBackground() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_AddRoleBackground& operator=(const Msg_DBGS_AddRoleBackground& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_AddRoleBackground& operator=(Msg_DBGS_AddRoleBackground&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_AddRoleBackground& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_AddRoleBackground* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_AddRoleBackground*>(
               &_Msg_DBGS_AddRoleBackground_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Msg_DBGS_AddRoleBackground& a, Msg_DBGS_AddRoleBackground& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_AddRoleBackground* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_AddRoleBackground* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_AddRoleBackground* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_AddRoleBackground>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_AddRoleBackground& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_AddRoleBackground& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_AddRoleBackground* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_AddRoleBackground";
  }
  protected:
  explicit Msg_DBGS_AddRoleBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kAccIdFieldNumber = 1,
  };
  // repeated uint32 id = 2;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  uint32_t _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_id() const;
  void _internal_add_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_id();
  public:
  uint32_t id(int index) const;
  void set_id(int index, uint32_t value);
  void add_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_id();

  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_AddRoleBackground)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > id_;
  mutable std::atomic<int> _id_cached_byte_size_;
  int64_t acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_DeleteBackground final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_DeleteBackground) */ {
 public:
  inline Msg_DBGS_DeleteBackground() : Msg_DBGS_DeleteBackground(nullptr) {}
  ~Msg_DBGS_DeleteBackground() override;
  explicit constexpr Msg_DBGS_DeleteBackground(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_DeleteBackground(const Msg_DBGS_DeleteBackground& from);
  Msg_DBGS_DeleteBackground(Msg_DBGS_DeleteBackground&& from) noexcept
    : Msg_DBGS_DeleteBackground() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_DeleteBackground& operator=(const Msg_DBGS_DeleteBackground& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_DeleteBackground& operator=(Msg_DBGS_DeleteBackground&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_DeleteBackground& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_DeleteBackground* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_DeleteBackground*>(
               &_Msg_DBGS_DeleteBackground_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Msg_DBGS_DeleteBackground& a, Msg_DBGS_DeleteBackground& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_DeleteBackground* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_DeleteBackground* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_DeleteBackground* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_DeleteBackground>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_DeleteBackground& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_DeleteBackground& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_DeleteBackground* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_DeleteBackground";
  }
  protected:
  explicit Msg_DBGS_DeleteBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kAccIdFieldNumber = 1,
  };
  // repeated uint32 id = 2;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  uint32_t _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_id() const;
  void _internal_add_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_id();
  public:
  uint32_t id(int index) const;
  void set_id(int index, uint32_t value);
  void add_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_id();

  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_DeleteBackground)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > id_;
  mutable std::atomic<int> _id_cached_byte_size_;
  int64_t acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_AddRolePortrait final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_AddRolePortrait) */ {
 public:
  inline Msg_DBGS_AddRolePortrait() : Msg_DBGS_AddRolePortrait(nullptr) {}
  ~Msg_DBGS_AddRolePortrait() override;
  explicit constexpr Msg_DBGS_AddRolePortrait(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_AddRolePortrait(const Msg_DBGS_AddRolePortrait& from);
  Msg_DBGS_AddRolePortrait(Msg_DBGS_AddRolePortrait&& from) noexcept
    : Msg_DBGS_AddRolePortrait() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_AddRolePortrait& operator=(const Msg_DBGS_AddRolePortrait& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_AddRolePortrait& operator=(Msg_DBGS_AddRolePortrait&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_AddRolePortrait& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_AddRolePortrait* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_AddRolePortrait*>(
               &_Msg_DBGS_AddRolePortrait_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Msg_DBGS_AddRolePortrait& a, Msg_DBGS_AddRolePortrait& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_AddRolePortrait* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_AddRolePortrait* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_AddRolePortrait* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_AddRolePortrait>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_AddRolePortrait& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_AddRolePortrait& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_AddRolePortrait* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_AddRolePortrait";
  }
  protected:
  explicit Msg_DBGS_AddRolePortrait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kAccIdFieldNumber = 1,
  };
  // repeated uint32 id = 2;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  uint32_t _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_id() const;
  void _internal_add_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_id();
  public:
  uint32_t id(int index) const;
  void set_id(int index, uint32_t value);
  void add_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_id();

  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_AddRolePortrait)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > id_;
  mutable std::atomic<int> _id_cached_byte_size_;
  int64_t acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_DeletePortrait final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_DeletePortrait) */ {
 public:
  inline Msg_DBGS_DeletePortrait() : Msg_DBGS_DeletePortrait(nullptr) {}
  ~Msg_DBGS_DeletePortrait() override;
  explicit constexpr Msg_DBGS_DeletePortrait(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_DeletePortrait(const Msg_DBGS_DeletePortrait& from);
  Msg_DBGS_DeletePortrait(Msg_DBGS_DeletePortrait&& from) noexcept
    : Msg_DBGS_DeletePortrait() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_DeletePortrait& operator=(const Msg_DBGS_DeletePortrait& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_DeletePortrait& operator=(Msg_DBGS_DeletePortrait&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_DeletePortrait& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_DeletePortrait* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_DeletePortrait*>(
               &_Msg_DBGS_DeletePortrait_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Msg_DBGS_DeletePortrait& a, Msg_DBGS_DeletePortrait& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_DeletePortrait* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_DeletePortrait* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_DeletePortrait* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_DeletePortrait>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_DeletePortrait& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_DeletePortrait& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_DeletePortrait* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_DeletePortrait";
  }
  protected:
  explicit Msg_DBGS_DeletePortrait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kAccIdFieldNumber = 1,
  };
  // repeated uint32 id = 2;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  uint32_t _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_id() const;
  void _internal_add_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_id();
  public:
  uint32_t id(int index) const;
  void set_id(int index, uint32_t value);
  void add_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_id();

  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_DeletePortrait)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > id_;
  mutable std::atomic<int> _id_cached_byte_size_;
  int64_t acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_AddRoleMessager final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_AddRoleMessager) */ {
 public:
  inline Msg_DBGS_AddRoleMessager() : Msg_DBGS_AddRoleMessager(nullptr) {}
  ~Msg_DBGS_AddRoleMessager() override;
  explicit constexpr Msg_DBGS_AddRoleMessager(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_AddRoleMessager(const Msg_DBGS_AddRoleMessager& from);
  Msg_DBGS_AddRoleMessager(Msg_DBGS_AddRoleMessager&& from) noexcept
    : Msg_DBGS_AddRoleMessager() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_AddRoleMessager& operator=(const Msg_DBGS_AddRoleMessager& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_AddRoleMessager& operator=(Msg_DBGS_AddRoleMessager&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_AddRoleMessager& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_AddRoleMessager* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_AddRoleMessager*>(
               &_Msg_DBGS_AddRoleMessager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Msg_DBGS_AddRoleMessager& a, Msg_DBGS_AddRoleMessager& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_AddRoleMessager* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_AddRoleMessager* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_AddRoleMessager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_AddRoleMessager>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_AddRoleMessager& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_AddRoleMessager& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_AddRoleMessager* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_AddRoleMessager";
  }
  protected:
  explicit Msg_DBGS_AddRoleMessager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagerFieldNumber = 2,
    kAccIdFieldNumber = 1,
  };
  // repeated uint32 messager = 2;
  int messager_size() const;
  private:
  int _internal_messager_size() const;
  public:
  void clear_messager();
  private:
  uint32_t _internal_messager(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_messager() const;
  void _internal_add_messager(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_messager();
  public:
  uint32_t messager(int index) const;
  void set_messager(int index, uint32_t value);
  void add_messager(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      messager() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_messager();

  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_AddRoleMessager)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > messager_;
  mutable std::atomic<int> _messager_cached_byte_size_;
  int64_t acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_DeleteMessager final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_DeleteMessager) */ {
 public:
  inline Msg_DBGS_DeleteMessager() : Msg_DBGS_DeleteMessager(nullptr) {}
  ~Msg_DBGS_DeleteMessager() override;
  explicit constexpr Msg_DBGS_DeleteMessager(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_DeleteMessager(const Msg_DBGS_DeleteMessager& from);
  Msg_DBGS_DeleteMessager(Msg_DBGS_DeleteMessager&& from) noexcept
    : Msg_DBGS_DeleteMessager() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_DeleteMessager& operator=(const Msg_DBGS_DeleteMessager& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_DeleteMessager& operator=(Msg_DBGS_DeleteMessager&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_DeleteMessager& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_DeleteMessager* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_DeleteMessager*>(
               &_Msg_DBGS_DeleteMessager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Msg_DBGS_DeleteMessager& a, Msg_DBGS_DeleteMessager& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_DeleteMessager* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_DeleteMessager* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_DeleteMessager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_DeleteMessager>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_DeleteMessager& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_DeleteMessager& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_DeleteMessager* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_DeleteMessager";
  }
  protected:
  explicit Msg_DBGS_DeleteMessager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kAccIdFieldNumber = 1,
  };
  // repeated uint32 id = 2;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  uint32_t _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_id() const;
  void _internal_add_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_id();
  public:
  uint32_t id(int index) const;
  void set_id(int index, uint32_t value);
  void add_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_id();

  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_DeleteMessager)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > id_;
  mutable std::atomic<int> _id_cached_byte_size_;
  int64_t acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_LoadBaseInfoReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_LoadBaseInfoReq) */ {
 public:
  inline Msg_DBGS_LoadBaseInfoReq() : Msg_DBGS_LoadBaseInfoReq(nullptr) {}
  ~Msg_DBGS_LoadBaseInfoReq() override;
  explicit constexpr Msg_DBGS_LoadBaseInfoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_LoadBaseInfoReq(const Msg_DBGS_LoadBaseInfoReq& from);
  Msg_DBGS_LoadBaseInfoReq(Msg_DBGS_LoadBaseInfoReq&& from) noexcept
    : Msg_DBGS_LoadBaseInfoReq() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_LoadBaseInfoReq& operator=(const Msg_DBGS_LoadBaseInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_LoadBaseInfoReq& operator=(Msg_DBGS_LoadBaseInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_LoadBaseInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_LoadBaseInfoReq* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_LoadBaseInfoReq*>(
               &_Msg_DBGS_LoadBaseInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Msg_DBGS_LoadBaseInfoReq& a, Msg_DBGS_LoadBaseInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_LoadBaseInfoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_LoadBaseInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_LoadBaseInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_LoadBaseInfoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_LoadBaseInfoReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_LoadBaseInfoReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_LoadBaseInfoReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_LoadBaseInfoReq";
  }
  protected:
  explicit Msg_DBGS_LoadBaseInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckIdFieldNumber = 1,
    kCheckedIdFieldNumber = 2,
    kProtoIdFieldNumber = 3,
    kIdFieldNumber = 4,
    kSeqIdFieldNumber = 5,
  };
  // int64 check_id = 1;
  void clear_check_id();
  int64_t check_id() const;
  void set_check_id(int64_t value);
  private:
  int64_t _internal_check_id() const;
  void _internal_set_check_id(int64_t value);
  public:

  // int64 checked_id = 2;
  void clear_checked_id();
  int64_t checked_id() const;
  void set_checked_id(int64_t value);
  private:
  int64_t _internal_checked_id() const;
  void _internal_set_checked_id(int64_t value);
  public:

  // uint32 proto_id = 3;
  void clear_proto_id();
  uint32_t proto_id() const;
  void set_proto_id(uint32_t value);
  private:
  uint32_t _internal_proto_id() const;
  void _internal_set_proto_id(uint32_t value);
  public:

  // optional uint32 id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 seq_id = 5;
  void clear_seq_id();
  uint32_t seq_id() const;
  void set_seq_id(uint32_t value);
  private:
  uint32_t _internal_seq_id() const;
  void _internal_set_seq_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_LoadBaseInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t check_id_;
  int64_t checked_id_;
  uint32_t proto_id_;
  uint32_t id_;
  uint32_t seq_id_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_LoadBaseInfoAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_LoadBaseInfoAck) */ {
 public:
  inline Msg_DBGS_LoadBaseInfoAck() : Msg_DBGS_LoadBaseInfoAck(nullptr) {}
  ~Msg_DBGS_LoadBaseInfoAck() override;
  explicit constexpr Msg_DBGS_LoadBaseInfoAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_LoadBaseInfoAck(const Msg_DBGS_LoadBaseInfoAck& from);
  Msg_DBGS_LoadBaseInfoAck(Msg_DBGS_LoadBaseInfoAck&& from) noexcept
    : Msg_DBGS_LoadBaseInfoAck() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_LoadBaseInfoAck& operator=(const Msg_DBGS_LoadBaseInfoAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_LoadBaseInfoAck& operator=(Msg_DBGS_LoadBaseInfoAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_LoadBaseInfoAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_LoadBaseInfoAck* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_LoadBaseInfoAck*>(
               &_Msg_DBGS_LoadBaseInfoAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Msg_DBGS_LoadBaseInfoAck& a, Msg_DBGS_LoadBaseInfoAck& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_LoadBaseInfoAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_LoadBaseInfoAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_LoadBaseInfoAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_LoadBaseInfoAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_LoadBaseInfoAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_LoadBaseInfoAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_LoadBaseInfoAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_LoadBaseInfoAck";
  }
  protected:
  explicit Msg_DBGS_LoadBaseInfoAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckIdFieldNumber = 1,
    kCheckedIdFieldNumber = 2,
    kProtoIdFieldNumber = 3,
    kIdFieldNumber = 4,
    kSeqIdFieldNumber = 5,
    kRetCodeFieldNumber = 6,
  };
  // int64 check_id = 1;
  void clear_check_id();
  int64_t check_id() const;
  void set_check_id(int64_t value);
  private:
  int64_t _internal_check_id() const;
  void _internal_set_check_id(int64_t value);
  public:

  // int64 checked_id = 2;
  void clear_checked_id();
  int64_t checked_id() const;
  void set_checked_id(int64_t value);
  private:
  int64_t _internal_checked_id() const;
  void _internal_set_checked_id(int64_t value);
  public:

  // uint32 proto_id = 3;
  void clear_proto_id();
  uint32_t proto_id() const;
  void set_proto_id(uint32_t value);
  private:
  uint32_t _internal_proto_id() const;
  void _internal_set_proto_id(uint32_t value);
  public:

  // optional uint32 id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 seq_id = 5;
  void clear_seq_id();
  uint32_t seq_id() const;
  void set_seq_id(uint32_t value);
  private:
  uint32_t _internal_seq_id() const;
  void _internal_set_seq_id(uint32_t value);
  public:

  // uint32 ret_code = 6;
  void clear_ret_code();
  uint32_t ret_code() const;
  void set_ret_code(uint32_t value);
  private:
  uint32_t _internal_ret_code() const;
  void _internal_set_ret_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_LoadBaseInfoAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t check_id_;
  int64_t checked_id_;
  uint32_t proto_id_;
  uint32_t id_;
  uint32_t seq_id_;
  uint32_t ret_code_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_AddItemReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_AddItemReq) */ {
 public:
  inline Msg_DBGS_AddItemReq() : Msg_DBGS_AddItemReq(nullptr) {}
  ~Msg_DBGS_AddItemReq() override;
  explicit constexpr Msg_DBGS_AddItemReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_AddItemReq(const Msg_DBGS_AddItemReq& from);
  Msg_DBGS_AddItemReq(Msg_DBGS_AddItemReq&& from) noexcept
    : Msg_DBGS_AddItemReq() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_AddItemReq& operator=(const Msg_DBGS_AddItemReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_AddItemReq& operator=(Msg_DBGS_AddItemReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_AddItemReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_AddItemReq* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_AddItemReq*>(
               &_Msg_DBGS_AddItemReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Msg_DBGS_AddItemReq& a, Msg_DBGS_AddItemReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_AddItemReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_AddItemReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_AddItemReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_AddItemReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_AddItemReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_AddItemReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_AddItemReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_AddItemReq";
  }
  protected:
  explicit Msg_DBGS_AddItemReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kORoleItemFieldNumber = 1,
  };
  // .XrPb.RoleItem oRoleItem = 1;
  bool has_oroleitem() const;
  private:
  bool _internal_has_oroleitem() const;
  public:
  void clear_oroleitem();
  const ::XrPb::RoleItem& oroleitem() const;
  PROTOBUF_NODISCARD ::XrPb::RoleItem* release_oroleitem();
  ::XrPb::RoleItem* mutable_oroleitem();
  void set_allocated_oroleitem(::XrPb::RoleItem* oroleitem);
  private:
  const ::XrPb::RoleItem& _internal_oroleitem() const;
  ::XrPb::RoleItem* _internal_mutable_oroleitem();
  public:
  void unsafe_arena_set_allocated_oroleitem(
      ::XrPb::RoleItem* oroleitem);
  ::XrPb::RoleItem* unsafe_arena_release_oroleitem();

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_AddItemReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::XrPb::RoleItem* oroleitem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_UpdateItemReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_UpdateItemReq) */ {
 public:
  inline Msg_DBGS_UpdateItemReq() : Msg_DBGS_UpdateItemReq(nullptr) {}
  ~Msg_DBGS_UpdateItemReq() override;
  explicit constexpr Msg_DBGS_UpdateItemReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_UpdateItemReq(const Msg_DBGS_UpdateItemReq& from);
  Msg_DBGS_UpdateItemReq(Msg_DBGS_UpdateItemReq&& from) noexcept
    : Msg_DBGS_UpdateItemReq() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_UpdateItemReq& operator=(const Msg_DBGS_UpdateItemReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_UpdateItemReq& operator=(Msg_DBGS_UpdateItemReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_UpdateItemReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_UpdateItemReq* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_UpdateItemReq*>(
               &_Msg_DBGS_UpdateItemReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Msg_DBGS_UpdateItemReq& a, Msg_DBGS_UpdateItemReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_UpdateItemReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_UpdateItemReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_UpdateItemReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_UpdateItemReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_UpdateItemReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_UpdateItemReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_UpdateItemReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_UpdateItemReq";
  }
  protected:
  explicit Msg_DBGS_UpdateItemReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kORoleItemFieldNumber = 1,
  };
  // .XrPb.RoleItem oRoleItem = 1;
  bool has_oroleitem() const;
  private:
  bool _internal_has_oroleitem() const;
  public:
  void clear_oroleitem();
  const ::XrPb::RoleItem& oroleitem() const;
  PROTOBUF_NODISCARD ::XrPb::RoleItem* release_oroleitem();
  ::XrPb::RoleItem* mutable_oroleitem();
  void set_allocated_oroleitem(::XrPb::RoleItem* oroleitem);
  private:
  const ::XrPb::RoleItem& _internal_oroleitem() const;
  ::XrPb::RoleItem* _internal_mutable_oroleitem();
  public:
  void unsafe_arena_set_allocated_oroleitem(
      ::XrPb::RoleItem* oroleitem);
  ::XrPb::RoleItem* unsafe_arena_release_oroleitem();

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_UpdateItemReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::XrPb::RoleItem* oroleitem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_UpdateDailyAward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_UpdateDailyAward) */ {
 public:
  inline Msg_DBGS_UpdateDailyAward() : Msg_DBGS_UpdateDailyAward(nullptr) {}
  ~Msg_DBGS_UpdateDailyAward() override;
  explicit constexpr Msg_DBGS_UpdateDailyAward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_UpdateDailyAward(const Msg_DBGS_UpdateDailyAward& from);
  Msg_DBGS_UpdateDailyAward(Msg_DBGS_UpdateDailyAward&& from) noexcept
    : Msg_DBGS_UpdateDailyAward() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_UpdateDailyAward& operator=(const Msg_DBGS_UpdateDailyAward& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_UpdateDailyAward& operator=(Msg_DBGS_UpdateDailyAward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_UpdateDailyAward& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_UpdateDailyAward* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_UpdateDailyAward*>(
               &_Msg_DBGS_UpdateDailyAward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Msg_DBGS_UpdateDailyAward& a, Msg_DBGS_UpdateDailyAward& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_UpdateDailyAward* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_UpdateDailyAward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_UpdateDailyAward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_UpdateDailyAward>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_UpdateDailyAward& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_UpdateDailyAward& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_UpdateDailyAward* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_UpdateDailyAward";
  }
  protected:
  explicit Msg_DBGS_UpdateDailyAward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecDailyAwardFieldNumber = 1,
  };
  // repeated .XrPb.RoleDailyAward vecDailyAward = 1;
  int vecdailyaward_size() const;
  private:
  int _internal_vecdailyaward_size() const;
  public:
  void clear_vecdailyaward();
  ::XrPb::RoleDailyAward* mutable_vecdailyaward(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleDailyAward >*
      mutable_vecdailyaward();
  private:
  const ::XrPb::RoleDailyAward& _internal_vecdailyaward(int index) const;
  ::XrPb::RoleDailyAward* _internal_add_vecdailyaward();
  public:
  const ::XrPb::RoleDailyAward& vecdailyaward(int index) const;
  ::XrPb::RoleDailyAward* add_vecdailyaward();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleDailyAward >&
      vecdailyaward() const;

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_UpdateDailyAward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleDailyAward > vecdailyaward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_UpdateLoginedSign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_UpdateLoginedSign) */ {
 public:
  inline Msg_DBGS_UpdateLoginedSign() : Msg_DBGS_UpdateLoginedSign(nullptr) {}
  ~Msg_DBGS_UpdateLoginedSign() override;
  explicit constexpr Msg_DBGS_UpdateLoginedSign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_UpdateLoginedSign(const Msg_DBGS_UpdateLoginedSign& from);
  Msg_DBGS_UpdateLoginedSign(Msg_DBGS_UpdateLoginedSign&& from) noexcept
    : Msg_DBGS_UpdateLoginedSign() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_UpdateLoginedSign& operator=(const Msg_DBGS_UpdateLoginedSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_UpdateLoginedSign& operator=(Msg_DBGS_UpdateLoginedSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_UpdateLoginedSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_UpdateLoginedSign* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_UpdateLoginedSign*>(
               &_Msg_DBGS_UpdateLoginedSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Msg_DBGS_UpdateLoginedSign& a, Msg_DBGS_UpdateLoginedSign& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_UpdateLoginedSign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_UpdateLoginedSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_UpdateLoginedSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_UpdateLoginedSign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_UpdateLoginedSign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_UpdateLoginedSign& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_UpdateLoginedSign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_UpdateLoginedSign";
  }
  protected:
  explicit Msg_DBGS_UpdateLoginedSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrVersionFieldNumber = 2,
    kUiIdFieldNumber = 1,
    kUiDayFieldNumber = 3,
    kLlTimeFieldNumber = 4,
  };
  // optional string strVersion = 2;
  bool has_strversion() const;
  private:
  bool _internal_has_strversion() const;
  public:
  void clear_strversion();
  const std::string& strversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strversion();
  PROTOBUF_NODISCARD std::string* release_strversion();
  void set_allocated_strversion(std::string* strversion);
  private:
  const std::string& _internal_strversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strversion(const std::string& value);
  std::string* _internal_mutable_strversion();
  public:

  // uint32 uiId = 1;
  void clear_uiid();
  uint32_t uiid() const;
  void set_uiid(uint32_t value);
  private:
  uint32_t _internal_uiid() const;
  void _internal_set_uiid(uint32_t value);
  public:

  // optional uint32 uiDay = 3;
  bool has_uiday() const;
  private:
  bool _internal_has_uiday() const;
  public:
  void clear_uiday();
  uint32_t uiday() const;
  void set_uiday(uint32_t value);
  private:
  uint32_t _internal_uiday() const;
  void _internal_set_uiday(uint32_t value);
  public:

  // optional int64 llTime = 4;
  bool has_lltime() const;
  private:
  bool _internal_has_lltime() const;
  public:
  void clear_lltime();
  int64_t lltime() const;
  void set_lltime(int64_t value);
  private:
  int64_t _internal_lltime() const;
  void _internal_set_lltime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_UpdateLoginedSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strversion_;
  uint32_t uiid_;
  uint32_t uiday_;
  int64_t lltime_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_UpdateMonthSign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_UpdateMonthSign) */ {
 public:
  inline Msg_DBGS_UpdateMonthSign() : Msg_DBGS_UpdateMonthSign(nullptr) {}
  ~Msg_DBGS_UpdateMonthSign() override;
  explicit constexpr Msg_DBGS_UpdateMonthSign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_UpdateMonthSign(const Msg_DBGS_UpdateMonthSign& from);
  Msg_DBGS_UpdateMonthSign(Msg_DBGS_UpdateMonthSign&& from) noexcept
    : Msg_DBGS_UpdateMonthSign() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_UpdateMonthSign& operator=(const Msg_DBGS_UpdateMonthSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_UpdateMonthSign& operator=(Msg_DBGS_UpdateMonthSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_UpdateMonthSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_UpdateMonthSign* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_UpdateMonthSign*>(
               &_Msg_DBGS_UpdateMonthSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Msg_DBGS_UpdateMonthSign& a, Msg_DBGS_UpdateMonthSign& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_UpdateMonthSign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_UpdateMonthSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_UpdateMonthSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_UpdateMonthSign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_UpdateMonthSign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_UpdateMonthSign& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_UpdateMonthSign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_UpdateMonthSign";
  }
  protected:
  explicit Msg_DBGS_UpdateMonthSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOSignFieldNumber = 1,
    kLlSignTimeFieldNumber = 2,
  };
  // repeated .XrPb.RoleMonthSign oSign = 1;
  int osign_size() const;
  private:
  int _internal_osign_size() const;
  public:
  void clear_osign();
  ::XrPb::RoleMonthSign* mutable_osign(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleMonthSign >*
      mutable_osign();
  private:
  const ::XrPb::RoleMonthSign& _internal_osign(int index) const;
  ::XrPb::RoleMonthSign* _internal_add_osign();
  public:
  const ::XrPb::RoleMonthSign& osign(int index) const;
  ::XrPb::RoleMonthSign* add_osign();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleMonthSign >&
      osign() const;

  // optional int64 llSignTime = 2;
  bool has_llsigntime() const;
  private:
  bool _internal_has_llsigntime() const;
  public:
  void clear_llsigntime();
  int64_t llsigntime() const;
  void set_llsigntime(int64_t value);
  private:
  int64_t _internal_llsigntime() const;
  void _internal_set_llsigntime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_UpdateMonthSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleMonthSign > osign_;
  int64_t llsigntime_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_DBGS_ClearMonthSign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_DBGS_ClearMonthSign) */ {
 public:
  inline Msg_DBGS_ClearMonthSign() : Msg_DBGS_ClearMonthSign(nullptr) {}
  ~Msg_DBGS_ClearMonthSign() override;
  explicit constexpr Msg_DBGS_ClearMonthSign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_DBGS_ClearMonthSign(const Msg_DBGS_ClearMonthSign& from);
  Msg_DBGS_ClearMonthSign(Msg_DBGS_ClearMonthSign&& from) noexcept
    : Msg_DBGS_ClearMonthSign() {
    *this = ::std::move(from);
  }

  inline Msg_DBGS_ClearMonthSign& operator=(const Msg_DBGS_ClearMonthSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_DBGS_ClearMonthSign& operator=(Msg_DBGS_ClearMonthSign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_DBGS_ClearMonthSign& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_DBGS_ClearMonthSign* internal_default_instance() {
    return reinterpret_cast<const Msg_DBGS_ClearMonthSign*>(
               &_Msg_DBGS_ClearMonthSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Msg_DBGS_ClearMonthSign& a, Msg_DBGS_ClearMonthSign& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_DBGS_ClearMonthSign* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_DBGS_ClearMonthSign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_DBGS_ClearMonthSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_DBGS_ClearMonthSign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_DBGS_ClearMonthSign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_DBGS_ClearMonthSign& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_DBGS_ClearMonthSign* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_DBGS_ClearMonthSign";
  }
  protected:
  explicit Msg_DBGS_ClearMonthSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLlCurTimeFieldNumber = 1,
  };
  // int64 llCurTime = 1;
  void clear_llcurtime();
  int64_t llcurtime() const;
  void set_llcurtime(int64_t value);
  private:
  int64_t _internal_llcurtime() const;
  void _internal_set_llcurtime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_DBGS_ClearMonthSign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t llcurtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgDBGS_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgSvrMod_DBGS

// -------------------------------------------------------------------

// Msg_DBGS_RoleInfoReq

// int64 acc_id = 1;
inline void Msg_DBGS_RoleInfoReq::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_RoleInfoReq::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_DBGS_RoleInfoReq::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_RoleInfoReq.acc_id)
  return _internal_acc_id();
}
inline void Msg_DBGS_RoleInfoReq::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_DBGS_RoleInfoReq::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_RoleInfoReq.acc_id)
}

// -------------------------------------------------------------------

// RoleInfo

// optional int64 acc_id = 1;
inline bool RoleInfo::_internal_has_acc_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RoleInfo::has_acc_id() const {
  return _internal_has_acc_id();
}
inline void RoleInfo::clear_acc_id() {
  acc_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t RoleInfo::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t RoleInfo::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.acc_id)
  return _internal_acc_id();
}
inline void RoleInfo::_internal_set_acc_id(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  acc_id_ = value;
}
inline void RoleInfo::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.acc_id)
}

// optional int64 role_id = 2;
inline bool RoleInfo::_internal_has_role_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RoleInfo::has_role_id() const {
  return _internal_has_role_id();
}
inline void RoleInfo::clear_role_id() {
  role_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t RoleInfo::_internal_role_id() const {
  return role_id_;
}
inline int64_t RoleInfo::role_id() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.role_id)
  return _internal_role_id();
}
inline void RoleInfo::_internal_set_role_id(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  role_id_ = value;
}
inline void RoleInfo::set_role_id(int64_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.role_id)
}

// optional string acc_name = 3;
inline bool RoleInfo::_internal_has_acc_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoleInfo::has_acc_name() const {
  return _internal_has_acc_name();
}
inline void RoleInfo::clear_acc_name() {
  acc_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoleInfo::acc_name() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.acc_name)
  return _internal_acc_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleInfo::set_acc_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 acc_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.acc_name)
}
inline std::string* RoleInfo::mutable_acc_name() {
  std::string* _s = _internal_mutable_acc_name();
  // @@protoc_insertion_point(field_mutable:XrPb.RoleInfo.acc_name)
  return _s;
}
inline const std::string& RoleInfo::_internal_acc_name() const {
  return acc_name_.Get();
}
inline void RoleInfo::_internal_set_acc_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  acc_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoleInfo::_internal_mutable_acc_name() {
  _has_bits_[0] |= 0x00000001u;
  return acc_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoleInfo::release_acc_name() {
  // @@protoc_insertion_point(field_release:XrPb.RoleInfo.acc_name)
  if (!_internal_has_acc_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = acc_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (acc_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    acc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleInfo::set_allocated_acc_name(std::string* acc_name) {
  if (acc_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  acc_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acc_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (acc_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    acc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.RoleInfo.acc_name)
}

// optional string role_name = 4;
inline bool RoleInfo::_internal_has_role_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoleInfo::has_role_name() const {
  return _internal_has_role_name();
}
inline void RoleInfo::clear_role_name() {
  role_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RoleInfo::role_name() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.role_name)
  return _internal_role_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleInfo::set_role_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.role_name)
}
inline std::string* RoleInfo::mutable_role_name() {
  std::string* _s = _internal_mutable_role_name();
  // @@protoc_insertion_point(field_mutable:XrPb.RoleInfo.role_name)
  return _s;
}
inline const std::string& RoleInfo::_internal_role_name() const {
  return role_name_.Get();
}
inline void RoleInfo::_internal_set_role_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoleInfo::_internal_mutable_role_name() {
  _has_bits_[0] |= 0x00000002u;
  return role_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoleInfo::release_role_name() {
  // @@protoc_insertion_point(field_release:XrPb.RoleInfo.role_name)
  if (!_internal_has_role_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = role_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (role_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    role_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleInfo::set_allocated_role_name(std::string* role_name) {
  if (role_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  role_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (role_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    role_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.RoleInfo.role_name)
}

// optional uint32 career_id = 5;
inline bool RoleInfo::_internal_has_career_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RoleInfo::has_career_id() const {
  return _internal_has_career_id();
}
inline void RoleInfo::clear_career_id() {
  career_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t RoleInfo::_internal_career_id() const {
  return career_id_;
}
inline uint32_t RoleInfo::career_id() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.career_id)
  return _internal_career_id();
}
inline void RoleInfo::_internal_set_career_id(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  career_id_ = value;
}
inline void RoleInfo::set_career_id(uint32_t value) {
  _internal_set_career_id(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.career_id)
}

// optional uint32 gender = 6;
inline bool RoleInfo::_internal_has_gender() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RoleInfo::has_gender() const {
  return _internal_has_gender();
}
inline void RoleInfo::clear_gender() {
  gender_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t RoleInfo::_internal_gender() const {
  return gender_;
}
inline uint32_t RoleInfo::gender() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.gender)
  return _internal_gender();
}
inline void RoleInfo::_internal_set_gender(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  gender_ = value;
}
inline void RoleInfo::set_gender(uint32_t value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.gender)
}

// optional uint32 level = 7;
inline bool RoleInfo::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RoleInfo::has_level() const {
  return _internal_has_level();
}
inline void RoleInfo::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t RoleInfo::_internal_level() const {
  return level_;
}
inline uint32_t RoleInfo::level() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.level)
  return _internal_level();
}
inline void RoleInfo::_internal_set_level(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  level_ = value;
}
inline void RoleInfo::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.level)
}

// optional uint32 exp = 8;
inline bool RoleInfo::_internal_has_exp() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RoleInfo::has_exp() const {
  return _internal_has_exp();
}
inline void RoleInfo::clear_exp() {
  exp_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t RoleInfo::_internal_exp() const {
  return exp_;
}
inline uint32_t RoleInfo::exp() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.exp)
  return _internal_exp();
}
inline void RoleInfo::_internal_set_exp(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  exp_ = value;
}
inline void RoleInfo::set_exp(uint32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.exp)
}

// optional uint32 gm_level = 9;
inline bool RoleInfo::_internal_has_gm_level() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RoleInfo::has_gm_level() const {
  return _internal_has_gm_level();
}
inline void RoleInfo::clear_gm_level() {
  gm_level_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline uint32_t RoleInfo::_internal_gm_level() const {
  return gm_level_;
}
inline uint32_t RoleInfo::gm_level() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.gm_level)
  return _internal_gm_level();
}
inline void RoleInfo::_internal_set_gm_level(uint32_t value) {
  _has_bits_[0] |= 0x00000400u;
  gm_level_ = value;
}
inline void RoleInfo::set_gm_level(uint32_t value) {
  _internal_set_gm_level(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.gm_level)
}

// optional int64 punish_time = 10;
inline bool RoleInfo::_internal_has_punish_time() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RoleInfo::has_punish_time() const {
  return _internal_has_punish_time();
}
inline void RoleInfo::clear_punish_time() {
  punish_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00000200u;
}
inline int64_t RoleInfo::_internal_punish_time() const {
  return punish_time_;
}
inline int64_t RoleInfo::punish_time() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.punish_time)
  return _internal_punish_time();
}
inline void RoleInfo::_internal_set_punish_time(int64_t value) {
  _has_bits_[0] |= 0x00000200u;
  punish_time_ = value;
}
inline void RoleInfo::set_punish_time(int64_t value) {
  _internal_set_punish_time(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.punish_time)
}

// optional uint32 role_sdk = 11;
inline bool RoleInfo::_internal_has_role_sdk() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RoleInfo::has_role_sdk() const {
  return _internal_has_role_sdk();
}
inline void RoleInfo::clear_role_sdk() {
  role_sdk_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline uint32_t RoleInfo::_internal_role_sdk() const {
  return role_sdk_;
}
inline uint32_t RoleInfo::role_sdk() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.role_sdk)
  return _internal_role_sdk();
}
inline void RoleInfo::_internal_set_role_sdk(uint32_t value) {
  _has_bits_[0] |= 0x00000800u;
  role_sdk_ = value;
}
inline void RoleInfo::set_role_sdk(uint32_t value) {
  _internal_set_role_sdk(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.role_sdk)
}

// optional .XrPb.FormData form = 12;
inline bool RoleInfo::_internal_has_form() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || form_ != nullptr);
  return value;
}
inline bool RoleInfo::has_form() const {
  return _internal_has_form();
}
inline const ::XrPb::FormData& RoleInfo::_internal_form() const {
  const ::XrPb::FormData* p = form_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::FormData&>(
      ::XrPb::_FormData_default_instance_);
}
inline const ::XrPb::FormData& RoleInfo::form() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.form)
  return _internal_form();
}
inline void RoleInfo::unsafe_arena_set_allocated_form(
    ::XrPb::FormData* form) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(form_);
  }
  form_ = form;
  if (form) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.RoleInfo.form)
}
inline ::XrPb::FormData* RoleInfo::release_form() {
  _has_bits_[0] &= ~0x00000004u;
  ::XrPb::FormData* temp = form_;
  form_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::FormData* RoleInfo::unsafe_arena_release_form() {
  // @@protoc_insertion_point(field_release:XrPb.RoleInfo.form)
  _has_bits_[0] &= ~0x00000004u;
  ::XrPb::FormData* temp = form_;
  form_ = nullptr;
  return temp;
}
inline ::XrPb::FormData* RoleInfo::_internal_mutable_form() {
  _has_bits_[0] |= 0x00000004u;
  if (form_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::FormData>(GetArenaForAllocation());
    form_ = p;
  }
  return form_;
}
inline ::XrPb::FormData* RoleInfo::mutable_form() {
  ::XrPb::FormData* _msg = _internal_mutable_form();
  // @@protoc_insertion_point(field_mutable:XrPb.RoleInfo.form)
  return _msg;
}
inline void RoleInfo::set_allocated_form(::XrPb::FormData* form) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(form_);
  }
  if (form) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(form));
    if (message_arena != submessage_arena) {
      form = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, form, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  form_ = form;
  // @@protoc_insertion_point(field_set_allocated:XrPb.RoleInfo.form)
}

// optional uint32 server_id = 13;
inline bool RoleInfo::_internal_has_server_id() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool RoleInfo::has_server_id() const {
  return _internal_has_server_id();
}
inline void RoleInfo::clear_server_id() {
  server_id_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline uint32_t RoleInfo::_internal_server_id() const {
  return server_id_;
}
inline uint32_t RoleInfo::server_id() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.server_id)
  return _internal_server_id();
}
inline void RoleInfo::_internal_set_server_id(uint32_t value) {
  _has_bits_[0] |= 0x00008000u;
  server_id_ = value;
}
inline void RoleInfo::set_server_id(uint32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.server_id)
}

// optional int64 create_time = 14;
inline bool RoleInfo::_internal_has_create_time() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RoleInfo::has_create_time() const {
  return _internal_has_create_time();
}
inline void RoleInfo::clear_create_time() {
  create_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00001000u;
}
inline int64_t RoleInfo::_internal_create_time() const {
  return create_time_;
}
inline int64_t RoleInfo::create_time() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.create_time)
  return _internal_create_time();
}
inline void RoleInfo::_internal_set_create_time(int64_t value) {
  _has_bits_[0] |= 0x00001000u;
  create_time_ = value;
}
inline void RoleInfo::set_create_time(int64_t value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.create_time)
}

// optional int64 last_login_time = 15;
inline bool RoleInfo::_internal_has_last_login_time() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool RoleInfo::has_last_login_time() const {
  return _internal_has_last_login_time();
}
inline void RoleInfo::clear_last_login_time() {
  last_login_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00002000u;
}
inline int64_t RoleInfo::_internal_last_login_time() const {
  return last_login_time_;
}
inline int64_t RoleInfo::last_login_time() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.last_login_time)
  return _internal_last_login_time();
}
inline void RoleInfo::_internal_set_last_login_time(int64_t value) {
  _has_bits_[0] |= 0x00002000u;
  last_login_time_ = value;
}
inline void RoleInfo::set_last_login_time(int64_t value) {
  _internal_set_last_login_time(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.last_login_time)
}

// optional int64 logout_time = 16;
inline bool RoleInfo::_internal_has_logout_time() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool RoleInfo::has_logout_time() const {
  return _internal_has_logout_time();
}
inline void RoleInfo::clear_logout_time() {
  logout_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00004000u;
}
inline int64_t RoleInfo::_internal_logout_time() const {
  return logout_time_;
}
inline int64_t RoleInfo::logout_time() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.logout_time)
  return _internal_logout_time();
}
inline void RoleInfo::_internal_set_logout_time(int64_t value) {
  _has_bits_[0] |= 0x00004000u;
  logout_time_ = value;
}
inline void RoleInfo::set_logout_time(int64_t value) {
  _internal_set_logout_time(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.logout_time)
}

// optional int64 month_sign_time = 17;
inline bool RoleInfo::_internal_has_month_sign_time() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool RoleInfo::has_month_sign_time() const {
  return _internal_has_month_sign_time();
}
inline void RoleInfo::clear_month_sign_time() {
  month_sign_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00020000u;
}
inline int64_t RoleInfo::_internal_month_sign_time() const {
  return month_sign_time_;
}
inline int64_t RoleInfo::month_sign_time() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.month_sign_time)
  return _internal_month_sign_time();
}
inline void RoleInfo::_internal_set_month_sign_time(int64_t value) {
  _has_bits_[0] |= 0x00020000u;
  month_sign_time_ = value;
}
inline void RoleInfo::set_month_sign_time(int64_t value) {
  _internal_set_month_sign_time(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.month_sign_time)
}

// optional int64 forbid_chat_time = 18;
inline bool RoleInfo::_internal_has_forbid_chat_time() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool RoleInfo::has_forbid_chat_time() const {
  return _internal_has_forbid_chat_time();
}
inline void RoleInfo::clear_forbid_chat_time() {
  forbid_chat_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00040000u;
}
inline int64_t RoleInfo::_internal_forbid_chat_time() const {
  return forbid_chat_time_;
}
inline int64_t RoleInfo::forbid_chat_time() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.forbid_chat_time)
  return _internal_forbid_chat_time();
}
inline void RoleInfo::_internal_set_forbid_chat_time(int64_t value) {
  _has_bits_[0] |= 0x00040000u;
  forbid_chat_time_ = value;
}
inline void RoleInfo::set_forbid_chat_time(int64_t value) {
  _internal_set_forbid_chat_time(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.forbid_chat_time)
}

// optional uint32 forbid_chat_type = 19;
inline bool RoleInfo::_internal_has_forbid_chat_type() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool RoleInfo::has_forbid_chat_type() const {
  return _internal_has_forbid_chat_type();
}
inline void RoleInfo::clear_forbid_chat_type() {
  forbid_chat_type_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline uint32_t RoleInfo::_internal_forbid_chat_type() const {
  return forbid_chat_type_;
}
inline uint32_t RoleInfo::forbid_chat_type() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.forbid_chat_type)
  return _internal_forbid_chat_type();
}
inline void RoleInfo::_internal_set_forbid_chat_type(uint32_t value) {
  _has_bits_[0] |= 0x00010000u;
  forbid_chat_type_ = value;
}
inline void RoleInfo::set_forbid_chat_type(uint32_t value) {
  _internal_set_forbid_chat_type(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.forbid_chat_type)
}

// optional uint32 role_messager = 20;
inline bool RoleInfo::_internal_has_role_messager() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool RoleInfo::has_role_messager() const {
  return _internal_has_role_messager();
}
inline void RoleInfo::clear_role_messager() {
  role_messager_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline uint32_t RoleInfo::_internal_role_messager() const {
  return role_messager_;
}
inline uint32_t RoleInfo::role_messager() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.role_messager)
  return _internal_role_messager();
}
inline void RoleInfo::_internal_set_role_messager(uint32_t value) {
  _has_bits_[0] |= 0x00080000u;
  role_messager_ = value;
}
inline void RoleInfo::set_role_messager(uint32_t value) {
  _internal_set_role_messager(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.role_messager)
}

// optional uint32 during_day = 21;
inline bool RoleInfo::_internal_has_during_day() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool RoleInfo::has_during_day() const {
  return _internal_has_during_day();
}
inline void RoleInfo::clear_during_day() {
  during_day_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline uint32_t RoleInfo::_internal_during_day() const {
  return during_day_;
}
inline uint32_t RoleInfo::during_day() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.during_day)
  return _internal_during_day();
}
inline void RoleInfo::_internal_set_during_day(uint32_t value) {
  _has_bits_[0] |= 0x00100000u;
  during_day_ = value;
}
inline void RoleInfo::set_during_day(uint32_t value) {
  _internal_set_during_day(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.during_day)
}

// optional uint32 total_online = 22;
inline bool RoleInfo::_internal_has_total_online() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool RoleInfo::has_total_online() const {
  return _internal_has_total_online();
}
inline void RoleInfo::clear_total_online() {
  total_online_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline uint32_t RoleInfo::_internal_total_online() const {
  return total_online_;
}
inline uint32_t RoleInfo::total_online() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.total_online)
  return _internal_total_online();
}
inline void RoleInfo::_internal_set_total_online(uint32_t value) {
  _has_bits_[0] |= 0x00200000u;
  total_online_ = value;
}
inline void RoleInfo::set_total_online(uint32_t value) {
  _internal_set_total_online(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.total_online)
}

// optional uint32 uiLoginTimes = 23;
inline bool RoleInfo::_internal_has_uilogintimes() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool RoleInfo::has_uilogintimes() const {
  return _internal_has_uilogintimes();
}
inline void RoleInfo::clear_uilogintimes() {
  uilogintimes_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline uint32_t RoleInfo::_internal_uilogintimes() const {
  return uilogintimes_;
}
inline uint32_t RoleInfo::uilogintimes() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleInfo.uiLoginTimes)
  return _internal_uilogintimes();
}
inline void RoleInfo::_internal_set_uilogintimes(uint32_t value) {
  _has_bits_[0] |= 0x00400000u;
  uilogintimes_ = value;
}
inline void RoleInfo::set_uilogintimes(uint32_t value) {
  _internal_set_uilogintimes(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleInfo.uiLoginTimes)
}

// -------------------------------------------------------------------

// RoleItem

// uint32 uiId = 1;
inline void RoleItem::clear_uiid() {
  uiid_ = 0u;
}
inline uint32_t RoleItem::_internal_uiid() const {
  return uiid_;
}
inline uint32_t RoleItem::uiid() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleItem.uiId)
  return _internal_uiid();
}
inline void RoleItem::_internal_set_uiid(uint32_t value) {
  
  uiid_ = value;
}
inline void RoleItem::set_uiid(uint32_t value) {
  _internal_set_uiid(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleItem.uiId)
}

// uint32 uiCount = 2;
inline void RoleItem::clear_uicount() {
  uicount_ = 0u;
}
inline uint32_t RoleItem::_internal_uicount() const {
  return uicount_;
}
inline uint32_t RoleItem::uicount() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleItem.uiCount)
  return _internal_uicount();
}
inline void RoleItem::_internal_set_uicount(uint32_t value) {
  
  uicount_ = value;
}
inline void RoleItem::set_uicount(uint32_t value) {
  _internal_set_uicount(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleItem.uiCount)
}

// optional int64 llIncTime = 3;
inline bool RoleItem::_internal_has_llinctime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoleItem::has_llinctime() const {
  return _internal_has_llinctime();
}
inline void RoleItem::clear_llinctime() {
  llinctime_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t RoleItem::_internal_llinctime() const {
  return llinctime_;
}
inline int64_t RoleItem::llinctime() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleItem.llIncTime)
  return _internal_llinctime();
}
inline void RoleItem::_internal_set_llinctime(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  llinctime_ = value;
}
inline void RoleItem::set_llinctime(int64_t value) {
  _internal_set_llinctime(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleItem.llIncTime)
}

// -------------------------------------------------------------------

// RoleDailyAward

// uint32 uiId = 1;
inline void RoleDailyAward::clear_uiid() {
  uiid_ = 0u;
}
inline uint32_t RoleDailyAward::_internal_uiid() const {
  return uiid_;
}
inline uint32_t RoleDailyAward::uiid() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleDailyAward.uiId)
  return _internal_uiid();
}
inline void RoleDailyAward::_internal_set_uiid(uint32_t value) {
  
  uiid_ = value;
}
inline void RoleDailyAward::set_uiid(uint32_t value) {
  _internal_set_uiid(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleDailyAward.uiId)
}

// uint32 uiCount = 2;
inline void RoleDailyAward::clear_uicount() {
  uicount_ = 0u;
}
inline uint32_t RoleDailyAward::_internal_uicount() const {
  return uicount_;
}
inline uint32_t RoleDailyAward::uicount() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleDailyAward.uiCount)
  return _internal_uicount();
}
inline void RoleDailyAward::_internal_set_uicount(uint32_t value) {
  
  uicount_ = value;
}
inline void RoleDailyAward::set_uicount(uint32_t value) {
  _internal_set_uicount(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleDailyAward.uiCount)
}

// -------------------------------------------------------------------

// RoleLoginedSign

// uint32 uiId = 1;
inline void RoleLoginedSign::clear_uiid() {
  uiid_ = 0u;
}
inline uint32_t RoleLoginedSign::_internal_uiid() const {
  return uiid_;
}
inline uint32_t RoleLoginedSign::uiid() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleLoginedSign.uiId)
  return _internal_uiid();
}
inline void RoleLoginedSign::_internal_set_uiid(uint32_t value) {
  
  uiid_ = value;
}
inline void RoleLoginedSign::set_uiid(uint32_t value) {
  _internal_set_uiid(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleLoginedSign.uiId)
}

// string strVersion = 2;
inline void RoleLoginedSign::clear_strversion() {
  strversion_.ClearToEmpty();
}
inline const std::string& RoleLoginedSign::strversion() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleLoginedSign.strVersion)
  return _internal_strversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLoginedSign::set_strversion(ArgT0&& arg0, ArgT... args) {
 
 strversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.RoleLoginedSign.strVersion)
}
inline std::string* RoleLoginedSign::mutable_strversion() {
  std::string* _s = _internal_mutable_strversion();
  // @@protoc_insertion_point(field_mutable:XrPb.RoleLoginedSign.strVersion)
  return _s;
}
inline const std::string& RoleLoginedSign::_internal_strversion() const {
  return strversion_.Get();
}
inline void RoleLoginedSign::_internal_set_strversion(const std::string& value) {
  
  strversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoleLoginedSign::_internal_mutable_strversion() {
  
  return strversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoleLoginedSign::release_strversion() {
  // @@protoc_insertion_point(field_release:XrPb.RoleLoginedSign.strVersion)
  return strversion_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoleLoginedSign::set_allocated_strversion(std::string* strversion) {
  if (strversion != nullptr) {
    
  } else {
    
  }
  strversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strversion,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strversion_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.RoleLoginedSign.strVersion)
}

// int64 llTime = 3;
inline void RoleLoginedSign::clear_lltime() {
  lltime_ = int64_t{0};
}
inline int64_t RoleLoginedSign::_internal_lltime() const {
  return lltime_;
}
inline int64_t RoleLoginedSign::lltime() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleLoginedSign.llTime)
  return _internal_lltime();
}
inline void RoleLoginedSign::_internal_set_lltime(int64_t value) {
  
  lltime_ = value;
}
inline void RoleLoginedSign::set_lltime(int64_t value) {
  _internal_set_lltime(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleLoginedSign.llTime)
}

// repeated uint32 vecSign = 4;
inline int RoleLoginedSign::_internal_vecsign_size() const {
  return vecsign_.size();
}
inline int RoleLoginedSign::vecsign_size() const {
  return _internal_vecsign_size();
}
inline void RoleLoginedSign::clear_vecsign() {
  vecsign_.Clear();
}
inline uint32_t RoleLoginedSign::_internal_vecsign(int index) const {
  return vecsign_.Get(index);
}
inline uint32_t RoleLoginedSign::vecsign(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.RoleLoginedSign.vecSign)
  return _internal_vecsign(index);
}
inline void RoleLoginedSign::set_vecsign(int index, uint32_t value) {
  vecsign_.Set(index, value);
  // @@protoc_insertion_point(field_set:XrPb.RoleLoginedSign.vecSign)
}
inline void RoleLoginedSign::_internal_add_vecsign(uint32_t value) {
  vecsign_.Add(value);
}
inline void RoleLoginedSign::add_vecsign(uint32_t value) {
  _internal_add_vecsign(value);
  // @@protoc_insertion_point(field_add:XrPb.RoleLoginedSign.vecSign)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
RoleLoginedSign::_internal_vecsign() const {
  return vecsign_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
RoleLoginedSign::vecsign() const {
  // @@protoc_insertion_point(field_list:XrPb.RoleLoginedSign.vecSign)
  return _internal_vecsign();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
RoleLoginedSign::_internal_mutable_vecsign() {
  return &vecsign_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
RoleLoginedSign::mutable_vecsign() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.RoleLoginedSign.vecSign)
  return _internal_mutable_vecsign();
}

// -------------------------------------------------------------------

// RoleMonthSign

// int64 llDay = 1;
inline void RoleMonthSign::clear_llday() {
  llday_ = int64_t{0};
}
inline int64_t RoleMonthSign::_internal_llday() const {
  return llday_;
}
inline int64_t RoleMonthSign::llday() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleMonthSign.llDay)
  return _internal_llday();
}
inline void RoleMonthSign::_internal_set_llday(int64_t value) {
  
  llday_ = value;
}
inline void RoleMonthSign::set_llday(int64_t value) {
  _internal_set_llday(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleMonthSign.llDay)
}

// bool bVip = 2;
inline void RoleMonthSign::clear_bvip() {
  bvip_ = false;
}
inline bool RoleMonthSign::_internal_bvip() const {
  return bvip_;
}
inline bool RoleMonthSign::bvip() const {
  // @@protoc_insertion_point(field_get:XrPb.RoleMonthSign.bVip)
  return _internal_bvip();
}
inline void RoleMonthSign::_internal_set_bvip(bool value) {
  
  bvip_ = value;
}
inline void RoleMonthSign::set_bvip(bool value) {
  _internal_set_bvip(value);
  // @@protoc_insertion_point(field_set:XrPb.RoleMonthSign.bVip)
}

// -------------------------------------------------------------------

// DBGS_RoleData

// optional int64 acc_id = 1;
inline bool DBGS_RoleData::_internal_has_acc_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBGS_RoleData::has_acc_id() const {
  return _internal_has_acc_id();
}
inline void DBGS_RoleData::clear_acc_id() {
  acc_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t DBGS_RoleData::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t DBGS_RoleData::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.DBGS_RoleData.acc_id)
  return _internal_acc_id();
}
inline void DBGS_RoleData::_internal_set_acc_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  acc_id_ = value;
}
inline void DBGS_RoleData::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.DBGS_RoleData.acc_id)
}

// optional .XrPb.RoleInfo role_info = 2;
inline bool DBGS_RoleData::_internal_has_role_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || role_info_ != nullptr);
  return value;
}
inline bool DBGS_RoleData::has_role_info() const {
  return _internal_has_role_info();
}
inline void DBGS_RoleData::clear_role_info() {
  if (role_info_ != nullptr) role_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::XrPb::RoleInfo& DBGS_RoleData::_internal_role_info() const {
  const ::XrPb::RoleInfo* p = role_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::RoleInfo&>(
      ::XrPb::_RoleInfo_default_instance_);
}
inline const ::XrPb::RoleInfo& DBGS_RoleData::role_info() const {
  // @@protoc_insertion_point(field_get:XrPb.DBGS_RoleData.role_info)
  return _internal_role_info();
}
inline void DBGS_RoleData::unsafe_arena_set_allocated_role_info(
    ::XrPb::RoleInfo* role_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_info_);
  }
  role_info_ = role_info;
  if (role_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.DBGS_RoleData.role_info)
}
inline ::XrPb::RoleInfo* DBGS_RoleData::release_role_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::XrPb::RoleInfo* temp = role_info_;
  role_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::RoleInfo* DBGS_RoleData::unsafe_arena_release_role_info() {
  // @@protoc_insertion_point(field_release:XrPb.DBGS_RoleData.role_info)
  _has_bits_[0] &= ~0x00000001u;
  ::XrPb::RoleInfo* temp = role_info_;
  role_info_ = nullptr;
  return temp;
}
inline ::XrPb::RoleInfo* DBGS_RoleData::_internal_mutable_role_info() {
  _has_bits_[0] |= 0x00000001u;
  if (role_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::RoleInfo>(GetArenaForAllocation());
    role_info_ = p;
  }
  return role_info_;
}
inline ::XrPb::RoleInfo* DBGS_RoleData::mutable_role_info() {
  ::XrPb::RoleInfo* _msg = _internal_mutable_role_info();
  // @@protoc_insertion_point(field_mutable:XrPb.DBGS_RoleData.role_info)
  return _msg;
}
inline void DBGS_RoleData::set_allocated_role_info(::XrPb::RoleInfo* role_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete role_info_;
  }
  if (role_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::RoleInfo>::GetOwningArena(role_info);
    if (message_arena != submessage_arena) {
      role_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  role_info_ = role_info;
  // @@protoc_insertion_point(field_set_allocated:XrPb.DBGS_RoleData.role_info)
}

// repeated .XrPb.RoleFormInfo role_portrait = 4;
inline int DBGS_RoleData::_internal_role_portrait_size() const {
  return role_portrait_.size();
}
inline int DBGS_RoleData::role_portrait_size() const {
  return _internal_role_portrait_size();
}
inline ::XrPb::RoleFormInfo* DBGS_RoleData::mutable_role_portrait(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.DBGS_RoleData.role_portrait)
  return role_portrait_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleFormInfo >*
DBGS_RoleData::mutable_role_portrait() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.DBGS_RoleData.role_portrait)
  return &role_portrait_;
}
inline const ::XrPb::RoleFormInfo& DBGS_RoleData::_internal_role_portrait(int index) const {
  return role_portrait_.Get(index);
}
inline const ::XrPb::RoleFormInfo& DBGS_RoleData::role_portrait(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.DBGS_RoleData.role_portrait)
  return _internal_role_portrait(index);
}
inline ::XrPb::RoleFormInfo* DBGS_RoleData::_internal_add_role_portrait() {
  return role_portrait_.Add();
}
inline ::XrPb::RoleFormInfo* DBGS_RoleData::add_role_portrait() {
  ::XrPb::RoleFormInfo* _add = _internal_add_role_portrait();
  // @@protoc_insertion_point(field_add:XrPb.DBGS_RoleData.role_portrait)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleFormInfo >&
DBGS_RoleData::role_portrait() const {
  // @@protoc_insertion_point(field_list:XrPb.DBGS_RoleData.role_portrait)
  return role_portrait_;
}

// repeated .XrPb.RoleItem role_item = 5;
inline int DBGS_RoleData::_internal_role_item_size() const {
  return role_item_.size();
}
inline int DBGS_RoleData::role_item_size() const {
  return _internal_role_item_size();
}
inline void DBGS_RoleData::clear_role_item() {
  role_item_.Clear();
}
inline ::XrPb::RoleItem* DBGS_RoleData::mutable_role_item(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.DBGS_RoleData.role_item)
  return role_item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleItem >*
DBGS_RoleData::mutable_role_item() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.DBGS_RoleData.role_item)
  return &role_item_;
}
inline const ::XrPb::RoleItem& DBGS_RoleData::_internal_role_item(int index) const {
  return role_item_.Get(index);
}
inline const ::XrPb::RoleItem& DBGS_RoleData::role_item(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.DBGS_RoleData.role_item)
  return _internal_role_item(index);
}
inline ::XrPb::RoleItem* DBGS_RoleData::_internal_add_role_item() {
  return role_item_.Add();
}
inline ::XrPb::RoleItem* DBGS_RoleData::add_role_item() {
  ::XrPb::RoleItem* _add = _internal_add_role_item();
  // @@protoc_insertion_point(field_add:XrPb.DBGS_RoleData.role_item)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleItem >&
DBGS_RoleData::role_item() const {
  // @@protoc_insertion_point(field_list:XrPb.DBGS_RoleData.role_item)
  return role_item_;
}

// repeated .XrPb.RoleDailyAward daily_award = 6;
inline int DBGS_RoleData::_internal_daily_award_size() const {
  return daily_award_.size();
}
inline int DBGS_RoleData::daily_award_size() const {
  return _internal_daily_award_size();
}
inline void DBGS_RoleData::clear_daily_award() {
  daily_award_.Clear();
}
inline ::XrPb::RoleDailyAward* DBGS_RoleData::mutable_daily_award(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.DBGS_RoleData.daily_award)
  return daily_award_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleDailyAward >*
DBGS_RoleData::mutable_daily_award() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.DBGS_RoleData.daily_award)
  return &daily_award_;
}
inline const ::XrPb::RoleDailyAward& DBGS_RoleData::_internal_daily_award(int index) const {
  return daily_award_.Get(index);
}
inline const ::XrPb::RoleDailyAward& DBGS_RoleData::daily_award(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.DBGS_RoleData.daily_award)
  return _internal_daily_award(index);
}
inline ::XrPb::RoleDailyAward* DBGS_RoleData::_internal_add_daily_award() {
  return daily_award_.Add();
}
inline ::XrPb::RoleDailyAward* DBGS_RoleData::add_daily_award() {
  ::XrPb::RoleDailyAward* _add = _internal_add_daily_award();
  // @@protoc_insertion_point(field_add:XrPb.DBGS_RoleData.daily_award)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleDailyAward >&
DBGS_RoleData::daily_award() const {
  // @@protoc_insertion_point(field_list:XrPb.DBGS_RoleData.daily_award)
  return daily_award_;
}

// repeated .XrPb.RoleLoginedSign vecLoginedSign = 7;
inline int DBGS_RoleData::_internal_vecloginedsign_size() const {
  return vecloginedsign_.size();
}
inline int DBGS_RoleData::vecloginedsign_size() const {
  return _internal_vecloginedsign_size();
}
inline void DBGS_RoleData::clear_vecloginedsign() {
  vecloginedsign_.Clear();
}
inline ::XrPb::RoleLoginedSign* DBGS_RoleData::mutable_vecloginedsign(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.DBGS_RoleData.vecLoginedSign)
  return vecloginedsign_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleLoginedSign >*
DBGS_RoleData::mutable_vecloginedsign() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.DBGS_RoleData.vecLoginedSign)
  return &vecloginedsign_;
}
inline const ::XrPb::RoleLoginedSign& DBGS_RoleData::_internal_vecloginedsign(int index) const {
  return vecloginedsign_.Get(index);
}
inline const ::XrPb::RoleLoginedSign& DBGS_RoleData::vecloginedsign(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.DBGS_RoleData.vecLoginedSign)
  return _internal_vecloginedsign(index);
}
inline ::XrPb::RoleLoginedSign* DBGS_RoleData::_internal_add_vecloginedsign() {
  return vecloginedsign_.Add();
}
inline ::XrPb::RoleLoginedSign* DBGS_RoleData::add_vecloginedsign() {
  ::XrPb::RoleLoginedSign* _add = _internal_add_vecloginedsign();
  // @@protoc_insertion_point(field_add:XrPb.DBGS_RoleData.vecLoginedSign)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleLoginedSign >&
DBGS_RoleData::vecloginedsign() const {
  // @@protoc_insertion_point(field_list:XrPb.DBGS_RoleData.vecLoginedSign)
  return vecloginedsign_;
}

// repeated .XrPb.RoleMonthSign month_sign = 8;
inline int DBGS_RoleData::_internal_month_sign_size() const {
  return month_sign_.size();
}
inline int DBGS_RoleData::month_sign_size() const {
  return _internal_month_sign_size();
}
inline void DBGS_RoleData::clear_month_sign() {
  month_sign_.Clear();
}
inline ::XrPb::RoleMonthSign* DBGS_RoleData::mutable_month_sign(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.DBGS_RoleData.month_sign)
  return month_sign_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleMonthSign >*
DBGS_RoleData::mutable_month_sign() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.DBGS_RoleData.month_sign)
  return &month_sign_;
}
inline const ::XrPb::RoleMonthSign& DBGS_RoleData::_internal_month_sign(int index) const {
  return month_sign_.Get(index);
}
inline const ::XrPb::RoleMonthSign& DBGS_RoleData::month_sign(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.DBGS_RoleData.month_sign)
  return _internal_month_sign(index);
}
inline ::XrPb::RoleMonthSign* DBGS_RoleData::_internal_add_month_sign() {
  return month_sign_.Add();
}
inline ::XrPb::RoleMonthSign* DBGS_RoleData::add_month_sign() {
  ::XrPb::RoleMonthSign* _add = _internal_add_month_sign();
  // @@protoc_insertion_point(field_add:XrPb.DBGS_RoleData.month_sign)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleMonthSign >&
DBGS_RoleData::month_sign() const {
  // @@protoc_insertion_point(field_list:XrPb.DBGS_RoleData.month_sign)
  return month_sign_;
}

// repeated .XrPb.RoleFormInfo role_background = 9;
inline int DBGS_RoleData::_internal_role_background_size() const {
  return role_background_.size();
}
inline int DBGS_RoleData::role_background_size() const {
  return _internal_role_background_size();
}
inline ::XrPb::RoleFormInfo* DBGS_RoleData::mutable_role_background(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.DBGS_RoleData.role_background)
  return role_background_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleFormInfo >*
DBGS_RoleData::mutable_role_background() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.DBGS_RoleData.role_background)
  return &role_background_;
}
inline const ::XrPb::RoleFormInfo& DBGS_RoleData::_internal_role_background(int index) const {
  return role_background_.Get(index);
}
inline const ::XrPb::RoleFormInfo& DBGS_RoleData::role_background(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.DBGS_RoleData.role_background)
  return _internal_role_background(index);
}
inline ::XrPb::RoleFormInfo* DBGS_RoleData::_internal_add_role_background() {
  return role_background_.Add();
}
inline ::XrPb::RoleFormInfo* DBGS_RoleData::add_role_background() {
  ::XrPb::RoleFormInfo* _add = _internal_add_role_background();
  // @@protoc_insertion_point(field_add:XrPb.DBGS_RoleData.role_background)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleFormInfo >&
DBGS_RoleData::role_background() const {
  // @@protoc_insertion_point(field_list:XrPb.DBGS_RoleData.role_background)
  return role_background_;
}

// repeated .XrPb.RoleFormInfo role_messager = 10;
inline int DBGS_RoleData::_internal_role_messager_size() const {
  return role_messager_.size();
}
inline int DBGS_RoleData::role_messager_size() const {
  return _internal_role_messager_size();
}
inline ::XrPb::RoleFormInfo* DBGS_RoleData::mutable_role_messager(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.DBGS_RoleData.role_messager)
  return role_messager_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleFormInfo >*
DBGS_RoleData::mutable_role_messager() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.DBGS_RoleData.role_messager)
  return &role_messager_;
}
inline const ::XrPb::RoleFormInfo& DBGS_RoleData::_internal_role_messager(int index) const {
  return role_messager_.Get(index);
}
inline const ::XrPb::RoleFormInfo& DBGS_RoleData::role_messager(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.DBGS_RoleData.role_messager)
  return _internal_role_messager(index);
}
inline ::XrPb::RoleFormInfo* DBGS_RoleData::_internal_add_role_messager() {
  return role_messager_.Add();
}
inline ::XrPb::RoleFormInfo* DBGS_RoleData::add_role_messager() {
  ::XrPb::RoleFormInfo* _add = _internal_add_role_messager();
  // @@protoc_insertion_point(field_add:XrPb.DBGS_RoleData.role_messager)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleFormInfo >&
DBGS_RoleData::role_messager() const {
  // @@protoc_insertion_point(field_list:XrPb.DBGS_RoleData.role_messager)
  return role_messager_;
}

// -------------------------------------------------------------------

// Msg_DBGS_RoleInfoAck

// optional int64 acc_id = 2;
inline bool Msg_DBGS_RoleInfoAck::_internal_has_acc_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_DBGS_RoleInfoAck::has_acc_id() const {
  return _internal_has_acc_id();
}
inline void Msg_DBGS_RoleInfoAck::clear_acc_id() {
  acc_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Msg_DBGS_RoleInfoAck::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_DBGS_RoleInfoAck::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_RoleInfoAck.acc_id)
  return _internal_acc_id();
}
inline void Msg_DBGS_RoleInfoAck::_internal_set_acc_id(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  acc_id_ = value;
}
inline void Msg_DBGS_RoleInfoAck::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_RoleInfoAck.acc_id)
}

// optional .XrPb.ResultCode ret = 3;
inline bool Msg_DBGS_RoleInfoAck::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_DBGS_RoleInfoAck::has_ret() const {
  return _internal_has_ret();
}
inline void Msg_DBGS_RoleInfoAck::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::XrPb::ResultCode Msg_DBGS_RoleInfoAck::_internal_ret() const {
  return static_cast< ::XrPb::ResultCode >(ret_);
}
inline ::XrPb::ResultCode Msg_DBGS_RoleInfoAck::ret() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_RoleInfoAck.ret)
  return _internal_ret();
}
inline void Msg_DBGS_RoleInfoAck::_internal_set_ret(::XrPb::ResultCode value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
}
inline void Msg_DBGS_RoleInfoAck::set_ret(::XrPb::ResultCode value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_RoleInfoAck.ret)
}

// -------------------------------------------------------------------

// Msg_DBGS_CreateRoleReq

// int64 acc_id = 1;
inline void Msg_DBGS_CreateRoleReq::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_CreateRoleReq::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_DBGS_CreateRoleReq::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_CreateRoleReq.acc_id)
  return _internal_acc_id();
}
inline void Msg_DBGS_CreateRoleReq::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_DBGS_CreateRoleReq::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_CreateRoleReq.acc_id)
}

// .XrPb.RoleInfo role_info = 2;
inline bool Msg_DBGS_CreateRoleReq::_internal_has_role_info() const {
  return this != internal_default_instance() && role_info_ != nullptr;
}
inline bool Msg_DBGS_CreateRoleReq::has_role_info() const {
  return _internal_has_role_info();
}
inline void Msg_DBGS_CreateRoleReq::clear_role_info() {
  if (GetArenaForAllocation() == nullptr && role_info_ != nullptr) {
    delete role_info_;
  }
  role_info_ = nullptr;
}
inline const ::XrPb::RoleInfo& Msg_DBGS_CreateRoleReq::_internal_role_info() const {
  const ::XrPb::RoleInfo* p = role_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::RoleInfo&>(
      ::XrPb::_RoleInfo_default_instance_);
}
inline const ::XrPb::RoleInfo& Msg_DBGS_CreateRoleReq::role_info() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_CreateRoleReq.role_info)
  return _internal_role_info();
}
inline void Msg_DBGS_CreateRoleReq::unsafe_arena_set_allocated_role_info(
    ::XrPb::RoleInfo* role_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_info_);
  }
  role_info_ = role_info;
  if (role_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_DBGS_CreateRoleReq.role_info)
}
inline ::XrPb::RoleInfo* Msg_DBGS_CreateRoleReq::release_role_info() {
  
  ::XrPb::RoleInfo* temp = role_info_;
  role_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::RoleInfo* Msg_DBGS_CreateRoleReq::unsafe_arena_release_role_info() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_DBGS_CreateRoleReq.role_info)
  
  ::XrPb::RoleInfo* temp = role_info_;
  role_info_ = nullptr;
  return temp;
}
inline ::XrPb::RoleInfo* Msg_DBGS_CreateRoleReq::_internal_mutable_role_info() {
  
  if (role_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::RoleInfo>(GetArenaForAllocation());
    role_info_ = p;
  }
  return role_info_;
}
inline ::XrPb::RoleInfo* Msg_DBGS_CreateRoleReq::mutable_role_info() {
  ::XrPb::RoleInfo* _msg = _internal_mutable_role_info();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_DBGS_CreateRoleReq.role_info)
  return _msg;
}
inline void Msg_DBGS_CreateRoleReq::set_allocated_role_info(::XrPb::RoleInfo* role_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete role_info_;
  }
  if (role_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::RoleInfo>::GetOwningArena(role_info);
    if (message_arena != submessage_arena) {
      role_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_info, submessage_arena);
    }
    
  } else {
    
  }
  role_info_ = role_info;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_DBGS_CreateRoleReq.role_info)
}

// -------------------------------------------------------------------

// Msg_DBGS_CreateRoleAck

// int32 ret = 1;
inline void Msg_DBGS_CreateRoleAck::clear_ret() {
  ret_ = 0;
}
inline int32_t Msg_DBGS_CreateRoleAck::_internal_ret() const {
  return ret_;
}
inline int32_t Msg_DBGS_CreateRoleAck::ret() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_CreateRoleAck.ret)
  return _internal_ret();
}
inline void Msg_DBGS_CreateRoleAck::_internal_set_ret(int32_t value) {
  
  ret_ = value;
}
inline void Msg_DBGS_CreateRoleAck::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_CreateRoleAck.ret)
}

// int64 acc_id = 2;
inline void Msg_DBGS_CreateRoleAck::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_CreateRoleAck::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_DBGS_CreateRoleAck::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_CreateRoleAck.acc_id)
  return _internal_acc_id();
}
inline void Msg_DBGS_CreateRoleAck::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_DBGS_CreateRoleAck::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_CreateRoleAck.acc_id)
}

// -------------------------------------------------------------------

// Msg_DBGS_UpdateRoleInfo

// int64 acc_id = 1;
inline void Msg_DBGS_UpdateRoleInfo::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_UpdateRoleInfo::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_DBGS_UpdateRoleInfo::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_UpdateRoleInfo.acc_id)
  return _internal_acc_id();
}
inline void Msg_DBGS_UpdateRoleInfo::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_DBGS_UpdateRoleInfo::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_UpdateRoleInfo.acc_id)
}

// optional .XrPb.RoleInfo role_info = 2;
inline bool Msg_DBGS_UpdateRoleInfo::_internal_has_role_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || role_info_ != nullptr);
  return value;
}
inline bool Msg_DBGS_UpdateRoleInfo::has_role_info() const {
  return _internal_has_role_info();
}
inline void Msg_DBGS_UpdateRoleInfo::clear_role_info() {
  if (role_info_ != nullptr) role_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::XrPb::RoleInfo& Msg_DBGS_UpdateRoleInfo::_internal_role_info() const {
  const ::XrPb::RoleInfo* p = role_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::RoleInfo&>(
      ::XrPb::_RoleInfo_default_instance_);
}
inline const ::XrPb::RoleInfo& Msg_DBGS_UpdateRoleInfo::role_info() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_UpdateRoleInfo.role_info)
  return _internal_role_info();
}
inline void Msg_DBGS_UpdateRoleInfo::unsafe_arena_set_allocated_role_info(
    ::XrPb::RoleInfo* role_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_info_);
  }
  role_info_ = role_info;
  if (role_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_DBGS_UpdateRoleInfo.role_info)
}
inline ::XrPb::RoleInfo* Msg_DBGS_UpdateRoleInfo::release_role_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::XrPb::RoleInfo* temp = role_info_;
  role_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::RoleInfo* Msg_DBGS_UpdateRoleInfo::unsafe_arena_release_role_info() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_DBGS_UpdateRoleInfo.role_info)
  _has_bits_[0] &= ~0x00000001u;
  ::XrPb::RoleInfo* temp = role_info_;
  role_info_ = nullptr;
  return temp;
}
inline ::XrPb::RoleInfo* Msg_DBGS_UpdateRoleInfo::_internal_mutable_role_info() {
  _has_bits_[0] |= 0x00000001u;
  if (role_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::RoleInfo>(GetArenaForAllocation());
    role_info_ = p;
  }
  return role_info_;
}
inline ::XrPb::RoleInfo* Msg_DBGS_UpdateRoleInfo::mutable_role_info() {
  ::XrPb::RoleInfo* _msg = _internal_mutable_role_info();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_DBGS_UpdateRoleInfo.role_info)
  return _msg;
}
inline void Msg_DBGS_UpdateRoleInfo::set_allocated_role_info(::XrPb::RoleInfo* role_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete role_info_;
  }
  if (role_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::RoleInfo>::GetOwningArena(role_info);
    if (message_arena != submessage_arena) {
      role_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  role_info_ = role_info;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_DBGS_UpdateRoleInfo.role_info)
}

// -------------------------------------------------------------------

// Msg_DBGS_Player_Del

// int64 acc_id = 1;
inline void Msg_DBGS_Player_Del::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_Player_Del::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_DBGS_Player_Del::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_Player_Del.acc_id)
  return _internal_acc_id();
}
inline void Msg_DBGS_Player_Del::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_DBGS_Player_Del::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_Player_Del.acc_id)
}

// -------------------------------------------------------------------

// Msg_DBGS_Player_In

// int64 acc_id = 1;
inline void Msg_DBGS_Player_In::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_Player_In::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_DBGS_Player_In::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_Player_In.acc_id)
  return _internal_acc_id();
}
inline void Msg_DBGS_Player_In::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_DBGS_Player_In::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_Player_In.acc_id)
}

// -------------------------------------------------------------------

// Msg_DBGS_AddRoleBackground

// int64 acc_id = 1;
inline void Msg_DBGS_AddRoleBackground::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_AddRoleBackground::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_DBGS_AddRoleBackground::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_AddRoleBackground.acc_id)
  return _internal_acc_id();
}
inline void Msg_DBGS_AddRoleBackground::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_DBGS_AddRoleBackground::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_AddRoleBackground.acc_id)
}

// repeated uint32 id = 2;
inline int Msg_DBGS_AddRoleBackground::_internal_id_size() const {
  return id_.size();
}
inline int Msg_DBGS_AddRoleBackground::id_size() const {
  return _internal_id_size();
}
inline void Msg_DBGS_AddRoleBackground::clear_id() {
  id_.Clear();
}
inline uint32_t Msg_DBGS_AddRoleBackground::_internal_id(int index) const {
  return id_.Get(index);
}
inline uint32_t Msg_DBGS_AddRoleBackground::id(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_AddRoleBackground.id)
  return _internal_id(index);
}
inline void Msg_DBGS_AddRoleBackground::set_id(int index, uint32_t value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_AddRoleBackground.id)
}
inline void Msg_DBGS_AddRoleBackground::_internal_add_id(uint32_t value) {
  id_.Add(value);
}
inline void Msg_DBGS_AddRoleBackground::add_id(uint32_t value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:XrPb.Msg_DBGS_AddRoleBackground.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Msg_DBGS_AddRoleBackground::_internal_id() const {
  return id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Msg_DBGS_AddRoleBackground::id() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_DBGS_AddRoleBackground.id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Msg_DBGS_AddRoleBackground::_internal_mutable_id() {
  return &id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Msg_DBGS_AddRoleBackground::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_DBGS_AddRoleBackground.id)
  return _internal_mutable_id();
}

// -------------------------------------------------------------------

// Msg_DBGS_DeleteBackground

// int64 acc_id = 1;
inline void Msg_DBGS_DeleteBackground::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_DeleteBackground::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_DBGS_DeleteBackground::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_DeleteBackground.acc_id)
  return _internal_acc_id();
}
inline void Msg_DBGS_DeleteBackground::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_DBGS_DeleteBackground::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_DeleteBackground.acc_id)
}

// repeated uint32 id = 2;
inline int Msg_DBGS_DeleteBackground::_internal_id_size() const {
  return id_.size();
}
inline int Msg_DBGS_DeleteBackground::id_size() const {
  return _internal_id_size();
}
inline void Msg_DBGS_DeleteBackground::clear_id() {
  id_.Clear();
}
inline uint32_t Msg_DBGS_DeleteBackground::_internal_id(int index) const {
  return id_.Get(index);
}
inline uint32_t Msg_DBGS_DeleteBackground::id(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_DeleteBackground.id)
  return _internal_id(index);
}
inline void Msg_DBGS_DeleteBackground::set_id(int index, uint32_t value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_DeleteBackground.id)
}
inline void Msg_DBGS_DeleteBackground::_internal_add_id(uint32_t value) {
  id_.Add(value);
}
inline void Msg_DBGS_DeleteBackground::add_id(uint32_t value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:XrPb.Msg_DBGS_DeleteBackground.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Msg_DBGS_DeleteBackground::_internal_id() const {
  return id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Msg_DBGS_DeleteBackground::id() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_DBGS_DeleteBackground.id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Msg_DBGS_DeleteBackground::_internal_mutable_id() {
  return &id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Msg_DBGS_DeleteBackground::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_DBGS_DeleteBackground.id)
  return _internal_mutable_id();
}

// -------------------------------------------------------------------

// Msg_DBGS_AddRolePortrait

// int64 acc_id = 1;
inline void Msg_DBGS_AddRolePortrait::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_AddRolePortrait::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_DBGS_AddRolePortrait::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_AddRolePortrait.acc_id)
  return _internal_acc_id();
}
inline void Msg_DBGS_AddRolePortrait::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_DBGS_AddRolePortrait::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_AddRolePortrait.acc_id)
}

// repeated uint32 id = 2;
inline int Msg_DBGS_AddRolePortrait::_internal_id_size() const {
  return id_.size();
}
inline int Msg_DBGS_AddRolePortrait::id_size() const {
  return _internal_id_size();
}
inline void Msg_DBGS_AddRolePortrait::clear_id() {
  id_.Clear();
}
inline uint32_t Msg_DBGS_AddRolePortrait::_internal_id(int index) const {
  return id_.Get(index);
}
inline uint32_t Msg_DBGS_AddRolePortrait::id(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_AddRolePortrait.id)
  return _internal_id(index);
}
inline void Msg_DBGS_AddRolePortrait::set_id(int index, uint32_t value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_AddRolePortrait.id)
}
inline void Msg_DBGS_AddRolePortrait::_internal_add_id(uint32_t value) {
  id_.Add(value);
}
inline void Msg_DBGS_AddRolePortrait::add_id(uint32_t value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:XrPb.Msg_DBGS_AddRolePortrait.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Msg_DBGS_AddRolePortrait::_internal_id() const {
  return id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Msg_DBGS_AddRolePortrait::id() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_DBGS_AddRolePortrait.id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Msg_DBGS_AddRolePortrait::_internal_mutable_id() {
  return &id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Msg_DBGS_AddRolePortrait::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_DBGS_AddRolePortrait.id)
  return _internal_mutable_id();
}

// -------------------------------------------------------------------

// Msg_DBGS_DeletePortrait

// int64 acc_id = 1;
inline void Msg_DBGS_DeletePortrait::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_DeletePortrait::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_DBGS_DeletePortrait::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_DeletePortrait.acc_id)
  return _internal_acc_id();
}
inline void Msg_DBGS_DeletePortrait::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_DBGS_DeletePortrait::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_DeletePortrait.acc_id)
}

// repeated uint32 id = 2;
inline int Msg_DBGS_DeletePortrait::_internal_id_size() const {
  return id_.size();
}
inline int Msg_DBGS_DeletePortrait::id_size() const {
  return _internal_id_size();
}
inline void Msg_DBGS_DeletePortrait::clear_id() {
  id_.Clear();
}
inline uint32_t Msg_DBGS_DeletePortrait::_internal_id(int index) const {
  return id_.Get(index);
}
inline uint32_t Msg_DBGS_DeletePortrait::id(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_DeletePortrait.id)
  return _internal_id(index);
}
inline void Msg_DBGS_DeletePortrait::set_id(int index, uint32_t value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_DeletePortrait.id)
}
inline void Msg_DBGS_DeletePortrait::_internal_add_id(uint32_t value) {
  id_.Add(value);
}
inline void Msg_DBGS_DeletePortrait::add_id(uint32_t value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:XrPb.Msg_DBGS_DeletePortrait.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Msg_DBGS_DeletePortrait::_internal_id() const {
  return id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Msg_DBGS_DeletePortrait::id() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_DBGS_DeletePortrait.id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Msg_DBGS_DeletePortrait::_internal_mutable_id() {
  return &id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Msg_DBGS_DeletePortrait::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_DBGS_DeletePortrait.id)
  return _internal_mutable_id();
}

// -------------------------------------------------------------------

// Msg_DBGS_AddRoleMessager

// int64 acc_id = 1;
inline void Msg_DBGS_AddRoleMessager::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_AddRoleMessager::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_DBGS_AddRoleMessager::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_AddRoleMessager.acc_id)
  return _internal_acc_id();
}
inline void Msg_DBGS_AddRoleMessager::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_DBGS_AddRoleMessager::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_AddRoleMessager.acc_id)
}

// repeated uint32 messager = 2;
inline int Msg_DBGS_AddRoleMessager::_internal_messager_size() const {
  return messager_.size();
}
inline int Msg_DBGS_AddRoleMessager::messager_size() const {
  return _internal_messager_size();
}
inline void Msg_DBGS_AddRoleMessager::clear_messager() {
  messager_.Clear();
}
inline uint32_t Msg_DBGS_AddRoleMessager::_internal_messager(int index) const {
  return messager_.Get(index);
}
inline uint32_t Msg_DBGS_AddRoleMessager::messager(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_AddRoleMessager.messager)
  return _internal_messager(index);
}
inline void Msg_DBGS_AddRoleMessager::set_messager(int index, uint32_t value) {
  messager_.Set(index, value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_AddRoleMessager.messager)
}
inline void Msg_DBGS_AddRoleMessager::_internal_add_messager(uint32_t value) {
  messager_.Add(value);
}
inline void Msg_DBGS_AddRoleMessager::add_messager(uint32_t value) {
  _internal_add_messager(value);
  // @@protoc_insertion_point(field_add:XrPb.Msg_DBGS_AddRoleMessager.messager)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Msg_DBGS_AddRoleMessager::_internal_messager() const {
  return messager_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Msg_DBGS_AddRoleMessager::messager() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_DBGS_AddRoleMessager.messager)
  return _internal_messager();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Msg_DBGS_AddRoleMessager::_internal_mutable_messager() {
  return &messager_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Msg_DBGS_AddRoleMessager::mutable_messager() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_DBGS_AddRoleMessager.messager)
  return _internal_mutable_messager();
}

// -------------------------------------------------------------------

// Msg_DBGS_DeleteMessager

// int64 acc_id = 1;
inline void Msg_DBGS_DeleteMessager::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_DeleteMessager::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_DBGS_DeleteMessager::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_DeleteMessager.acc_id)
  return _internal_acc_id();
}
inline void Msg_DBGS_DeleteMessager::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_DBGS_DeleteMessager::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_DeleteMessager.acc_id)
}

// repeated uint32 id = 2;
inline int Msg_DBGS_DeleteMessager::_internal_id_size() const {
  return id_.size();
}
inline int Msg_DBGS_DeleteMessager::id_size() const {
  return _internal_id_size();
}
inline void Msg_DBGS_DeleteMessager::clear_id() {
  id_.Clear();
}
inline uint32_t Msg_DBGS_DeleteMessager::_internal_id(int index) const {
  return id_.Get(index);
}
inline uint32_t Msg_DBGS_DeleteMessager::id(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_DeleteMessager.id)
  return _internal_id(index);
}
inline void Msg_DBGS_DeleteMessager::set_id(int index, uint32_t value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_DeleteMessager.id)
}
inline void Msg_DBGS_DeleteMessager::_internal_add_id(uint32_t value) {
  id_.Add(value);
}
inline void Msg_DBGS_DeleteMessager::add_id(uint32_t value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:XrPb.Msg_DBGS_DeleteMessager.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Msg_DBGS_DeleteMessager::_internal_id() const {
  return id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Msg_DBGS_DeleteMessager::id() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_DBGS_DeleteMessager.id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Msg_DBGS_DeleteMessager::_internal_mutable_id() {
  return &id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Msg_DBGS_DeleteMessager::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_DBGS_DeleteMessager.id)
  return _internal_mutable_id();
}

// -------------------------------------------------------------------

// Msg_DBGS_LoadBaseInfoReq

// int64 check_id = 1;
inline void Msg_DBGS_LoadBaseInfoReq::clear_check_id() {
  check_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_LoadBaseInfoReq::_internal_check_id() const {
  return check_id_;
}
inline int64_t Msg_DBGS_LoadBaseInfoReq::check_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_LoadBaseInfoReq.check_id)
  return _internal_check_id();
}
inline void Msg_DBGS_LoadBaseInfoReq::_internal_set_check_id(int64_t value) {
  
  check_id_ = value;
}
inline void Msg_DBGS_LoadBaseInfoReq::set_check_id(int64_t value) {
  _internal_set_check_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_LoadBaseInfoReq.check_id)
}

// int64 checked_id = 2;
inline void Msg_DBGS_LoadBaseInfoReq::clear_checked_id() {
  checked_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_LoadBaseInfoReq::_internal_checked_id() const {
  return checked_id_;
}
inline int64_t Msg_DBGS_LoadBaseInfoReq::checked_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_LoadBaseInfoReq.checked_id)
  return _internal_checked_id();
}
inline void Msg_DBGS_LoadBaseInfoReq::_internal_set_checked_id(int64_t value) {
  
  checked_id_ = value;
}
inline void Msg_DBGS_LoadBaseInfoReq::set_checked_id(int64_t value) {
  _internal_set_checked_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_LoadBaseInfoReq.checked_id)
}

// uint32 proto_id = 3;
inline void Msg_DBGS_LoadBaseInfoReq::clear_proto_id() {
  proto_id_ = 0u;
}
inline uint32_t Msg_DBGS_LoadBaseInfoReq::_internal_proto_id() const {
  return proto_id_;
}
inline uint32_t Msg_DBGS_LoadBaseInfoReq::proto_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_LoadBaseInfoReq.proto_id)
  return _internal_proto_id();
}
inline void Msg_DBGS_LoadBaseInfoReq::_internal_set_proto_id(uint32_t value) {
  
  proto_id_ = value;
}
inline void Msg_DBGS_LoadBaseInfoReq::set_proto_id(uint32_t value) {
  _internal_set_proto_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_LoadBaseInfoReq.proto_id)
}

// optional uint32 id = 4;
inline bool Msg_DBGS_LoadBaseInfoReq::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_DBGS_LoadBaseInfoReq::has_id() const {
  return _internal_has_id();
}
inline void Msg_DBGS_LoadBaseInfoReq::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Msg_DBGS_LoadBaseInfoReq::_internal_id() const {
  return id_;
}
inline uint32_t Msg_DBGS_LoadBaseInfoReq::id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_LoadBaseInfoReq.id)
  return _internal_id();
}
inline void Msg_DBGS_LoadBaseInfoReq::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Msg_DBGS_LoadBaseInfoReq::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_LoadBaseInfoReq.id)
}

// uint32 seq_id = 5;
inline void Msg_DBGS_LoadBaseInfoReq::clear_seq_id() {
  seq_id_ = 0u;
}
inline uint32_t Msg_DBGS_LoadBaseInfoReq::_internal_seq_id() const {
  return seq_id_;
}
inline uint32_t Msg_DBGS_LoadBaseInfoReq::seq_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_LoadBaseInfoReq.seq_id)
  return _internal_seq_id();
}
inline void Msg_DBGS_LoadBaseInfoReq::_internal_set_seq_id(uint32_t value) {
  
  seq_id_ = value;
}
inline void Msg_DBGS_LoadBaseInfoReq::set_seq_id(uint32_t value) {
  _internal_set_seq_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_LoadBaseInfoReq.seq_id)
}

// -------------------------------------------------------------------

// Msg_DBGS_LoadBaseInfoAck

// int64 check_id = 1;
inline void Msg_DBGS_LoadBaseInfoAck::clear_check_id() {
  check_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_LoadBaseInfoAck::_internal_check_id() const {
  return check_id_;
}
inline int64_t Msg_DBGS_LoadBaseInfoAck::check_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_LoadBaseInfoAck.check_id)
  return _internal_check_id();
}
inline void Msg_DBGS_LoadBaseInfoAck::_internal_set_check_id(int64_t value) {
  
  check_id_ = value;
}
inline void Msg_DBGS_LoadBaseInfoAck::set_check_id(int64_t value) {
  _internal_set_check_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_LoadBaseInfoAck.check_id)
}

// int64 checked_id = 2;
inline void Msg_DBGS_LoadBaseInfoAck::clear_checked_id() {
  checked_id_ = int64_t{0};
}
inline int64_t Msg_DBGS_LoadBaseInfoAck::_internal_checked_id() const {
  return checked_id_;
}
inline int64_t Msg_DBGS_LoadBaseInfoAck::checked_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_LoadBaseInfoAck.checked_id)
  return _internal_checked_id();
}
inline void Msg_DBGS_LoadBaseInfoAck::_internal_set_checked_id(int64_t value) {
  
  checked_id_ = value;
}
inline void Msg_DBGS_LoadBaseInfoAck::set_checked_id(int64_t value) {
  _internal_set_checked_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_LoadBaseInfoAck.checked_id)
}

// uint32 proto_id = 3;
inline void Msg_DBGS_LoadBaseInfoAck::clear_proto_id() {
  proto_id_ = 0u;
}
inline uint32_t Msg_DBGS_LoadBaseInfoAck::_internal_proto_id() const {
  return proto_id_;
}
inline uint32_t Msg_DBGS_LoadBaseInfoAck::proto_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_LoadBaseInfoAck.proto_id)
  return _internal_proto_id();
}
inline void Msg_DBGS_LoadBaseInfoAck::_internal_set_proto_id(uint32_t value) {
  
  proto_id_ = value;
}
inline void Msg_DBGS_LoadBaseInfoAck::set_proto_id(uint32_t value) {
  _internal_set_proto_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_LoadBaseInfoAck.proto_id)
}

// optional uint32 id = 4;
inline bool Msg_DBGS_LoadBaseInfoAck::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_DBGS_LoadBaseInfoAck::has_id() const {
  return _internal_has_id();
}
inline void Msg_DBGS_LoadBaseInfoAck::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Msg_DBGS_LoadBaseInfoAck::_internal_id() const {
  return id_;
}
inline uint32_t Msg_DBGS_LoadBaseInfoAck::id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_LoadBaseInfoAck.id)
  return _internal_id();
}
inline void Msg_DBGS_LoadBaseInfoAck::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Msg_DBGS_LoadBaseInfoAck::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_LoadBaseInfoAck.id)
}

// uint32 seq_id = 5;
inline void Msg_DBGS_LoadBaseInfoAck::clear_seq_id() {
  seq_id_ = 0u;
}
inline uint32_t Msg_DBGS_LoadBaseInfoAck::_internal_seq_id() const {
  return seq_id_;
}
inline uint32_t Msg_DBGS_LoadBaseInfoAck::seq_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_LoadBaseInfoAck.seq_id)
  return _internal_seq_id();
}
inline void Msg_DBGS_LoadBaseInfoAck::_internal_set_seq_id(uint32_t value) {
  
  seq_id_ = value;
}
inline void Msg_DBGS_LoadBaseInfoAck::set_seq_id(uint32_t value) {
  _internal_set_seq_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_LoadBaseInfoAck.seq_id)
}

// uint32 ret_code = 6;
inline void Msg_DBGS_LoadBaseInfoAck::clear_ret_code() {
  ret_code_ = 0u;
}
inline uint32_t Msg_DBGS_LoadBaseInfoAck::_internal_ret_code() const {
  return ret_code_;
}
inline uint32_t Msg_DBGS_LoadBaseInfoAck::ret_code() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_LoadBaseInfoAck.ret_code)
  return _internal_ret_code();
}
inline void Msg_DBGS_LoadBaseInfoAck::_internal_set_ret_code(uint32_t value) {
  
  ret_code_ = value;
}
inline void Msg_DBGS_LoadBaseInfoAck::set_ret_code(uint32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_LoadBaseInfoAck.ret_code)
}

// -------------------------------------------------------------------

// Msg_DBGS_AddItemReq

// .XrPb.RoleItem oRoleItem = 1;
inline bool Msg_DBGS_AddItemReq::_internal_has_oroleitem() const {
  return this != internal_default_instance() && oroleitem_ != nullptr;
}
inline bool Msg_DBGS_AddItemReq::has_oroleitem() const {
  return _internal_has_oroleitem();
}
inline void Msg_DBGS_AddItemReq::clear_oroleitem() {
  if (GetArenaForAllocation() == nullptr && oroleitem_ != nullptr) {
    delete oroleitem_;
  }
  oroleitem_ = nullptr;
}
inline const ::XrPb::RoleItem& Msg_DBGS_AddItemReq::_internal_oroleitem() const {
  const ::XrPb::RoleItem* p = oroleitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::RoleItem&>(
      ::XrPb::_RoleItem_default_instance_);
}
inline const ::XrPb::RoleItem& Msg_DBGS_AddItemReq::oroleitem() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_AddItemReq.oRoleItem)
  return _internal_oroleitem();
}
inline void Msg_DBGS_AddItemReq::unsafe_arena_set_allocated_oroleitem(
    ::XrPb::RoleItem* oroleitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oroleitem_);
  }
  oroleitem_ = oroleitem;
  if (oroleitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_DBGS_AddItemReq.oRoleItem)
}
inline ::XrPb::RoleItem* Msg_DBGS_AddItemReq::release_oroleitem() {
  
  ::XrPb::RoleItem* temp = oroleitem_;
  oroleitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::RoleItem* Msg_DBGS_AddItemReq::unsafe_arena_release_oroleitem() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_DBGS_AddItemReq.oRoleItem)
  
  ::XrPb::RoleItem* temp = oroleitem_;
  oroleitem_ = nullptr;
  return temp;
}
inline ::XrPb::RoleItem* Msg_DBGS_AddItemReq::_internal_mutable_oroleitem() {
  
  if (oroleitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::RoleItem>(GetArenaForAllocation());
    oroleitem_ = p;
  }
  return oroleitem_;
}
inline ::XrPb::RoleItem* Msg_DBGS_AddItemReq::mutable_oroleitem() {
  ::XrPb::RoleItem* _msg = _internal_mutable_oroleitem();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_DBGS_AddItemReq.oRoleItem)
  return _msg;
}
inline void Msg_DBGS_AddItemReq::set_allocated_oroleitem(::XrPb::RoleItem* oroleitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete oroleitem_;
  }
  if (oroleitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::RoleItem>::GetOwningArena(oroleitem);
    if (message_arena != submessage_arena) {
      oroleitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oroleitem, submessage_arena);
    }
    
  } else {
    
  }
  oroleitem_ = oroleitem;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_DBGS_AddItemReq.oRoleItem)
}

// -------------------------------------------------------------------

// Msg_DBGS_UpdateItemReq

// .XrPb.RoleItem oRoleItem = 1;
inline bool Msg_DBGS_UpdateItemReq::_internal_has_oroleitem() const {
  return this != internal_default_instance() && oroleitem_ != nullptr;
}
inline bool Msg_DBGS_UpdateItemReq::has_oroleitem() const {
  return _internal_has_oroleitem();
}
inline void Msg_DBGS_UpdateItemReq::clear_oroleitem() {
  if (GetArenaForAllocation() == nullptr && oroleitem_ != nullptr) {
    delete oroleitem_;
  }
  oroleitem_ = nullptr;
}
inline const ::XrPb::RoleItem& Msg_DBGS_UpdateItemReq::_internal_oroleitem() const {
  const ::XrPb::RoleItem* p = oroleitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::RoleItem&>(
      ::XrPb::_RoleItem_default_instance_);
}
inline const ::XrPb::RoleItem& Msg_DBGS_UpdateItemReq::oroleitem() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_UpdateItemReq.oRoleItem)
  return _internal_oroleitem();
}
inline void Msg_DBGS_UpdateItemReq::unsafe_arena_set_allocated_oroleitem(
    ::XrPb::RoleItem* oroleitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oroleitem_);
  }
  oroleitem_ = oroleitem;
  if (oroleitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_DBGS_UpdateItemReq.oRoleItem)
}
inline ::XrPb::RoleItem* Msg_DBGS_UpdateItemReq::release_oroleitem() {
  
  ::XrPb::RoleItem* temp = oroleitem_;
  oroleitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::RoleItem* Msg_DBGS_UpdateItemReq::unsafe_arena_release_oroleitem() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_DBGS_UpdateItemReq.oRoleItem)
  
  ::XrPb::RoleItem* temp = oroleitem_;
  oroleitem_ = nullptr;
  return temp;
}
inline ::XrPb::RoleItem* Msg_DBGS_UpdateItemReq::_internal_mutable_oroleitem() {
  
  if (oroleitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::RoleItem>(GetArenaForAllocation());
    oroleitem_ = p;
  }
  return oroleitem_;
}
inline ::XrPb::RoleItem* Msg_DBGS_UpdateItemReq::mutable_oroleitem() {
  ::XrPb::RoleItem* _msg = _internal_mutable_oroleitem();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_DBGS_UpdateItemReq.oRoleItem)
  return _msg;
}
inline void Msg_DBGS_UpdateItemReq::set_allocated_oroleitem(::XrPb::RoleItem* oroleitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete oroleitem_;
  }
  if (oroleitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::RoleItem>::GetOwningArena(oroleitem);
    if (message_arena != submessage_arena) {
      oroleitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oroleitem, submessage_arena);
    }
    
  } else {
    
  }
  oroleitem_ = oroleitem;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_DBGS_UpdateItemReq.oRoleItem)
}

// -------------------------------------------------------------------

// Msg_DBGS_UpdateDailyAward

// repeated .XrPb.RoleDailyAward vecDailyAward = 1;
inline int Msg_DBGS_UpdateDailyAward::_internal_vecdailyaward_size() const {
  return vecdailyaward_.size();
}
inline int Msg_DBGS_UpdateDailyAward::vecdailyaward_size() const {
  return _internal_vecdailyaward_size();
}
inline void Msg_DBGS_UpdateDailyAward::clear_vecdailyaward() {
  vecdailyaward_.Clear();
}
inline ::XrPb::RoleDailyAward* Msg_DBGS_UpdateDailyAward::mutable_vecdailyaward(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_DBGS_UpdateDailyAward.vecDailyAward)
  return vecdailyaward_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleDailyAward >*
Msg_DBGS_UpdateDailyAward::mutable_vecdailyaward() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_DBGS_UpdateDailyAward.vecDailyAward)
  return &vecdailyaward_;
}
inline const ::XrPb::RoleDailyAward& Msg_DBGS_UpdateDailyAward::_internal_vecdailyaward(int index) const {
  return vecdailyaward_.Get(index);
}
inline const ::XrPb::RoleDailyAward& Msg_DBGS_UpdateDailyAward::vecdailyaward(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_UpdateDailyAward.vecDailyAward)
  return _internal_vecdailyaward(index);
}
inline ::XrPb::RoleDailyAward* Msg_DBGS_UpdateDailyAward::_internal_add_vecdailyaward() {
  return vecdailyaward_.Add();
}
inline ::XrPb::RoleDailyAward* Msg_DBGS_UpdateDailyAward::add_vecdailyaward() {
  ::XrPb::RoleDailyAward* _add = _internal_add_vecdailyaward();
  // @@protoc_insertion_point(field_add:XrPb.Msg_DBGS_UpdateDailyAward.vecDailyAward)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleDailyAward >&
Msg_DBGS_UpdateDailyAward::vecdailyaward() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_DBGS_UpdateDailyAward.vecDailyAward)
  return vecdailyaward_;
}

// -------------------------------------------------------------------

// Msg_DBGS_UpdateLoginedSign

// uint32 uiId = 1;
inline void Msg_DBGS_UpdateLoginedSign::clear_uiid() {
  uiid_ = 0u;
}
inline uint32_t Msg_DBGS_UpdateLoginedSign::_internal_uiid() const {
  return uiid_;
}
inline uint32_t Msg_DBGS_UpdateLoginedSign::uiid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_UpdateLoginedSign.uiId)
  return _internal_uiid();
}
inline void Msg_DBGS_UpdateLoginedSign::_internal_set_uiid(uint32_t value) {
  
  uiid_ = value;
}
inline void Msg_DBGS_UpdateLoginedSign::set_uiid(uint32_t value) {
  _internal_set_uiid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_UpdateLoginedSign.uiId)
}

// optional string strVersion = 2;
inline bool Msg_DBGS_UpdateLoginedSign::_internal_has_strversion() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_DBGS_UpdateLoginedSign::has_strversion() const {
  return _internal_has_strversion();
}
inline void Msg_DBGS_UpdateLoginedSign::clear_strversion() {
  strversion_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Msg_DBGS_UpdateLoginedSign::strversion() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_UpdateLoginedSign.strVersion)
  return _internal_strversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_DBGS_UpdateLoginedSign::set_strversion(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 strversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_UpdateLoginedSign.strVersion)
}
inline std::string* Msg_DBGS_UpdateLoginedSign::mutable_strversion() {
  std::string* _s = _internal_mutable_strversion();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_DBGS_UpdateLoginedSign.strVersion)
  return _s;
}
inline const std::string& Msg_DBGS_UpdateLoginedSign::_internal_strversion() const {
  return strversion_.Get();
}
inline void Msg_DBGS_UpdateLoginedSign::_internal_set_strversion(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  strversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_DBGS_UpdateLoginedSign::_internal_mutable_strversion() {
  _has_bits_[0] |= 0x00000001u;
  return strversion_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_DBGS_UpdateLoginedSign::release_strversion() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_DBGS_UpdateLoginedSign.strVersion)
  if (!_internal_has_strversion()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = strversion_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strversion_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_DBGS_UpdateLoginedSign::set_allocated_strversion(std::string* strversion) {
  if (strversion != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  strversion_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strversion,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strversion_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_DBGS_UpdateLoginedSign.strVersion)
}

// optional uint32 uiDay = 3;
inline bool Msg_DBGS_UpdateLoginedSign::_internal_has_uiday() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_DBGS_UpdateLoginedSign::has_uiday() const {
  return _internal_has_uiday();
}
inline void Msg_DBGS_UpdateLoginedSign::clear_uiday() {
  uiday_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Msg_DBGS_UpdateLoginedSign::_internal_uiday() const {
  return uiday_;
}
inline uint32_t Msg_DBGS_UpdateLoginedSign::uiday() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_UpdateLoginedSign.uiDay)
  return _internal_uiday();
}
inline void Msg_DBGS_UpdateLoginedSign::_internal_set_uiday(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  uiday_ = value;
}
inline void Msg_DBGS_UpdateLoginedSign::set_uiday(uint32_t value) {
  _internal_set_uiday(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_UpdateLoginedSign.uiDay)
}

// optional int64 llTime = 4;
inline bool Msg_DBGS_UpdateLoginedSign::_internal_has_lltime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Msg_DBGS_UpdateLoginedSign::has_lltime() const {
  return _internal_has_lltime();
}
inline void Msg_DBGS_UpdateLoginedSign::clear_lltime() {
  lltime_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t Msg_DBGS_UpdateLoginedSign::_internal_lltime() const {
  return lltime_;
}
inline int64_t Msg_DBGS_UpdateLoginedSign::lltime() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_UpdateLoginedSign.llTime)
  return _internal_lltime();
}
inline void Msg_DBGS_UpdateLoginedSign::_internal_set_lltime(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  lltime_ = value;
}
inline void Msg_DBGS_UpdateLoginedSign::set_lltime(int64_t value) {
  _internal_set_lltime(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_UpdateLoginedSign.llTime)
}

// -------------------------------------------------------------------

// Msg_DBGS_UpdateMonthSign

// repeated .XrPb.RoleMonthSign oSign = 1;
inline int Msg_DBGS_UpdateMonthSign::_internal_osign_size() const {
  return osign_.size();
}
inline int Msg_DBGS_UpdateMonthSign::osign_size() const {
  return _internal_osign_size();
}
inline void Msg_DBGS_UpdateMonthSign::clear_osign() {
  osign_.Clear();
}
inline ::XrPb::RoleMonthSign* Msg_DBGS_UpdateMonthSign::mutable_osign(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_DBGS_UpdateMonthSign.oSign)
  return osign_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleMonthSign >*
Msg_DBGS_UpdateMonthSign::mutable_osign() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_DBGS_UpdateMonthSign.oSign)
  return &osign_;
}
inline const ::XrPb::RoleMonthSign& Msg_DBGS_UpdateMonthSign::_internal_osign(int index) const {
  return osign_.Get(index);
}
inline const ::XrPb::RoleMonthSign& Msg_DBGS_UpdateMonthSign::osign(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_UpdateMonthSign.oSign)
  return _internal_osign(index);
}
inline ::XrPb::RoleMonthSign* Msg_DBGS_UpdateMonthSign::_internal_add_osign() {
  return osign_.Add();
}
inline ::XrPb::RoleMonthSign* Msg_DBGS_UpdateMonthSign::add_osign() {
  ::XrPb::RoleMonthSign* _add = _internal_add_osign();
  // @@protoc_insertion_point(field_add:XrPb.Msg_DBGS_UpdateMonthSign.oSign)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::RoleMonthSign >&
Msg_DBGS_UpdateMonthSign::osign() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_DBGS_UpdateMonthSign.oSign)
  return osign_;
}

// optional int64 llSignTime = 2;
inline bool Msg_DBGS_UpdateMonthSign::_internal_has_llsigntime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_DBGS_UpdateMonthSign::has_llsigntime() const {
  return _internal_has_llsigntime();
}
inline void Msg_DBGS_UpdateMonthSign::clear_llsigntime() {
  llsigntime_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Msg_DBGS_UpdateMonthSign::_internal_llsigntime() const {
  return llsigntime_;
}
inline int64_t Msg_DBGS_UpdateMonthSign::llsigntime() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_UpdateMonthSign.llSignTime)
  return _internal_llsigntime();
}
inline void Msg_DBGS_UpdateMonthSign::_internal_set_llsigntime(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  llsigntime_ = value;
}
inline void Msg_DBGS_UpdateMonthSign::set_llsigntime(int64_t value) {
  _internal_set_llsigntime(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_UpdateMonthSign.llSignTime)
}

// -------------------------------------------------------------------

// Msg_DBGS_ClearMonthSign

// int64 llCurTime = 1;
inline void Msg_DBGS_ClearMonthSign::clear_llcurtime() {
  llcurtime_ = int64_t{0};
}
inline int64_t Msg_DBGS_ClearMonthSign::_internal_llcurtime() const {
  return llcurtime_;
}
inline int64_t Msg_DBGS_ClearMonthSign::llcurtime() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_DBGS_ClearMonthSign.llCurTime)
  return _internal_llcurtime();
}
inline void Msg_DBGS_ClearMonthSign::_internal_set_llcurtime(int64_t value) {
  
  llcurtime_ = value;
}
inline void Msg_DBGS_ClearMonthSign::set_llcurtime(int64_t value) {
  _internal_set_llcurtime(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_DBGS_ClearMonthSign.llCurTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XrPb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::XrPb::MsgSvrMod_DBGS_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::MsgSvrMod_DBGS_MsgId>() {
  return ::XrPb::MsgSvrMod_DBGS_MsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_2fMsgDBGS_2eproto
