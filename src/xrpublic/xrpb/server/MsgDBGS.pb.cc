// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/MsgDBGS.proto

#include "server/MsgDBGS.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace XrPb {
constexpr MsgSvrMod_DBGS::MsgSvrMod_DBGS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MsgSvrMod_DBGSDefaultTypeInternal {
  constexpr MsgSvrMod_DBGSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgSvrMod_DBGSDefaultTypeInternal() {}
  union {
    MsgSvrMod_DBGS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgSvrMod_DBGSDefaultTypeInternal _MsgSvrMod_DBGS_default_instance_;
constexpr Msg_DBGS_RoleInfoReq::Msg_DBGS_RoleInfoReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_id_(int64_t{0}){}
struct Msg_DBGS_RoleInfoReqDefaultTypeInternal {
  constexpr Msg_DBGS_RoleInfoReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_RoleInfoReqDefaultTypeInternal() {}
  union {
    Msg_DBGS_RoleInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_RoleInfoReqDefaultTypeInternal _Msg_DBGS_RoleInfoReq_default_instance_;
constexpr RoleInfo::RoleInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , form_(nullptr)
  , acc_id_(int64_t{0})
  , role_id_(int64_t{0})
  , career_id_(0u)
  , gender_(0u)
  , level_(0u)
  , exp_(0u)
  , punish_time_(int64_t{0})
  , gm_level_(0u)
  , role_sdk_(0u)
  , create_time_(int64_t{0})
  , last_login_time_(int64_t{0})
  , logout_time_(int64_t{0})
  , server_id_(0u)
  , forbid_chat_type_(0u)
  , month_sign_time_(int64_t{0})
  , forbid_chat_time_(int64_t{0})
  , role_messager_(0u)
  , during_day_(0u)
  , total_online_(0u)
  , uilogintimes_(0u){}
struct RoleInfoDefaultTypeInternal {
  constexpr RoleInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoleInfoDefaultTypeInternal() {}
  union {
    RoleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoleInfoDefaultTypeInternal _RoleInfo_default_instance_;
constexpr RoleItem::RoleItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uiid_(0u)
  , uicount_(0u)
  , llinctime_(int64_t{0}){}
struct RoleItemDefaultTypeInternal {
  constexpr RoleItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoleItemDefaultTypeInternal() {}
  union {
    RoleItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoleItemDefaultTypeInternal _RoleItem_default_instance_;
constexpr RoleDailyAward::RoleDailyAward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uiid_(0u)
  , uicount_(0u){}
struct RoleDailyAwardDefaultTypeInternal {
  constexpr RoleDailyAwardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoleDailyAwardDefaultTypeInternal() {}
  union {
    RoleDailyAward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoleDailyAwardDefaultTypeInternal _RoleDailyAward_default_instance_;
constexpr RoleLoginedSign::RoleLoginedSign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vecsign_()
  , _vecsign_cached_byte_size_(0)
  , strversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lltime_(int64_t{0})
  , uiid_(0u){}
struct RoleLoginedSignDefaultTypeInternal {
  constexpr RoleLoginedSignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoleLoginedSignDefaultTypeInternal() {}
  union {
    RoleLoginedSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoleLoginedSignDefaultTypeInternal _RoleLoginedSign_default_instance_;
constexpr RoleMonthSign::RoleMonthSign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : llday_(int64_t{0})
  , bvip_(false){}
struct RoleMonthSignDefaultTypeInternal {
  constexpr RoleMonthSignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoleMonthSignDefaultTypeInternal() {}
  union {
    RoleMonthSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoleMonthSignDefaultTypeInternal _RoleMonthSign_default_instance_;
constexpr DBGS_RoleData::DBGS_RoleData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_portrait_()
  , role_item_()
  , daily_award_()
  , vecloginedsign_()
  , month_sign_()
  , role_background_()
  , role_messager_()
  , role_info_(nullptr)
  , acc_id_(int64_t{0}){}
struct DBGS_RoleDataDefaultTypeInternal {
  constexpr DBGS_RoleDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DBGS_RoleDataDefaultTypeInternal() {}
  union {
    DBGS_RoleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DBGS_RoleDataDefaultTypeInternal _DBGS_RoleData_default_instance_;
constexpr Msg_DBGS_RoleInfoAck::Msg_DBGS_RoleInfoAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_id_(int64_t{0})
  , ret_(0)
{}
struct Msg_DBGS_RoleInfoAckDefaultTypeInternal {
  constexpr Msg_DBGS_RoleInfoAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_RoleInfoAckDefaultTypeInternal() {}
  union {
    Msg_DBGS_RoleInfoAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_RoleInfoAckDefaultTypeInternal _Msg_DBGS_RoleInfoAck_default_instance_;
constexpr Msg_DBGS_CreateRoleReq::Msg_DBGS_CreateRoleReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_info_(nullptr)
  , acc_id_(int64_t{0}){}
struct Msg_DBGS_CreateRoleReqDefaultTypeInternal {
  constexpr Msg_DBGS_CreateRoleReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_CreateRoleReqDefaultTypeInternal() {}
  union {
    Msg_DBGS_CreateRoleReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_CreateRoleReqDefaultTypeInternal _Msg_DBGS_CreateRoleReq_default_instance_;
constexpr Msg_DBGS_CreateRoleAck::Msg_DBGS_CreateRoleAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_id_(int64_t{0})
  , ret_(0){}
struct Msg_DBGS_CreateRoleAckDefaultTypeInternal {
  constexpr Msg_DBGS_CreateRoleAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_CreateRoleAckDefaultTypeInternal() {}
  union {
    Msg_DBGS_CreateRoleAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_CreateRoleAckDefaultTypeInternal _Msg_DBGS_CreateRoleAck_default_instance_;
constexpr Msg_DBGS_UpdateRoleInfo::Msg_DBGS_UpdateRoleInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_info_(nullptr)
  , acc_id_(int64_t{0}){}
struct Msg_DBGS_UpdateRoleInfoDefaultTypeInternal {
  constexpr Msg_DBGS_UpdateRoleInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_UpdateRoleInfoDefaultTypeInternal() {}
  union {
    Msg_DBGS_UpdateRoleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_UpdateRoleInfoDefaultTypeInternal _Msg_DBGS_UpdateRoleInfo_default_instance_;
constexpr Msg_DBGS_Player_Del::Msg_DBGS_Player_Del(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_id_(int64_t{0}){}
struct Msg_DBGS_Player_DelDefaultTypeInternal {
  constexpr Msg_DBGS_Player_DelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_Player_DelDefaultTypeInternal() {}
  union {
    Msg_DBGS_Player_Del _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_Player_DelDefaultTypeInternal _Msg_DBGS_Player_Del_default_instance_;
constexpr Msg_DBGS_Player_In::Msg_DBGS_Player_In(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_id_(int64_t{0}){}
struct Msg_DBGS_Player_InDefaultTypeInternal {
  constexpr Msg_DBGS_Player_InDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_Player_InDefaultTypeInternal() {}
  union {
    Msg_DBGS_Player_In _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_Player_InDefaultTypeInternal _Msg_DBGS_Player_In_default_instance_;
constexpr Msg_DBGS_AddRoleBackground::Msg_DBGS_AddRoleBackground(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_()
  , _id_cached_byte_size_(0)
  , acc_id_(int64_t{0}){}
struct Msg_DBGS_AddRoleBackgroundDefaultTypeInternal {
  constexpr Msg_DBGS_AddRoleBackgroundDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_AddRoleBackgroundDefaultTypeInternal() {}
  union {
    Msg_DBGS_AddRoleBackground _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_AddRoleBackgroundDefaultTypeInternal _Msg_DBGS_AddRoleBackground_default_instance_;
constexpr Msg_DBGS_DeleteBackground::Msg_DBGS_DeleteBackground(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_()
  , _id_cached_byte_size_(0)
  , acc_id_(int64_t{0}){}
struct Msg_DBGS_DeleteBackgroundDefaultTypeInternal {
  constexpr Msg_DBGS_DeleteBackgroundDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_DeleteBackgroundDefaultTypeInternal() {}
  union {
    Msg_DBGS_DeleteBackground _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_DeleteBackgroundDefaultTypeInternal _Msg_DBGS_DeleteBackground_default_instance_;
constexpr Msg_DBGS_AddRolePortrait::Msg_DBGS_AddRolePortrait(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_()
  , _id_cached_byte_size_(0)
  , acc_id_(int64_t{0}){}
struct Msg_DBGS_AddRolePortraitDefaultTypeInternal {
  constexpr Msg_DBGS_AddRolePortraitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_AddRolePortraitDefaultTypeInternal() {}
  union {
    Msg_DBGS_AddRolePortrait _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_AddRolePortraitDefaultTypeInternal _Msg_DBGS_AddRolePortrait_default_instance_;
constexpr Msg_DBGS_DeletePortrait::Msg_DBGS_DeletePortrait(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_()
  , _id_cached_byte_size_(0)
  , acc_id_(int64_t{0}){}
struct Msg_DBGS_DeletePortraitDefaultTypeInternal {
  constexpr Msg_DBGS_DeletePortraitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_DeletePortraitDefaultTypeInternal() {}
  union {
    Msg_DBGS_DeletePortrait _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_DeletePortraitDefaultTypeInternal _Msg_DBGS_DeletePortrait_default_instance_;
constexpr Msg_DBGS_AddRoleMessager::Msg_DBGS_AddRoleMessager(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messager_()
  , _messager_cached_byte_size_(0)
  , acc_id_(int64_t{0}){}
struct Msg_DBGS_AddRoleMessagerDefaultTypeInternal {
  constexpr Msg_DBGS_AddRoleMessagerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_AddRoleMessagerDefaultTypeInternal() {}
  union {
    Msg_DBGS_AddRoleMessager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_AddRoleMessagerDefaultTypeInternal _Msg_DBGS_AddRoleMessager_default_instance_;
constexpr Msg_DBGS_DeleteMessager::Msg_DBGS_DeleteMessager(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_()
  , _id_cached_byte_size_(0)
  , acc_id_(int64_t{0}){}
struct Msg_DBGS_DeleteMessagerDefaultTypeInternal {
  constexpr Msg_DBGS_DeleteMessagerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_DeleteMessagerDefaultTypeInternal() {}
  union {
    Msg_DBGS_DeleteMessager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_DeleteMessagerDefaultTypeInternal _Msg_DBGS_DeleteMessager_default_instance_;
constexpr Msg_DBGS_LoadBaseInfoReq::Msg_DBGS_LoadBaseInfoReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : check_id_(int64_t{0})
  , checked_id_(int64_t{0})
  , proto_id_(0u)
  , id_(0u)
  , seq_id_(0u){}
struct Msg_DBGS_LoadBaseInfoReqDefaultTypeInternal {
  constexpr Msg_DBGS_LoadBaseInfoReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_LoadBaseInfoReqDefaultTypeInternal() {}
  union {
    Msg_DBGS_LoadBaseInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_LoadBaseInfoReqDefaultTypeInternal _Msg_DBGS_LoadBaseInfoReq_default_instance_;
constexpr Msg_DBGS_LoadBaseInfoAck::Msg_DBGS_LoadBaseInfoAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : check_id_(int64_t{0})
  , checked_id_(int64_t{0})
  , proto_id_(0u)
  , id_(0u)
  , seq_id_(0u)
  , ret_code_(0u){}
struct Msg_DBGS_LoadBaseInfoAckDefaultTypeInternal {
  constexpr Msg_DBGS_LoadBaseInfoAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_LoadBaseInfoAckDefaultTypeInternal() {}
  union {
    Msg_DBGS_LoadBaseInfoAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_LoadBaseInfoAckDefaultTypeInternal _Msg_DBGS_LoadBaseInfoAck_default_instance_;
constexpr Msg_DBGS_AddItemReq::Msg_DBGS_AddItemReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oroleitem_(nullptr){}
struct Msg_DBGS_AddItemReqDefaultTypeInternal {
  constexpr Msg_DBGS_AddItemReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_AddItemReqDefaultTypeInternal() {}
  union {
    Msg_DBGS_AddItemReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_AddItemReqDefaultTypeInternal _Msg_DBGS_AddItemReq_default_instance_;
constexpr Msg_DBGS_UpdateItemReq::Msg_DBGS_UpdateItemReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oroleitem_(nullptr){}
struct Msg_DBGS_UpdateItemReqDefaultTypeInternal {
  constexpr Msg_DBGS_UpdateItemReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_UpdateItemReqDefaultTypeInternal() {}
  union {
    Msg_DBGS_UpdateItemReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_UpdateItemReqDefaultTypeInternal _Msg_DBGS_UpdateItemReq_default_instance_;
constexpr Msg_DBGS_UpdateDailyAward::Msg_DBGS_UpdateDailyAward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vecdailyaward_(){}
struct Msg_DBGS_UpdateDailyAwardDefaultTypeInternal {
  constexpr Msg_DBGS_UpdateDailyAwardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_UpdateDailyAwardDefaultTypeInternal() {}
  union {
    Msg_DBGS_UpdateDailyAward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_UpdateDailyAwardDefaultTypeInternal _Msg_DBGS_UpdateDailyAward_default_instance_;
constexpr Msg_DBGS_UpdateLoginedSign::Msg_DBGS_UpdateLoginedSign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strversion_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uiid_(0u)
  , uiday_(0u)
  , lltime_(int64_t{0}){}
struct Msg_DBGS_UpdateLoginedSignDefaultTypeInternal {
  constexpr Msg_DBGS_UpdateLoginedSignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_UpdateLoginedSignDefaultTypeInternal() {}
  union {
    Msg_DBGS_UpdateLoginedSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_UpdateLoginedSignDefaultTypeInternal _Msg_DBGS_UpdateLoginedSign_default_instance_;
constexpr Msg_DBGS_UpdateMonthSign::Msg_DBGS_UpdateMonthSign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : osign_()
  , llsigntime_(int64_t{0}){}
struct Msg_DBGS_UpdateMonthSignDefaultTypeInternal {
  constexpr Msg_DBGS_UpdateMonthSignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_UpdateMonthSignDefaultTypeInternal() {}
  union {
    Msg_DBGS_UpdateMonthSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_UpdateMonthSignDefaultTypeInternal _Msg_DBGS_UpdateMonthSign_default_instance_;
constexpr Msg_DBGS_ClearMonthSign::Msg_DBGS_ClearMonthSign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : llcurtime_(int64_t{0}){}
struct Msg_DBGS_ClearMonthSignDefaultTypeInternal {
  constexpr Msg_DBGS_ClearMonthSignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_DBGS_ClearMonthSignDefaultTypeInternal() {}
  union {
    Msg_DBGS_ClearMonthSign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_DBGS_ClearMonthSignDefaultTypeInternal _Msg_DBGS_ClearMonthSign_default_instance_;
}  // namespace XrPb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_2fMsgDBGS_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_server_2fMsgDBGS_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_2fMsgDBGS_2eproto = nullptr;

const uint32_t TableStruct_server_2fMsgDBGS_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::MsgSvrMod_DBGS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_RoleInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_RoleInfoReq, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, role_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, acc_name_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, role_name_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, career_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, gender_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, level_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, exp_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, gm_level_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, punish_time_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, role_sdk_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, form_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, server_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, create_time_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, last_login_time_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, logout_time_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, month_sign_time_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, forbid_chat_time_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, forbid_chat_type_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, role_messager_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, during_day_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, total_online_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleInfo, uilogintimes_),
  3,
  4,
  0,
  1,
  5,
  6,
  7,
  8,
  10,
  9,
  11,
  2,
  15,
  12,
  13,
  14,
  17,
  18,
  16,
  19,
  20,
  21,
  22,
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleItem, uiid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleItem, uicount_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleItem, llinctime_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleDailyAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleDailyAward, uiid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleDailyAward, uicount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleLoginedSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleLoginedSign, uiid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleLoginedSign, strversion_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleLoginedSign, lltime_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleLoginedSign, vecsign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleMonthSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleMonthSign, llday_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoleMonthSign, bvip_),
  PROTOBUF_FIELD_OFFSET(::XrPb::DBGS_RoleData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::DBGS_RoleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::DBGS_RoleData, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::DBGS_RoleData, role_info_),
  PROTOBUF_FIELD_OFFSET(::XrPb::DBGS_RoleData, role_portrait_),
  PROTOBUF_FIELD_OFFSET(::XrPb::DBGS_RoleData, role_item_),
  PROTOBUF_FIELD_OFFSET(::XrPb::DBGS_RoleData, daily_award_),
  PROTOBUF_FIELD_OFFSET(::XrPb::DBGS_RoleData, vecloginedsign_),
  PROTOBUF_FIELD_OFFSET(::XrPb::DBGS_RoleData, month_sign_),
  PROTOBUF_FIELD_OFFSET(::XrPb::DBGS_RoleData, role_background_),
  PROTOBUF_FIELD_OFFSET(::XrPb::DBGS_RoleData, role_messager_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_RoleInfoAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_RoleInfoAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_RoleInfoAck, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_RoleInfoAck, ret_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_CreateRoleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_CreateRoleReq, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_CreateRoleReq, role_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_CreateRoleAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_CreateRoleAck, ret_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_CreateRoleAck, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateRoleInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateRoleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateRoleInfo, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateRoleInfo, role_info_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_Player_Del, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_Player_Del, acc_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_Player_In, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_Player_In, acc_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_AddRoleBackground, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_AddRoleBackground, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_AddRoleBackground, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_DeleteBackground, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_DeleteBackground, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_DeleteBackground, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_AddRolePortrait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_AddRolePortrait, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_AddRolePortrait, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_DeletePortrait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_DeletePortrait, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_DeletePortrait, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_AddRoleMessager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_AddRoleMessager, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_AddRoleMessager, messager_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_DeleteMessager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_DeleteMessager, acc_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_DeleteMessager, id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_LoadBaseInfoReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_LoadBaseInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_LoadBaseInfoReq, check_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_LoadBaseInfoReq, checked_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_LoadBaseInfoReq, proto_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_LoadBaseInfoReq, id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_LoadBaseInfoReq, seq_id_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_LoadBaseInfoAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_LoadBaseInfoAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_LoadBaseInfoAck, check_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_LoadBaseInfoAck, checked_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_LoadBaseInfoAck, proto_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_LoadBaseInfoAck, id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_LoadBaseInfoAck, seq_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_LoadBaseInfoAck, ret_code_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_AddItemReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_AddItemReq, oroleitem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateItemReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateItemReq, oroleitem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateDailyAward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateDailyAward, vecdailyaward_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateLoginedSign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateLoginedSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateLoginedSign, uiid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateLoginedSign, strversion_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateLoginedSign, uiday_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateLoginedSign, lltime_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateMonthSign, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateMonthSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateMonthSign, osign_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_UpdateMonthSign, llsigntime_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_ClearMonthSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_DBGS_ClearMonthSign, llcurtime_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::XrPb::MsgSvrMod_DBGS)},
  { 6, -1, -1, sizeof(::XrPb::Msg_DBGS_RoleInfoReq)},
  { 13, 42, -1, sizeof(::XrPb::RoleInfo)},
  { 65, 74, -1, sizeof(::XrPb::RoleItem)},
  { 77, -1, -1, sizeof(::XrPb::RoleDailyAward)},
  { 85, -1, -1, sizeof(::XrPb::RoleLoginedSign)},
  { 95, -1, -1, sizeof(::XrPb::RoleMonthSign)},
  { 103, 118, -1, sizeof(::XrPb::DBGS_RoleData)},
  { 127, 135, -1, sizeof(::XrPb::Msg_DBGS_RoleInfoAck)},
  { 137, -1, -1, sizeof(::XrPb::Msg_DBGS_CreateRoleReq)},
  { 145, -1, -1, sizeof(::XrPb::Msg_DBGS_CreateRoleAck)},
  { 153, 161, -1, sizeof(::XrPb::Msg_DBGS_UpdateRoleInfo)},
  { 163, -1, -1, sizeof(::XrPb::Msg_DBGS_Player_Del)},
  { 170, -1, -1, sizeof(::XrPb::Msg_DBGS_Player_In)},
  { 177, -1, -1, sizeof(::XrPb::Msg_DBGS_AddRoleBackground)},
  { 185, -1, -1, sizeof(::XrPb::Msg_DBGS_DeleteBackground)},
  { 193, -1, -1, sizeof(::XrPb::Msg_DBGS_AddRolePortrait)},
  { 201, -1, -1, sizeof(::XrPb::Msg_DBGS_DeletePortrait)},
  { 209, -1, -1, sizeof(::XrPb::Msg_DBGS_AddRoleMessager)},
  { 217, -1, -1, sizeof(::XrPb::Msg_DBGS_DeleteMessager)},
  { 225, 236, -1, sizeof(::XrPb::Msg_DBGS_LoadBaseInfoReq)},
  { 241, 253, -1, sizeof(::XrPb::Msg_DBGS_LoadBaseInfoAck)},
  { 259, -1, -1, sizeof(::XrPb::Msg_DBGS_AddItemReq)},
  { 266, -1, -1, sizeof(::XrPb::Msg_DBGS_UpdateItemReq)},
  { 273, -1, -1, sizeof(::XrPb::Msg_DBGS_UpdateDailyAward)},
  { 280, 290, -1, sizeof(::XrPb::Msg_DBGS_UpdateLoginedSign)},
  { 294, 302, -1, sizeof(::XrPb::Msg_DBGS_UpdateMonthSign)},
  { 304, -1, -1, sizeof(::XrPb::Msg_DBGS_ClearMonthSign)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_MsgSvrMod_DBGS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_RoleInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_RoleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_RoleItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_RoleDailyAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_RoleLoginedSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_RoleMonthSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_DBGS_RoleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_RoleInfoAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_CreateRoleReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_CreateRoleAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_UpdateRoleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_Player_Del_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_Player_In_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_AddRoleBackground_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_DeleteBackground_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_AddRolePortrait_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_DeletePortrait_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_AddRoleMessager_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_DeleteMessager_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_LoadBaseInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_LoadBaseInfoAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_AddItemReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_UpdateItemReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_UpdateDailyAward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_UpdateLoginedSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_UpdateMonthSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_DBGS_ClearMonthSign_default_instance_),
};

const char descriptor_table_protodef_server_2fMsgDBGS_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024server/MsgDBGS.proto\022\004XrPb\032\023client/Com"
  "mon.proto\032\031server/MsgSvrCommon.proto\"\320\004\n"
  "\016MsgSvrMod_DBGS\"\275\004\n\005MsgId\022\021\n\rMsg_DBGS_No"
  "ne\020\000\022\030\n\024Msg_DBGS_RoleInfoReq\020\001\022\030\n\024Msg_DB"
  "GS_RoleInfoAck\020\002\022\032\n\026Msg_DBGS_CreateRoleR"
  "eq\020\003\022\032\n\026Msg_DBGS_CreateRoleAck\020\004\022\033\n\027Msg_"
  "DBGS_UpdateRoleInfo\020\005\022\034\n\030Msg_DBGS_AddRol"
  "ePortrait\020\006\022\033\n\027Msg_DBGS_DeletePortrait\020\007"
  "\022\036\n\032Msg_DBGS_AddRoleBackground\020\010\022\035\n\031Msg_"
  "DBGS_DeleteBackground\020\t\022\034\n\030Msg_DBGS_AddR"
  "oleMessager\020\n\022\033\n\027Msg_DBGS_DeleteMessager"
  "\020\013\022\034\n\030Msg_DBGS_LoadBaseInfoReq\020\014\022\034\n\030Msg_"
  "DBGS_LoadBaseInfoAck\020\r\022\027\n\023Msg_DBGS_Playe"
  "r_Del\020\016\022\027\n\023Msg_DBGS_AddItemReq\020\017\022\032\n\026Msg_"
  "DBGS_UpdateItemReq\020\020\022\036\n\032Msg_DBGS_UpdateL"
  "oginedSign\020\021\022\034\n\030Msg_DBGS_UpdateMonthSign"
  "\020\022\022\033\n\027Msg_DBGS_ClearMonthSign\020\023\"&\n\024Msg_D"
  "BGS_RoleInfoReq\022\016\n\006acc_id\030\001 \001(\003\"\246\007\n\010Role"
  "Info\022\023\n\006acc_id\030\001 \001(\003H\000\210\001\001\022\024\n\007role_id\030\002 \001"
  "(\003H\001\210\001\001\022\025\n\010acc_name\030\003 \001(\tH\002\210\001\001\022\026\n\trole_n"
  "ame\030\004 \001(\tH\003\210\001\001\022\026\n\tcareer_id\030\005 \001(\rH\004\210\001\001\022\023"
  "\n\006gender\030\006 \001(\rH\005\210\001\001\022\022\n\005level\030\007 \001(\rH\006\210\001\001\022"
  "\020\n\003exp\030\010 \001(\rH\007\210\001\001\022\025\n\010gm_level\030\t \001(\rH\010\210\001\001"
  "\022\030\n\013punish_time\030\n \001(\003H\t\210\001\001\022\025\n\010role_sdk\030\013"
  " \001(\rH\n\210\001\001\022!\n\004form\030\014 \001(\0132\016.XrPb.FormDataH"
  "\013\210\001\001\022\026\n\tserver_id\030\r \001(\rH\014\210\001\001\022\030\n\013create_t"
  "ime\030\016 \001(\003H\r\210\001\001\022\034\n\017last_login_time\030\017 \001(\003H"
  "\016\210\001\001\022\030\n\013logout_time\030\020 \001(\003H\017\210\001\001\022\034\n\017month_"
  "sign_time\030\021 \001(\003H\020\210\001\001\022\035\n\020forbid_chat_time"
  "\030\022 \001(\003H\021\210\001\001\022\035\n\020forbid_chat_type\030\023 \001(\rH\022\210"
  "\001\001\022\032\n\rrole_messager\030\024 \001(\rH\023\210\001\001\022\027\n\nduring"
  "_day\030\025 \001(\rH\024\210\001\001\022\031\n\014total_online\030\026 \001(\rH\025\210"
  "\001\001\022\031\n\014uiLoginTimes\030\027 \001(\rH\026\210\001\001B\t\n\007_acc_id"
  "B\n\n\010_role_idB\013\n\t_acc_nameB\014\n\n_role_nameB"
  "\014\n\n_career_idB\t\n\007_genderB\010\n\006_levelB\006\n\004_e"
  "xpB\013\n\t_gm_levelB\016\n\014_punish_timeB\013\n\t_role"
  "_sdkB\007\n\005_formB\014\n\n_server_idB\016\n\014_create_t"
  "imeB\022\n\020_last_login_timeB\016\n\014_logout_timeB"
  "\022\n\020_month_sign_timeB\023\n\021_forbid_chat_time"
  "B\023\n\021_forbid_chat_typeB\020\n\016_role_messagerB"
  "\r\n\013_during_dayB\017\n\r_total_onlineB\017\n\r_uiLo"
  "ginTimes\"O\n\010RoleItem\022\014\n\004uiId\030\001 \001(\r\022\017\n\007ui"
  "Count\030\002 \001(\r\022\026\n\tllIncTime\030\003 \001(\003H\000\210\001\001B\014\n\n_"
  "llIncTime\"/\n\016RoleDailyAward\022\014\n\004uiId\030\001 \001("
  "\r\022\017\n\007uiCount\030\002 \001(\r\"T\n\017RoleLoginedSign\022\014\n"
  "\004uiId\030\001 \001(\r\022\022\n\nstrVersion\030\002 \001(\t\022\016\n\006llTim"
  "e\030\003 \001(\003\022\017\n\007vecSign\030\004 \003(\r\",\n\rRoleMonthSig"
  "n\022\r\n\005llDay\030\001 \001(\003\022\014\n\004bVip\030\002 \001(\010\"\216\003\n\rDBGS_"
  "RoleData\022\023\n\006acc_id\030\001 \001(\003H\000\210\001\001\022&\n\trole_in"
  "fo\030\002 \001(\0132\016.XrPb.RoleInfoH\001\210\001\001\022)\n\rrole_po"
  "rtrait\030\004 \003(\0132\022.XrPb.RoleFormInfo\022!\n\trole"
  "_item\030\005 \003(\0132\016.XrPb.RoleItem\022)\n\013daily_awa"
  "rd\030\006 \003(\0132\024.XrPb.RoleDailyAward\022-\n\016vecLog"
  "inedSign\030\007 \003(\0132\025.XrPb.RoleLoginedSign\022\'\n"
  "\nmonth_sign\030\010 \003(\0132\023.XrPb.RoleMonthSign\022+"
  "\n\017role_background\030\t \003(\0132\022.XrPb.RoleFormI"
  "nfo\022)\n\rrole_messager\030\n \003(\0132\022.XrPb.RoleFo"
  "rmInfoB\t\n\007_acc_idB\014\n\n_role_info\"b\n\024Msg_D"
  "BGS_RoleInfoAck\022\023\n\006acc_id\030\002 \001(\003H\000\210\001\001\022\"\n\003"
  "ret\030\003 \001(\0162\020.XrPb.ResultCodeH\001\210\001\001B\t\n\007_acc"
  "_idB\006\n\004_ret\"K\n\026Msg_DBGS_CreateRoleReq\022\016\n"
  "\006acc_id\030\001 \001(\003\022!\n\trole_info\030\002 \001(\0132\016.XrPb."
  "RoleInfo\"5\n\026Msg_DBGS_CreateRoleAck\022\013\n\003re"
  "t\030\001 \001(\005\022\016\n\006acc_id\030\002 \001(\003\"_\n\027Msg_DBGS_Upda"
  "teRoleInfo\022\016\n\006acc_id\030\001 \001(\003\022&\n\trole_info\030"
  "\002 \001(\0132\016.XrPb.RoleInfoH\000\210\001\001B\014\n\n_role_info"
  "\"%\n\023Msg_DBGS_Player_Del\022\016\n\006acc_id\030\001 \001(\003\""
  "$\n\022Msg_DBGS_Player_In\022\016\n\006acc_id\030\001 \001(\003\"8\n"
  "\032Msg_DBGS_AddRoleBackground\022\016\n\006acc_id\030\001 "
  "\001(\003\022\n\n\002id\030\002 \003(\r\"7\n\031Msg_DBGS_DeleteBackgr"
  "ound\022\016\n\006acc_id\030\001 \001(\003\022\n\n\002id\030\002 \003(\r\"6\n\030Msg_"
  "DBGS_AddRolePortrait\022\016\n\006acc_id\030\001 \001(\003\022\n\n\002"
  "id\030\002 \003(\r\"5\n\027Msg_DBGS_DeletePortrait\022\016\n\006a"
  "cc_id\030\001 \001(\003\022\n\n\002id\030\002 \003(\r\"<\n\030Msg_DBGS_AddR"
  "oleMessager\022\016\n\006acc_id\030\001 \001(\003\022\020\n\010messager\030"
  "\002 \003(\r\"5\n\027Msg_DBGS_DeleteMessager\022\016\n\006acc_"
  "id\030\001 \001(\003\022\n\n\002id\030\002 \003(\r\"z\n\030Msg_DBGS_LoadBas"
  "eInfoReq\022\020\n\010check_id\030\001 \001(\003\022\022\n\nchecked_id"
  "\030\002 \001(\003\022\020\n\010proto_id\030\003 \001(\r\022\017\n\002id\030\004 \001(\rH\000\210\001"
  "\001\022\016\n\006seq_id\030\005 \001(\rB\005\n\003_id\"\214\001\n\030Msg_DBGS_Lo"
  "adBaseInfoAck\022\020\n\010check_id\030\001 \001(\003\022\022\n\ncheck"
  "ed_id\030\002 \001(\003\022\020\n\010proto_id\030\003 \001(\r\022\017\n\002id\030\004 \001("
  "\rH\000\210\001\001\022\016\n\006seq_id\030\005 \001(\r\022\020\n\010ret_code\030\006 \001(\r"
  "B\005\n\003_id\"8\n\023Msg_DBGS_AddItemReq\022!\n\toRoleI"
  "tem\030\001 \001(\0132\016.XrPb.RoleItem\";\n\026Msg_DBGS_Up"
  "dateItemReq\022!\n\toRoleItem\030\001 \001(\0132\016.XrPb.Ro"
  "leItem\"H\n\031Msg_DBGS_UpdateDailyAward\022+\n\rv"
  "ecDailyAward\030\001 \003(\0132\024.XrPb.RoleDailyAward"
  "\"\220\001\n\032Msg_DBGS_UpdateLoginedSign\022\014\n\004uiId\030"
  "\001 \001(\r\022\027\n\nstrVersion\030\002 \001(\tH\000\210\001\001\022\022\n\005uiDay\030"
  "\003 \001(\rH\001\210\001\001\022\023\n\006llTime\030\004 \001(\003H\002\210\001\001B\r\n\013_strV"
  "ersionB\010\n\006_uiDayB\t\n\007_llTime\"f\n\030Msg_DBGS_"
  "UpdateMonthSign\022\"\n\005oSign\030\001 \003(\0132\023.XrPb.Ro"
  "leMonthSign\022\027\n\nllSignTime\030\002 \001(\003H\000\210\001\001B\r\n\013"
  "_llSignTime\",\n\027Msg_DBGS_ClearMonthSign\022\021"
  "\n\tllCurTime\030\001 \001(\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_2fMsgDBGS_2eproto_deps[2] = {
  &::descriptor_table_client_2fCommon_2eproto,
  &::descriptor_table_server_2fMsgSvrCommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_2fMsgDBGS_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fMsgDBGS_2eproto = {
  false, false, 3825, descriptor_table_protodef_server_2fMsgDBGS_2eproto, "server/MsgDBGS.proto", 
  &descriptor_table_server_2fMsgDBGS_2eproto_once, descriptor_table_server_2fMsgDBGS_2eproto_deps, 2, 28,
  schemas, file_default_instances, TableStruct_server_2fMsgDBGS_2eproto::offsets,
  file_level_metadata_server_2fMsgDBGS_2eproto, file_level_enum_descriptors_server_2fMsgDBGS_2eproto, file_level_service_descriptors_server_2fMsgDBGS_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_server_2fMsgDBGS_2eproto_getter() {
  return &descriptor_table_server_2fMsgDBGS_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_server_2fMsgDBGS_2eproto(&descriptor_table_server_2fMsgDBGS_2eproto);
namespace XrPb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgSvrMod_DBGS_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fMsgDBGS_2eproto);
  return file_level_enum_descriptors_server_2fMsgDBGS_2eproto[0];
}
bool MsgSvrMod_DBGS_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_None;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_RoleInfoReq;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_RoleInfoAck;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_CreateRoleReq;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_CreateRoleAck;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_UpdateRoleInfo;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_AddRolePortrait;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_DeletePortrait;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_AddRoleBackground;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_DeleteBackground;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_AddRoleMessager;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_DeleteMessager;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_LoadBaseInfoReq;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_LoadBaseInfoAck;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_Player_Del;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_AddItemReq;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_UpdateItemReq;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_UpdateLoginedSign;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_UpdateMonthSign;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::Msg_DBGS_ClearMonthSign;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::MsgId_MIN;
constexpr MsgSvrMod_DBGS_MsgId MsgSvrMod_DBGS::MsgId_MAX;
constexpr int MsgSvrMod_DBGS::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MsgSvrMod_DBGS::_Internal {
 public:
};

MsgSvrMod_DBGS::MsgSvrMod_DBGS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.MsgSvrMod_DBGS)
}
MsgSvrMod_DBGS::MsgSvrMod_DBGS(const MsgSvrMod_DBGS& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.MsgSvrMod_DBGS)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgSvrMod_DBGS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgSvrMod_DBGS::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgSvrMod_DBGS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[0]);
}

// ===================================================================

class Msg_DBGS_RoleInfoReq::_Internal {
 public:
};

Msg_DBGS_RoleInfoReq::Msg_DBGS_RoleInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_RoleInfoReq)
}
Msg_DBGS_RoleInfoReq::Msg_DBGS_RoleInfoReq(const Msg_DBGS_RoleInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acc_id_ = from.acc_id_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_RoleInfoReq)
}

inline void Msg_DBGS_RoleInfoReq::SharedCtor() {
acc_id_ = int64_t{0};
}

Msg_DBGS_RoleInfoReq::~Msg_DBGS_RoleInfoReq() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_RoleInfoReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_RoleInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_RoleInfoReq::ArenaDtor(void* object) {
  Msg_DBGS_RoleInfoReq* _this = reinterpret_cast< Msg_DBGS_RoleInfoReq* >(object);
  (void)_this;
}
void Msg_DBGS_RoleInfoReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_RoleInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_RoleInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_RoleInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acc_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_RoleInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_RoleInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_RoleInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_RoleInfoReq)
  return target;
}

size_t Msg_DBGS_RoleInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_RoleInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_RoleInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_RoleInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_RoleInfoReq::GetClassData() const { return &_class_data_; }

void Msg_DBGS_RoleInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_RoleInfoReq *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_RoleInfoReq &>(from));
}


void Msg_DBGS_RoleInfoReq::MergeFrom(const Msg_DBGS_RoleInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_RoleInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_RoleInfoReq::CopyFrom(const Msg_DBGS_RoleInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_RoleInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_RoleInfoReq::IsInitialized() const {
  return true;
}

void Msg_DBGS_RoleInfoReq::InternalSwap(Msg_DBGS_RoleInfoReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(acc_id_, other->acc_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_RoleInfoReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[1]);
}

// ===================================================================

class RoleInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleInfo>()._has_bits_);
  static void set_has_acc_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_role_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_acc_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_role_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_career_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gender(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gm_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_punish_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_role_sdk(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::XrPb::FormData& form(const RoleInfo* msg);
  static void set_has_form(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_create_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_last_login_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_logout_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_month_sign_time(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_forbid_chat_time(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_forbid_chat_type(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_role_messager(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_during_day(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_total_online(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_uilogintimes(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

const ::XrPb::FormData&
RoleInfo::_Internal::form(const RoleInfo* msg) {
  return *msg->form_;
}
void RoleInfo::clear_form() {
  if (form_ != nullptr) form_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
RoleInfo::RoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.RoleInfo)
}
RoleInfo::RoleInfo(const RoleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    acc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_acc_name()) {
    acc_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_acc_name(), 
      GetArenaForAllocation());
  }
  role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    role_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_role_name()) {
    role_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_form()) {
    form_ = new ::XrPb::FormData(*from.form_);
  } else {
    form_ = nullptr;
  }
  ::memcpy(&acc_id_, &from.acc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&uilogintimes_) -
    reinterpret_cast<char*>(&acc_id_)) + sizeof(uilogintimes_));
  // @@protoc_insertion_point(copy_constructor:XrPb.RoleInfo)
}

inline void RoleInfo::SharedCtor() {
acc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  acc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
role_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  role_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&form_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uilogintimes_) -
    reinterpret_cast<char*>(&form_)) + sizeof(uilogintimes_));
}

RoleInfo::~RoleInfo() {
  // @@protoc_insertion_point(destructor:XrPb.RoleInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  acc_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete form_;
}

void RoleInfo::ArenaDtor(void* object) {
  RoleInfo* _this = reinterpret_cast< RoleInfo* >(object);
  (void)_this;
}
void RoleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.RoleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      acc_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      role_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(form_ != nullptr);
      form_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&acc_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&acc_id_)) + sizeof(level_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&exp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_id_) -
        reinterpret_cast<char*>(&exp_)) + sizeof(server_id_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&forbid_chat_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uilogintimes_) -
        reinterpret_cast<char*>(&forbid_chat_type_)) + sizeof(uilogintimes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_acc_id(&has_bits);
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 role_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_role_id(&has_bits);
          role_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string acc_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_acc_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.RoleInfo.acc_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string role_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_role_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.RoleInfo.role_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 career_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_career_id(&has_bits);
          career_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gender = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_gender(&has_bits);
          gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 exp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_exp(&has_bits);
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gm_level = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_gm_level(&has_bits);
          gm_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 punish_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_punish_time(&has_bits);
          punish_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 role_sdk = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_role_sdk(&has_bits);
          role_sdk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.FormData form = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_form(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_server_id(&has_bits);
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 create_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_create_time(&has_bits);
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_login_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_last_login_time(&has_bits);
          last_login_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 logout_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_logout_time(&has_bits);
          logout_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 month_sign_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_month_sign_time(&has_bits);
          month_sign_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 forbid_chat_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_forbid_chat_time(&has_bits);
          forbid_chat_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 forbid_chat_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_forbid_chat_type(&has_bits);
          forbid_chat_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 role_messager = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_role_messager(&has_bits);
          role_messager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 during_day = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_during_day(&has_bits);
          during_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_online = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_total_online(&has_bits);
          total_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uiLoginTimes = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_uilogintimes(&has_bits);
          uilogintimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.RoleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 acc_id = 1;
  if (_internal_has_acc_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  // optional int64 role_id = 2;
  if (_internal_has_role_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_role_id(), target);
  }

  // optional string acc_name = 3;
  if (_internal_has_acc_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_acc_name().data(), static_cast<int>(this->_internal_acc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.RoleInfo.acc_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_acc_name(), target);
  }

  // optional string role_name = 4;
  if (_internal_has_role_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role_name().data(), static_cast<int>(this->_internal_role_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.RoleInfo.role_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_role_name(), target);
  }

  // optional uint32 career_id = 5;
  if (_internal_has_career_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_career_id(), target);
  }

  // optional uint32 gender = 6;
  if (_internal_has_gender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_gender(), target);
  }

  // optional uint32 level = 7;
  if (_internal_has_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_level(), target);
  }

  // optional uint32 exp = 8;
  if (_internal_has_exp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_exp(), target);
  }

  // optional uint32 gm_level = 9;
  if (_internal_has_gm_level()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_gm_level(), target);
  }

  // optional int64 punish_time = 10;
  if (_internal_has_punish_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_punish_time(), target);
  }

  // optional uint32 role_sdk = 11;
  if (_internal_has_role_sdk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_role_sdk(), target);
  }

  // optional .XrPb.FormData form = 12;
  if (_internal_has_form()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::form(this), target, stream);
  }

  // optional uint32 server_id = 13;
  if (_internal_has_server_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_server_id(), target);
  }

  // optional int64 create_time = 14;
  if (_internal_has_create_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_create_time(), target);
  }

  // optional int64 last_login_time = 15;
  if (_internal_has_last_login_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_last_login_time(), target);
  }

  // optional int64 logout_time = 16;
  if (_internal_has_logout_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_logout_time(), target);
  }

  // optional int64 month_sign_time = 17;
  if (_internal_has_month_sign_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_month_sign_time(), target);
  }

  // optional int64 forbid_chat_time = 18;
  if (_internal_has_forbid_chat_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_forbid_chat_time(), target);
  }

  // optional uint32 forbid_chat_type = 19;
  if (_internal_has_forbid_chat_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_forbid_chat_type(), target);
  }

  // optional uint32 role_messager = 20;
  if (_internal_has_role_messager()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_role_messager(), target);
  }

  // optional uint32 during_day = 21;
  if (_internal_has_during_day()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_during_day(), target);
  }

  // optional uint32 total_online = 22;
  if (_internal_has_total_online()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_total_online(), target);
  }

  // optional uint32 uiLoginTimes = 23;
  if (_internal_has_uilogintimes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_uilogintimes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.RoleInfo)
  return target;
}

size_t RoleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.RoleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string acc_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_acc_name());
    }

    // optional string role_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_role_name());
    }

    // optional .XrPb.FormData form = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *form_);
    }

    // optional int64 acc_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
    }

    // optional int64 role_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_role_id());
    }

    // optional uint32 career_id = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_career_id());
    }

    // optional uint32 gender = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gender());
    }

    // optional uint32 level = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 exp = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_exp());
    }

    // optional int64 punish_time = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_punish_time());
    }

    // optional uint32 gm_level = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gm_level());
    }

    // optional uint32 role_sdk = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_role_sdk());
    }

    // optional int64 create_time = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_create_time());
    }

    // optional int64 last_login_time = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_last_login_time());
    }

    // optional int64 logout_time = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_logout_time());
    }

    // optional uint32 server_id = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_id());
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional uint32 forbid_chat_type = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_forbid_chat_type());
    }

    // optional int64 month_sign_time = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_month_sign_time());
    }

    // optional int64 forbid_chat_time = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_forbid_chat_time());
    }

    // optional uint32 role_messager = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_role_messager());
    }

    // optional uint32 during_day = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_during_day());
    }

    // optional uint32 total_online = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_online());
    }

    // optional uint32 uiLoginTimes = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uilogintimes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleInfo::GetClassData() const { return &_class_data_; }

void RoleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleInfo *>(to)->MergeFrom(
      static_cast<const RoleInfo &>(from));
}


void RoleInfo::MergeFrom(const RoleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.RoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_acc_name(from._internal_acc_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_role_name(from._internal_role_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_form()->::XrPb::FormData::MergeFrom(from._internal_form());
    }
    if (cached_has_bits & 0x00000008u) {
      acc_id_ = from.acc_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      role_id_ = from.role_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      career_id_ = from.career_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      gender_ = from.gender_;
    }
    if (cached_has_bits & 0x00000080u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      exp_ = from.exp_;
    }
    if (cached_has_bits & 0x00000200u) {
      punish_time_ = from.punish_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      gm_level_ = from.gm_level_;
    }
    if (cached_has_bits & 0x00000800u) {
      role_sdk_ = from.role_sdk_;
    }
    if (cached_has_bits & 0x00001000u) {
      create_time_ = from.create_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      last_login_time_ = from.last_login_time_;
    }
    if (cached_has_bits & 0x00004000u) {
      logout_time_ = from.logout_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      server_id_ = from.server_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      forbid_chat_type_ = from.forbid_chat_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      month_sign_time_ = from.month_sign_time_;
    }
    if (cached_has_bits & 0x00040000u) {
      forbid_chat_time_ = from.forbid_chat_time_;
    }
    if (cached_has_bits & 0x00080000u) {
      role_messager_ = from.role_messager_;
    }
    if (cached_has_bits & 0x00100000u) {
      during_day_ = from.during_day_;
    }
    if (cached_has_bits & 0x00200000u) {
      total_online_ = from.total_online_;
    }
    if (cached_has_bits & 0x00400000u) {
      uilogintimes_ = from.uilogintimes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleInfo::CopyFrom(const RoleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.RoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfo::IsInitialized() const {
  return true;
}

void RoleInfo::InternalSwap(RoleInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &acc_name_, lhs_arena,
      &other->acc_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &role_name_, lhs_arena,
      &other->role_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleInfo, uilogintimes_)
      + sizeof(RoleInfo::uilogintimes_)
      - PROTOBUF_FIELD_OFFSET(RoleInfo, form_)>(
          reinterpret_cast<char*>(&form_),
          reinterpret_cast<char*>(&other->form_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[2]);
}

// ===================================================================

class RoleItem::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleItem>()._has_bits_);
  static void set_has_llinctime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RoleItem::RoleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.RoleItem)
}
RoleItem::RoleItem(const RoleItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uiid_, &from.uiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&llinctime_) -
    reinterpret_cast<char*>(&uiid_)) + sizeof(llinctime_));
  // @@protoc_insertion_point(copy_constructor:XrPb.RoleItem)
}

inline void RoleItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&llinctime_) -
    reinterpret_cast<char*>(&uiid_)) + sizeof(llinctime_));
}

RoleItem::~RoleItem() {
  // @@protoc_insertion_point(destructor:XrPb.RoleItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoleItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleItem::ArenaDtor(void* object) {
  RoleItem* _this = reinterpret_cast< RoleItem* >(object);
  (void)_this;
}
void RoleItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleItem::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.RoleItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uiid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uicount_) -
      reinterpret_cast<char*>(&uiid_)) + sizeof(uicount_));
  llinctime_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uicount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 llIncTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_llinctime(&has_bits);
          llinctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.RoleItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiId = 1;
  if (this->_internal_uiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uiid(), target);
  }

  // uint32 uiCount = 2;
  if (this->_internal_uicount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uicount(), target);
  }

  // optional int64 llIncTime = 3;
  if (_internal_has_llinctime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_llinctime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.RoleItem)
  return target;
}

size_t RoleItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.RoleItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uiId = 1;
  if (this->_internal_uiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uiid());
  }

  // uint32 uiCount = 2;
  if (this->_internal_uicount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uicount());
  }

  // optional int64 llIncTime = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_llinctime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleItem::GetClassData() const { return &_class_data_; }

void RoleItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleItem *>(to)->MergeFrom(
      static_cast<const RoleItem &>(from));
}


void RoleItem::MergeFrom(const RoleItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.RoleItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uiid() != 0) {
    _internal_set_uiid(from._internal_uiid());
  }
  if (from._internal_uicount() != 0) {
    _internal_set_uicount(from._internal_uicount());
  }
  if (from._internal_has_llinctime()) {
    _internal_set_llinctime(from._internal_llinctime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleItem::CopyFrom(const RoleItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.RoleItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleItem::IsInitialized() const {
  return true;
}

void RoleItem::InternalSwap(RoleItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleItem, llinctime_)
      + sizeof(RoleItem::llinctime_)
      - PROTOBUF_FIELD_OFFSET(RoleItem, uiid_)>(
          reinterpret_cast<char*>(&uiid_),
          reinterpret_cast<char*>(&other->uiid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[3]);
}

// ===================================================================

class RoleDailyAward::_Internal {
 public:
};

RoleDailyAward::RoleDailyAward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.RoleDailyAward)
}
RoleDailyAward::RoleDailyAward(const RoleDailyAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uiid_, &from.uiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uicount_) -
    reinterpret_cast<char*>(&uiid_)) + sizeof(uicount_));
  // @@protoc_insertion_point(copy_constructor:XrPb.RoleDailyAward)
}

inline void RoleDailyAward::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uicount_) -
    reinterpret_cast<char*>(&uiid_)) + sizeof(uicount_));
}

RoleDailyAward::~RoleDailyAward() {
  // @@protoc_insertion_point(destructor:XrPb.RoleDailyAward)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoleDailyAward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleDailyAward::ArenaDtor(void* object) {
  RoleDailyAward* _this = reinterpret_cast< RoleDailyAward* >(object);
  (void)_this;
}
void RoleDailyAward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleDailyAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleDailyAward::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.RoleDailyAward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uiid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uicount_) -
      reinterpret_cast<char*>(&uiid_)) + sizeof(uicount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleDailyAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uiCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uicount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleDailyAward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.RoleDailyAward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiId = 1;
  if (this->_internal_uiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uiid(), target);
  }

  // uint32 uiCount = 2;
  if (this->_internal_uicount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_uicount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.RoleDailyAward)
  return target;
}

size_t RoleDailyAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.RoleDailyAward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 uiId = 1;
  if (this->_internal_uiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uiid());
  }

  // uint32 uiCount = 2;
  if (this->_internal_uicount() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uicount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleDailyAward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleDailyAward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleDailyAward::GetClassData() const { return &_class_data_; }

void RoleDailyAward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleDailyAward *>(to)->MergeFrom(
      static_cast<const RoleDailyAward &>(from));
}


void RoleDailyAward::MergeFrom(const RoleDailyAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.RoleDailyAward)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uiid() != 0) {
    _internal_set_uiid(from._internal_uiid());
  }
  if (from._internal_uicount() != 0) {
    _internal_set_uicount(from._internal_uicount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleDailyAward::CopyFrom(const RoleDailyAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.RoleDailyAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDailyAward::IsInitialized() const {
  return true;
}

void RoleDailyAward::InternalSwap(RoleDailyAward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleDailyAward, uicount_)
      + sizeof(RoleDailyAward::uicount_)
      - PROTOBUF_FIELD_OFFSET(RoleDailyAward, uiid_)>(
          reinterpret_cast<char*>(&uiid_),
          reinterpret_cast<char*>(&other->uiid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleDailyAward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[4]);
}

// ===================================================================

class RoleLoginedSign::_Internal {
 public:
};

RoleLoginedSign::RoleLoginedSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vecsign_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.RoleLoginedSign)
}
RoleLoginedSign::RoleLoginedSign(const RoleLoginedSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecsign_(from.vecsign_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strversion().empty()) {
    strversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strversion(), 
      GetArenaForAllocation());
  }
  ::memcpy(&lltime_, &from.lltime_,
    static_cast<size_t>(reinterpret_cast<char*>(&uiid_) -
    reinterpret_cast<char*>(&lltime_)) + sizeof(uiid_));
  // @@protoc_insertion_point(copy_constructor:XrPb.RoleLoginedSign)
}

inline void RoleLoginedSign::SharedCtor() {
strversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lltime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uiid_) -
    reinterpret_cast<char*>(&lltime_)) + sizeof(uiid_));
}

RoleLoginedSign::~RoleLoginedSign() {
  // @@protoc_insertion_point(destructor:XrPb.RoleLoginedSign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoleLoginedSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoleLoginedSign::ArenaDtor(void* object) {
  RoleLoginedSign* _this = reinterpret_cast< RoleLoginedSign* >(object);
  (void)_this;
}
void RoleLoginedSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleLoginedSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleLoginedSign::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.RoleLoginedSign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecsign_.Clear();
  strversion_.ClearToEmpty();
  ::memset(&lltime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiid_) -
      reinterpret_cast<char*>(&lltime_)) + sizeof(uiid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleLoginedSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string strVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.RoleLoginedSign.strVersion"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 llTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          lltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 vecSign = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_vecsign(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_vecsign(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleLoginedSign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.RoleLoginedSign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiId = 1;
  if (this->_internal_uiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uiid(), target);
  }

  // string strVersion = 2;
  if (!this->_internal_strversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strversion().data(), static_cast<int>(this->_internal_strversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.RoleLoginedSign.strVersion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strversion(), target);
  }

  // int64 llTime = 3;
  if (this->_internal_lltime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_lltime(), target);
  }

  // repeated uint32 vecSign = 4;
  {
    int byte_size = _vecsign_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_vecsign(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.RoleLoginedSign)
  return target;
}

size_t RoleLoginedSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.RoleLoginedSign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 vecSign = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->vecsign_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _vecsign_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string strVersion = 2;
  if (!this->_internal_strversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strversion());
  }

  // int64 llTime = 3;
  if (this->_internal_lltime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_lltime());
  }

  // uint32 uiId = 1;
  if (this->_internal_uiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uiid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleLoginedSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleLoginedSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleLoginedSign::GetClassData() const { return &_class_data_; }

void RoleLoginedSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleLoginedSign *>(to)->MergeFrom(
      static_cast<const RoleLoginedSign &>(from));
}


void RoleLoginedSign::MergeFrom(const RoleLoginedSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.RoleLoginedSign)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vecsign_.MergeFrom(from.vecsign_);
  if (!from._internal_strversion().empty()) {
    _internal_set_strversion(from._internal_strversion());
  }
  if (from._internal_lltime() != 0) {
    _internal_set_lltime(from._internal_lltime());
  }
  if (from._internal_uiid() != 0) {
    _internal_set_uiid(from._internal_uiid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleLoginedSign::CopyFrom(const RoleLoginedSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.RoleLoginedSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleLoginedSign::IsInitialized() const {
  return true;
}

void RoleLoginedSign::InternalSwap(RoleLoginedSign* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vecsign_.InternalSwap(&other->vecsign_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strversion_, lhs_arena,
      &other->strversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleLoginedSign, uiid_)
      + sizeof(RoleLoginedSign::uiid_)
      - PROTOBUF_FIELD_OFFSET(RoleLoginedSign, lltime_)>(
          reinterpret_cast<char*>(&lltime_),
          reinterpret_cast<char*>(&other->lltime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleLoginedSign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[5]);
}

// ===================================================================

class RoleMonthSign::_Internal {
 public:
};

RoleMonthSign::RoleMonthSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.RoleMonthSign)
}
RoleMonthSign::RoleMonthSign(const RoleMonthSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&llday_, &from.llday_,
    static_cast<size_t>(reinterpret_cast<char*>(&bvip_) -
    reinterpret_cast<char*>(&llday_)) + sizeof(bvip_));
  // @@protoc_insertion_point(copy_constructor:XrPb.RoleMonthSign)
}

inline void RoleMonthSign::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&llday_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bvip_) -
    reinterpret_cast<char*>(&llday_)) + sizeof(bvip_));
}

RoleMonthSign::~RoleMonthSign() {
  // @@protoc_insertion_point(destructor:XrPb.RoleMonthSign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoleMonthSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleMonthSign::ArenaDtor(void* object) {
  RoleMonthSign* _this = reinterpret_cast< RoleMonthSign* >(object);
  (void)_this;
}
void RoleMonthSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoleMonthSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoleMonthSign::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.RoleMonthSign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&llday_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bvip_) -
      reinterpret_cast<char*>(&llday_)) + sizeof(bvip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleMonthSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 llDay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          llday_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bVip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          bvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleMonthSign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.RoleMonthSign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 llDay = 1;
  if (this->_internal_llday() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_llday(), target);
  }

  // bool bVip = 2;
  if (this->_internal_bvip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bvip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.RoleMonthSign)
  return target;
}

size_t RoleMonthSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.RoleMonthSign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 llDay = 1;
  if (this->_internal_llday() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_llday());
  }

  // bool bVip = 2;
  if (this->_internal_bvip() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleMonthSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoleMonthSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleMonthSign::GetClassData() const { return &_class_data_; }

void RoleMonthSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoleMonthSign *>(to)->MergeFrom(
      static_cast<const RoleMonthSign &>(from));
}


void RoleMonthSign::MergeFrom(const RoleMonthSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.RoleMonthSign)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_llday() != 0) {
    _internal_set_llday(from._internal_llday());
  }
  if (from._internal_bvip() != 0) {
    _internal_set_bvip(from._internal_bvip());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleMonthSign::CopyFrom(const RoleMonthSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.RoleMonthSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleMonthSign::IsInitialized() const {
  return true;
}

void RoleMonthSign::InternalSwap(RoleMonthSign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleMonthSign, bvip_)
      + sizeof(RoleMonthSign::bvip_)
      - PROTOBUF_FIELD_OFFSET(RoleMonthSign, llday_)>(
          reinterpret_cast<char*>(&llday_),
          reinterpret_cast<char*>(&other->llday_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleMonthSign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[6]);
}

// ===================================================================

class DBGS_RoleData::_Internal {
 public:
  using HasBits = decltype(std::declval<DBGS_RoleData>()._has_bits_);
  static void set_has_acc_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::XrPb::RoleInfo& role_info(const DBGS_RoleData* msg);
  static void set_has_role_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::XrPb::RoleInfo&
DBGS_RoleData::_Internal::role_info(const DBGS_RoleData* msg) {
  return *msg->role_info_;
}
void DBGS_RoleData::clear_role_portrait() {
  role_portrait_.Clear();
}
void DBGS_RoleData::clear_role_background() {
  role_background_.Clear();
}
void DBGS_RoleData::clear_role_messager() {
  role_messager_.Clear();
}
DBGS_RoleData::DBGS_RoleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  role_portrait_(arena),
  role_item_(arena),
  daily_award_(arena),
  vecloginedsign_(arena),
  month_sign_(arena),
  role_background_(arena),
  role_messager_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.DBGS_RoleData)
}
DBGS_RoleData::DBGS_RoleData(const DBGS_RoleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      role_portrait_(from.role_portrait_),
      role_item_(from.role_item_),
      daily_award_(from.daily_award_),
      vecloginedsign_(from.vecloginedsign_),
      month_sign_(from.month_sign_),
      role_background_(from.role_background_),
      role_messager_(from.role_messager_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role_info()) {
    role_info_ = new ::XrPb::RoleInfo(*from.role_info_);
  } else {
    role_info_ = nullptr;
  }
  acc_id_ = from.acc_id_;
  // @@protoc_insertion_point(copy_constructor:XrPb.DBGS_RoleData)
}

inline void DBGS_RoleData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&acc_id_) -
    reinterpret_cast<char*>(&role_info_)) + sizeof(acc_id_));
}

DBGS_RoleData::~DBGS_RoleData() {
  // @@protoc_insertion_point(destructor:XrPb.DBGS_RoleData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DBGS_RoleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_info_;
}

void DBGS_RoleData::ArenaDtor(void* object) {
  DBGS_RoleData* _this = reinterpret_cast< DBGS_RoleData* >(object);
  (void)_this;
}
void DBGS_RoleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DBGS_RoleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DBGS_RoleData::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.DBGS_RoleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_portrait_.Clear();
  role_item_.Clear();
  daily_award_.Clear();
  vecloginedsign_.Clear();
  month_sign_.Clear();
  role_background_.Clear();
  role_messager_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(role_info_ != nullptr);
    role_info_->Clear();
  }
  acc_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBGS_RoleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_acc_id(&has_bits);
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.RoleInfo role_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .XrPb.RoleFormInfo role_portrait = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_role_portrait(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .XrPb.RoleItem role_item = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_role_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .XrPb.RoleDailyAward daily_award = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_daily_award(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .XrPb.RoleLoginedSign vecLoginedSign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vecloginedsign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .XrPb.RoleMonthSign month_sign = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_month_sign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .XrPb.RoleFormInfo role_background = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_role_background(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .XrPb.RoleFormInfo role_messager = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_role_messager(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBGS_RoleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.DBGS_RoleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 acc_id = 1;
  if (_internal_has_acc_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  // optional .XrPb.RoleInfo role_info = 2;
  if (_internal_has_role_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::role_info(this), target, stream);
  }

  // repeated .XrPb.RoleFormInfo role_portrait = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_role_portrait_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_role_portrait(i), target, stream);
  }

  // repeated .XrPb.RoleItem role_item = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_role_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_role_item(i), target, stream);
  }

  // repeated .XrPb.RoleDailyAward daily_award = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_daily_award_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_daily_award(i), target, stream);
  }

  // repeated .XrPb.RoleLoginedSign vecLoginedSign = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vecloginedsign_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_vecloginedsign(i), target, stream);
  }

  // repeated .XrPb.RoleMonthSign month_sign = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_month_sign_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_month_sign(i), target, stream);
  }

  // repeated .XrPb.RoleFormInfo role_background = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_role_background_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_role_background(i), target, stream);
  }

  // repeated .XrPb.RoleFormInfo role_messager = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_role_messager_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_role_messager(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.DBGS_RoleData)
  return target;
}

size_t DBGS_RoleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.DBGS_RoleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XrPb.RoleFormInfo role_portrait = 4;
  total_size += 1UL * this->_internal_role_portrait_size();
  for (const auto& msg : this->role_portrait_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .XrPb.RoleItem role_item = 5;
  total_size += 1UL * this->_internal_role_item_size();
  for (const auto& msg : this->role_item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .XrPb.RoleDailyAward daily_award = 6;
  total_size += 1UL * this->_internal_daily_award_size();
  for (const auto& msg : this->daily_award_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .XrPb.RoleLoginedSign vecLoginedSign = 7;
  total_size += 1UL * this->_internal_vecloginedsign_size();
  for (const auto& msg : this->vecloginedsign_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .XrPb.RoleMonthSign month_sign = 8;
  total_size += 1UL * this->_internal_month_sign_size();
  for (const auto& msg : this->month_sign_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .XrPb.RoleFormInfo role_background = 9;
  total_size += 1UL * this->_internal_role_background_size();
  for (const auto& msg : this->role_background_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .XrPb.RoleFormInfo role_messager = 10;
  total_size += 1UL * this->_internal_role_messager_size();
  for (const auto& msg : this->role_messager_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .XrPb.RoleInfo role_info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *role_info_);
    }

    // optional int64 acc_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBGS_RoleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DBGS_RoleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBGS_RoleData::GetClassData() const { return &_class_data_; }

void DBGS_RoleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DBGS_RoleData *>(to)->MergeFrom(
      static_cast<const DBGS_RoleData &>(from));
}


void DBGS_RoleData::MergeFrom(const DBGS_RoleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.DBGS_RoleData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  role_portrait_.MergeFrom(from.role_portrait_);
  role_item_.MergeFrom(from.role_item_);
  daily_award_.MergeFrom(from.daily_award_);
  vecloginedsign_.MergeFrom(from.vecloginedsign_);
  month_sign_.MergeFrom(from.month_sign_);
  role_background_.MergeFrom(from.role_background_);
  role_messager_.MergeFrom(from.role_messager_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_role_info()->::XrPb::RoleInfo::MergeFrom(from._internal_role_info());
    }
    if (cached_has_bits & 0x00000002u) {
      acc_id_ = from.acc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBGS_RoleData::CopyFrom(const DBGS_RoleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.DBGS_RoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBGS_RoleData::IsInitialized() const {
  return true;
}

void DBGS_RoleData::InternalSwap(DBGS_RoleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  role_portrait_.InternalSwap(&other->role_portrait_);
  role_item_.InternalSwap(&other->role_item_);
  daily_award_.InternalSwap(&other->daily_award_);
  vecloginedsign_.InternalSwap(&other->vecloginedsign_);
  month_sign_.InternalSwap(&other->month_sign_);
  role_background_.InternalSwap(&other->role_background_);
  role_messager_.InternalSwap(&other->role_messager_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBGS_RoleData, acc_id_)
      + sizeof(DBGS_RoleData::acc_id_)
      - PROTOBUF_FIELD_OFFSET(DBGS_RoleData, role_info_)>(
          reinterpret_cast<char*>(&role_info_),
          reinterpret_cast<char*>(&other->role_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBGS_RoleData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[7]);
}

// ===================================================================

class Msg_DBGS_RoleInfoAck::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_DBGS_RoleInfoAck>()._has_bits_);
  static void set_has_acc_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Msg_DBGS_RoleInfoAck::Msg_DBGS_RoleInfoAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_RoleInfoAck)
}
Msg_DBGS_RoleInfoAck::Msg_DBGS_RoleInfoAck(const Msg_DBGS_RoleInfoAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&acc_id_, &from.acc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&acc_id_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_RoleInfoAck)
}

inline void Msg_DBGS_RoleInfoAck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acc_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&acc_id_)) + sizeof(ret_));
}

Msg_DBGS_RoleInfoAck::~Msg_DBGS_RoleInfoAck() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_RoleInfoAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_RoleInfoAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_RoleInfoAck::ArenaDtor(void* object) {
  Msg_DBGS_RoleInfoAck* _this = reinterpret_cast< Msg_DBGS_RoleInfoAck* >(object);
  (void)_this;
}
void Msg_DBGS_RoleInfoAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_RoleInfoAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_RoleInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_RoleInfoAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&acc_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&acc_id_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_RoleInfoAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 acc_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_acc_id(&has_bits);
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.ResultCode ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ret(static_cast<::XrPb::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_RoleInfoAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_RoleInfoAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 acc_id = 2;
  if (_internal_has_acc_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_acc_id(), target);
  }

  // optional .XrPb.ResultCode ret = 3;
  if (_internal_has_ret()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_RoleInfoAck)
  return target;
}

size_t Msg_DBGS_RoleInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_RoleInfoAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 acc_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
    }

    // optional .XrPb.ResultCode ret = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ret());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_RoleInfoAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_RoleInfoAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_RoleInfoAck::GetClassData() const { return &_class_data_; }

void Msg_DBGS_RoleInfoAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_RoleInfoAck *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_RoleInfoAck &>(from));
}


void Msg_DBGS_RoleInfoAck::MergeFrom(const Msg_DBGS_RoleInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_RoleInfoAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      acc_id_ = from.acc_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_RoleInfoAck::CopyFrom(const Msg_DBGS_RoleInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_RoleInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_RoleInfoAck::IsInitialized() const {
  return true;
}

void Msg_DBGS_RoleInfoAck::InternalSwap(Msg_DBGS_RoleInfoAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_DBGS_RoleInfoAck, ret_)
      + sizeof(Msg_DBGS_RoleInfoAck::ret_)
      - PROTOBUF_FIELD_OFFSET(Msg_DBGS_RoleInfoAck, acc_id_)>(
          reinterpret_cast<char*>(&acc_id_),
          reinterpret_cast<char*>(&other->acc_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_RoleInfoAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[8]);
}

// ===================================================================

class Msg_DBGS_CreateRoleReq::_Internal {
 public:
  static const ::XrPb::RoleInfo& role_info(const Msg_DBGS_CreateRoleReq* msg);
};

const ::XrPb::RoleInfo&
Msg_DBGS_CreateRoleReq::_Internal::role_info(const Msg_DBGS_CreateRoleReq* msg) {
  return *msg->role_info_;
}
Msg_DBGS_CreateRoleReq::Msg_DBGS_CreateRoleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_CreateRoleReq)
}
Msg_DBGS_CreateRoleReq::Msg_DBGS_CreateRoleReq(const Msg_DBGS_CreateRoleReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role_info()) {
    role_info_ = new ::XrPb::RoleInfo(*from.role_info_);
  } else {
    role_info_ = nullptr;
  }
  acc_id_ = from.acc_id_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_CreateRoleReq)
}

inline void Msg_DBGS_CreateRoleReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&acc_id_) -
    reinterpret_cast<char*>(&role_info_)) + sizeof(acc_id_));
}

Msg_DBGS_CreateRoleReq::~Msg_DBGS_CreateRoleReq() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_CreateRoleReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_CreateRoleReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_info_;
}

void Msg_DBGS_CreateRoleReq::ArenaDtor(void* object) {
  Msg_DBGS_CreateRoleReq* _this = reinterpret_cast< Msg_DBGS_CreateRoleReq* >(object);
  (void)_this;
}
void Msg_DBGS_CreateRoleReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_CreateRoleReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_CreateRoleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_CreateRoleReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && role_info_ != nullptr) {
    delete role_info_;
  }
  role_info_ = nullptr;
  acc_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_CreateRoleReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.RoleInfo role_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_CreateRoleReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_CreateRoleReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  // .XrPb.RoleInfo role_info = 2;
  if (this->_internal_has_role_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::role_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_CreateRoleReq)
  return target;
}

size_t Msg_DBGS_CreateRoleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_CreateRoleReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.RoleInfo role_info = 2;
  if (this->_internal_has_role_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_info_);
  }

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_CreateRoleReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_CreateRoleReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_CreateRoleReq::GetClassData() const { return &_class_data_; }

void Msg_DBGS_CreateRoleReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_CreateRoleReq *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_CreateRoleReq &>(from));
}


void Msg_DBGS_CreateRoleReq::MergeFrom(const Msg_DBGS_CreateRoleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_CreateRoleReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role_info()) {
    _internal_mutable_role_info()->::XrPb::RoleInfo::MergeFrom(from._internal_role_info());
  }
  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_CreateRoleReq::CopyFrom(const Msg_DBGS_CreateRoleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_CreateRoleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_CreateRoleReq::IsInitialized() const {
  return true;
}

void Msg_DBGS_CreateRoleReq::InternalSwap(Msg_DBGS_CreateRoleReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_DBGS_CreateRoleReq, acc_id_)
      + sizeof(Msg_DBGS_CreateRoleReq::acc_id_)
      - PROTOBUF_FIELD_OFFSET(Msg_DBGS_CreateRoleReq, role_info_)>(
          reinterpret_cast<char*>(&role_info_),
          reinterpret_cast<char*>(&other->role_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_CreateRoleReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[9]);
}

// ===================================================================

class Msg_DBGS_CreateRoleAck::_Internal {
 public:
};

Msg_DBGS_CreateRoleAck::Msg_DBGS_CreateRoleAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_CreateRoleAck)
}
Msg_DBGS_CreateRoleAck::Msg_DBGS_CreateRoleAck(const Msg_DBGS_CreateRoleAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&acc_id_, &from.acc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&acc_id_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_CreateRoleAck)
}

inline void Msg_DBGS_CreateRoleAck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acc_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&acc_id_)) + sizeof(ret_));
}

Msg_DBGS_CreateRoleAck::~Msg_DBGS_CreateRoleAck() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_CreateRoleAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_CreateRoleAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_CreateRoleAck::ArenaDtor(void* object) {
  Msg_DBGS_CreateRoleAck* _this = reinterpret_cast< Msg_DBGS_CreateRoleAck* >(object);
  (void)_this;
}
void Msg_DBGS_CreateRoleAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_CreateRoleAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_CreateRoleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_CreateRoleAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&acc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&acc_id_)) + sizeof(ret_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_CreateRoleAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 acc_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_CreateRoleAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_CreateRoleAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret = 1;
  if (this->_internal_ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  // int64 acc_id = 2;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_acc_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_CreateRoleAck)
  return target;
}

size_t Msg_DBGS_CreateRoleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_CreateRoleAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 acc_id = 2;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  // int32 ret = 1;
  if (this->_internal_ret() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_CreateRoleAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_CreateRoleAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_CreateRoleAck::GetClassData() const { return &_class_data_; }

void Msg_DBGS_CreateRoleAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_CreateRoleAck *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_CreateRoleAck &>(from));
}


void Msg_DBGS_CreateRoleAck::MergeFrom(const Msg_DBGS_CreateRoleAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_CreateRoleAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  if (from._internal_ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_CreateRoleAck::CopyFrom(const Msg_DBGS_CreateRoleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_CreateRoleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_CreateRoleAck::IsInitialized() const {
  return true;
}

void Msg_DBGS_CreateRoleAck::InternalSwap(Msg_DBGS_CreateRoleAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_DBGS_CreateRoleAck, ret_)
      + sizeof(Msg_DBGS_CreateRoleAck::ret_)
      - PROTOBUF_FIELD_OFFSET(Msg_DBGS_CreateRoleAck, acc_id_)>(
          reinterpret_cast<char*>(&acc_id_),
          reinterpret_cast<char*>(&other->acc_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_CreateRoleAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[10]);
}

// ===================================================================

class Msg_DBGS_UpdateRoleInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_DBGS_UpdateRoleInfo>()._has_bits_);
  static const ::XrPb::RoleInfo& role_info(const Msg_DBGS_UpdateRoleInfo* msg);
  static void set_has_role_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::XrPb::RoleInfo&
Msg_DBGS_UpdateRoleInfo::_Internal::role_info(const Msg_DBGS_UpdateRoleInfo* msg) {
  return *msg->role_info_;
}
Msg_DBGS_UpdateRoleInfo::Msg_DBGS_UpdateRoleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_UpdateRoleInfo)
}
Msg_DBGS_UpdateRoleInfo::Msg_DBGS_UpdateRoleInfo(const Msg_DBGS_UpdateRoleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_role_info()) {
    role_info_ = new ::XrPb::RoleInfo(*from.role_info_);
  } else {
    role_info_ = nullptr;
  }
  acc_id_ = from.acc_id_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_UpdateRoleInfo)
}

inline void Msg_DBGS_UpdateRoleInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&acc_id_) -
    reinterpret_cast<char*>(&role_info_)) + sizeof(acc_id_));
}

Msg_DBGS_UpdateRoleInfo::~Msg_DBGS_UpdateRoleInfo() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_UpdateRoleInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_UpdateRoleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete role_info_;
}

void Msg_DBGS_UpdateRoleInfo::ArenaDtor(void* object) {
  Msg_DBGS_UpdateRoleInfo* _this = reinterpret_cast< Msg_DBGS_UpdateRoleInfo* >(object);
  (void)_this;
}
void Msg_DBGS_UpdateRoleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_UpdateRoleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_UpdateRoleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_UpdateRoleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(role_info_ != nullptr);
    role_info_->Clear();
  }
  acc_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_UpdateRoleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.RoleInfo role_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_role_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_UpdateRoleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_UpdateRoleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  // optional .XrPb.RoleInfo role_info = 2;
  if (_internal_has_role_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::role_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_UpdateRoleInfo)
  return target;
}

size_t Msg_DBGS_UpdateRoleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_UpdateRoleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .XrPb.RoleInfo role_info = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *role_info_);
  }

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_UpdateRoleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_UpdateRoleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_UpdateRoleInfo::GetClassData() const { return &_class_data_; }

void Msg_DBGS_UpdateRoleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_UpdateRoleInfo *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_UpdateRoleInfo &>(from));
}


void Msg_DBGS_UpdateRoleInfo::MergeFrom(const Msg_DBGS_UpdateRoleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_UpdateRoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_role_info()) {
    _internal_mutable_role_info()->::XrPb::RoleInfo::MergeFrom(from._internal_role_info());
  }
  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_UpdateRoleInfo::CopyFrom(const Msg_DBGS_UpdateRoleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_UpdateRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_UpdateRoleInfo::IsInitialized() const {
  return true;
}

void Msg_DBGS_UpdateRoleInfo::InternalSwap(Msg_DBGS_UpdateRoleInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_DBGS_UpdateRoleInfo, acc_id_)
      + sizeof(Msg_DBGS_UpdateRoleInfo::acc_id_)
      - PROTOBUF_FIELD_OFFSET(Msg_DBGS_UpdateRoleInfo, role_info_)>(
          reinterpret_cast<char*>(&role_info_),
          reinterpret_cast<char*>(&other->role_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_UpdateRoleInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[11]);
}

// ===================================================================

class Msg_DBGS_Player_Del::_Internal {
 public:
};

Msg_DBGS_Player_Del::Msg_DBGS_Player_Del(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_Player_Del)
}
Msg_DBGS_Player_Del::Msg_DBGS_Player_Del(const Msg_DBGS_Player_Del& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acc_id_ = from.acc_id_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_Player_Del)
}

inline void Msg_DBGS_Player_Del::SharedCtor() {
acc_id_ = int64_t{0};
}

Msg_DBGS_Player_Del::~Msg_DBGS_Player_Del() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_Player_Del)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_Player_Del::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_Player_Del::ArenaDtor(void* object) {
  Msg_DBGS_Player_Del* _this = reinterpret_cast< Msg_DBGS_Player_Del* >(object);
  (void)_this;
}
void Msg_DBGS_Player_Del::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_Player_Del::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_Player_Del::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_Player_Del)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acc_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_Player_Del::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_Player_Del::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_Player_Del)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_Player_Del)
  return target;
}

size_t Msg_DBGS_Player_Del::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_Player_Del)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_Player_Del::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_Player_Del::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_Player_Del::GetClassData() const { return &_class_data_; }

void Msg_DBGS_Player_Del::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_Player_Del *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_Player_Del &>(from));
}


void Msg_DBGS_Player_Del::MergeFrom(const Msg_DBGS_Player_Del& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_Player_Del)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_Player_Del::CopyFrom(const Msg_DBGS_Player_Del& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_Player_Del)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_Player_Del::IsInitialized() const {
  return true;
}

void Msg_DBGS_Player_Del::InternalSwap(Msg_DBGS_Player_Del* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(acc_id_, other->acc_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_Player_Del::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[12]);
}

// ===================================================================

class Msg_DBGS_Player_In::_Internal {
 public:
};

Msg_DBGS_Player_In::Msg_DBGS_Player_In(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_Player_In)
}
Msg_DBGS_Player_In::Msg_DBGS_Player_In(const Msg_DBGS_Player_In& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acc_id_ = from.acc_id_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_Player_In)
}

inline void Msg_DBGS_Player_In::SharedCtor() {
acc_id_ = int64_t{0};
}

Msg_DBGS_Player_In::~Msg_DBGS_Player_In() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_Player_In)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_Player_In::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_Player_In::ArenaDtor(void* object) {
  Msg_DBGS_Player_In* _this = reinterpret_cast< Msg_DBGS_Player_In* >(object);
  (void)_this;
}
void Msg_DBGS_Player_In::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_Player_In::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_Player_In::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_Player_In)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acc_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_Player_In::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_Player_In::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_Player_In)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_Player_In)
  return target;
}

size_t Msg_DBGS_Player_In::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_Player_In)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_Player_In::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_Player_In::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_Player_In::GetClassData() const { return &_class_data_; }

void Msg_DBGS_Player_In::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_Player_In *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_Player_In &>(from));
}


void Msg_DBGS_Player_In::MergeFrom(const Msg_DBGS_Player_In& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_Player_In)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_Player_In::CopyFrom(const Msg_DBGS_Player_In& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_Player_In)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_Player_In::IsInitialized() const {
  return true;
}

void Msg_DBGS_Player_In::InternalSwap(Msg_DBGS_Player_In* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(acc_id_, other->acc_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_Player_In::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[13]);
}

// ===================================================================

class Msg_DBGS_AddRoleBackground::_Internal {
 public:
};

Msg_DBGS_AddRoleBackground::Msg_DBGS_AddRoleBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_AddRoleBackground)
}
Msg_DBGS_AddRoleBackground::Msg_DBGS_AddRoleBackground(const Msg_DBGS_AddRoleBackground& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id_(from.id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acc_id_ = from.acc_id_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_AddRoleBackground)
}

inline void Msg_DBGS_AddRoleBackground::SharedCtor() {
acc_id_ = int64_t{0};
}

Msg_DBGS_AddRoleBackground::~Msg_DBGS_AddRoleBackground() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_AddRoleBackground)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_AddRoleBackground::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_AddRoleBackground::ArenaDtor(void* object) {
  Msg_DBGS_AddRoleBackground* _this = reinterpret_cast< Msg_DBGS_AddRoleBackground* >(object);
  (void)_this;
}
void Msg_DBGS_AddRoleBackground::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_AddRoleBackground::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_AddRoleBackground::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_AddRoleBackground)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  acc_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_AddRoleBackground::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_AddRoleBackground::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_AddRoleBackground)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  // repeated uint32 id = 2;
  {
    int byte_size = _id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_AddRoleBackground)
  return target;
}

size_t Msg_DBGS_AddRoleBackground::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_AddRoleBackground)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_AddRoleBackground::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_AddRoleBackground::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_AddRoleBackground::GetClassData() const { return &_class_data_; }

void Msg_DBGS_AddRoleBackground::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_AddRoleBackground *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_AddRoleBackground &>(from));
}


void Msg_DBGS_AddRoleBackground::MergeFrom(const Msg_DBGS_AddRoleBackground& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_AddRoleBackground)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_AddRoleBackground::CopyFrom(const Msg_DBGS_AddRoleBackground& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_AddRoleBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_AddRoleBackground::IsInitialized() const {
  return true;
}

void Msg_DBGS_AddRoleBackground::InternalSwap(Msg_DBGS_AddRoleBackground* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  id_.InternalSwap(&other->id_);
  swap(acc_id_, other->acc_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_AddRoleBackground::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[14]);
}

// ===================================================================

class Msg_DBGS_DeleteBackground::_Internal {
 public:
};

Msg_DBGS_DeleteBackground::Msg_DBGS_DeleteBackground(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_DeleteBackground)
}
Msg_DBGS_DeleteBackground::Msg_DBGS_DeleteBackground(const Msg_DBGS_DeleteBackground& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id_(from.id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acc_id_ = from.acc_id_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_DeleteBackground)
}

inline void Msg_DBGS_DeleteBackground::SharedCtor() {
acc_id_ = int64_t{0};
}

Msg_DBGS_DeleteBackground::~Msg_DBGS_DeleteBackground() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_DeleteBackground)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_DeleteBackground::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_DeleteBackground::ArenaDtor(void* object) {
  Msg_DBGS_DeleteBackground* _this = reinterpret_cast< Msg_DBGS_DeleteBackground* >(object);
  (void)_this;
}
void Msg_DBGS_DeleteBackground::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_DeleteBackground::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_DeleteBackground::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_DeleteBackground)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  acc_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_DeleteBackground::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_DeleteBackground::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_DeleteBackground)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  // repeated uint32 id = 2;
  {
    int byte_size = _id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_DeleteBackground)
  return target;
}

size_t Msg_DBGS_DeleteBackground::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_DeleteBackground)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_DeleteBackground::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_DeleteBackground::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_DeleteBackground::GetClassData() const { return &_class_data_; }

void Msg_DBGS_DeleteBackground::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_DeleteBackground *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_DeleteBackground &>(from));
}


void Msg_DBGS_DeleteBackground::MergeFrom(const Msg_DBGS_DeleteBackground& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_DeleteBackground)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_DeleteBackground::CopyFrom(const Msg_DBGS_DeleteBackground& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_DeleteBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_DeleteBackground::IsInitialized() const {
  return true;
}

void Msg_DBGS_DeleteBackground::InternalSwap(Msg_DBGS_DeleteBackground* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  id_.InternalSwap(&other->id_);
  swap(acc_id_, other->acc_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_DeleteBackground::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[15]);
}

// ===================================================================

class Msg_DBGS_AddRolePortrait::_Internal {
 public:
};

Msg_DBGS_AddRolePortrait::Msg_DBGS_AddRolePortrait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_AddRolePortrait)
}
Msg_DBGS_AddRolePortrait::Msg_DBGS_AddRolePortrait(const Msg_DBGS_AddRolePortrait& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id_(from.id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acc_id_ = from.acc_id_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_AddRolePortrait)
}

inline void Msg_DBGS_AddRolePortrait::SharedCtor() {
acc_id_ = int64_t{0};
}

Msg_DBGS_AddRolePortrait::~Msg_DBGS_AddRolePortrait() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_AddRolePortrait)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_AddRolePortrait::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_AddRolePortrait::ArenaDtor(void* object) {
  Msg_DBGS_AddRolePortrait* _this = reinterpret_cast< Msg_DBGS_AddRolePortrait* >(object);
  (void)_this;
}
void Msg_DBGS_AddRolePortrait::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_AddRolePortrait::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_AddRolePortrait::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_AddRolePortrait)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  acc_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_AddRolePortrait::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_AddRolePortrait::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_AddRolePortrait)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  // repeated uint32 id = 2;
  {
    int byte_size = _id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_AddRolePortrait)
  return target;
}

size_t Msg_DBGS_AddRolePortrait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_AddRolePortrait)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_AddRolePortrait::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_AddRolePortrait::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_AddRolePortrait::GetClassData() const { return &_class_data_; }

void Msg_DBGS_AddRolePortrait::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_AddRolePortrait *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_AddRolePortrait &>(from));
}


void Msg_DBGS_AddRolePortrait::MergeFrom(const Msg_DBGS_AddRolePortrait& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_AddRolePortrait)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_AddRolePortrait::CopyFrom(const Msg_DBGS_AddRolePortrait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_AddRolePortrait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_AddRolePortrait::IsInitialized() const {
  return true;
}

void Msg_DBGS_AddRolePortrait::InternalSwap(Msg_DBGS_AddRolePortrait* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  id_.InternalSwap(&other->id_);
  swap(acc_id_, other->acc_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_AddRolePortrait::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[16]);
}

// ===================================================================

class Msg_DBGS_DeletePortrait::_Internal {
 public:
};

Msg_DBGS_DeletePortrait::Msg_DBGS_DeletePortrait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_DeletePortrait)
}
Msg_DBGS_DeletePortrait::Msg_DBGS_DeletePortrait(const Msg_DBGS_DeletePortrait& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id_(from.id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acc_id_ = from.acc_id_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_DeletePortrait)
}

inline void Msg_DBGS_DeletePortrait::SharedCtor() {
acc_id_ = int64_t{0};
}

Msg_DBGS_DeletePortrait::~Msg_DBGS_DeletePortrait() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_DeletePortrait)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_DeletePortrait::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_DeletePortrait::ArenaDtor(void* object) {
  Msg_DBGS_DeletePortrait* _this = reinterpret_cast< Msg_DBGS_DeletePortrait* >(object);
  (void)_this;
}
void Msg_DBGS_DeletePortrait::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_DeletePortrait::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_DeletePortrait::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_DeletePortrait)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  acc_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_DeletePortrait::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_DeletePortrait::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_DeletePortrait)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  // repeated uint32 id = 2;
  {
    int byte_size = _id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_DeletePortrait)
  return target;
}

size_t Msg_DBGS_DeletePortrait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_DeletePortrait)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_DeletePortrait::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_DeletePortrait::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_DeletePortrait::GetClassData() const { return &_class_data_; }

void Msg_DBGS_DeletePortrait::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_DeletePortrait *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_DeletePortrait &>(from));
}


void Msg_DBGS_DeletePortrait::MergeFrom(const Msg_DBGS_DeletePortrait& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_DeletePortrait)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_DeletePortrait::CopyFrom(const Msg_DBGS_DeletePortrait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_DeletePortrait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_DeletePortrait::IsInitialized() const {
  return true;
}

void Msg_DBGS_DeletePortrait::InternalSwap(Msg_DBGS_DeletePortrait* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  id_.InternalSwap(&other->id_);
  swap(acc_id_, other->acc_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_DeletePortrait::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[17]);
}

// ===================================================================

class Msg_DBGS_AddRoleMessager::_Internal {
 public:
};

Msg_DBGS_AddRoleMessager::Msg_DBGS_AddRoleMessager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  messager_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_AddRoleMessager)
}
Msg_DBGS_AddRoleMessager::Msg_DBGS_AddRoleMessager(const Msg_DBGS_AddRoleMessager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messager_(from.messager_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acc_id_ = from.acc_id_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_AddRoleMessager)
}

inline void Msg_DBGS_AddRoleMessager::SharedCtor() {
acc_id_ = int64_t{0};
}

Msg_DBGS_AddRoleMessager::~Msg_DBGS_AddRoleMessager() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_AddRoleMessager)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_AddRoleMessager::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_AddRoleMessager::ArenaDtor(void* object) {
  Msg_DBGS_AddRoleMessager* _this = reinterpret_cast< Msg_DBGS_AddRoleMessager* >(object);
  (void)_this;
}
void Msg_DBGS_AddRoleMessager::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_AddRoleMessager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_AddRoleMessager::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_AddRoleMessager)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messager_.Clear();
  acc_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_AddRoleMessager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 messager = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_messager(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_messager(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_AddRoleMessager::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_AddRoleMessager)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  // repeated uint32 messager = 2;
  {
    int byte_size = _messager_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_messager(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_AddRoleMessager)
  return target;
}

size_t Msg_DBGS_AddRoleMessager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_AddRoleMessager)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 messager = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->messager_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _messager_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_AddRoleMessager::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_AddRoleMessager::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_AddRoleMessager::GetClassData() const { return &_class_data_; }

void Msg_DBGS_AddRoleMessager::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_AddRoleMessager *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_AddRoleMessager &>(from));
}


void Msg_DBGS_AddRoleMessager::MergeFrom(const Msg_DBGS_AddRoleMessager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_AddRoleMessager)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  messager_.MergeFrom(from.messager_);
  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_AddRoleMessager::CopyFrom(const Msg_DBGS_AddRoleMessager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_AddRoleMessager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_AddRoleMessager::IsInitialized() const {
  return true;
}

void Msg_DBGS_AddRoleMessager::InternalSwap(Msg_DBGS_AddRoleMessager* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  messager_.InternalSwap(&other->messager_);
  swap(acc_id_, other->acc_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_AddRoleMessager::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[18]);
}

// ===================================================================

class Msg_DBGS_DeleteMessager::_Internal {
 public:
};

Msg_DBGS_DeleteMessager::Msg_DBGS_DeleteMessager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_DeleteMessager)
}
Msg_DBGS_DeleteMessager::Msg_DBGS_DeleteMessager(const Msg_DBGS_DeleteMessager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id_(from.id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  acc_id_ = from.acc_id_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_DeleteMessager)
}

inline void Msg_DBGS_DeleteMessager::SharedCtor() {
acc_id_ = int64_t{0};
}

Msg_DBGS_DeleteMessager::~Msg_DBGS_DeleteMessager() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_DeleteMessager)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_DeleteMessager::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_DeleteMessager::ArenaDtor(void* object) {
  Msg_DBGS_DeleteMessager* _this = reinterpret_cast< Msg_DBGS_DeleteMessager* >(object);
  (void)_this;
}
void Msg_DBGS_DeleteMessager::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_DeleteMessager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_DeleteMessager::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_DeleteMessager)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  acc_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_DeleteMessager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 acc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          acc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_DeleteMessager::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_DeleteMessager)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_acc_id(), target);
  }

  // repeated uint32 id = 2;
  {
    int byte_size = _id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_DeleteMessager)
  return target;
}

size_t Msg_DBGS_DeleteMessager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_DeleteMessager)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 acc_id = 1;
  if (this->_internal_acc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_acc_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_DeleteMessager::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_DeleteMessager::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_DeleteMessager::GetClassData() const { return &_class_data_; }

void Msg_DBGS_DeleteMessager::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_DeleteMessager *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_DeleteMessager &>(from));
}


void Msg_DBGS_DeleteMessager::MergeFrom(const Msg_DBGS_DeleteMessager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_DeleteMessager)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
  if (from._internal_acc_id() != 0) {
    _internal_set_acc_id(from._internal_acc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_DeleteMessager::CopyFrom(const Msg_DBGS_DeleteMessager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_DeleteMessager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_DeleteMessager::IsInitialized() const {
  return true;
}

void Msg_DBGS_DeleteMessager::InternalSwap(Msg_DBGS_DeleteMessager* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  id_.InternalSwap(&other->id_);
  swap(acc_id_, other->acc_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_DeleteMessager::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[19]);
}

// ===================================================================

class Msg_DBGS_LoadBaseInfoReq::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_DBGS_LoadBaseInfoReq>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Msg_DBGS_LoadBaseInfoReq::Msg_DBGS_LoadBaseInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_LoadBaseInfoReq)
}
Msg_DBGS_LoadBaseInfoReq::Msg_DBGS_LoadBaseInfoReq(const Msg_DBGS_LoadBaseInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&check_id_, &from.check_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_id_) -
    reinterpret_cast<char*>(&check_id_)) + sizeof(seq_id_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_LoadBaseInfoReq)
}

inline void Msg_DBGS_LoadBaseInfoReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&check_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seq_id_) -
    reinterpret_cast<char*>(&check_id_)) + sizeof(seq_id_));
}

Msg_DBGS_LoadBaseInfoReq::~Msg_DBGS_LoadBaseInfoReq() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_LoadBaseInfoReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_LoadBaseInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_LoadBaseInfoReq::ArenaDtor(void* object) {
  Msg_DBGS_LoadBaseInfoReq* _this = reinterpret_cast< Msg_DBGS_LoadBaseInfoReq* >(object);
  (void)_this;
}
void Msg_DBGS_LoadBaseInfoReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_LoadBaseInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_LoadBaseInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_LoadBaseInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&check_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proto_id_) -
      reinterpret_cast<char*>(&check_id_)) + sizeof(proto_id_));
  id_ = 0u;
  seq_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_LoadBaseInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 check_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          check_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 checked_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          checked_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 proto_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          proto_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 seq_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          seq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_LoadBaseInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_LoadBaseInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 check_id = 1;
  if (this->_internal_check_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_check_id(), target);
  }

  // int64 checked_id = 2;
  if (this->_internal_checked_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_checked_id(), target);
  }

  // uint32 proto_id = 3;
  if (this->_internal_proto_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_proto_id(), target);
  }

  // optional uint32 id = 4;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_id(), target);
  }

  // uint32 seq_id = 5;
  if (this->_internal_seq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seq_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_LoadBaseInfoReq)
  return target;
}

size_t Msg_DBGS_LoadBaseInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_LoadBaseInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 check_id = 1;
  if (this->_internal_check_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_check_id());
  }

  // int64 checked_id = 2;
  if (this->_internal_checked_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_checked_id());
  }

  // uint32 proto_id = 3;
  if (this->_internal_proto_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_proto_id());
  }

  // optional uint32 id = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 seq_id = 5;
  if (this->_internal_seq_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seq_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_LoadBaseInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_LoadBaseInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_LoadBaseInfoReq::GetClassData() const { return &_class_data_; }

void Msg_DBGS_LoadBaseInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_LoadBaseInfoReq *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_LoadBaseInfoReq &>(from));
}


void Msg_DBGS_LoadBaseInfoReq::MergeFrom(const Msg_DBGS_LoadBaseInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_LoadBaseInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_check_id() != 0) {
    _internal_set_check_id(from._internal_check_id());
  }
  if (from._internal_checked_id() != 0) {
    _internal_set_checked_id(from._internal_checked_id());
  }
  if (from._internal_proto_id() != 0) {
    _internal_set_proto_id(from._internal_proto_id());
  }
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_seq_id() != 0) {
    _internal_set_seq_id(from._internal_seq_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_LoadBaseInfoReq::CopyFrom(const Msg_DBGS_LoadBaseInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_LoadBaseInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_LoadBaseInfoReq::IsInitialized() const {
  return true;
}

void Msg_DBGS_LoadBaseInfoReq::InternalSwap(Msg_DBGS_LoadBaseInfoReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_DBGS_LoadBaseInfoReq, seq_id_)
      + sizeof(Msg_DBGS_LoadBaseInfoReq::seq_id_)
      - PROTOBUF_FIELD_OFFSET(Msg_DBGS_LoadBaseInfoReq, check_id_)>(
          reinterpret_cast<char*>(&check_id_),
          reinterpret_cast<char*>(&other->check_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_LoadBaseInfoReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[20]);
}

// ===================================================================

class Msg_DBGS_LoadBaseInfoAck::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_DBGS_LoadBaseInfoAck>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Msg_DBGS_LoadBaseInfoAck::Msg_DBGS_LoadBaseInfoAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_LoadBaseInfoAck)
}
Msg_DBGS_LoadBaseInfoAck::Msg_DBGS_LoadBaseInfoAck(const Msg_DBGS_LoadBaseInfoAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&check_id_, &from.check_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&check_id_)) + sizeof(ret_code_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_LoadBaseInfoAck)
}

inline void Msg_DBGS_LoadBaseInfoAck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&check_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&check_id_)) + sizeof(ret_code_));
}

Msg_DBGS_LoadBaseInfoAck::~Msg_DBGS_LoadBaseInfoAck() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_LoadBaseInfoAck)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_LoadBaseInfoAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_LoadBaseInfoAck::ArenaDtor(void* object) {
  Msg_DBGS_LoadBaseInfoAck* _this = reinterpret_cast< Msg_DBGS_LoadBaseInfoAck* >(object);
  (void)_this;
}
void Msg_DBGS_LoadBaseInfoAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_LoadBaseInfoAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_LoadBaseInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_LoadBaseInfoAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&check_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proto_id_) -
      reinterpret_cast<char*>(&check_id_)) + sizeof(proto_id_));
  id_ = 0u;
  ::memset(&seq_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_code_) -
      reinterpret_cast<char*>(&seq_id_)) + sizeof(ret_code_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_LoadBaseInfoAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 check_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          check_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 checked_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          checked_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 proto_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          proto_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 seq_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          seq_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ret_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_LoadBaseInfoAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_LoadBaseInfoAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 check_id = 1;
  if (this->_internal_check_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_check_id(), target);
  }

  // int64 checked_id = 2;
  if (this->_internal_checked_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_checked_id(), target);
  }

  // uint32 proto_id = 3;
  if (this->_internal_proto_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_proto_id(), target);
  }

  // optional uint32 id = 4;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_id(), target);
  }

  // uint32 seq_id = 5;
  if (this->_internal_seq_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_seq_id(), target);
  }

  // uint32 ret_code = 6;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ret_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_LoadBaseInfoAck)
  return target;
}

size_t Msg_DBGS_LoadBaseInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_LoadBaseInfoAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 check_id = 1;
  if (this->_internal_check_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_check_id());
  }

  // int64 checked_id = 2;
  if (this->_internal_checked_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_checked_id());
  }

  // uint32 proto_id = 3;
  if (this->_internal_proto_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_proto_id());
  }

  // optional uint32 id = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 seq_id = 5;
  if (this->_internal_seq_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seq_id());
  }

  // uint32 ret_code = 6;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ret_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_LoadBaseInfoAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_LoadBaseInfoAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_LoadBaseInfoAck::GetClassData() const { return &_class_data_; }

void Msg_DBGS_LoadBaseInfoAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_LoadBaseInfoAck *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_LoadBaseInfoAck &>(from));
}


void Msg_DBGS_LoadBaseInfoAck::MergeFrom(const Msg_DBGS_LoadBaseInfoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_LoadBaseInfoAck)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_check_id() != 0) {
    _internal_set_check_id(from._internal_check_id());
  }
  if (from._internal_checked_id() != 0) {
    _internal_set_checked_id(from._internal_checked_id());
  }
  if (from._internal_proto_id() != 0) {
    _internal_set_proto_id(from._internal_proto_id());
  }
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_seq_id() != 0) {
    _internal_set_seq_id(from._internal_seq_id());
  }
  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_LoadBaseInfoAck::CopyFrom(const Msg_DBGS_LoadBaseInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_LoadBaseInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_LoadBaseInfoAck::IsInitialized() const {
  return true;
}

void Msg_DBGS_LoadBaseInfoAck::InternalSwap(Msg_DBGS_LoadBaseInfoAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_DBGS_LoadBaseInfoAck, ret_code_)
      + sizeof(Msg_DBGS_LoadBaseInfoAck::ret_code_)
      - PROTOBUF_FIELD_OFFSET(Msg_DBGS_LoadBaseInfoAck, check_id_)>(
          reinterpret_cast<char*>(&check_id_),
          reinterpret_cast<char*>(&other->check_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_LoadBaseInfoAck::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[21]);
}

// ===================================================================

class Msg_DBGS_AddItemReq::_Internal {
 public:
  static const ::XrPb::RoleItem& oroleitem(const Msg_DBGS_AddItemReq* msg);
};

const ::XrPb::RoleItem&
Msg_DBGS_AddItemReq::_Internal::oroleitem(const Msg_DBGS_AddItemReq* msg) {
  return *msg->oroleitem_;
}
Msg_DBGS_AddItemReq::Msg_DBGS_AddItemReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_AddItemReq)
}
Msg_DBGS_AddItemReq::Msg_DBGS_AddItemReq(const Msg_DBGS_AddItemReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_oroleitem()) {
    oroleitem_ = new ::XrPb::RoleItem(*from.oroleitem_);
  } else {
    oroleitem_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_AddItemReq)
}

inline void Msg_DBGS_AddItemReq::SharedCtor() {
oroleitem_ = nullptr;
}

Msg_DBGS_AddItemReq::~Msg_DBGS_AddItemReq() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_AddItemReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_AddItemReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete oroleitem_;
}

void Msg_DBGS_AddItemReq::ArenaDtor(void* object) {
  Msg_DBGS_AddItemReq* _this = reinterpret_cast< Msg_DBGS_AddItemReq* >(object);
  (void)_this;
}
void Msg_DBGS_AddItemReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_AddItemReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_AddItemReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_AddItemReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && oroleitem_ != nullptr) {
    delete oroleitem_;
  }
  oroleitem_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_AddItemReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.RoleItem oRoleItem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_oroleitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_AddItemReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_AddItemReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.RoleItem oRoleItem = 1;
  if (this->_internal_has_oroleitem()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::oroleitem(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_AddItemReq)
  return target;
}

size_t Msg_DBGS_AddItemReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_AddItemReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.RoleItem oRoleItem = 1;
  if (this->_internal_has_oroleitem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oroleitem_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_AddItemReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_AddItemReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_AddItemReq::GetClassData() const { return &_class_data_; }

void Msg_DBGS_AddItemReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_AddItemReq *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_AddItemReq &>(from));
}


void Msg_DBGS_AddItemReq::MergeFrom(const Msg_DBGS_AddItemReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_AddItemReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_oroleitem()) {
    _internal_mutable_oroleitem()->::XrPb::RoleItem::MergeFrom(from._internal_oroleitem());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_AddItemReq::CopyFrom(const Msg_DBGS_AddItemReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_AddItemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_AddItemReq::IsInitialized() const {
  return true;
}

void Msg_DBGS_AddItemReq::InternalSwap(Msg_DBGS_AddItemReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oroleitem_, other->oroleitem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_AddItemReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[22]);
}

// ===================================================================

class Msg_DBGS_UpdateItemReq::_Internal {
 public:
  static const ::XrPb::RoleItem& oroleitem(const Msg_DBGS_UpdateItemReq* msg);
};

const ::XrPb::RoleItem&
Msg_DBGS_UpdateItemReq::_Internal::oroleitem(const Msg_DBGS_UpdateItemReq* msg) {
  return *msg->oroleitem_;
}
Msg_DBGS_UpdateItemReq::Msg_DBGS_UpdateItemReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_UpdateItemReq)
}
Msg_DBGS_UpdateItemReq::Msg_DBGS_UpdateItemReq(const Msg_DBGS_UpdateItemReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_oroleitem()) {
    oroleitem_ = new ::XrPb::RoleItem(*from.oroleitem_);
  } else {
    oroleitem_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_UpdateItemReq)
}

inline void Msg_DBGS_UpdateItemReq::SharedCtor() {
oroleitem_ = nullptr;
}

Msg_DBGS_UpdateItemReq::~Msg_DBGS_UpdateItemReq() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_UpdateItemReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_UpdateItemReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete oroleitem_;
}

void Msg_DBGS_UpdateItemReq::ArenaDtor(void* object) {
  Msg_DBGS_UpdateItemReq* _this = reinterpret_cast< Msg_DBGS_UpdateItemReq* >(object);
  (void)_this;
}
void Msg_DBGS_UpdateItemReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_UpdateItemReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_UpdateItemReq::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_UpdateItemReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && oroleitem_ != nullptr) {
    delete oroleitem_;
  }
  oroleitem_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_UpdateItemReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.RoleItem oRoleItem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_oroleitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_UpdateItemReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_UpdateItemReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.RoleItem oRoleItem = 1;
  if (this->_internal_has_oroleitem()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::oroleitem(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_UpdateItemReq)
  return target;
}

size_t Msg_DBGS_UpdateItemReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_UpdateItemReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.RoleItem oRoleItem = 1;
  if (this->_internal_has_oroleitem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *oroleitem_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_UpdateItemReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_UpdateItemReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_UpdateItemReq::GetClassData() const { return &_class_data_; }

void Msg_DBGS_UpdateItemReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_UpdateItemReq *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_UpdateItemReq &>(from));
}


void Msg_DBGS_UpdateItemReq::MergeFrom(const Msg_DBGS_UpdateItemReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_UpdateItemReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_oroleitem()) {
    _internal_mutable_oroleitem()->::XrPb::RoleItem::MergeFrom(from._internal_oroleitem());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_UpdateItemReq::CopyFrom(const Msg_DBGS_UpdateItemReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_UpdateItemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_UpdateItemReq::IsInitialized() const {
  return true;
}

void Msg_DBGS_UpdateItemReq::InternalSwap(Msg_DBGS_UpdateItemReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(oroleitem_, other->oroleitem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_UpdateItemReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[23]);
}

// ===================================================================

class Msg_DBGS_UpdateDailyAward::_Internal {
 public:
};

Msg_DBGS_UpdateDailyAward::Msg_DBGS_UpdateDailyAward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vecdailyaward_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_UpdateDailyAward)
}
Msg_DBGS_UpdateDailyAward::Msg_DBGS_UpdateDailyAward(const Msg_DBGS_UpdateDailyAward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vecdailyaward_(from.vecdailyaward_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_UpdateDailyAward)
}

inline void Msg_DBGS_UpdateDailyAward::SharedCtor() {
}

Msg_DBGS_UpdateDailyAward::~Msg_DBGS_UpdateDailyAward() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_UpdateDailyAward)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_UpdateDailyAward::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_UpdateDailyAward::ArenaDtor(void* object) {
  Msg_DBGS_UpdateDailyAward* _this = reinterpret_cast< Msg_DBGS_UpdateDailyAward* >(object);
  (void)_this;
}
void Msg_DBGS_UpdateDailyAward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_UpdateDailyAward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_UpdateDailyAward::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_UpdateDailyAward)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vecdailyaward_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_UpdateDailyAward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .XrPb.RoleDailyAward vecDailyAward = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vecdailyaward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_UpdateDailyAward::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_UpdateDailyAward)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .XrPb.RoleDailyAward vecDailyAward = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vecdailyaward_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vecdailyaward(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_UpdateDailyAward)
  return target;
}

size_t Msg_DBGS_UpdateDailyAward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_UpdateDailyAward)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XrPb.RoleDailyAward vecDailyAward = 1;
  total_size += 1UL * this->_internal_vecdailyaward_size();
  for (const auto& msg : this->vecdailyaward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_UpdateDailyAward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_UpdateDailyAward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_UpdateDailyAward::GetClassData() const { return &_class_data_; }

void Msg_DBGS_UpdateDailyAward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_UpdateDailyAward *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_UpdateDailyAward &>(from));
}


void Msg_DBGS_UpdateDailyAward::MergeFrom(const Msg_DBGS_UpdateDailyAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_UpdateDailyAward)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vecdailyaward_.MergeFrom(from.vecdailyaward_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_UpdateDailyAward::CopyFrom(const Msg_DBGS_UpdateDailyAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_UpdateDailyAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_UpdateDailyAward::IsInitialized() const {
  return true;
}

void Msg_DBGS_UpdateDailyAward::InternalSwap(Msg_DBGS_UpdateDailyAward* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vecdailyaward_.InternalSwap(&other->vecdailyaward_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_UpdateDailyAward::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[24]);
}

// ===================================================================

class Msg_DBGS_UpdateLoginedSign::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_DBGS_UpdateLoginedSign>()._has_bits_);
  static void set_has_strversion(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uiday(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lltime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Msg_DBGS_UpdateLoginedSign::Msg_DBGS_UpdateLoginedSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_UpdateLoginedSign)
}
Msg_DBGS_UpdateLoginedSign::Msg_DBGS_UpdateLoginedSign(const Msg_DBGS_UpdateLoginedSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_strversion()) {
    strversion_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strversion(), 
      GetArenaForAllocation());
  }
  ::memcpy(&uiid_, &from.uiid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lltime_) -
    reinterpret_cast<char*>(&uiid_)) + sizeof(lltime_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_UpdateLoginedSign)
}

inline void Msg_DBGS_UpdateLoginedSign::SharedCtor() {
strversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strversion_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lltime_) -
    reinterpret_cast<char*>(&uiid_)) + sizeof(lltime_));
}

Msg_DBGS_UpdateLoginedSign::~Msg_DBGS_UpdateLoginedSign() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_UpdateLoginedSign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_UpdateLoginedSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_DBGS_UpdateLoginedSign::ArenaDtor(void* object) {
  Msg_DBGS_UpdateLoginedSign* _this = reinterpret_cast< Msg_DBGS_UpdateLoginedSign* >(object);
  (void)_this;
}
void Msg_DBGS_UpdateLoginedSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_UpdateLoginedSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_UpdateLoginedSign::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_UpdateLoginedSign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strversion_.ClearNonDefaultToEmpty();
  }
  uiid_ = 0u;
  if (cached_has_bits & 0x00000006u) {
    ::memset(&uiday_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lltime_) -
        reinterpret_cast<char*>(&uiday_)) + sizeof(lltime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_UpdateLoginedSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 uiId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string strVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_DBGS_UpdateLoginedSign.strVersion"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uiDay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_uiday(&has_bits);
          uiday_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 llTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_lltime(&has_bits);
          lltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_UpdateLoginedSign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_UpdateLoginedSign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uiId = 1;
  if (this->_internal_uiid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uiid(), target);
  }

  // optional string strVersion = 2;
  if (_internal_has_strversion()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strversion().data(), static_cast<int>(this->_internal_strversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_DBGS_UpdateLoginedSign.strVersion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strversion(), target);
  }

  // optional uint32 uiDay = 3;
  if (_internal_has_uiday()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uiday(), target);
  }

  // optional int64 llTime = 4;
  if (_internal_has_lltime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_lltime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_UpdateLoginedSign)
  return target;
}

size_t Msg_DBGS_UpdateLoginedSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_UpdateLoginedSign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string strVersion = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strversion());
  }

  // uint32 uiId = 1;
  if (this->_internal_uiid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uiid());
  }

  if (cached_has_bits & 0x00000006u) {
    // optional uint32 uiDay = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uiday());
    }

    // optional int64 llTime = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_lltime());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_UpdateLoginedSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_UpdateLoginedSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_UpdateLoginedSign::GetClassData() const { return &_class_data_; }

void Msg_DBGS_UpdateLoginedSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_UpdateLoginedSign *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_UpdateLoginedSign &>(from));
}


void Msg_DBGS_UpdateLoginedSign::MergeFrom(const Msg_DBGS_UpdateLoginedSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_UpdateLoginedSign)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_strversion()) {
    _internal_set_strversion(from._internal_strversion());
  }
  if (from._internal_uiid() != 0) {
    _internal_set_uiid(from._internal_uiid());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      uiday_ = from.uiday_;
    }
    if (cached_has_bits & 0x00000004u) {
      lltime_ = from.lltime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_UpdateLoginedSign::CopyFrom(const Msg_DBGS_UpdateLoginedSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_UpdateLoginedSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_UpdateLoginedSign::IsInitialized() const {
  return true;
}

void Msg_DBGS_UpdateLoginedSign::InternalSwap(Msg_DBGS_UpdateLoginedSign* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strversion_, lhs_arena,
      &other->strversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_DBGS_UpdateLoginedSign, lltime_)
      + sizeof(Msg_DBGS_UpdateLoginedSign::lltime_)
      - PROTOBUF_FIELD_OFFSET(Msg_DBGS_UpdateLoginedSign, uiid_)>(
          reinterpret_cast<char*>(&uiid_),
          reinterpret_cast<char*>(&other->uiid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_UpdateLoginedSign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[25]);
}

// ===================================================================

class Msg_DBGS_UpdateMonthSign::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_DBGS_UpdateMonthSign>()._has_bits_);
  static void set_has_llsigntime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Msg_DBGS_UpdateMonthSign::Msg_DBGS_UpdateMonthSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  osign_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_UpdateMonthSign)
}
Msg_DBGS_UpdateMonthSign::Msg_DBGS_UpdateMonthSign(const Msg_DBGS_UpdateMonthSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      osign_(from.osign_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  llsigntime_ = from.llsigntime_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_UpdateMonthSign)
}

inline void Msg_DBGS_UpdateMonthSign::SharedCtor() {
llsigntime_ = int64_t{0};
}

Msg_DBGS_UpdateMonthSign::~Msg_DBGS_UpdateMonthSign() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_UpdateMonthSign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_UpdateMonthSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_UpdateMonthSign::ArenaDtor(void* object) {
  Msg_DBGS_UpdateMonthSign* _this = reinterpret_cast< Msg_DBGS_UpdateMonthSign* >(object);
  (void)_this;
}
void Msg_DBGS_UpdateMonthSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_UpdateMonthSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_UpdateMonthSign::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_UpdateMonthSign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  osign_.Clear();
  llsigntime_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_UpdateMonthSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .XrPb.RoleMonthSign oSign = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_osign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 llSignTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_llsigntime(&has_bits);
          llsigntime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_UpdateMonthSign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_UpdateMonthSign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .XrPb.RoleMonthSign oSign = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_osign_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_osign(i), target, stream);
  }

  // optional int64 llSignTime = 2;
  if (_internal_has_llsigntime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_llsigntime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_UpdateMonthSign)
  return target;
}

size_t Msg_DBGS_UpdateMonthSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_UpdateMonthSign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XrPb.RoleMonthSign oSign = 1;
  total_size += 1UL * this->_internal_osign_size();
  for (const auto& msg : this->osign_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int64 llSignTime = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_llsigntime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_UpdateMonthSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_UpdateMonthSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_UpdateMonthSign::GetClassData() const { return &_class_data_; }

void Msg_DBGS_UpdateMonthSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_UpdateMonthSign *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_UpdateMonthSign &>(from));
}


void Msg_DBGS_UpdateMonthSign::MergeFrom(const Msg_DBGS_UpdateMonthSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_UpdateMonthSign)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  osign_.MergeFrom(from.osign_);
  if (from._internal_has_llsigntime()) {
    _internal_set_llsigntime(from._internal_llsigntime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_UpdateMonthSign::CopyFrom(const Msg_DBGS_UpdateMonthSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_UpdateMonthSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_UpdateMonthSign::IsInitialized() const {
  return true;
}

void Msg_DBGS_UpdateMonthSign::InternalSwap(Msg_DBGS_UpdateMonthSign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  osign_.InternalSwap(&other->osign_);
  swap(llsigntime_, other->llsigntime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_UpdateMonthSign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[26]);
}

// ===================================================================

class Msg_DBGS_ClearMonthSign::_Internal {
 public:
};

Msg_DBGS_ClearMonthSign::Msg_DBGS_ClearMonthSign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_DBGS_ClearMonthSign)
}
Msg_DBGS_ClearMonthSign::Msg_DBGS_ClearMonthSign(const Msg_DBGS_ClearMonthSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  llcurtime_ = from.llcurtime_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_DBGS_ClearMonthSign)
}

inline void Msg_DBGS_ClearMonthSign::SharedCtor() {
llcurtime_ = int64_t{0};
}

Msg_DBGS_ClearMonthSign::~Msg_DBGS_ClearMonthSign() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_DBGS_ClearMonthSign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_DBGS_ClearMonthSign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DBGS_ClearMonthSign::ArenaDtor(void* object) {
  Msg_DBGS_ClearMonthSign* _this = reinterpret_cast< Msg_DBGS_ClearMonthSign* >(object);
  (void)_this;
}
void Msg_DBGS_ClearMonthSign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_DBGS_ClearMonthSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_DBGS_ClearMonthSign::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_DBGS_ClearMonthSign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  llcurtime_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DBGS_ClearMonthSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 llCurTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          llcurtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DBGS_ClearMonthSign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_DBGS_ClearMonthSign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 llCurTime = 1;
  if (this->_internal_llcurtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_llcurtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_DBGS_ClearMonthSign)
  return target;
}

size_t Msg_DBGS_ClearMonthSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_DBGS_ClearMonthSign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 llCurTime = 1;
  if (this->_internal_llcurtime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_llcurtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DBGS_ClearMonthSign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_DBGS_ClearMonthSign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DBGS_ClearMonthSign::GetClassData() const { return &_class_data_; }

void Msg_DBGS_ClearMonthSign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_DBGS_ClearMonthSign *>(to)->MergeFrom(
      static_cast<const Msg_DBGS_ClearMonthSign &>(from));
}


void Msg_DBGS_ClearMonthSign::MergeFrom(const Msg_DBGS_ClearMonthSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_DBGS_ClearMonthSign)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_llcurtime() != 0) {
    _internal_set_llcurtime(from._internal_llcurtime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DBGS_ClearMonthSign::CopyFrom(const Msg_DBGS_ClearMonthSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_DBGS_ClearMonthSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DBGS_ClearMonthSign::IsInitialized() const {
  return true;
}

void Msg_DBGS_ClearMonthSign::InternalSwap(Msg_DBGS_ClearMonthSign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(llcurtime_, other->llcurtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DBGS_ClearMonthSign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgDBGS_2eproto_getter, &descriptor_table_server_2fMsgDBGS_2eproto_once,
      file_level_metadata_server_2fMsgDBGS_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XrPb::MsgSvrMod_DBGS* Arena::CreateMaybeMessage< ::XrPb::MsgSvrMod_DBGS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::MsgSvrMod_DBGS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_RoleInfoReq* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_RoleInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_RoleInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::RoleInfo* Arena::CreateMaybeMessage< ::XrPb::RoleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::RoleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::RoleItem* Arena::CreateMaybeMessage< ::XrPb::RoleItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::RoleItem >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::RoleDailyAward* Arena::CreateMaybeMessage< ::XrPb::RoleDailyAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::RoleDailyAward >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::RoleLoginedSign* Arena::CreateMaybeMessage< ::XrPb::RoleLoginedSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::RoleLoginedSign >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::RoleMonthSign* Arena::CreateMaybeMessage< ::XrPb::RoleMonthSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::RoleMonthSign >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::DBGS_RoleData* Arena::CreateMaybeMessage< ::XrPb::DBGS_RoleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::DBGS_RoleData >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_RoleInfoAck* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_RoleInfoAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_RoleInfoAck >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_CreateRoleReq* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_CreateRoleReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_CreateRoleReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_CreateRoleAck* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_CreateRoleAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_CreateRoleAck >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_UpdateRoleInfo* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_UpdateRoleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_UpdateRoleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_Player_Del* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_Player_Del >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_Player_Del >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_Player_In* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_Player_In >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_Player_In >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_AddRoleBackground* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_AddRoleBackground >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_AddRoleBackground >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_DeleteBackground* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_DeleteBackground >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_DeleteBackground >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_AddRolePortrait* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_AddRolePortrait >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_AddRolePortrait >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_DeletePortrait* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_DeletePortrait >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_DeletePortrait >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_AddRoleMessager* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_AddRoleMessager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_AddRoleMessager >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_DeleteMessager* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_DeleteMessager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_DeleteMessager >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_LoadBaseInfoReq* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_LoadBaseInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_LoadBaseInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_LoadBaseInfoAck* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_LoadBaseInfoAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_LoadBaseInfoAck >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_AddItemReq* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_AddItemReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_AddItemReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_UpdateItemReq* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_UpdateItemReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_UpdateItemReq >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_UpdateDailyAward* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_UpdateDailyAward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_UpdateDailyAward >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_UpdateLoginedSign* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_UpdateLoginedSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_UpdateLoginedSign >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_UpdateMonthSign* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_UpdateMonthSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_UpdateMonthSign >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_DBGS_ClearMonthSign* Arena::CreateMaybeMessage< ::XrPb::Msg_DBGS_ClearMonthSign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_DBGS_ClearMonthSign >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
