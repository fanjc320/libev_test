// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/MsgServerScene.proto

#include "server/MsgServerScene.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace XrPb {
constexpr MsgSvrMod_Scene::MsgSvrMod_Scene(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MsgSvrMod_SceneDefaultTypeInternal {
  constexpr MsgSvrMod_SceneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgSvrMod_SceneDefaultTypeInternal() {}
  union {
    MsgSvrMod_Scene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgSvrMod_SceneDefaultTypeInternal _MsgSvrMod_Scene_default_instance_;
constexpr RoomResState::RoomResState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roomstatus_(0)

  , scenesec_(0u)
  , roomareanid_(0u){}
struct RoomResStateDefaultTypeInternal {
  constexpr RoomResStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoomResStateDefaultTypeInternal() {}
  union {
    RoomResState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoomResStateDefaultTypeInternal _RoomResState_default_instance_;
constexpr Msg_SvrScene_Register_CS::Msg_SvrScene_Register_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , linkip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0u)
  , maxroomnum_(0u)
  , id_(0u)
  , serverarea_(0u)
  , maxplayernum_(0u)
  , curplayernum_(0u)
  , curroomnum_(0u){}
struct Msg_SvrScene_Register_CSDefaultTypeInternal {
  constexpr Msg_SvrScene_Register_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrScene_Register_CSDefaultTypeInternal() {}
  union {
    Msg_SvrScene_Register_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrScene_Register_CSDefaultTypeInternal _Msg_SvrScene_Register_CS_default_instance_;
constexpr Msg_SvrScene_Register_SC::Msg_SvrScene_Register_SC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serverid_(0u){}
struct Msg_SvrScene_Register_SCDefaultTypeInternal {
  constexpr Msg_SvrScene_Register_SCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrScene_Register_SCDefaultTypeInternal() {}
  union {
    Msg_SvrScene_Register_SC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrScene_Register_SCDefaultTypeInternal _Msg_SvrScene_Register_SC_default_instance_;
constexpr Msg_SvrScene_CreateRoom_CS::Msg_SvrScene_CreateRoom_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerdata_()
  , mapname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roomlogid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_version_(nullptr)
  , roomid_(int64_t{0})
  , type_(0)

  , mapid_(0u)
  , mapsec_(0u)
  , initareaid_(0u)
  , playernum_(0u){}
struct Msg_SvrScene_CreateRoom_CSDefaultTypeInternal {
  constexpr Msg_SvrScene_CreateRoom_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrScene_CreateRoom_CSDefaultTypeInternal() {}
  union {
    Msg_SvrScene_CreateRoom_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrScene_CreateRoom_CSDefaultTypeInternal _Msg_SvrScene_CreateRoom_CS_default_instance_;
constexpr PlayerConvID::PlayerConvID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(int64_t{0})
  , convid_(0u){}
struct PlayerConvIDDefaultTypeInternal {
  constexpr PlayerConvIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerConvIDDefaultTypeInternal() {}
  union {
    PlayerConvID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerConvIDDefaultTypeInternal _PlayerConvID_default_instance_;
constexpr Msg_SvrScene_CreateRoom_SC::Msg_SvrScene_CreateRoom_SC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerconv_()
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roomlogid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , oldlogid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , linkip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roomid_(int64_t{0})
  , port_(0u)
  , code_(0)

  , roomareanid_(0u)
  , udp_(false)
  , createms_(int64_t{0}){}
struct Msg_SvrScene_CreateRoom_SCDefaultTypeInternal {
  constexpr Msg_SvrScene_CreateRoom_SCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrScene_CreateRoom_SCDefaultTypeInternal() {}
  union {
    Msg_SvrScene_CreateRoom_SC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrScene_CreateRoom_SCDefaultTypeInternal _Msg_SvrScene_CreateRoom_SC_default_instance_;
constexpr Msg_SvrScene_heart_cs::Msg_SvrScene_heart_cs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Msg_SvrScene_heart_csDefaultTypeInternal {
  constexpr Msg_SvrScene_heart_csDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrScene_heart_csDefaultTypeInternal() {}
  union {
    Msg_SvrScene_heart_cs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrScene_heart_csDefaultTypeInternal _Msg_SvrScene_heart_cs_default_instance_;
constexpr Msg_SvrScene_RoomInfo_Submit::Msg_SvrScene_RoomInfo_Submit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roomlogid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roomid_(int64_t{0})
  , roomstatus_(0)

  , playernum_(0u){}
struct Msg_SvrScene_RoomInfo_SubmitDefaultTypeInternal {
  constexpr Msg_SvrScene_RoomInfo_SubmitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrScene_RoomInfo_SubmitDefaultTypeInternal() {}
  union {
    Msg_SvrScene_RoomInfo_Submit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrScene_RoomInfo_SubmitDefaultTypeInternal _Msg_SvrScene_RoomInfo_Submit_default_instance_;
constexpr Msg_SvrScene_ReportInfo_Submit::Msg_SvrScene_ReportInfo_Submit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roomnum_(0u)
  , playernum_(0u){}
struct Msg_SvrScene_ReportInfo_SubmitDefaultTypeInternal {
  constexpr Msg_SvrScene_ReportInfo_SubmitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrScene_ReportInfo_SubmitDefaultTypeInternal() {}
  union {
    Msg_SvrScene_ReportInfo_Submit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrScene_ReportInfo_SubmitDefaultTypeInternal _Msg_SvrScene_ReportInfo_Submit_default_instance_;
constexpr Msg_SvrScene_EnterRoom_CS::Msg_SvrScene_EnterRoom_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uiroleid_(int64_t{0})
  , uiroomid_(int64_t{0}){}
struct Msg_SvrScene_EnterRoom_CSDefaultTypeInternal {
  constexpr Msg_SvrScene_EnterRoom_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrScene_EnterRoom_CSDefaultTypeInternal() {}
  union {
    Msg_SvrScene_EnterRoom_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrScene_EnterRoom_CSDefaultTypeInternal _Msg_SvrScene_EnterRoom_CS_default_instance_;
constexpr Msg_SvrScene_EnterRoom_PUSH::Msg_SvrScene_EnterRoom_PUSH(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Msg_SvrScene_EnterRoom_PUSHDefaultTypeInternal {
  constexpr Msg_SvrScene_EnterRoom_PUSHDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrScene_EnterRoom_PUSHDefaultTypeInternal() {}
  union {
    Msg_SvrScene_EnterRoom_PUSH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrScene_EnterRoom_PUSHDefaultTypeInternal _Msg_SvrScene_EnterRoom_PUSH_default_instance_;
constexpr Msg_SvrScene_PlayerInfo_Submit::Msg_SvrScene_PlayerInfo_Submit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(int64_t{0})
  , roomid_(int64_t{0})
  , status_(0)
{}
struct Msg_SvrScene_PlayerInfo_SubmitDefaultTypeInternal {
  constexpr Msg_SvrScene_PlayerInfo_SubmitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrScene_PlayerInfo_SubmitDefaultTypeInternal() {}
  union {
    Msg_SvrScene_PlayerInfo_Submit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrScene_PlayerInfo_SubmitDefaultTypeInternal _Msg_SvrScene_PlayerInfo_Submit_default_instance_;
constexpr Msg_SvrScene_Verify_EnterRoom_CS::Msg_SvrScene_Verify_EnterRoom_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , mapname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uiroomid_(int64_t{0}){}
struct Msg_SvrScene_Verify_EnterRoom_CSDefaultTypeInternal {
  constexpr Msg_SvrScene_Verify_EnterRoom_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrScene_Verify_EnterRoom_CSDefaultTypeInternal() {}
  union {
    Msg_SvrScene_Verify_EnterRoom_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrScene_Verify_EnterRoom_CSDefaultTypeInternal _Msg_SvrScene_Verify_EnterRoom_CS_default_instance_;
constexpr Msg_SvrScene_Verify_OrderData_CS::Msg_SvrScene_Verify_OrderData_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uiroomid_(int64_t{0})
  , roomtime_(0u)
  , servertime_(0u){}
struct Msg_SvrScene_Verify_OrderData_CSDefaultTypeInternal {
  constexpr Msg_SvrScene_Verify_OrderData_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrScene_Verify_OrderData_CSDefaultTypeInternal() {}
  union {
    Msg_SvrScene_Verify_OrderData_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrScene_Verify_OrderData_CSDefaultTypeInternal _Msg_SvrScene_Verify_OrderData_CS_default_instance_;
constexpr Msg_SvrScene_Verify_LeaveRoom_CS::Msg_SvrScene_Verify_LeaveRoom_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uiroomid_(int64_t{0}){}
struct Msg_SvrScene_Verify_LeaveRoom_CSDefaultTypeInternal {
  constexpr Msg_SvrScene_Verify_LeaveRoom_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrScene_Verify_LeaveRoom_CSDefaultTypeInternal() {}
  union {
    Msg_SvrScene_Verify_LeaveRoom_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrScene_Verify_LeaveRoom_CSDefaultTypeInternal _Msg_SvrScene_Verify_LeaveRoom_CS_default_instance_;
constexpr Msg_SvrScene_Result_PUSH::Msg_SvrScene_Result_PUSH(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : osceneresult_()
  , roomlogid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roomstatus_(nullptr)
  , uiroomid_(int64_t{0}){}
struct Msg_SvrScene_Result_PUSHDefaultTypeInternal {
  constexpr Msg_SvrScene_Result_PUSHDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrScene_Result_PUSHDefaultTypeInternal() {}
  union {
    Msg_SvrScene_Result_PUSH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrScene_Result_PUSHDefaultTypeInternal _Msg_SvrScene_Result_PUSH_default_instance_;
constexpr Msg_SvrScene_RoomNum_Push::Msg_SvrScene_RoomNum_Push(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : maxroom_(0u)
  , roomsum_(0u){}
struct Msg_SvrScene_RoomNum_PushDefaultTypeInternal {
  constexpr Msg_SvrScene_RoomNum_PushDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SvrScene_RoomNum_PushDefaultTypeInternal() {}
  union {
    Msg_SvrScene_RoomNum_Push _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SvrScene_RoomNum_PushDefaultTypeInternal _Msg_SvrScene_RoomNum_Push_default_instance_;
}  // namespace XrPb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_2fMsgServerScene_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_server_2fMsgServerScene_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_2fMsgServerScene_2eproto = nullptr;

const uint32_t TableStruct_server_2fMsgServerScene_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::MsgSvrMod_Scene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoomResState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoomResState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::RoomResState, roomstatus_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoomResState, scenesec_),
  PROTOBUF_FIELD_OFFSET(::XrPb::RoomResState, roomareanid_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Register_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Register_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Register_CS, ip_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Register_CS, port_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Register_CS, maxroomnum_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Register_CS, id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Register_CS, serverarea_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Register_CS, maxplayernum_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Register_CS, curplayernum_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Register_CS, curroomnum_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Register_CS, linkip_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Register_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Register_SC, serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_CS, roomid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_CS, type_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_CS, mapname_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_CS, mapid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_CS, mapsec_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_CS, playerdata_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_CS, roomlogid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_CS, game_version_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_CS, initareaid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_CS, playernum_),
  PROTOBUF_FIELD_OFFSET(::XrPb::PlayerConvID, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::PlayerConvID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::PlayerConvID, playerid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::PlayerConvID, convid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_SC, roomid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_SC, ip_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_SC, port_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_SC, code_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_SC, roomlogid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_SC, oldlogid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_SC, roomareanid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_SC, playerconv_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_SC, udp_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_SC, createms_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_CreateRoom_SC, linkip_),
  ~0u,
  0,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  ~0u,
  4,
  5,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_heart_cs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_RoomInfo_Submit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_RoomInfo_Submit, roomid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_RoomInfo_Submit, roomstatus_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_RoomInfo_Submit, playernum_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_RoomInfo_Submit, roomlogid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_ReportInfo_Submit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_ReportInfo_Submit, roomnum_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_ReportInfo_Submit, playernum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_EnterRoom_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_EnterRoom_CS, uiroleid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_EnterRoom_CS, uiroomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_EnterRoom_PUSH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_PlayerInfo_Submit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_PlayerInfo_Submit, playerid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_PlayerInfo_Submit, roomid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_PlayerInfo_Submit, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Verify_EnterRoom_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Verify_EnterRoom_CS, uiroomid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Verify_EnterRoom_CS, mapname_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Verify_EnterRoom_CS, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Verify_OrderData_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Verify_OrderData_CS, uiroomid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Verify_OrderData_CS, roomtime_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Verify_OrderData_CS, servertime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Verify_LeaveRoom_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Verify_LeaveRoom_CS, uiroomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Result_PUSH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Result_PUSH, uiroomid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Result_PUSH, osceneresult_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Result_PUSH, roomstatus_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_Result_PUSH, roomlogid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_RoomNum_Push, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_RoomNum_Push, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_RoomNum_Push, maxroom_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_SvrScene_RoomNum_Push, roomsum_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::XrPb::MsgSvrMod_Scene)},
  { 6, 15, -1, sizeof(::XrPb::RoomResState)},
  { 18, 33, -1, sizeof(::XrPb::Msg_SvrScene_Register_CS)},
  { 42, -1, -1, sizeof(::XrPb::Msg_SvrScene_Register_SC)},
  { 49, -1, -1, sizeof(::XrPb::Msg_SvrScene_CreateRoom_CS)},
  { 65, 73, -1, sizeof(::XrPb::PlayerConvID)},
  { 75, 92, -1, sizeof(::XrPb::Msg_SvrScene_CreateRoom_SC)},
  { 103, -1, -1, sizeof(::XrPb::Msg_SvrScene_heart_cs)},
  { 109, -1, -1, sizeof(::XrPb::Msg_SvrScene_RoomInfo_Submit)},
  { 119, -1, -1, sizeof(::XrPb::Msg_SvrScene_ReportInfo_Submit)},
  { 127, -1, -1, sizeof(::XrPb::Msg_SvrScene_EnterRoom_CS)},
  { 135, -1, -1, sizeof(::XrPb::Msg_SvrScene_EnterRoom_PUSH)},
  { 141, -1, -1, sizeof(::XrPb::Msg_SvrScene_PlayerInfo_Submit)},
  { 150, -1, -1, sizeof(::XrPb::Msg_SvrScene_Verify_EnterRoom_CS)},
  { 159, -1, -1, sizeof(::XrPb::Msg_SvrScene_Verify_OrderData_CS)},
  { 168, -1, -1, sizeof(::XrPb::Msg_SvrScene_Verify_LeaveRoom_CS)},
  { 175, -1, -1, sizeof(::XrPb::Msg_SvrScene_Result_PUSH)},
  { 185, 193, -1, sizeof(::XrPb::Msg_SvrScene_RoomNum_Push)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_MsgSvrMod_Scene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_RoomResState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrScene_Register_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrScene_Register_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrScene_CreateRoom_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_PlayerConvID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrScene_CreateRoom_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrScene_heart_cs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrScene_RoomInfo_Submit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrScene_ReportInfo_Submit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrScene_EnterRoom_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrScene_EnterRoom_PUSH_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrScene_PlayerInfo_Submit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrScene_Verify_EnterRoom_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrScene_Verify_OrderData_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrScene_Verify_LeaveRoom_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrScene_Result_PUSH_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_SvrScene_RoomNum_Push_default_instance_),
};

const char descriptor_table_protodef_server_2fMsgServerScene_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033server/MsgServerScene.proto\022\004XrPb\032\023cli"
  "ent/Common.proto\"\273\004\n\017MsgSvrMod_Scene\"\247\004\n"
  "\005MsgId\022\025\n\021Msg_SvrScene_None\020\000\022\034\n\030Msg_Svr"
  "Scene_Register_CS\020\001\022\034\n\030Msg_SvrScene_Regi"
  "ster_SC\020\002\022\036\n\032Msg_SvrScene_CreateRoom_CS\020"
  "\003\022\036\n\032Msg_SvrScene_CreateRoom_SC\020\004\022\031\n\025Msg"
  "_SvrScene_heart_cs\020\005\022\031\n\025Msg_SvrScene_hea"
  "rt_sc\020\006\022 \n\034Msg_SvrScene_RoomInfo_Submit\020"
  "\007\022\"\n\036Msg_SvrScene_ReportInfo_Submit\020\010\022\034\n"
  "\030Msg_SvrScene_Result_PUSH\020\t\022\035\n\031Msg_SvrSc"
  "ene_RoomNum_Push\020\n\022 \n\034Msg_SvrScene_Playe"
  "rInfo_PUSH\020e\022\035\n\031Msg_SvrScene_EnterRoom_C"
  "S\020f\022\037\n\033Msg_SvrScene_EnterRoom_PUSH\020g\022$\n "
  "Msg_SvrScene_Verify_EnterRoom_CS\020i\022$\n Ms"
  "g_SvrScene_Verify_LeaveRoom_CS\020j\022$\n Msg_"
  "SvrScene_Verify_OrderData_CS\020k\"\202\001\n\014RoomR"
  "esState\022$\n\nroomStatus\030\001 \001(\0162\020.XrPb.RoomS"
  "tatus\022\025\n\010sceneSec\030\002 \001(\rH\000\210\001\001\022\030\n\013roomArea"
  "nId\030\003 \001(\rH\001\210\001\001B\013\n\t_sceneSecB\016\n\014_roomArea"
  "nId\"\310\001\n\030Msg_SvrScene_Register_CS\022\n\n\002ip\030\001"
  " \001(\t\022\014\n\004port\030\002 \001(\r\022\022\n\nmaxRoomNum\030\003 \001(\r\022\n"
  "\n\002id\030\004 \001(\r\022\022\n\nserverArea\030\005 \001(\r\022\024\n\014maxpla"
  "yernum\030\006 \001(\r\022\024\n\014curPlayerNum\030\007 \001(\r\022\022\n\ncu"
  "rRoomNum\030\010 \001(\r\022\023\n\006linkip\030\t \001(\tH\000\210\001\001B\t\n\007_"
  "linkip\",\n\030Msg_SvrScene_Register_SC\022\020\n\010se"
  "rverId\030\001 \001(\r\"\210\002\n\032Msg_SvrScene_CreateRoom"
  "_CS\022\016\n\006roomId\030\001 \001(\003\022\034\n\004type\030\002 \001(\0162\016.XrPb"
  ".RoomType\022\017\n\007mapName\030\003 \001(\t\022\r\n\005mapId\030\004 \001("
  "\r\022\016\n\006mapsec\030\005 \001(\r\022)\n\nplayerData\030\006 \003(\0132\025."
  "XrPb.ScenePlayerData\022\021\n\troomLogID\030\007 \001(\t\022"
  "\'\n\014game_version\030\010 \001(\0132\021.XrPb.GameVersion"
  "\022\022\n\ninitAreaID\030\t \001(\r\022\021\n\tplayerNum\030\n \001(\r\""
  "R\n\014PlayerConvID\022\025\n\010playerid\030\001 \001(\003H\000\210\001\001\022\023"
  "\n\006convid\030\002 \001(\rH\001\210\001\001B\013\n\t_playeridB\t\n\007_con"
  "vid\"\325\002\n\032Msg_SvrScene_CreateRoom_SC\022\016\n\006ro"
  "omId\030\001 \001(\003\022\017\n\002ip\030\002 \001(\tH\000\210\001\001\022\021\n\004port\030\003 \001("
  "\rH\001\210\001\001\022\036\n\004code\030\004 \001(\0162\020.XrPb.ResultCode\022\021"
  "\n\troomLogID\030\005 \001(\t\022\020\n\010oldlogID\030\006 \001(\t\022\030\n\013r"
  "oomareanid\030\007 \001(\rH\002\210\001\001\022&\n\nplayerconv\030\010 \003("
  "\0132\022.XrPb.PlayerConvID\022\020\n\003udp\030\t \001(\010H\003\210\001\001\022"
  "\025\n\010createms\030\n \001(\003H\004\210\001\001\022\023\n\006linkip\030\013 \001(\tH\005"
  "\210\001\001B\005\n\003_ipB\007\n\005_portB\016\n\014_roomareanidB\006\n\004_"
  "udpB\013\n\t_createmsB\t\n\007_linkip\"\027\n\025Msg_SvrSc"
  "ene_heart_cs\"z\n\034Msg_SvrScene_RoomInfo_Su"
  "bmit\022\016\n\006roomId\030\001 \001(\003\022$\n\nroomStatus\030\002 \001(\016"
  "2\020.XrPb.RoomStatus\022\021\n\tPlayerNum\030\003 \001(\r\022\021\n"
  "\troomLogID\030\004 \001(\t\"D\n\036Msg_SvrScene_ReportI"
  "nfo_Submit\022\017\n\007roomNum\030\001 \001(\r\022\021\n\tPlayerNum"
  "\030\002 \001(\r\"\?\n\031Msg_SvrScene_EnterRoom_CS\022\020\n\010u"
  "iRoleId\030\001 \001(\003\022\020\n\010uiRoomId\030\002 \001(\003\"\035\n\033Msg_S"
  "vrScene_EnterRoom_PUSH\"j\n\036Msg_SvrScene_P"
  "layerInfo_Submit\022\020\n\010playerId\030\001 \001(\003\022\016\n\006ro"
  "omId\030\002 \001(\003\022&\n\006Status\030\003 \001(\0162\026.XrPb.RoomPl"
  "ayerStatus\"m\n Msg_SvrScene_Verify_EnterR"
  "oom_CS\022\020\n\010uiRoomId\030\001 \001(\003\022\017\n\007mapName\030\002 \001("
  "\t\022&\n\007players\030\003 \003(\0132\025.XrPb.ScenePlayerDat"
  "a\"Z\n Msg_SvrScene_Verify_OrderData_CS\022\020\n"
  "\010uiRoomId\030\001 \001(\003\022\020\n\010roomTime\030\002 \001(\r\022\022\n\nser"
  "verTime\030\003 \001(\r\"4\n Msg_SvrScene_Verify_Lea"
  "veRoom_CS\022\020\n\010uiRoomId\030\001 \001(\003\"\232\001\n\030Msg_SvrS"
  "cene_Result_PUSH\022\020\n\010uiRoomId\030\001 \001(\003\0221\n\014oS"
  "ceneResult\030\002 \003(\0132\033.XrPb.SceneResultPlaye"
  "rData\022&\n\nroomStatus\030\003 \001(\0132\022.XrPb.RoomRes"
  "State\022\021\n\troomLogID\030\004 \001(\t\"_\n\031Msg_SvrScene"
  "_RoomNum_Push\022\024\n\007maxroom\030\001 \001(\rH\000\210\001\001\022\024\n\007r"
  "oomsum\030\002 \001(\rH\001\210\001\001B\n\n\010_maxroomB\n\n\010_roomsu"
  "m*\?\n\nRoomStatus\022\013\n\007RS_None\020\000\022\014\n\010RS_Start"
  "\020\001\022\n\n\006RS_Run\020\002\022\n\n\006RS_End\020\003*i\n\020RoomPlayer"
  "Status\022\014\n\010RPS_None\020\000\022\021\n\rRPS_Connected\020\001\022"
  "\017\n\013RPS_Loading\020\002\022\017\n\013RPS_Scening\020\003\022\022\n\016RPS"
  "_Disconnect\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_2fMsgServerScene_2eproto_deps[1] = {
  &::descriptor_table_client_2fCommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_2fMsgServerScene_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fMsgServerScene_2eproto = {
  false, false, 2821, descriptor_table_protodef_server_2fMsgServerScene_2eproto, "server/MsgServerScene.proto", 
  &descriptor_table_server_2fMsgServerScene_2eproto_once, descriptor_table_server_2fMsgServerScene_2eproto_deps, 1, 18,
  schemas, file_default_instances, TableStruct_server_2fMsgServerScene_2eproto::offsets,
  file_level_metadata_server_2fMsgServerScene_2eproto, file_level_enum_descriptors_server_2fMsgServerScene_2eproto, file_level_service_descriptors_server_2fMsgServerScene_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_server_2fMsgServerScene_2eproto_getter() {
  return &descriptor_table_server_2fMsgServerScene_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_server_2fMsgServerScene_2eproto(&descriptor_table_server_2fMsgServerScene_2eproto);
namespace XrPb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgSvrMod_Scene_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fMsgServerScene_2eproto);
  return file_level_enum_descriptors_server_2fMsgServerScene_2eproto[0];
}
bool MsgSvrMod_Scene_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 101:
    case 102:
    case 103:
    case 105:
    case 106:
    case 107:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_None;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_Register_CS;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_Register_SC;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_CreateRoom_CS;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_CreateRoom_SC;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_heart_cs;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_heart_sc;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_RoomInfo_Submit;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_ReportInfo_Submit;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_Result_PUSH;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_RoomNum_Push;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_PlayerInfo_PUSH;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_EnterRoom_CS;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_EnterRoom_PUSH;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_Verify_EnterRoom_CS;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_Verify_LeaveRoom_CS;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::Msg_SvrScene_Verify_OrderData_CS;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::MsgId_MIN;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene::MsgId_MAX;
constexpr int MsgSvrMod_Scene::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fMsgServerScene_2eproto);
  return file_level_enum_descriptors_server_2fMsgServerScene_2eproto[1];
}
bool RoomStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomPlayerStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fMsgServerScene_2eproto);
  return file_level_enum_descriptors_server_2fMsgServerScene_2eproto[2];
}
bool RoomPlayerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MsgSvrMod_Scene::_Internal {
 public:
};

MsgSvrMod_Scene::MsgSvrMod_Scene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.MsgSvrMod_Scene)
}
MsgSvrMod_Scene::MsgSvrMod_Scene(const MsgSvrMod_Scene& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.MsgSvrMod_Scene)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgSvrMod_Scene::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgSvrMod_Scene::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgSvrMod_Scene::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[0]);
}

// ===================================================================

class RoomResState::_Internal {
 public:
  using HasBits = decltype(std::declval<RoomResState>()._has_bits_);
  static void set_has_scenesec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_roomareanid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RoomResState::RoomResState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.RoomResState)
}
RoomResState::RoomResState(const RoomResState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roomstatus_, &from.roomstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomareanid_) -
    reinterpret_cast<char*>(&roomstatus_)) + sizeof(roomareanid_));
  // @@protoc_insertion_point(copy_constructor:XrPb.RoomResState)
}

inline void RoomResState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roomstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roomareanid_) -
    reinterpret_cast<char*>(&roomstatus_)) + sizeof(roomareanid_));
}

RoomResState::~RoomResState() {
  // @@protoc_insertion_point(destructor:XrPb.RoomResState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoomResState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoomResState::ArenaDtor(void* object) {
  RoomResState* _this = reinterpret_cast< RoomResState* >(object);
  (void)_this;
}
void RoomResState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomResState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoomResState::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.RoomResState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomstatus_ = 0;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&scenesec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomareanid_) -
        reinterpret_cast<char*>(&scenesec_)) + sizeof(roomareanid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomResState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .XrPb.RoomStatus roomStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_roomstatus(static_cast<::XrPb::RoomStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sceneSec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_scenesec(&has_bits);
          scenesec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 roomAreanId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_roomareanid(&has_bits);
          roomareanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomResState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.RoomResState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .XrPb.RoomStatus roomStatus = 1;
  if (this->_internal_roomstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_roomstatus(), target);
  }

  // optional uint32 sceneSec = 2;
  if (_internal_has_scenesec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_scenesec(), target);
  }

  // optional uint32 roomAreanId = 3;
  if (_internal_has_roomareanid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_roomareanid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.RoomResState)
  return target;
}

size_t RoomResState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.RoomResState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .XrPb.RoomStatus roomStatus = 1;
  if (this->_internal_roomstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_roomstatus());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 sceneSec = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_scenesec());
    }

    // optional uint32 roomAreanId = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_roomareanid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomResState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoomResState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomResState::GetClassData() const { return &_class_data_; }

void RoomResState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoomResState *>(to)->MergeFrom(
      static_cast<const RoomResState &>(from));
}


void RoomResState::MergeFrom(const RoomResState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.RoomResState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roomstatus() != 0) {
    _internal_set_roomstatus(from._internal_roomstatus());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      scenesec_ = from.scenesec_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomareanid_ = from.roomareanid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomResState::CopyFrom(const RoomResState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.RoomResState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomResState::IsInitialized() const {
  return true;
}

void RoomResState::InternalSwap(RoomResState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomResState, roomareanid_)
      + sizeof(RoomResState::roomareanid_)
      - PROTOBUF_FIELD_OFFSET(RoomResState, roomstatus_)>(
          reinterpret_cast<char*>(&roomstatus_),
          reinterpret_cast<char*>(&other->roomstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomResState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[1]);
}

// ===================================================================

class Msg_SvrScene_Register_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_SvrScene_Register_CS>()._has_bits_);
  static void set_has_linkip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Msg_SvrScene_Register_CS::Msg_SvrScene_Register_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrScene_Register_CS)
}
Msg_SvrScene_Register_CS::Msg_SvrScene_Register_CS(const Msg_SvrScene_Register_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  linkip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    linkip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_linkip()) {
    linkip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_linkip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&curroomnum_) -
    reinterpret_cast<char*>(&port_)) + sizeof(curroomnum_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrScene_Register_CS)
}

inline void Msg_SvrScene_Register_CS::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
linkip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  linkip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&curroomnum_) -
    reinterpret_cast<char*>(&port_)) + sizeof(curroomnum_));
}

Msg_SvrScene_Register_CS::~Msg_SvrScene_Register_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SvrScene_Register_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SvrScene_Register_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  linkip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_SvrScene_Register_CS::ArenaDtor(void* object) {
  Msg_SvrScene_Register_CS* _this = reinterpret_cast< Msg_SvrScene_Register_CS* >(object);
  (void)_this;
}
void Msg_SvrScene_Register_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SvrScene_Register_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SvrScene_Register_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SvrScene_Register_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    linkip_.ClearNonDefaultToEmpty();
  }
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curroomnum_) -
      reinterpret_cast<char*>(&port_)) + sizeof(curroomnum_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SvrScene_Register_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_SvrScene_Register_CS.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxRoomNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          maxroomnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 serverArea = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          serverarea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxplayernum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          maxplayernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 curPlayerNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          curplayernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 curRoomNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          curroomnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string linkip = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_linkip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_SvrScene_Register_CS.linkip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SvrScene_Register_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SvrScene_Register_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_SvrScene_Register_CS.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // uint32 maxRoomNum = 3;
  if (this->_internal_maxroomnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxroomnum(), target);
  }

  // uint32 id = 4;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_id(), target);
  }

  // uint32 serverArea = 5;
  if (this->_internal_serverarea() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_serverarea(), target);
  }

  // uint32 maxplayernum = 6;
  if (this->_internal_maxplayernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_maxplayernum(), target);
  }

  // uint32 curPlayerNum = 7;
  if (this->_internal_curplayernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_curplayernum(), target);
  }

  // uint32 curRoomNum = 8;
  if (this->_internal_curroomnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_curroomnum(), target);
  }

  // optional string linkip = 9;
  if (_internal_has_linkip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_linkip().data(), static_cast<int>(this->_internal_linkip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_SvrScene_Register_CS.linkip");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_linkip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SvrScene_Register_CS)
  return target;
}

size_t Msg_SvrScene_Register_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SvrScene_Register_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // optional string linkip = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_linkip());
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // uint32 maxRoomNum = 3;
  if (this->_internal_maxroomnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_maxroomnum());
  }

  // uint32 id = 4;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 serverArea = 5;
  if (this->_internal_serverarea() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_serverarea());
  }

  // uint32 maxplayernum = 6;
  if (this->_internal_maxplayernum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_maxplayernum());
  }

  // uint32 curPlayerNum = 7;
  if (this->_internal_curplayernum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_curplayernum());
  }

  // uint32 curRoomNum = 8;
  if (this->_internal_curroomnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_curroomnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrScene_Register_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SvrScene_Register_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrScene_Register_CS::GetClassData() const { return &_class_data_; }

void Msg_SvrScene_Register_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SvrScene_Register_CS *>(to)->MergeFrom(
      static_cast<const Msg_SvrScene_Register_CS &>(from));
}


void Msg_SvrScene_Register_CS::MergeFrom(const Msg_SvrScene_Register_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SvrScene_Register_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_has_linkip()) {
    _internal_set_linkip(from._internal_linkip());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_maxroomnum() != 0) {
    _internal_set_maxroomnum(from._internal_maxroomnum());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_serverarea() != 0) {
    _internal_set_serverarea(from._internal_serverarea());
  }
  if (from._internal_maxplayernum() != 0) {
    _internal_set_maxplayernum(from._internal_maxplayernum());
  }
  if (from._internal_curplayernum() != 0) {
    _internal_set_curplayernum(from._internal_curplayernum());
  }
  if (from._internal_curroomnum() != 0) {
    _internal_set_curroomnum(from._internal_curroomnum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SvrScene_Register_CS::CopyFrom(const Msg_SvrScene_Register_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SvrScene_Register_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SvrScene_Register_CS::IsInitialized() const {
  return true;
}

void Msg_SvrScene_Register_CS::InternalSwap(Msg_SvrScene_Register_CS* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &linkip_, lhs_arena,
      &other->linkip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_SvrScene_Register_CS, curroomnum_)
      + sizeof(Msg_SvrScene_Register_CS::curroomnum_)
      - PROTOBUF_FIELD_OFFSET(Msg_SvrScene_Register_CS, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrScene_Register_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[2]);
}

// ===================================================================

class Msg_SvrScene_Register_SC::_Internal {
 public:
};

Msg_SvrScene_Register_SC::Msg_SvrScene_Register_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrScene_Register_SC)
}
Msg_SvrScene_Register_SC::Msg_SvrScene_Register_SC(const Msg_SvrScene_Register_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serverid_ = from.serverid_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrScene_Register_SC)
}

inline void Msg_SvrScene_Register_SC::SharedCtor() {
serverid_ = 0u;
}

Msg_SvrScene_Register_SC::~Msg_SvrScene_Register_SC() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SvrScene_Register_SC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SvrScene_Register_SC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_SvrScene_Register_SC::ArenaDtor(void* object) {
  Msg_SvrScene_Register_SC* _this = reinterpret_cast< Msg_SvrScene_Register_SC* >(object);
  (void)_this;
}
void Msg_SvrScene_Register_SC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SvrScene_Register_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SvrScene_Register_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SvrScene_Register_SC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serverid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SvrScene_Register_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 serverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SvrScene_Register_SC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SvrScene_Register_SC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SvrScene_Register_SC)
  return target;
}

size_t Msg_SvrScene_Register_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SvrScene_Register_SC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrScene_Register_SC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SvrScene_Register_SC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrScene_Register_SC::GetClassData() const { return &_class_data_; }

void Msg_SvrScene_Register_SC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SvrScene_Register_SC *>(to)->MergeFrom(
      static_cast<const Msg_SvrScene_Register_SC &>(from));
}


void Msg_SvrScene_Register_SC::MergeFrom(const Msg_SvrScene_Register_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SvrScene_Register_SC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_serverid() != 0) {
    _internal_set_serverid(from._internal_serverid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SvrScene_Register_SC::CopyFrom(const Msg_SvrScene_Register_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SvrScene_Register_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SvrScene_Register_SC::IsInitialized() const {
  return true;
}

void Msg_SvrScene_Register_SC::InternalSwap(Msg_SvrScene_Register_SC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(serverid_, other->serverid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrScene_Register_SC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[3]);
}

// ===================================================================

class Msg_SvrScene_CreateRoom_CS::_Internal {
 public:
  static const ::XrPb::GameVersion& game_version(const Msg_SvrScene_CreateRoom_CS* msg);
};

const ::XrPb::GameVersion&
Msg_SvrScene_CreateRoom_CS::_Internal::game_version(const Msg_SvrScene_CreateRoom_CS* msg) {
  return *msg->game_version_;
}
void Msg_SvrScene_CreateRoom_CS::clear_playerdata() {
  playerdata_.Clear();
}
void Msg_SvrScene_CreateRoom_CS::clear_game_version() {
  if (GetArenaForAllocation() == nullptr && game_version_ != nullptr) {
    delete game_version_;
  }
  game_version_ = nullptr;
}
Msg_SvrScene_CreateRoom_CS::Msg_SvrScene_CreateRoom_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  playerdata_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrScene_CreateRoom_CS)
}
Msg_SvrScene_CreateRoom_CS::Msg_SvrScene_CreateRoom_CS(const Msg_SvrScene_CreateRoom_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      playerdata_(from.playerdata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapname().empty()) {
    mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mapname(), 
      GetArenaForAllocation());
  }
  roomlogid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomlogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomlogid().empty()) {
    roomlogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roomlogid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_game_version()) {
    game_version_ = new ::XrPb::GameVersion(*from.game_version_);
  } else {
    game_version_ = nullptr;
  }
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playernum_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(playernum_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrScene_CreateRoom_CS)
}

inline void Msg_SvrScene_CreateRoom_CS::SharedCtor() {
mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
roomlogid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomlogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playernum_) -
    reinterpret_cast<char*>(&game_version_)) + sizeof(playernum_));
}

Msg_SvrScene_CreateRoom_CS::~Msg_SvrScene_CreateRoom_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SvrScene_CreateRoom_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SvrScene_CreateRoom_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mapname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomlogid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete game_version_;
}

void Msg_SvrScene_CreateRoom_CS::ArenaDtor(void* object) {
  Msg_SvrScene_CreateRoom_CS* _this = reinterpret_cast< Msg_SvrScene_CreateRoom_CS* >(object);
  (void)_this;
}
void Msg_SvrScene_CreateRoom_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SvrScene_CreateRoom_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SvrScene_CreateRoom_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SvrScene_CreateRoom_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerdata_.Clear();
  mapname_.ClearToEmpty();
  roomlogid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && game_version_ != nullptr) {
    delete game_version_;
  }
  game_version_ = nullptr;
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playernum_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(playernum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SvrScene_CreateRoom_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.RoomType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::XrPb::RoomType>(val));
        } else
          goto handle_unusual;
        continue;
      // string mapName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mapname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_SvrScene_CreateRoom_CS.mapName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mapId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mapsec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          mapsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .XrPb.ScenePlayerData playerData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string roomLogID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_roomlogid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_SvrScene_CreateRoom_CS.roomLogID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.GameVersion game_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 initAreaID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          initareaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 playerNum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          playernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SvrScene_CreateRoom_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SvrScene_CreateRoom_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roomid(), target);
  }

  // .XrPb.RoomType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string mapName = 3;
  if (!this->_internal_mapname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapname().data(), static_cast<int>(this->_internal_mapname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_SvrScene_CreateRoom_CS.mapName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mapname(), target);
  }

  // uint32 mapId = 4;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mapid(), target);
  }

  // uint32 mapsec = 5;
  if (this->_internal_mapsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_mapsec(), target);
  }

  // repeated .XrPb.ScenePlayerData playerData = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playerdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_playerdata(i), target, stream);
  }

  // string roomLogID = 7;
  if (!this->_internal_roomlogid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomlogid().data(), static_cast<int>(this->_internal_roomlogid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_SvrScene_CreateRoom_CS.roomLogID");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_roomlogid(), target);
  }

  // .XrPb.GameVersion game_version = 8;
  if (this->_internal_has_game_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::game_version(this), target, stream);
  }

  // uint32 initAreaID = 9;
  if (this->_internal_initareaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_initareaid(), target);
  }

  // uint32 playerNum = 10;
  if (this->_internal_playernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_playernum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SvrScene_CreateRoom_CS)
  return target;
}

size_t Msg_SvrScene_CreateRoom_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SvrScene_CreateRoom_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XrPb.ScenePlayerData playerData = 6;
  total_size += 1UL * this->_internal_playerdata_size();
  for (const auto& msg : this->playerdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string mapName = 3;
  if (!this->_internal_mapname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapname());
  }

  // string roomLogID = 7;
  if (!this->_internal_roomlogid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomlogid());
  }

  // .XrPb.GameVersion game_version = 8;
  if (this->_internal_has_game_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *game_version_);
  }

  // int64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_roomid());
  }

  // .XrPb.RoomType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 mapId = 4;
  if (this->_internal_mapid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
  }

  // uint32 mapsec = 5;
  if (this->_internal_mapsec() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mapsec());
  }

  // uint32 initAreaID = 9;
  if (this->_internal_initareaid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_initareaid());
  }

  // uint32 playerNum = 10;
  if (this->_internal_playernum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playernum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrScene_CreateRoom_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SvrScene_CreateRoom_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrScene_CreateRoom_CS::GetClassData() const { return &_class_data_; }

void Msg_SvrScene_CreateRoom_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SvrScene_CreateRoom_CS *>(to)->MergeFrom(
      static_cast<const Msg_SvrScene_CreateRoom_CS &>(from));
}


void Msg_SvrScene_CreateRoom_CS::MergeFrom(const Msg_SvrScene_CreateRoom_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SvrScene_CreateRoom_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  playerdata_.MergeFrom(from.playerdata_);
  if (!from._internal_mapname().empty()) {
    _internal_set_mapname(from._internal_mapname());
  }
  if (!from._internal_roomlogid().empty()) {
    _internal_set_roomlogid(from._internal_roomlogid());
  }
  if (from._internal_has_game_version()) {
    _internal_mutable_game_version()->::XrPb::GameVersion::MergeFrom(from._internal_game_version());
  }
  if (from._internal_roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_mapid() != 0) {
    _internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_mapsec() != 0) {
    _internal_set_mapsec(from._internal_mapsec());
  }
  if (from._internal_initareaid() != 0) {
    _internal_set_initareaid(from._internal_initareaid());
  }
  if (from._internal_playernum() != 0) {
    _internal_set_playernum(from._internal_playernum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SvrScene_CreateRoom_CS::CopyFrom(const Msg_SvrScene_CreateRoom_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SvrScene_CreateRoom_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SvrScene_CreateRoom_CS::IsInitialized() const {
  return true;
}

void Msg_SvrScene_CreateRoom_CS::InternalSwap(Msg_SvrScene_CreateRoom_CS* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  playerdata_.InternalSwap(&other->playerdata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mapname_, lhs_arena,
      &other->mapname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roomlogid_, lhs_arena,
      &other->roomlogid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_SvrScene_CreateRoom_CS, playernum_)
      + sizeof(Msg_SvrScene_CreateRoom_CS::playernum_)
      - PROTOBUF_FIELD_OFFSET(Msg_SvrScene_CreateRoom_CS, game_version_)>(
          reinterpret_cast<char*>(&game_version_),
          reinterpret_cast<char*>(&other->game_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrScene_CreateRoom_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[4]);
}

// ===================================================================

class PlayerConvID::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerConvID>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_convid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PlayerConvID::PlayerConvID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.PlayerConvID)
}
PlayerConvID::PlayerConvID(const PlayerConvID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&convid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(convid_));
  // @@protoc_insertion_point(copy_constructor:XrPb.PlayerConvID)
}

inline void PlayerConvID::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&convid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(convid_));
}

PlayerConvID::~PlayerConvID() {
  // @@protoc_insertion_point(destructor:XrPb.PlayerConvID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlayerConvID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerConvID::ArenaDtor(void* object) {
  PlayerConvID* _this = reinterpret_cast< PlayerConvID* >(object);
  (void)_this;
}
void PlayerConvID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerConvID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerConvID::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.PlayerConvID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&convid_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(convid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerConvID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 playerid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 convid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_convid(&has_bits);
          convid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerConvID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.PlayerConvID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 playerid = 1;
  if (_internal_has_playerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_playerid(), target);
  }

  // optional uint32 convid = 2;
  if (_internal_has_convid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_convid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.PlayerConvID)
  return target;
}

size_t PlayerConvID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.PlayerConvID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 playerid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
    }

    // optional uint32 convid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_convid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerConvID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlayerConvID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerConvID::GetClassData() const { return &_class_data_; }

void PlayerConvID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlayerConvID *>(to)->MergeFrom(
      static_cast<const PlayerConvID &>(from));
}


void PlayerConvID::MergeFrom(const PlayerConvID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.PlayerConvID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      convid_ = from.convid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerConvID::CopyFrom(const PlayerConvID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.PlayerConvID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerConvID::IsInitialized() const {
  return true;
}

void PlayerConvID::InternalSwap(PlayerConvID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerConvID, convid_)
      + sizeof(PlayerConvID::convid_)
      - PROTOBUF_FIELD_OFFSET(PlayerConvID, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerConvID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[5]);
}

// ===================================================================

class Msg_SvrScene_CreateRoom_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_SvrScene_CreateRoom_SC>()._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_roomareanid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_udp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_createms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_linkip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Msg_SvrScene_CreateRoom_SC::Msg_SvrScene_CreateRoom_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  playerconv_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrScene_CreateRoom_SC)
}
Msg_SvrScene_CreateRoom_SC::Msg_SvrScene_CreateRoom_SC(const Msg_SvrScene_CreateRoom_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      playerconv_(from.playerconv_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  roomlogid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomlogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomlogid().empty()) {
    roomlogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roomlogid(), 
      GetArenaForAllocation());
  }
  oldlogid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    oldlogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oldlogid().empty()) {
    oldlogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_oldlogid(), 
      GetArenaForAllocation());
  }
  linkip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    linkip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_linkip()) {
    linkip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_linkip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&createms_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(createms_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrScene_CreateRoom_SC)
}

inline void Msg_SvrScene_CreateRoom_SC::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
roomlogid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomlogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
oldlogid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  oldlogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
linkip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  linkip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roomid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&createms_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(createms_));
}

Msg_SvrScene_CreateRoom_SC::~Msg_SvrScene_CreateRoom_SC() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SvrScene_CreateRoom_SC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SvrScene_CreateRoom_SC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomlogid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oldlogid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  linkip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_SvrScene_CreateRoom_SC::ArenaDtor(void* object) {
  Msg_SvrScene_CreateRoom_SC* _this = reinterpret_cast< Msg_SvrScene_CreateRoom_SC* >(object);
  (void)_this;
}
void Msg_SvrScene_CreateRoom_SC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SvrScene_CreateRoom_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SvrScene_CreateRoom_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SvrScene_CreateRoom_SC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerconv_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_.ClearNonDefaultToEmpty();
  }
  roomlogid_.ClearToEmpty();
  oldlogid_.ClearToEmpty();
  if (cached_has_bits & 0x00000002u) {
    linkip_.ClearNonDefaultToEmpty();
  }
  roomid_ = int64_t{0};
  port_ = 0u;
  code_ = 0;
  if (cached_has_bits & 0x00000038u) {
    ::memset(&roomareanid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&createms_) -
        reinterpret_cast<char*>(&roomareanid_)) + sizeof(createms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SvrScene_CreateRoom_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_SvrScene_CreateRoom_SC.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.ResultCode code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::XrPb::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string roomLogID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_roomlogid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_SvrScene_CreateRoom_SC.roomLogID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string oldlogID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_oldlogid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_SvrScene_CreateRoom_SC.oldlogID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 roomareanid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_roomareanid(&has_bits);
          roomareanid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .XrPb.PlayerConvID playerconv = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerconv(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool udp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_udp(&has_bits);
          udp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 createms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_createms(&has_bits);
          createms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string linkip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_linkip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_SvrScene_CreateRoom_SC.linkip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SvrScene_CreateRoom_SC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SvrScene_CreateRoom_SC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roomid(), target);
  }

  // optional string ip = 2;
  if (_internal_has_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_SvrScene_CreateRoom_SC.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // optional uint32 port = 3;
  if (_internal_has_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // .XrPb.ResultCode code = 4;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_code(), target);
  }

  // string roomLogID = 5;
  if (!this->_internal_roomlogid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomlogid().data(), static_cast<int>(this->_internal_roomlogid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_SvrScene_CreateRoom_SC.roomLogID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_roomlogid(), target);
  }

  // string oldlogID = 6;
  if (!this->_internal_oldlogid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oldlogid().data(), static_cast<int>(this->_internal_oldlogid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_SvrScene_CreateRoom_SC.oldlogID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_oldlogid(), target);
  }

  // optional uint32 roomareanid = 7;
  if (_internal_has_roomareanid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_roomareanid(), target);
  }

  // repeated .XrPb.PlayerConvID playerconv = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_playerconv_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_playerconv(i), target, stream);
  }

  // optional bool udp = 9;
  if (_internal_has_udp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_udp(), target);
  }

  // optional int64 createms = 10;
  if (_internal_has_createms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_createms(), target);
  }

  // optional string linkip = 11;
  if (_internal_has_linkip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_linkip().data(), static_cast<int>(this->_internal_linkip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_SvrScene_CreateRoom_SC.linkip");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_linkip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SvrScene_CreateRoom_SC)
  return target;
}

size_t Msg_SvrScene_CreateRoom_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SvrScene_CreateRoom_SC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XrPb.PlayerConvID playerconv = 8;
  total_size += 1UL * this->_internal_playerconv_size();
  for (const auto& msg : this->playerconv_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string ip = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string roomLogID = 5;
  if (!this->_internal_roomlogid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomlogid());
  }

  // string oldlogID = 6;
  if (!this->_internal_oldlogid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldlogid());
  }

  // optional string linkip = 11;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_linkip());
  }

  // int64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_roomid());
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // .XrPb.ResultCode code = 4;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (cached_has_bits & 0x00000038u) {
    // optional uint32 roomareanid = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_roomareanid());
    }

    // optional bool udp = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int64 createms = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_createms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrScene_CreateRoom_SC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SvrScene_CreateRoom_SC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrScene_CreateRoom_SC::GetClassData() const { return &_class_data_; }

void Msg_SvrScene_CreateRoom_SC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SvrScene_CreateRoom_SC *>(to)->MergeFrom(
      static_cast<const Msg_SvrScene_CreateRoom_SC &>(from));
}


void Msg_SvrScene_CreateRoom_SC::MergeFrom(const Msg_SvrScene_CreateRoom_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SvrScene_CreateRoom_SC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  playerconv_.MergeFrom(from.playerconv_);
  if (from._internal_has_ip()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from._internal_roomlogid().empty()) {
    _internal_set_roomlogid(from._internal_roomlogid());
  }
  if (!from._internal_oldlogid().empty()) {
    _internal_set_oldlogid(from._internal_oldlogid());
  }
  if (from._internal_has_linkip()) {
    _internal_set_linkip(from._internal_linkip());
  }
  if (from._internal_roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_has_port()) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000038u) {
    if (cached_has_bits & 0x00000008u) {
      roomareanid_ = from.roomareanid_;
    }
    if (cached_has_bits & 0x00000010u) {
      udp_ = from.udp_;
    }
    if (cached_has_bits & 0x00000020u) {
      createms_ = from.createms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SvrScene_CreateRoom_SC::CopyFrom(const Msg_SvrScene_CreateRoom_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SvrScene_CreateRoom_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SvrScene_CreateRoom_SC::IsInitialized() const {
  return true;
}

void Msg_SvrScene_CreateRoom_SC::InternalSwap(Msg_SvrScene_CreateRoom_SC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  playerconv_.InternalSwap(&other->playerconv_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roomlogid_, lhs_arena,
      &other->roomlogid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &oldlogid_, lhs_arena,
      &other->oldlogid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &linkip_, lhs_arena,
      &other->linkip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_SvrScene_CreateRoom_SC, createms_)
      + sizeof(Msg_SvrScene_CreateRoom_SC::createms_)
      - PROTOBUF_FIELD_OFFSET(Msg_SvrScene_CreateRoom_SC, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrScene_CreateRoom_SC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[6]);
}

// ===================================================================

class Msg_SvrScene_heart_cs::_Internal {
 public:
};

Msg_SvrScene_heart_cs::Msg_SvrScene_heart_cs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrScene_heart_cs)
}
Msg_SvrScene_heart_cs::Msg_SvrScene_heart_cs(const Msg_SvrScene_heart_cs& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrScene_heart_cs)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrScene_heart_cs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrScene_heart_cs::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrScene_heart_cs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[7]);
}

// ===================================================================

class Msg_SvrScene_RoomInfo_Submit::_Internal {
 public:
};

Msg_SvrScene_RoomInfo_Submit::Msg_SvrScene_RoomInfo_Submit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrScene_RoomInfo_Submit)
}
Msg_SvrScene_RoomInfo_Submit::Msg_SvrScene_RoomInfo_Submit(const Msg_SvrScene_RoomInfo_Submit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomlogid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomlogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomlogid().empty()) {
    roomlogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roomlogid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playernum_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(playernum_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrScene_RoomInfo_Submit)
}

inline void Msg_SvrScene_RoomInfo_Submit::SharedCtor() {
roomlogid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomlogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roomid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playernum_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(playernum_));
}

Msg_SvrScene_RoomInfo_Submit::~Msg_SvrScene_RoomInfo_Submit() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SvrScene_RoomInfo_Submit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SvrScene_RoomInfo_Submit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomlogid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_SvrScene_RoomInfo_Submit::ArenaDtor(void* object) {
  Msg_SvrScene_RoomInfo_Submit* _this = reinterpret_cast< Msg_SvrScene_RoomInfo_Submit* >(object);
  (void)_this;
}
void Msg_SvrScene_RoomInfo_Submit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SvrScene_RoomInfo_Submit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SvrScene_RoomInfo_Submit::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SvrScene_RoomInfo_Submit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomlogid_.ClearToEmpty();
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playernum_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(playernum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SvrScene_RoomInfo_Submit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.RoomStatus roomStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_roomstatus(static_cast<::XrPb::RoomStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 PlayerNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          playernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string roomLogID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_roomlogid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_SvrScene_RoomInfo_Submit.roomLogID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SvrScene_RoomInfo_Submit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SvrScene_RoomInfo_Submit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_roomid(), target);
  }

  // .XrPb.RoomStatus roomStatus = 2;
  if (this->_internal_roomstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_roomstatus(), target);
  }

  // uint32 PlayerNum = 3;
  if (this->_internal_playernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_playernum(), target);
  }

  // string roomLogID = 4;
  if (!this->_internal_roomlogid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomlogid().data(), static_cast<int>(this->_internal_roomlogid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_SvrScene_RoomInfo_Submit.roomLogID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_roomlogid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SvrScene_RoomInfo_Submit)
  return target;
}

size_t Msg_SvrScene_RoomInfo_Submit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SvrScene_RoomInfo_Submit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomLogID = 4;
  if (!this->_internal_roomlogid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomlogid());
  }

  // int64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_roomid());
  }

  // .XrPb.RoomStatus roomStatus = 2;
  if (this->_internal_roomstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_roomstatus());
  }

  // uint32 PlayerNum = 3;
  if (this->_internal_playernum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playernum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrScene_RoomInfo_Submit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SvrScene_RoomInfo_Submit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrScene_RoomInfo_Submit::GetClassData() const { return &_class_data_; }

void Msg_SvrScene_RoomInfo_Submit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SvrScene_RoomInfo_Submit *>(to)->MergeFrom(
      static_cast<const Msg_SvrScene_RoomInfo_Submit &>(from));
}


void Msg_SvrScene_RoomInfo_Submit::MergeFrom(const Msg_SvrScene_RoomInfo_Submit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SvrScene_RoomInfo_Submit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomlogid().empty()) {
    _internal_set_roomlogid(from._internal_roomlogid());
  }
  if (from._internal_roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_roomstatus() != 0) {
    _internal_set_roomstatus(from._internal_roomstatus());
  }
  if (from._internal_playernum() != 0) {
    _internal_set_playernum(from._internal_playernum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SvrScene_RoomInfo_Submit::CopyFrom(const Msg_SvrScene_RoomInfo_Submit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SvrScene_RoomInfo_Submit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SvrScene_RoomInfo_Submit::IsInitialized() const {
  return true;
}

void Msg_SvrScene_RoomInfo_Submit::InternalSwap(Msg_SvrScene_RoomInfo_Submit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roomlogid_, lhs_arena,
      &other->roomlogid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_SvrScene_RoomInfo_Submit, playernum_)
      + sizeof(Msg_SvrScene_RoomInfo_Submit::playernum_)
      - PROTOBUF_FIELD_OFFSET(Msg_SvrScene_RoomInfo_Submit, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrScene_RoomInfo_Submit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[8]);
}

// ===================================================================

class Msg_SvrScene_ReportInfo_Submit::_Internal {
 public:
};

Msg_SvrScene_ReportInfo_Submit::Msg_SvrScene_ReportInfo_Submit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrScene_ReportInfo_Submit)
}
Msg_SvrScene_ReportInfo_Submit::Msg_SvrScene_ReportInfo_Submit(const Msg_SvrScene_ReportInfo_Submit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roomnum_, &from.roomnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&playernum_) -
    reinterpret_cast<char*>(&roomnum_)) + sizeof(playernum_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrScene_ReportInfo_Submit)
}

inline void Msg_SvrScene_ReportInfo_Submit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roomnum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playernum_) -
    reinterpret_cast<char*>(&roomnum_)) + sizeof(playernum_));
}

Msg_SvrScene_ReportInfo_Submit::~Msg_SvrScene_ReportInfo_Submit() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SvrScene_ReportInfo_Submit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SvrScene_ReportInfo_Submit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_SvrScene_ReportInfo_Submit::ArenaDtor(void* object) {
  Msg_SvrScene_ReportInfo_Submit* _this = reinterpret_cast< Msg_SvrScene_ReportInfo_Submit* >(object);
  (void)_this;
}
void Msg_SvrScene_ReportInfo_Submit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SvrScene_ReportInfo_Submit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SvrScene_ReportInfo_Submit::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SvrScene_ReportInfo_Submit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playernum_) -
      reinterpret_cast<char*>(&roomnum_)) + sizeof(playernum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SvrScene_ReportInfo_Submit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 roomNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roomnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PlayerNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          playernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SvrScene_ReportInfo_Submit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SvrScene_ReportInfo_Submit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 roomNum = 1;
  if (this->_internal_roomnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_roomnum(), target);
  }

  // uint32 PlayerNum = 2;
  if (this->_internal_playernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playernum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SvrScene_ReportInfo_Submit)
  return target;
}

size_t Msg_SvrScene_ReportInfo_Submit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SvrScene_ReportInfo_Submit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 roomNum = 1;
  if (this->_internal_roomnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_roomnum());
  }

  // uint32 PlayerNum = 2;
  if (this->_internal_playernum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playernum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrScene_ReportInfo_Submit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SvrScene_ReportInfo_Submit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrScene_ReportInfo_Submit::GetClassData() const { return &_class_data_; }

void Msg_SvrScene_ReportInfo_Submit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SvrScene_ReportInfo_Submit *>(to)->MergeFrom(
      static_cast<const Msg_SvrScene_ReportInfo_Submit &>(from));
}


void Msg_SvrScene_ReportInfo_Submit::MergeFrom(const Msg_SvrScene_ReportInfo_Submit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SvrScene_ReportInfo_Submit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roomnum() != 0) {
    _internal_set_roomnum(from._internal_roomnum());
  }
  if (from._internal_playernum() != 0) {
    _internal_set_playernum(from._internal_playernum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SvrScene_ReportInfo_Submit::CopyFrom(const Msg_SvrScene_ReportInfo_Submit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SvrScene_ReportInfo_Submit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SvrScene_ReportInfo_Submit::IsInitialized() const {
  return true;
}

void Msg_SvrScene_ReportInfo_Submit::InternalSwap(Msg_SvrScene_ReportInfo_Submit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_SvrScene_ReportInfo_Submit, playernum_)
      + sizeof(Msg_SvrScene_ReportInfo_Submit::playernum_)
      - PROTOBUF_FIELD_OFFSET(Msg_SvrScene_ReportInfo_Submit, roomnum_)>(
          reinterpret_cast<char*>(&roomnum_),
          reinterpret_cast<char*>(&other->roomnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrScene_ReportInfo_Submit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[9]);
}

// ===================================================================

class Msg_SvrScene_EnterRoom_CS::_Internal {
 public:
};

Msg_SvrScene_EnterRoom_CS::Msg_SvrScene_EnterRoom_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrScene_EnterRoom_CS)
}
Msg_SvrScene_EnterRoom_CS::Msg_SvrScene_EnterRoom_CS(const Msg_SvrScene_EnterRoom_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uiroleid_, &from.uiroleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uiroomid_) -
    reinterpret_cast<char*>(&uiroleid_)) + sizeof(uiroomid_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrScene_EnterRoom_CS)
}

inline void Msg_SvrScene_EnterRoom_CS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiroleid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uiroomid_) -
    reinterpret_cast<char*>(&uiroleid_)) + sizeof(uiroomid_));
}

Msg_SvrScene_EnterRoom_CS::~Msg_SvrScene_EnterRoom_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SvrScene_EnterRoom_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SvrScene_EnterRoom_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_SvrScene_EnterRoom_CS::ArenaDtor(void* object) {
  Msg_SvrScene_EnterRoom_CS* _this = reinterpret_cast< Msg_SvrScene_EnterRoom_CS* >(object);
  (void)_this;
}
void Msg_SvrScene_EnterRoom_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SvrScene_EnterRoom_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SvrScene_EnterRoom_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SvrScene_EnterRoom_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uiroleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uiroomid_) -
      reinterpret_cast<char*>(&uiroleid_)) + sizeof(uiroomid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SvrScene_EnterRoom_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uiRoleId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 uiRoomId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uiroomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SvrScene_EnterRoom_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SvrScene_EnterRoom_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uiRoleId = 1;
  if (this->_internal_uiroleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uiroleid(), target);
  }

  // int64 uiRoomId = 2;
  if (this->_internal_uiroomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_uiroomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SvrScene_EnterRoom_CS)
  return target;
}

size_t Msg_SvrScene_EnterRoom_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SvrScene_EnterRoom_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 uiRoleId = 1;
  if (this->_internal_uiroleid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiroleid());
  }

  // int64 uiRoomId = 2;
  if (this->_internal_uiroomid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiroomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrScene_EnterRoom_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SvrScene_EnterRoom_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrScene_EnterRoom_CS::GetClassData() const { return &_class_data_; }

void Msg_SvrScene_EnterRoom_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SvrScene_EnterRoom_CS *>(to)->MergeFrom(
      static_cast<const Msg_SvrScene_EnterRoom_CS &>(from));
}


void Msg_SvrScene_EnterRoom_CS::MergeFrom(const Msg_SvrScene_EnterRoom_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SvrScene_EnterRoom_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uiroleid() != 0) {
    _internal_set_uiroleid(from._internal_uiroleid());
  }
  if (from._internal_uiroomid() != 0) {
    _internal_set_uiroomid(from._internal_uiroomid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SvrScene_EnterRoom_CS::CopyFrom(const Msg_SvrScene_EnterRoom_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SvrScene_EnterRoom_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SvrScene_EnterRoom_CS::IsInitialized() const {
  return true;
}

void Msg_SvrScene_EnterRoom_CS::InternalSwap(Msg_SvrScene_EnterRoom_CS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_SvrScene_EnterRoom_CS, uiroomid_)
      + sizeof(Msg_SvrScene_EnterRoom_CS::uiroomid_)
      - PROTOBUF_FIELD_OFFSET(Msg_SvrScene_EnterRoom_CS, uiroleid_)>(
          reinterpret_cast<char*>(&uiroleid_),
          reinterpret_cast<char*>(&other->uiroleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrScene_EnterRoom_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[10]);
}

// ===================================================================

class Msg_SvrScene_EnterRoom_PUSH::_Internal {
 public:
};

Msg_SvrScene_EnterRoom_PUSH::Msg_SvrScene_EnterRoom_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrScene_EnterRoom_PUSH)
}
Msg_SvrScene_EnterRoom_PUSH::Msg_SvrScene_EnterRoom_PUSH(const Msg_SvrScene_EnterRoom_PUSH& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrScene_EnterRoom_PUSH)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrScene_EnterRoom_PUSH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrScene_EnterRoom_PUSH::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrScene_EnterRoom_PUSH::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[11]);
}

// ===================================================================

class Msg_SvrScene_PlayerInfo_Submit::_Internal {
 public:
};

Msg_SvrScene_PlayerInfo_Submit::Msg_SvrScene_PlayerInfo_Submit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrScene_PlayerInfo_Submit)
}
Msg_SvrScene_PlayerInfo_Submit::Msg_SvrScene_PlayerInfo_Submit(const Msg_SvrScene_PlayerInfo_Submit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrScene_PlayerInfo_Submit)
}

inline void Msg_SvrScene_PlayerInfo_Submit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(status_));
}

Msg_SvrScene_PlayerInfo_Submit::~Msg_SvrScene_PlayerInfo_Submit() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SvrScene_PlayerInfo_Submit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SvrScene_PlayerInfo_Submit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_SvrScene_PlayerInfo_Submit::ArenaDtor(void* object) {
  Msg_SvrScene_PlayerInfo_Submit* _this = reinterpret_cast< Msg_SvrScene_PlayerInfo_Submit* >(object);
  (void)_this;
}
void Msg_SvrScene_PlayerInfo_Submit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SvrScene_PlayerInfo_Submit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SvrScene_PlayerInfo_Submit::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SvrScene_PlayerInfo_Submit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SvrScene_PlayerInfo_Submit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 roomId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .XrPb.RoomPlayerStatus Status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::XrPb::RoomPlayerStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SvrScene_PlayerInfo_Submit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SvrScene_PlayerInfo_Submit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_playerid(), target);
  }

  // int64 roomId = 2;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_roomid(), target);
  }

  // .XrPb.RoomPlayerStatus Status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SvrScene_PlayerInfo_Submit)
  return target;
}

size_t Msg_SvrScene_PlayerInfo_Submit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SvrScene_PlayerInfo_Submit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
  }

  // int64 roomId = 2;
  if (this->_internal_roomid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_roomid());
  }

  // .XrPb.RoomPlayerStatus Status = 3;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrScene_PlayerInfo_Submit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SvrScene_PlayerInfo_Submit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrScene_PlayerInfo_Submit::GetClassData() const { return &_class_data_; }

void Msg_SvrScene_PlayerInfo_Submit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SvrScene_PlayerInfo_Submit *>(to)->MergeFrom(
      static_cast<const Msg_SvrScene_PlayerInfo_Submit &>(from));
}


void Msg_SvrScene_PlayerInfo_Submit::MergeFrom(const Msg_SvrScene_PlayerInfo_Submit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SvrScene_PlayerInfo_Submit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SvrScene_PlayerInfo_Submit::CopyFrom(const Msg_SvrScene_PlayerInfo_Submit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SvrScene_PlayerInfo_Submit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SvrScene_PlayerInfo_Submit::IsInitialized() const {
  return true;
}

void Msg_SvrScene_PlayerInfo_Submit::InternalSwap(Msg_SvrScene_PlayerInfo_Submit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_SvrScene_PlayerInfo_Submit, status_)
      + sizeof(Msg_SvrScene_PlayerInfo_Submit::status_)
      - PROTOBUF_FIELD_OFFSET(Msg_SvrScene_PlayerInfo_Submit, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrScene_PlayerInfo_Submit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[12]);
}

// ===================================================================

class Msg_SvrScene_Verify_EnterRoom_CS::_Internal {
 public:
};

void Msg_SvrScene_Verify_EnterRoom_CS::clear_players() {
  players_.Clear();
}
Msg_SvrScene_Verify_EnterRoom_CS::Msg_SvrScene_Verify_EnterRoom_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  players_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrScene_Verify_EnterRoom_CS)
}
Msg_SvrScene_Verify_EnterRoom_CS::Msg_SvrScene_Verify_EnterRoom_CS(const Msg_SvrScene_Verify_EnterRoom_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapname().empty()) {
    mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mapname(), 
      GetArenaForAllocation());
  }
  uiroomid_ = from.uiroomid_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrScene_Verify_EnterRoom_CS)
}

inline void Msg_SvrScene_Verify_EnterRoom_CS::SharedCtor() {
mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
uiroomid_ = int64_t{0};
}

Msg_SvrScene_Verify_EnterRoom_CS::~Msg_SvrScene_Verify_EnterRoom_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SvrScene_Verify_EnterRoom_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SvrScene_Verify_EnterRoom_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mapname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_SvrScene_Verify_EnterRoom_CS::ArenaDtor(void* object) {
  Msg_SvrScene_Verify_EnterRoom_CS* _this = reinterpret_cast< Msg_SvrScene_Verify_EnterRoom_CS* >(object);
  (void)_this;
}
void Msg_SvrScene_Verify_EnterRoom_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SvrScene_Verify_EnterRoom_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SvrScene_Verify_EnterRoom_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SvrScene_Verify_EnterRoom_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  mapname_.ClearToEmpty();
  uiroomid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SvrScene_Verify_EnterRoom_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uiRoomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiroomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mapName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mapname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_SvrScene_Verify_EnterRoom_CS.mapName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .XrPb.ScenePlayerData players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SvrScene_Verify_EnterRoom_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SvrScene_Verify_EnterRoom_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uiRoomId = 1;
  if (this->_internal_uiroomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uiroomid(), target);
  }

  // string mapName = 2;
  if (!this->_internal_mapname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapname().data(), static_cast<int>(this->_internal_mapname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_SvrScene_Verify_EnterRoom_CS.mapName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mapname(), target);
  }

  // repeated .XrPb.ScenePlayerData players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SvrScene_Verify_EnterRoom_CS)
  return target;
}

size_t Msg_SvrScene_Verify_EnterRoom_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SvrScene_Verify_EnterRoom_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XrPb.ScenePlayerData players = 3;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string mapName = 2;
  if (!this->_internal_mapname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapname());
  }

  // int64 uiRoomId = 1;
  if (this->_internal_uiroomid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiroomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrScene_Verify_EnterRoom_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SvrScene_Verify_EnterRoom_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrScene_Verify_EnterRoom_CS::GetClassData() const { return &_class_data_; }

void Msg_SvrScene_Verify_EnterRoom_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SvrScene_Verify_EnterRoom_CS *>(to)->MergeFrom(
      static_cast<const Msg_SvrScene_Verify_EnterRoom_CS &>(from));
}


void Msg_SvrScene_Verify_EnterRoom_CS::MergeFrom(const Msg_SvrScene_Verify_EnterRoom_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SvrScene_Verify_EnterRoom_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (!from._internal_mapname().empty()) {
    _internal_set_mapname(from._internal_mapname());
  }
  if (from._internal_uiroomid() != 0) {
    _internal_set_uiroomid(from._internal_uiroomid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SvrScene_Verify_EnterRoom_CS::CopyFrom(const Msg_SvrScene_Verify_EnterRoom_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SvrScene_Verify_EnterRoom_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SvrScene_Verify_EnterRoom_CS::IsInitialized() const {
  return true;
}

void Msg_SvrScene_Verify_EnterRoom_CS::InternalSwap(Msg_SvrScene_Verify_EnterRoom_CS* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mapname_, lhs_arena,
      &other->mapname_, rhs_arena
  );
  swap(uiroomid_, other->uiroomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrScene_Verify_EnterRoom_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[13]);
}

// ===================================================================

class Msg_SvrScene_Verify_OrderData_CS::_Internal {
 public:
};

Msg_SvrScene_Verify_OrderData_CS::Msg_SvrScene_Verify_OrderData_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrScene_Verify_OrderData_CS)
}
Msg_SvrScene_Verify_OrderData_CS::Msg_SvrScene_Verify_OrderData_CS(const Msg_SvrScene_Verify_OrderData_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uiroomid_, &from.uiroomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&servertime_) -
    reinterpret_cast<char*>(&uiroomid_)) + sizeof(servertime_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrScene_Verify_OrderData_CS)
}

inline void Msg_SvrScene_Verify_OrderData_CS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiroomid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&servertime_) -
    reinterpret_cast<char*>(&uiroomid_)) + sizeof(servertime_));
}

Msg_SvrScene_Verify_OrderData_CS::~Msg_SvrScene_Verify_OrderData_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SvrScene_Verify_OrderData_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SvrScene_Verify_OrderData_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_SvrScene_Verify_OrderData_CS::ArenaDtor(void* object) {
  Msg_SvrScene_Verify_OrderData_CS* _this = reinterpret_cast< Msg_SvrScene_Verify_OrderData_CS* >(object);
  (void)_this;
}
void Msg_SvrScene_Verify_OrderData_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SvrScene_Verify_OrderData_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SvrScene_Verify_OrderData_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SvrScene_Verify_OrderData_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uiroomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servertime_) -
      reinterpret_cast<char*>(&uiroomid_)) + sizeof(servertime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SvrScene_Verify_OrderData_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uiRoomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiroomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 roomTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          roomtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 serverTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SvrScene_Verify_OrderData_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SvrScene_Verify_OrderData_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uiRoomId = 1;
  if (this->_internal_uiroomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uiroomid(), target);
  }

  // uint32 roomTime = 2;
  if (this->_internal_roomtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_roomtime(), target);
  }

  // uint32 serverTime = 3;
  if (this->_internal_servertime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_servertime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SvrScene_Verify_OrderData_CS)
  return target;
}

size_t Msg_SvrScene_Verify_OrderData_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SvrScene_Verify_OrderData_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 uiRoomId = 1;
  if (this->_internal_uiroomid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiroomid());
  }

  // uint32 roomTime = 2;
  if (this->_internal_roomtime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_roomtime());
  }

  // uint32 serverTime = 3;
  if (this->_internal_servertime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_servertime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrScene_Verify_OrderData_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SvrScene_Verify_OrderData_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrScene_Verify_OrderData_CS::GetClassData() const { return &_class_data_; }

void Msg_SvrScene_Verify_OrderData_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SvrScene_Verify_OrderData_CS *>(to)->MergeFrom(
      static_cast<const Msg_SvrScene_Verify_OrderData_CS &>(from));
}


void Msg_SvrScene_Verify_OrderData_CS::MergeFrom(const Msg_SvrScene_Verify_OrderData_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SvrScene_Verify_OrderData_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uiroomid() != 0) {
    _internal_set_uiroomid(from._internal_uiroomid());
  }
  if (from._internal_roomtime() != 0) {
    _internal_set_roomtime(from._internal_roomtime());
  }
  if (from._internal_servertime() != 0) {
    _internal_set_servertime(from._internal_servertime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SvrScene_Verify_OrderData_CS::CopyFrom(const Msg_SvrScene_Verify_OrderData_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SvrScene_Verify_OrderData_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SvrScene_Verify_OrderData_CS::IsInitialized() const {
  return true;
}

void Msg_SvrScene_Verify_OrderData_CS::InternalSwap(Msg_SvrScene_Verify_OrderData_CS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_SvrScene_Verify_OrderData_CS, servertime_)
      + sizeof(Msg_SvrScene_Verify_OrderData_CS::servertime_)
      - PROTOBUF_FIELD_OFFSET(Msg_SvrScene_Verify_OrderData_CS, uiroomid_)>(
          reinterpret_cast<char*>(&uiroomid_),
          reinterpret_cast<char*>(&other->uiroomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrScene_Verify_OrderData_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[14]);
}

// ===================================================================

class Msg_SvrScene_Verify_LeaveRoom_CS::_Internal {
 public:
};

Msg_SvrScene_Verify_LeaveRoom_CS::Msg_SvrScene_Verify_LeaveRoom_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrScene_Verify_LeaveRoom_CS)
}
Msg_SvrScene_Verify_LeaveRoom_CS::Msg_SvrScene_Verify_LeaveRoom_CS(const Msg_SvrScene_Verify_LeaveRoom_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uiroomid_ = from.uiroomid_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrScene_Verify_LeaveRoom_CS)
}

inline void Msg_SvrScene_Verify_LeaveRoom_CS::SharedCtor() {
uiroomid_ = int64_t{0};
}

Msg_SvrScene_Verify_LeaveRoom_CS::~Msg_SvrScene_Verify_LeaveRoom_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SvrScene_Verify_LeaveRoom_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SvrScene_Verify_LeaveRoom_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_SvrScene_Verify_LeaveRoom_CS::ArenaDtor(void* object) {
  Msg_SvrScene_Verify_LeaveRoom_CS* _this = reinterpret_cast< Msg_SvrScene_Verify_LeaveRoom_CS* >(object);
  (void)_this;
}
void Msg_SvrScene_Verify_LeaveRoom_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SvrScene_Verify_LeaveRoom_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SvrScene_Verify_LeaveRoom_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SvrScene_Verify_LeaveRoom_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uiroomid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SvrScene_Verify_LeaveRoom_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uiRoomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiroomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SvrScene_Verify_LeaveRoom_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SvrScene_Verify_LeaveRoom_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uiRoomId = 1;
  if (this->_internal_uiroomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uiroomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SvrScene_Verify_LeaveRoom_CS)
  return target;
}

size_t Msg_SvrScene_Verify_LeaveRoom_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SvrScene_Verify_LeaveRoom_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 uiRoomId = 1;
  if (this->_internal_uiroomid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiroomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrScene_Verify_LeaveRoom_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SvrScene_Verify_LeaveRoom_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrScene_Verify_LeaveRoom_CS::GetClassData() const { return &_class_data_; }

void Msg_SvrScene_Verify_LeaveRoom_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SvrScene_Verify_LeaveRoom_CS *>(to)->MergeFrom(
      static_cast<const Msg_SvrScene_Verify_LeaveRoom_CS &>(from));
}


void Msg_SvrScene_Verify_LeaveRoom_CS::MergeFrom(const Msg_SvrScene_Verify_LeaveRoom_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SvrScene_Verify_LeaveRoom_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uiroomid() != 0) {
    _internal_set_uiroomid(from._internal_uiroomid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SvrScene_Verify_LeaveRoom_CS::CopyFrom(const Msg_SvrScene_Verify_LeaveRoom_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SvrScene_Verify_LeaveRoom_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SvrScene_Verify_LeaveRoom_CS::IsInitialized() const {
  return true;
}

void Msg_SvrScene_Verify_LeaveRoom_CS::InternalSwap(Msg_SvrScene_Verify_LeaveRoom_CS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(uiroomid_, other->uiroomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrScene_Verify_LeaveRoom_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[15]);
}

// ===================================================================

class Msg_SvrScene_Result_PUSH::_Internal {
 public:
  static const ::XrPb::RoomResState& roomstatus(const Msg_SvrScene_Result_PUSH* msg);
};

const ::XrPb::RoomResState&
Msg_SvrScene_Result_PUSH::_Internal::roomstatus(const Msg_SvrScene_Result_PUSH* msg) {
  return *msg->roomstatus_;
}
void Msg_SvrScene_Result_PUSH::clear_osceneresult() {
  osceneresult_.Clear();
}
Msg_SvrScene_Result_PUSH::Msg_SvrScene_Result_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  osceneresult_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrScene_Result_PUSH)
}
Msg_SvrScene_Result_PUSH::Msg_SvrScene_Result_PUSH(const Msg_SvrScene_Result_PUSH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      osceneresult_(from.osceneresult_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomlogid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomlogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomlogid().empty()) {
    roomlogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_roomlogid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_roomstatus()) {
    roomstatus_ = new ::XrPb::RoomResState(*from.roomstatus_);
  } else {
    roomstatus_ = nullptr;
  }
  uiroomid_ = from.uiroomid_;
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrScene_Result_PUSH)
}

inline void Msg_SvrScene_Result_PUSH::SharedCtor() {
roomlogid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomlogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roomstatus_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uiroomid_) -
    reinterpret_cast<char*>(&roomstatus_)) + sizeof(uiroomid_));
}

Msg_SvrScene_Result_PUSH::~Msg_SvrScene_Result_PUSH() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SvrScene_Result_PUSH)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SvrScene_Result_PUSH::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomlogid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete roomstatus_;
}

void Msg_SvrScene_Result_PUSH::ArenaDtor(void* object) {
  Msg_SvrScene_Result_PUSH* _this = reinterpret_cast< Msg_SvrScene_Result_PUSH* >(object);
  (void)_this;
}
void Msg_SvrScene_Result_PUSH::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SvrScene_Result_PUSH::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SvrScene_Result_PUSH::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SvrScene_Result_PUSH)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  osceneresult_.Clear();
  roomlogid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && roomstatus_ != nullptr) {
    delete roomstatus_;
  }
  roomstatus_ = nullptr;
  uiroomid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SvrScene_Result_PUSH::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 uiRoomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uiroomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .XrPb.SceneResultPlayerData oSceneResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_osceneresult(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .XrPb.RoomResState roomStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_roomstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string roomLogID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_roomlogid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_SvrScene_Result_PUSH.roomLogID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SvrScene_Result_PUSH::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SvrScene_Result_PUSH)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uiRoomId = 1;
  if (this->_internal_uiroomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uiroomid(), target);
  }

  // repeated .XrPb.SceneResultPlayerData oSceneResult = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_osceneresult_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_osceneresult(i), target, stream);
  }

  // .XrPb.RoomResState roomStatus = 3;
  if (this->_internal_has_roomstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::roomstatus(this), target, stream);
  }

  // string roomLogID = 4;
  if (!this->_internal_roomlogid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomlogid().data(), static_cast<int>(this->_internal_roomlogid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_SvrScene_Result_PUSH.roomLogID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_roomlogid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SvrScene_Result_PUSH)
  return target;
}

size_t Msg_SvrScene_Result_PUSH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SvrScene_Result_PUSH)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .XrPb.SceneResultPlayerData oSceneResult = 2;
  total_size += 1UL * this->_internal_osceneresult_size();
  for (const auto& msg : this->osceneresult_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string roomLogID = 4;
  if (!this->_internal_roomlogid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomlogid());
  }

  // .XrPb.RoomResState roomStatus = 3;
  if (this->_internal_has_roomstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roomstatus_);
  }

  // int64 uiRoomId = 1;
  if (this->_internal_uiroomid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiroomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrScene_Result_PUSH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SvrScene_Result_PUSH::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrScene_Result_PUSH::GetClassData() const { return &_class_data_; }

void Msg_SvrScene_Result_PUSH::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SvrScene_Result_PUSH *>(to)->MergeFrom(
      static_cast<const Msg_SvrScene_Result_PUSH &>(from));
}


void Msg_SvrScene_Result_PUSH::MergeFrom(const Msg_SvrScene_Result_PUSH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SvrScene_Result_PUSH)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  osceneresult_.MergeFrom(from.osceneresult_);
  if (!from._internal_roomlogid().empty()) {
    _internal_set_roomlogid(from._internal_roomlogid());
  }
  if (from._internal_has_roomstatus()) {
    _internal_mutable_roomstatus()->::XrPb::RoomResState::MergeFrom(from._internal_roomstatus());
  }
  if (from._internal_uiroomid() != 0) {
    _internal_set_uiroomid(from._internal_uiroomid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SvrScene_Result_PUSH::CopyFrom(const Msg_SvrScene_Result_PUSH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SvrScene_Result_PUSH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SvrScene_Result_PUSH::IsInitialized() const {
  return true;
}

void Msg_SvrScene_Result_PUSH::InternalSwap(Msg_SvrScene_Result_PUSH* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  osceneresult_.InternalSwap(&other->osceneresult_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &roomlogid_, lhs_arena,
      &other->roomlogid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_SvrScene_Result_PUSH, uiroomid_)
      + sizeof(Msg_SvrScene_Result_PUSH::uiroomid_)
      - PROTOBUF_FIELD_OFFSET(Msg_SvrScene_Result_PUSH, roomstatus_)>(
          reinterpret_cast<char*>(&roomstatus_),
          reinterpret_cast<char*>(&other->roomstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrScene_Result_PUSH::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[16]);
}

// ===================================================================

class Msg_SvrScene_RoomNum_Push::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_SvrScene_RoomNum_Push>()._has_bits_);
  static void set_has_maxroom(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_roomsum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Msg_SvrScene_RoomNum_Push::Msg_SvrScene_RoomNum_Push(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_SvrScene_RoomNum_Push)
}
Msg_SvrScene_RoomNum_Push::Msg_SvrScene_RoomNum_Push(const Msg_SvrScene_RoomNum_Push& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&maxroom_, &from.maxroom_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomsum_) -
    reinterpret_cast<char*>(&maxroom_)) + sizeof(roomsum_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_SvrScene_RoomNum_Push)
}

inline void Msg_SvrScene_RoomNum_Push::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&maxroom_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roomsum_) -
    reinterpret_cast<char*>(&maxroom_)) + sizeof(roomsum_));
}

Msg_SvrScene_RoomNum_Push::~Msg_SvrScene_RoomNum_Push() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_SvrScene_RoomNum_Push)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SvrScene_RoomNum_Push::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_SvrScene_RoomNum_Push::ArenaDtor(void* object) {
  Msg_SvrScene_RoomNum_Push* _this = reinterpret_cast< Msg_SvrScene_RoomNum_Push* >(object);
  (void)_this;
}
void Msg_SvrScene_RoomNum_Push::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SvrScene_RoomNum_Push::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SvrScene_RoomNum_Push::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_SvrScene_RoomNum_Push)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&maxroom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roomsum_) -
        reinterpret_cast<char*>(&maxroom_)) + sizeof(roomsum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SvrScene_RoomNum_Push::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 maxroom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_maxroom(&has_bits);
          maxroom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 roomsum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_roomsum(&has_bits);
          roomsum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_SvrScene_RoomNum_Push::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_SvrScene_RoomNum_Push)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 maxroom = 1;
  if (_internal_has_maxroom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_maxroom(), target);
  }

  // optional uint32 roomsum = 2;
  if (_internal_has_roomsum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_roomsum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_SvrScene_RoomNum_Push)
  return target;
}

size_t Msg_SvrScene_RoomNum_Push::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_SvrScene_RoomNum_Push)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 maxroom = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_maxroom());
    }

    // optional uint32 roomsum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_roomsum());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SvrScene_RoomNum_Push::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SvrScene_RoomNum_Push::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SvrScene_RoomNum_Push::GetClassData() const { return &_class_data_; }

void Msg_SvrScene_RoomNum_Push::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_SvrScene_RoomNum_Push *>(to)->MergeFrom(
      static_cast<const Msg_SvrScene_RoomNum_Push &>(from));
}


void Msg_SvrScene_RoomNum_Push::MergeFrom(const Msg_SvrScene_RoomNum_Push& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_SvrScene_RoomNum_Push)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      maxroom_ = from.maxroom_;
    }
    if (cached_has_bits & 0x00000002u) {
      roomsum_ = from.roomsum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SvrScene_RoomNum_Push::CopyFrom(const Msg_SvrScene_RoomNum_Push& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_SvrScene_RoomNum_Push)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SvrScene_RoomNum_Push::IsInitialized() const {
  return true;
}

void Msg_SvrScene_RoomNum_Push::InternalSwap(Msg_SvrScene_RoomNum_Push* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_SvrScene_RoomNum_Push, roomsum_)
      + sizeof(Msg_SvrScene_RoomNum_Push::roomsum_)
      - PROTOBUF_FIELD_OFFSET(Msg_SvrScene_RoomNum_Push, maxroom_)>(
          reinterpret_cast<char*>(&maxroom_),
          reinterpret_cast<char*>(&other->maxroom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SvrScene_RoomNum_Push::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgServerScene_2eproto_getter, &descriptor_table_server_2fMsgServerScene_2eproto_once,
      file_level_metadata_server_2fMsgServerScene_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XrPb::MsgSvrMod_Scene* Arena::CreateMaybeMessage< ::XrPb::MsgSvrMod_Scene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::MsgSvrMod_Scene >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::RoomResState* Arena::CreateMaybeMessage< ::XrPb::RoomResState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::RoomResState >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrScene_Register_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrScene_Register_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrScene_Register_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrScene_Register_SC* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrScene_Register_SC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrScene_Register_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrScene_CreateRoom_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrScene_CreateRoom_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrScene_CreateRoom_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::PlayerConvID* Arena::CreateMaybeMessage< ::XrPb::PlayerConvID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::PlayerConvID >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrScene_CreateRoom_SC* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrScene_CreateRoom_SC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrScene_CreateRoom_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrScene_heart_cs* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrScene_heart_cs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrScene_heart_cs >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrScene_RoomInfo_Submit* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrScene_RoomInfo_Submit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrScene_RoomInfo_Submit >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrScene_ReportInfo_Submit* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrScene_ReportInfo_Submit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrScene_ReportInfo_Submit >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrScene_EnterRoom_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrScene_EnterRoom_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrScene_EnterRoom_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrScene_EnterRoom_PUSH* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrScene_EnterRoom_PUSH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrScene_EnterRoom_PUSH >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrScene_PlayerInfo_Submit* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrScene_PlayerInfo_Submit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrScene_PlayerInfo_Submit >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrScene_Verify_EnterRoom_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrScene_Verify_EnterRoom_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrScene_Verify_EnterRoom_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrScene_Verify_OrderData_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrScene_Verify_OrderData_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrScene_Verify_OrderData_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrScene_Verify_LeaveRoom_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrScene_Verify_LeaveRoom_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrScene_Verify_LeaveRoom_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrScene_Result_PUSH* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrScene_Result_PUSH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrScene_Result_PUSH >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_SvrScene_RoomNum_Push* Arena::CreateMaybeMessage< ::XrPb::Msg_SvrScene_RoomNum_Push >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_SvrScene_RoomNum_Push >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
