// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/MsgGsWs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_2fMsgGsWs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_2fMsgGsWs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client/Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_2fMsgGsWs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_2fMsgGsWs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fMsgGsWs_2eproto;
namespace XrPb {
class GsWs_PlayerInfo;
struct GsWs_PlayerInfoDefaultTypeInternal;
extern GsWs_PlayerInfoDefaultTypeInternal _GsWs_PlayerInfo_default_instance_;
class MsgSvrMod_GsWs;
struct MsgSvrMod_GsWsDefaultTypeInternal;
extern MsgSvrMod_GsWsDefaultTypeInternal _MsgSvrMod_GsWs_default_instance_;
class Msg_GsWs_AppResVer_Push;
struct Msg_GsWs_AppResVer_PushDefaultTypeInternal;
extern Msg_GsWs_AppResVer_PushDefaultTypeInternal _Msg_GsWs_AppResVer_Push_default_instance_;
class Msg_GsWs_ConfirmEnter_CS;
struct Msg_GsWs_ConfirmEnter_CSDefaultTypeInternal;
extern Msg_GsWs_ConfirmEnter_CSDefaultTypeInternal _Msg_GsWs_ConfirmEnter_CS_default_instance_;
class Msg_GsWs_ExitRoom_PUSH;
struct Msg_GsWs_ExitRoom_PUSHDefaultTypeInternal;
extern Msg_GsWs_ExitRoom_PUSHDefaultTypeInternal _Msg_GsWs_ExitRoom_PUSH_default_instance_;
class Msg_GsWs_GetMatchInfo_CS;
struct Msg_GsWs_GetMatchInfo_CSDefaultTypeInternal;
extern Msg_GsWs_GetMatchInfo_CSDefaultTypeInternal _Msg_GsWs_GetMatchInfo_CS_default_instance_;
class Msg_GsWs_GetRoomInfo_CS;
struct Msg_GsWs_GetRoomInfo_CSDefaultTypeInternal;
extern Msg_GsWs_GetRoomInfo_CSDefaultTypeInternal _Msg_GsWs_GetRoomInfo_CS_default_instance_;
class Msg_GsWs_PlayerOffline_CS;
struct Msg_GsWs_PlayerOffline_CSDefaultTypeInternal;
extern Msg_GsWs_PlayerOffline_CSDefaultTypeInternal _Msg_GsWs_PlayerOffline_CS_default_instance_;
class Msg_GsWs_PlayerOnline_CS;
struct Msg_GsWs_PlayerOnline_CSDefaultTypeInternal;
extern Msg_GsWs_PlayerOnline_CSDefaultTypeInternal _Msg_GsWs_PlayerOnline_CS_default_instance_;
class Msg_GsWs_SetCustomRoomMap_CS;
struct Msg_GsWs_SetCustomRoomMap_CSDefaultTypeInternal;
extern Msg_GsWs_SetCustomRoomMap_CSDefaultTypeInternal _Msg_GsWs_SetCustomRoomMap_CS_default_instance_;
class Msg_GsWs_SetCustomRoomType_CS;
struct Msg_GsWs_SetCustomRoomType_CSDefaultTypeInternal;
extern Msg_GsWs_SetCustomRoomType_CSDefaultTypeInternal _Msg_GsWs_SetCustomRoomType_CS_default_instance_;
class Msg_GsWs_SetRoomConfig_CS;
struct Msg_GsWs_SetRoomConfig_CSDefaultTypeInternal;
extern Msg_GsWs_SetRoomConfig_CSDefaultTypeInternal _Msg_GsWs_SetRoomConfig_CS_default_instance_;
class Msg_GsWs_UpdatePlayerStatus;
struct Msg_GsWs_UpdatePlayerStatusDefaultTypeInternal;
extern Msg_GsWs_UpdatePlayerStatusDefaultTypeInternal _Msg_GsWs_UpdatePlayerStatus_default_instance_;
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> ::XrPb::GsWs_PlayerInfo* Arena::CreateMaybeMessage<::XrPb::GsWs_PlayerInfo>(Arena*);
template<> ::XrPb::MsgSvrMod_GsWs* Arena::CreateMaybeMessage<::XrPb::MsgSvrMod_GsWs>(Arena*);
template<> ::XrPb::Msg_GsWs_AppResVer_Push* Arena::CreateMaybeMessage<::XrPb::Msg_GsWs_AppResVer_Push>(Arena*);
template<> ::XrPb::Msg_GsWs_ConfirmEnter_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GsWs_ConfirmEnter_CS>(Arena*);
template<> ::XrPb::Msg_GsWs_ExitRoom_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_GsWs_ExitRoom_PUSH>(Arena*);
template<> ::XrPb::Msg_GsWs_GetMatchInfo_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GsWs_GetMatchInfo_CS>(Arena*);
template<> ::XrPb::Msg_GsWs_GetRoomInfo_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GsWs_GetRoomInfo_CS>(Arena*);
template<> ::XrPb::Msg_GsWs_PlayerOffline_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GsWs_PlayerOffline_CS>(Arena*);
template<> ::XrPb::Msg_GsWs_PlayerOnline_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GsWs_PlayerOnline_CS>(Arena*);
template<> ::XrPb::Msg_GsWs_SetCustomRoomMap_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GsWs_SetCustomRoomMap_CS>(Arena*);
template<> ::XrPb::Msg_GsWs_SetCustomRoomType_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GsWs_SetCustomRoomType_CS>(Arena*);
template<> ::XrPb::Msg_GsWs_SetRoomConfig_CS* Arena::CreateMaybeMessage<::XrPb::Msg_GsWs_SetRoomConfig_CS>(Arena*);
template<> ::XrPb::Msg_GsWs_UpdatePlayerStatus* Arena::CreateMaybeMessage<::XrPb::Msg_GsWs_UpdatePlayerStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XrPb {

enum MsgSvrMod_GsWs_MsgId : int {
  MsgSvrMod_GsWs_MsgId_Msg_GsWs_None = 0,
  MsgSvrMod_GsWs_MsgId_Msg_GsWs_ConfirmEnter_CS = 1,
  MsgSvrMod_GsWs_MsgId_Msg_GsWs_GetRoomInfo_CS = 2,
  MsgSvrMod_GsWs_MsgId_Msg_GsWs_ExitRoom_PUSH = 3,
  MsgSvrMod_GsWs_MsgId_Msg_GsWs_UpdatePlayerStatus = 4,
  MsgSvrMod_GsWs_MsgId_Msg_GsWs_AppResVer_Push = 5,
  MsgSvrMod_GsWs_MsgId_Msg_GsWs_PlayerOnline_CS = 6,
  MsgSvrMod_GsWs_MsgId_Msg_GsWs_PlayerOffline_CS = 7,
  MsgSvrMod_GsWs_MsgId_Msg_GsWs_SetRoomConfig_CS = 8,
  MsgSvrMod_GsWs_MsgId_Msg_GsWs_SetCustomRoomType_CS = 9,
  MsgSvrMod_GsWs_MsgId_Msg_GsWs_SetCustomRoomMap_CS = 10,
  MsgSvrMod_GsWs_MsgId_MsgSvrMod_GsWs_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgSvrMod_GsWs_MsgId_MsgSvrMod_GsWs_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgSvrMod_GsWs_MsgId_IsValid(int value);
constexpr MsgSvrMod_GsWs_MsgId MsgSvrMod_GsWs_MsgId_MsgId_MIN = MsgSvrMod_GsWs_MsgId_Msg_GsWs_None;
constexpr MsgSvrMod_GsWs_MsgId MsgSvrMod_GsWs_MsgId_MsgId_MAX = MsgSvrMod_GsWs_MsgId_Msg_GsWs_SetCustomRoomMap_CS;
constexpr int MsgSvrMod_GsWs_MsgId_MsgId_ARRAYSIZE = MsgSvrMod_GsWs_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgSvrMod_GsWs_MsgId_descriptor();
template<typename T>
inline const std::string& MsgSvrMod_GsWs_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgSvrMod_GsWs_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgSvrMod_GsWs_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgSvrMod_GsWs_MsgId_descriptor(), enum_t_value);
}
inline bool MsgSvrMod_GsWs_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgSvrMod_GsWs_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgSvrMod_GsWs_MsgId>(
    MsgSvrMod_GsWs_MsgId_descriptor(), name, value);
}
// ===================================================================

class MsgSvrMod_GsWs final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.MsgSvrMod_GsWs) */ {
 public:
  inline MsgSvrMod_GsWs() : MsgSvrMod_GsWs(nullptr) {}
  explicit constexpr MsgSvrMod_GsWs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSvrMod_GsWs(const MsgSvrMod_GsWs& from);
  MsgSvrMod_GsWs(MsgSvrMod_GsWs&& from) noexcept
    : MsgSvrMod_GsWs() {
    *this = ::std::move(from);
  }

  inline MsgSvrMod_GsWs& operator=(const MsgSvrMod_GsWs& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSvrMod_GsWs& operator=(MsgSvrMod_GsWs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSvrMod_GsWs& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSvrMod_GsWs* internal_default_instance() {
    return reinterpret_cast<const MsgSvrMod_GsWs*>(
               &_MsgSvrMod_GsWs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgSvrMod_GsWs& a, MsgSvrMod_GsWs& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSvrMod_GsWs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSvrMod_GsWs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSvrMod_GsWs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSvrMod_GsWs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgSvrMod_GsWs& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgSvrMod_GsWs& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.MsgSvrMod_GsWs";
  }
  protected:
  explicit MsgSvrMod_GsWs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgSvrMod_GsWs_MsgId MsgId;
  static constexpr MsgId Msg_GsWs_None =
    MsgSvrMod_GsWs_MsgId_Msg_GsWs_None;
  static constexpr MsgId Msg_GsWs_ConfirmEnter_CS =
    MsgSvrMod_GsWs_MsgId_Msg_GsWs_ConfirmEnter_CS;
  static constexpr MsgId Msg_GsWs_GetRoomInfo_CS =
    MsgSvrMod_GsWs_MsgId_Msg_GsWs_GetRoomInfo_CS;
  static constexpr MsgId Msg_GsWs_ExitRoom_PUSH =
    MsgSvrMod_GsWs_MsgId_Msg_GsWs_ExitRoom_PUSH;
  static constexpr MsgId Msg_GsWs_UpdatePlayerStatus =
    MsgSvrMod_GsWs_MsgId_Msg_GsWs_UpdatePlayerStatus;
  static constexpr MsgId Msg_GsWs_AppResVer_Push =
    MsgSvrMod_GsWs_MsgId_Msg_GsWs_AppResVer_Push;
  static constexpr MsgId Msg_GsWs_PlayerOnline_CS =
    MsgSvrMod_GsWs_MsgId_Msg_GsWs_PlayerOnline_CS;
  static constexpr MsgId Msg_GsWs_PlayerOffline_CS =
    MsgSvrMod_GsWs_MsgId_Msg_GsWs_PlayerOffline_CS;
  static constexpr MsgId Msg_GsWs_SetRoomConfig_CS =
    MsgSvrMod_GsWs_MsgId_Msg_GsWs_SetRoomConfig_CS;
  static constexpr MsgId Msg_GsWs_SetCustomRoomType_CS =
    MsgSvrMod_GsWs_MsgId_Msg_GsWs_SetCustomRoomType_CS;
  static constexpr MsgId Msg_GsWs_SetCustomRoomMap_CS =
    MsgSvrMod_GsWs_MsgId_Msg_GsWs_SetCustomRoomMap_CS;
  static inline bool MsgId_IsValid(int value) {
    return MsgSvrMod_GsWs_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    MsgSvrMod_GsWs_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    MsgSvrMod_GsWs_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    MsgSvrMod_GsWs_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return MsgSvrMod_GsWs_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return MsgSvrMod_GsWs_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return MsgSvrMod_GsWs_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.MsgSvrMod_GsWs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgGsWs_2eproto;
};
// -------------------------------------------------------------------

class GsWs_PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.GsWs_PlayerInfo) */ {
 public:
  inline GsWs_PlayerInfo() : GsWs_PlayerInfo(nullptr) {}
  ~GsWs_PlayerInfo() override;
  explicit constexpr GsWs_PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GsWs_PlayerInfo(const GsWs_PlayerInfo& from);
  GsWs_PlayerInfo(GsWs_PlayerInfo&& from) noexcept
    : GsWs_PlayerInfo() {
    *this = ::std::move(from);
  }

  inline GsWs_PlayerInfo& operator=(const GsWs_PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GsWs_PlayerInfo& operator=(GsWs_PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GsWs_PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GsWs_PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const GsWs_PlayerInfo*>(
               &_GsWs_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GsWs_PlayerInfo& a, GsWs_PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GsWs_PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GsWs_PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GsWs_PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GsWs_PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GsWs_PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GsWs_PlayerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GsWs_PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.GsWs_PlayerInfo";
  }
  protected:
  explicit GsWs_PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrRoleNameFieldNumber = 3,
    kChannelFieldNumber = 24,
    kFormFieldNumber = 10,
    kGameversionFieldNumber = 28,
    kUiAccIDFieldNumber = 1,
    kUiRoleIdFieldNumber = 2,
    kUiLevelFieldNumber = 11,
    kProvinceFieldNumber = 14,
    kGmLevelFieldNumber = 25,
    kProareaFieldNumber = 15,
    kBNewServerFieldNumber = 17,
    kLlPunishTimeFieldNumber = 32,
  };
  // optional string strRoleName = 3;
  bool has_strrolename() const;
  private:
  bool _internal_has_strrolename() const;
  public:
  void clear_strrolename();
  const std::string& strrolename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strrolename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strrolename();
  PROTOBUF_NODISCARD std::string* release_strrolename();
  void set_allocated_strrolename(std::string* strrolename);
  private:
  const std::string& _internal_strrolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strrolename(const std::string& value);
  std::string* _internal_mutable_strrolename();
  public:

  // optional string channel = 24;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const std::string& channel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel();
  PROTOBUF_NODISCARD std::string* release_channel();
  void set_allocated_channel(std::string* channel);
  private:
  const std::string& _internal_channel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel(const std::string& value);
  std::string* _internal_mutable_channel();
  public:

  // optional .XrPb.FormData form = 10;
  bool has_form() const;
  private:
  bool _internal_has_form() const;
  public:
  void clear_form();
  const ::XrPb::FormData& form() const;
  PROTOBUF_NODISCARD ::XrPb::FormData* release_form();
  ::XrPb::FormData* mutable_form();
  void set_allocated_form(::XrPb::FormData* form);
  private:
  const ::XrPb::FormData& _internal_form() const;
  ::XrPb::FormData* _internal_mutable_form();
  public:
  void unsafe_arena_set_allocated_form(
      ::XrPb::FormData* form);
  ::XrPb::FormData* unsafe_arena_release_form();

  // optional .XrPb.GameVersion gameversion = 28;
  bool has_gameversion() const;
  private:
  bool _internal_has_gameversion() const;
  public:
  void clear_gameversion();
  const ::XrPb::GameVersion& gameversion() const;
  PROTOBUF_NODISCARD ::XrPb::GameVersion* release_gameversion();
  ::XrPb::GameVersion* mutable_gameversion();
  void set_allocated_gameversion(::XrPb::GameVersion* gameversion);
  private:
  const ::XrPb::GameVersion& _internal_gameversion() const;
  ::XrPb::GameVersion* _internal_mutable_gameversion();
  public:
  void unsafe_arena_set_allocated_gameversion(
      ::XrPb::GameVersion* gameversion);
  ::XrPb::GameVersion* unsafe_arena_release_gameversion();

  // int64 uiAccID = 1;
  void clear_uiaccid();
  int64_t uiaccid() const;
  void set_uiaccid(int64_t value);
  private:
  int64_t _internal_uiaccid() const;
  void _internal_set_uiaccid(int64_t value);
  public:

  // int64 uiRoleId = 2;
  void clear_uiroleid();
  int64_t uiroleid() const;
  void set_uiroleid(int64_t value);
  private:
  int64_t _internal_uiroleid() const;
  void _internal_set_uiroleid(int64_t value);
  public:

  // optional uint32 uiLevel = 11;
  bool has_uilevel() const;
  private:
  bool _internal_has_uilevel() const;
  public:
  void clear_uilevel();
  uint32_t uilevel() const;
  void set_uilevel(uint32_t value);
  private:
  uint32_t _internal_uilevel() const;
  void _internal_set_uilevel(uint32_t value);
  public:

  // optional uint32 province = 14;
  bool has_province() const;
  private:
  bool _internal_has_province() const;
  public:
  void clear_province();
  uint32_t province() const;
  void set_province(uint32_t value);
  private:
  uint32_t _internal_province() const;
  void _internal_set_province(uint32_t value);
  public:

  // optional uint32 gm_level = 25;
  bool has_gm_level() const;
  private:
  bool _internal_has_gm_level() const;
  public:
  void clear_gm_level();
  uint32_t gm_level() const;
  void set_gm_level(uint32_t value);
  private:
  uint32_t _internal_gm_level() const;
  void _internal_set_gm_level(uint32_t value);
  public:

  // optional uint32 proarea = 15;
  bool has_proarea() const;
  private:
  bool _internal_has_proarea() const;
  public:
  void clear_proarea();
  uint32_t proarea() const;
  void set_proarea(uint32_t value);
  private:
  uint32_t _internal_proarea() const;
  void _internal_set_proarea(uint32_t value);
  public:

  // optional bool bNewServer = 17;
  bool has_bnewserver() const;
  private:
  bool _internal_has_bnewserver() const;
  public:
  void clear_bnewserver();
  bool bnewserver() const;
  void set_bnewserver(bool value);
  private:
  bool _internal_bnewserver() const;
  void _internal_set_bnewserver(bool value);
  public:

  // optional int64 llPunishTime = 32;
  bool has_llpunishtime() const;
  private:
  bool _internal_has_llpunishtime() const;
  public:
  void clear_llpunishtime();
  int64_t llpunishtime() const;
  void set_llpunishtime(int64_t value);
  private:
  int64_t _internal_llpunishtime() const;
  void _internal_set_llpunishtime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.GsWs_PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strrolename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::XrPb::FormData* form_;
  ::XrPb::GameVersion* gameversion_;
  int64_t uiaccid_;
  int64_t uiroleid_;
  uint32_t uilevel_;
  uint32_t province_;
  uint32_t gm_level_;
  uint32_t proarea_;
  bool bnewserver_;
  int64_t llpunishtime_;
  friend struct ::TableStruct_server_2fMsgGsWs_2eproto;
};
// -------------------------------------------------------------------

class Msg_GsWs_ConfirmEnter_CS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_GsWs_ConfirmEnter_CS) */ {
 public:
  inline Msg_GsWs_ConfirmEnter_CS() : Msg_GsWs_ConfirmEnter_CS(nullptr) {}
  explicit constexpr Msg_GsWs_ConfirmEnter_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GsWs_ConfirmEnter_CS(const Msg_GsWs_ConfirmEnter_CS& from);
  Msg_GsWs_ConfirmEnter_CS(Msg_GsWs_ConfirmEnter_CS&& from) noexcept
    : Msg_GsWs_ConfirmEnter_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GsWs_ConfirmEnter_CS& operator=(const Msg_GsWs_ConfirmEnter_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GsWs_ConfirmEnter_CS& operator=(Msg_GsWs_ConfirmEnter_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GsWs_ConfirmEnter_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GsWs_ConfirmEnter_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GsWs_ConfirmEnter_CS*>(
               &_Msg_GsWs_ConfirmEnter_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Msg_GsWs_ConfirmEnter_CS& a, Msg_GsWs_ConfirmEnter_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GsWs_ConfirmEnter_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GsWs_ConfirmEnter_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GsWs_ConfirmEnter_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GsWs_ConfirmEnter_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_GsWs_ConfirmEnter_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_GsWs_ConfirmEnter_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GsWs_ConfirmEnter_CS";
  }
  protected:
  explicit Msg_GsWs_ConfirmEnter_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GsWs_ConfirmEnter_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgGsWs_2eproto;
};
// -------------------------------------------------------------------

class Msg_GsWs_GetRoomInfo_CS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_GsWs_GetRoomInfo_CS) */ {
 public:
  inline Msg_GsWs_GetRoomInfo_CS() : Msg_GsWs_GetRoomInfo_CS(nullptr) {}
  explicit constexpr Msg_GsWs_GetRoomInfo_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GsWs_GetRoomInfo_CS(const Msg_GsWs_GetRoomInfo_CS& from);
  Msg_GsWs_GetRoomInfo_CS(Msg_GsWs_GetRoomInfo_CS&& from) noexcept
    : Msg_GsWs_GetRoomInfo_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GsWs_GetRoomInfo_CS& operator=(const Msg_GsWs_GetRoomInfo_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GsWs_GetRoomInfo_CS& operator=(Msg_GsWs_GetRoomInfo_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GsWs_GetRoomInfo_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GsWs_GetRoomInfo_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GsWs_GetRoomInfo_CS*>(
               &_Msg_GsWs_GetRoomInfo_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Msg_GsWs_GetRoomInfo_CS& a, Msg_GsWs_GetRoomInfo_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GsWs_GetRoomInfo_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GsWs_GetRoomInfo_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GsWs_GetRoomInfo_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GsWs_GetRoomInfo_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_GsWs_GetRoomInfo_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_GsWs_GetRoomInfo_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GsWs_GetRoomInfo_CS";
  }
  protected:
  explicit Msg_GsWs_GetRoomInfo_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GsWs_GetRoomInfo_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgGsWs_2eproto;
};
// -------------------------------------------------------------------

class Msg_GsWs_GetMatchInfo_CS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_GsWs_GetMatchInfo_CS) */ {
 public:
  inline Msg_GsWs_GetMatchInfo_CS() : Msg_GsWs_GetMatchInfo_CS(nullptr) {}
  explicit constexpr Msg_GsWs_GetMatchInfo_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GsWs_GetMatchInfo_CS(const Msg_GsWs_GetMatchInfo_CS& from);
  Msg_GsWs_GetMatchInfo_CS(Msg_GsWs_GetMatchInfo_CS&& from) noexcept
    : Msg_GsWs_GetMatchInfo_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GsWs_GetMatchInfo_CS& operator=(const Msg_GsWs_GetMatchInfo_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GsWs_GetMatchInfo_CS& operator=(Msg_GsWs_GetMatchInfo_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GsWs_GetMatchInfo_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GsWs_GetMatchInfo_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GsWs_GetMatchInfo_CS*>(
               &_Msg_GsWs_GetMatchInfo_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Msg_GsWs_GetMatchInfo_CS& a, Msg_GsWs_GetMatchInfo_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GsWs_GetMatchInfo_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GsWs_GetMatchInfo_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GsWs_GetMatchInfo_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GsWs_GetMatchInfo_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_GsWs_GetMatchInfo_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_GsWs_GetMatchInfo_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GsWs_GetMatchInfo_CS";
  }
  protected:
  explicit Msg_GsWs_GetMatchInfo_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GsWs_GetMatchInfo_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgGsWs_2eproto;
};
// -------------------------------------------------------------------

class Msg_GsWs_ExitRoom_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_GsWs_ExitRoom_PUSH) */ {
 public:
  inline Msg_GsWs_ExitRoom_PUSH() : Msg_GsWs_ExitRoom_PUSH(nullptr) {}
  explicit constexpr Msg_GsWs_ExitRoom_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GsWs_ExitRoom_PUSH(const Msg_GsWs_ExitRoom_PUSH& from);
  Msg_GsWs_ExitRoom_PUSH(Msg_GsWs_ExitRoom_PUSH&& from) noexcept
    : Msg_GsWs_ExitRoom_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_GsWs_ExitRoom_PUSH& operator=(const Msg_GsWs_ExitRoom_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GsWs_ExitRoom_PUSH& operator=(Msg_GsWs_ExitRoom_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GsWs_ExitRoom_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GsWs_ExitRoom_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_GsWs_ExitRoom_PUSH*>(
               &_Msg_GsWs_ExitRoom_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Msg_GsWs_ExitRoom_PUSH& a, Msg_GsWs_ExitRoom_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GsWs_ExitRoom_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GsWs_ExitRoom_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GsWs_ExitRoom_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GsWs_ExitRoom_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_GsWs_ExitRoom_PUSH& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_GsWs_ExitRoom_PUSH& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GsWs_ExitRoom_PUSH";
  }
  protected:
  explicit Msg_GsWs_ExitRoom_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GsWs_ExitRoom_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgGsWs_2eproto;
};
// -------------------------------------------------------------------

class Msg_GsWs_PlayerOnline_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GsWs_PlayerOnline_CS) */ {
 public:
  inline Msg_GsWs_PlayerOnline_CS() : Msg_GsWs_PlayerOnline_CS(nullptr) {}
  ~Msg_GsWs_PlayerOnline_CS() override;
  explicit constexpr Msg_GsWs_PlayerOnline_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GsWs_PlayerOnline_CS(const Msg_GsWs_PlayerOnline_CS& from);
  Msg_GsWs_PlayerOnline_CS(Msg_GsWs_PlayerOnline_CS&& from) noexcept
    : Msg_GsWs_PlayerOnline_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GsWs_PlayerOnline_CS& operator=(const Msg_GsWs_PlayerOnline_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GsWs_PlayerOnline_CS& operator=(Msg_GsWs_PlayerOnline_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GsWs_PlayerOnline_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GsWs_PlayerOnline_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GsWs_PlayerOnline_CS*>(
               &_Msg_GsWs_PlayerOnline_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Msg_GsWs_PlayerOnline_CS& a, Msg_GsWs_PlayerOnline_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GsWs_PlayerOnline_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GsWs_PlayerOnline_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GsWs_PlayerOnline_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GsWs_PlayerOnline_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GsWs_PlayerOnline_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GsWs_PlayerOnline_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GsWs_PlayerOnline_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GsWs_PlayerOnline_CS";
  }
  protected:
  explicit Msg_GsWs_PlayerOnline_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassedBossFieldNumber = 1,
  };
  // repeated uint32 passed_boss = 1;
  int passed_boss_size() const;
  private:
  int _internal_passed_boss_size() const;
  public:
  void clear_passed_boss();
  private:
  uint32_t _internal_passed_boss(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_passed_boss() const;
  void _internal_add_passed_boss(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_passed_boss();
  public:
  uint32_t passed_boss(int index) const;
  void set_passed_boss(int index, uint32_t value);
  void add_passed_boss(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      passed_boss() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_passed_boss();

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GsWs_PlayerOnline_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > passed_boss_;
  mutable std::atomic<int> _passed_boss_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgGsWs_2eproto;
};
// -------------------------------------------------------------------

class Msg_GsWs_PlayerOffline_CS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_GsWs_PlayerOffline_CS) */ {
 public:
  inline Msg_GsWs_PlayerOffline_CS() : Msg_GsWs_PlayerOffline_CS(nullptr) {}
  explicit constexpr Msg_GsWs_PlayerOffline_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GsWs_PlayerOffline_CS(const Msg_GsWs_PlayerOffline_CS& from);
  Msg_GsWs_PlayerOffline_CS(Msg_GsWs_PlayerOffline_CS&& from) noexcept
    : Msg_GsWs_PlayerOffline_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GsWs_PlayerOffline_CS& operator=(const Msg_GsWs_PlayerOffline_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GsWs_PlayerOffline_CS& operator=(Msg_GsWs_PlayerOffline_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GsWs_PlayerOffline_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GsWs_PlayerOffline_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GsWs_PlayerOffline_CS*>(
               &_Msg_GsWs_PlayerOffline_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Msg_GsWs_PlayerOffline_CS& a, Msg_GsWs_PlayerOffline_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GsWs_PlayerOffline_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GsWs_PlayerOffline_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GsWs_PlayerOffline_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GsWs_PlayerOffline_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_GsWs_PlayerOffline_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_GsWs_PlayerOffline_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GsWs_PlayerOffline_CS";
  }
  protected:
  explicit Msg_GsWs_PlayerOffline_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GsWs_PlayerOffline_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgGsWs_2eproto;
};
// -------------------------------------------------------------------

class Msg_GsWs_SetRoomConfig_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GsWs_SetRoomConfig_CS) */ {
 public:
  inline Msg_GsWs_SetRoomConfig_CS() : Msg_GsWs_SetRoomConfig_CS(nullptr) {}
  ~Msg_GsWs_SetRoomConfig_CS() override;
  explicit constexpr Msg_GsWs_SetRoomConfig_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GsWs_SetRoomConfig_CS(const Msg_GsWs_SetRoomConfig_CS& from);
  Msg_GsWs_SetRoomConfig_CS(Msg_GsWs_SetRoomConfig_CS&& from) noexcept
    : Msg_GsWs_SetRoomConfig_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GsWs_SetRoomConfig_CS& operator=(const Msg_GsWs_SetRoomConfig_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GsWs_SetRoomConfig_CS& operator=(Msg_GsWs_SetRoomConfig_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GsWs_SetRoomConfig_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GsWs_SetRoomConfig_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GsWs_SetRoomConfig_CS*>(
               &_Msg_GsWs_SetRoomConfig_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Msg_GsWs_SetRoomConfig_CS& a, Msg_GsWs_SetRoomConfig_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GsWs_SetRoomConfig_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GsWs_SetRoomConfig_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GsWs_SetRoomConfig_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GsWs_SetRoomConfig_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GsWs_SetRoomConfig_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GsWs_SetRoomConfig_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GsWs_SetRoomConfig_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GsWs_SetRoomConfig_CS";
  }
  protected:
  explicit Msg_GsWs_SetRoomConfig_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneTimeFieldNumber = 1,
    kLifeNumFieldNumber = 2,
  };
  // uint32 scene_time = 1;
  void clear_scene_time();
  uint32_t scene_time() const;
  void set_scene_time(uint32_t value);
  private:
  uint32_t _internal_scene_time() const;
  void _internal_set_scene_time(uint32_t value);
  public:

  // uint32 life_num = 2;
  void clear_life_num();
  uint32_t life_num() const;
  void set_life_num(uint32_t value);
  private:
  uint32_t _internal_life_num() const;
  void _internal_set_life_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GsWs_SetRoomConfig_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t scene_time_;
  uint32_t life_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgGsWs_2eproto;
};
// -------------------------------------------------------------------

class Msg_GsWs_SetCustomRoomType_CS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_GsWs_SetCustomRoomType_CS) */ {
 public:
  inline Msg_GsWs_SetCustomRoomType_CS() : Msg_GsWs_SetCustomRoomType_CS(nullptr) {}
  explicit constexpr Msg_GsWs_SetCustomRoomType_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GsWs_SetCustomRoomType_CS(const Msg_GsWs_SetCustomRoomType_CS& from);
  Msg_GsWs_SetCustomRoomType_CS(Msg_GsWs_SetCustomRoomType_CS&& from) noexcept
    : Msg_GsWs_SetCustomRoomType_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GsWs_SetCustomRoomType_CS& operator=(const Msg_GsWs_SetCustomRoomType_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GsWs_SetCustomRoomType_CS& operator=(Msg_GsWs_SetCustomRoomType_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GsWs_SetCustomRoomType_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GsWs_SetCustomRoomType_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GsWs_SetCustomRoomType_CS*>(
               &_Msg_GsWs_SetCustomRoomType_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Msg_GsWs_SetCustomRoomType_CS& a, Msg_GsWs_SetCustomRoomType_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GsWs_SetCustomRoomType_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GsWs_SetCustomRoomType_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GsWs_SetCustomRoomType_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GsWs_SetCustomRoomType_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_GsWs_SetCustomRoomType_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_GsWs_SetCustomRoomType_CS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GsWs_SetCustomRoomType_CS";
  }
  protected:
  explicit Msg_GsWs_SetCustomRoomType_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GsWs_SetCustomRoomType_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgGsWs_2eproto;
};
// -------------------------------------------------------------------

class Msg_GsWs_SetCustomRoomMap_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GsWs_SetCustomRoomMap_CS) */ {
 public:
  inline Msg_GsWs_SetCustomRoomMap_CS() : Msg_GsWs_SetCustomRoomMap_CS(nullptr) {}
  ~Msg_GsWs_SetCustomRoomMap_CS() override;
  explicit constexpr Msg_GsWs_SetCustomRoomMap_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GsWs_SetCustomRoomMap_CS(const Msg_GsWs_SetCustomRoomMap_CS& from);
  Msg_GsWs_SetCustomRoomMap_CS(Msg_GsWs_SetCustomRoomMap_CS&& from) noexcept
    : Msg_GsWs_SetCustomRoomMap_CS() {
    *this = ::std::move(from);
  }

  inline Msg_GsWs_SetCustomRoomMap_CS& operator=(const Msg_GsWs_SetCustomRoomMap_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GsWs_SetCustomRoomMap_CS& operator=(Msg_GsWs_SetCustomRoomMap_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GsWs_SetCustomRoomMap_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GsWs_SetCustomRoomMap_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_GsWs_SetCustomRoomMap_CS*>(
               &_Msg_GsWs_SetCustomRoomMap_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Msg_GsWs_SetCustomRoomMap_CS& a, Msg_GsWs_SetCustomRoomMap_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GsWs_SetCustomRoomMap_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GsWs_SetCustomRoomMap_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GsWs_SetCustomRoomMap_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GsWs_SetCustomRoomMap_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GsWs_SetCustomRoomMap_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GsWs_SetCustomRoomMap_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GsWs_SetCustomRoomMap_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GsWs_SetCustomRoomMap_CS";
  }
  protected:
  explicit Msg_GsWs_SetCustomRoomMap_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapIdFieldNumber = 1,
  };
  // uint32 map_id = 1;
  void clear_map_id();
  uint32_t map_id() const;
  void set_map_id(uint32_t value);
  private:
  uint32_t _internal_map_id() const;
  void _internal_set_map_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GsWs_SetCustomRoomMap_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t map_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgGsWs_2eproto;
};
// -------------------------------------------------------------------

class Msg_GsWs_UpdatePlayerStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GsWs_UpdatePlayerStatus) */ {
 public:
  inline Msg_GsWs_UpdatePlayerStatus() : Msg_GsWs_UpdatePlayerStatus(nullptr) {}
  ~Msg_GsWs_UpdatePlayerStatus() override;
  explicit constexpr Msg_GsWs_UpdatePlayerStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GsWs_UpdatePlayerStatus(const Msg_GsWs_UpdatePlayerStatus& from);
  Msg_GsWs_UpdatePlayerStatus(Msg_GsWs_UpdatePlayerStatus&& from) noexcept
    : Msg_GsWs_UpdatePlayerStatus() {
    *this = ::std::move(from);
  }

  inline Msg_GsWs_UpdatePlayerStatus& operator=(const Msg_GsWs_UpdatePlayerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GsWs_UpdatePlayerStatus& operator=(Msg_GsWs_UpdatePlayerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GsWs_UpdatePlayerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GsWs_UpdatePlayerStatus* internal_default_instance() {
    return reinterpret_cast<const Msg_GsWs_UpdatePlayerStatus*>(
               &_Msg_GsWs_UpdatePlayerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Msg_GsWs_UpdatePlayerStatus& a, Msg_GsWs_UpdatePlayerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GsWs_UpdatePlayerStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GsWs_UpdatePlayerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GsWs_UpdatePlayerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GsWs_UpdatePlayerStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GsWs_UpdatePlayerStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GsWs_UpdatePlayerStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GsWs_UpdatePlayerStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GsWs_UpdatePlayerStatus";
  }
  protected:
  explicit Msg_GsWs_UpdatePlayerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneLogidFieldNumber = 3,
    kUiAccIDFieldNumber = 1,
    kStatusFieldNumber = 2,
    kSyserrorFieldNumber = 4,
  };
  // string SceneLogid = 3;
  void clear_scenelogid();
  const std::string& scenelogid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scenelogid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scenelogid();
  PROTOBUF_NODISCARD std::string* release_scenelogid();
  void set_allocated_scenelogid(std::string* scenelogid);
  private:
  const std::string& _internal_scenelogid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scenelogid(const std::string& value);
  std::string* _internal_mutable_scenelogid();
  public:

  // int64 uiAccID = 1;
  void clear_uiaccid();
  int64_t uiaccid() const;
  void set_uiaccid(int64_t value);
  private:
  int64_t _internal_uiaccid() const;
  void _internal_set_uiaccid(int64_t value);
  public:

  // .XrPb.PlayerStatus status = 2;
  void clear_status();
  ::XrPb::PlayerStatus status() const;
  void set_status(::XrPb::PlayerStatus value);
  private:
  ::XrPb::PlayerStatus _internal_status() const;
  void _internal_set_status(::XrPb::PlayerStatus value);
  public:

  // optional bool syserror = 4;
  bool has_syserror() const;
  private:
  bool _internal_has_syserror() const;
  public:
  void clear_syserror();
  bool syserror() const;
  void set_syserror(bool value);
  private:
  bool _internal_syserror() const;
  void _internal_set_syserror(bool value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GsWs_UpdatePlayerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenelogid_;
  int64_t uiaccid_;
  int status_;
  bool syserror_;
  friend struct ::TableStruct_server_2fMsgGsWs_2eproto;
};
// -------------------------------------------------------------------

class Msg_GsWs_AppResVer_Push final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GsWs_AppResVer_Push) */ {
 public:
  inline Msg_GsWs_AppResVer_Push() : Msg_GsWs_AppResVer_Push(nullptr) {}
  ~Msg_GsWs_AppResVer_Push() override;
  explicit constexpr Msg_GsWs_AppResVer_Push(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GsWs_AppResVer_Push(const Msg_GsWs_AppResVer_Push& from);
  Msg_GsWs_AppResVer_Push(Msg_GsWs_AppResVer_Push&& from) noexcept
    : Msg_GsWs_AppResVer_Push() {
    *this = ::std::move(from);
  }

  inline Msg_GsWs_AppResVer_Push& operator=(const Msg_GsWs_AppResVer_Push& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GsWs_AppResVer_Push& operator=(Msg_GsWs_AppResVer_Push&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GsWs_AppResVer_Push& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GsWs_AppResVer_Push* internal_default_instance() {
    return reinterpret_cast<const Msg_GsWs_AppResVer_Push*>(
               &_Msg_GsWs_AppResVer_Push_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Msg_GsWs_AppResVer_Push& a, Msg_GsWs_AppResVer_Push& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GsWs_AppResVer_Push* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GsWs_AppResVer_Push* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GsWs_AppResVer_Push* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GsWs_AppResVer_Push>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GsWs_AppResVer_Push& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GsWs_AppResVer_Push& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GsWs_AppResVer_Push* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GsWs_AppResVer_Push";
  }
  protected:
  explicit Msg_GsWs_AppResVer_Push(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppVerFieldNumber = 1,
    kResVerFieldNumber = 2,
  };
  // string AppVer = 1;
  void clear_appver();
  const std::string& appver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_appver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_appver();
  PROTOBUF_NODISCARD std::string* release_appver();
  void set_allocated_appver(std::string* appver);
  private:
  const std::string& _internal_appver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appver(const std::string& value);
  std::string* _internal_mutable_appver();
  public:

  // string ResVer = 2;
  void clear_resver();
  const std::string& resver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resver();
  PROTOBUF_NODISCARD std::string* release_resver();
  void set_allocated_resver(std::string* resver);
  private:
  const std::string& _internal_resver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resver(const std::string& value);
  std::string* _internal_mutable_resver();
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GsWs_AppResVer_Push)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resver_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgGsWs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgSvrMod_GsWs

// -------------------------------------------------------------------

// GsWs_PlayerInfo

// int64 uiAccID = 1;
inline void GsWs_PlayerInfo::clear_uiaccid() {
  uiaccid_ = int64_t{0};
}
inline int64_t GsWs_PlayerInfo::_internal_uiaccid() const {
  return uiaccid_;
}
inline int64_t GsWs_PlayerInfo::uiaccid() const {
  // @@protoc_insertion_point(field_get:XrPb.GsWs_PlayerInfo.uiAccID)
  return _internal_uiaccid();
}
inline void GsWs_PlayerInfo::_internal_set_uiaccid(int64_t value) {
  
  uiaccid_ = value;
}
inline void GsWs_PlayerInfo::set_uiaccid(int64_t value) {
  _internal_set_uiaccid(value);
  // @@protoc_insertion_point(field_set:XrPb.GsWs_PlayerInfo.uiAccID)
}

// int64 uiRoleId = 2;
inline void GsWs_PlayerInfo::clear_uiroleid() {
  uiroleid_ = int64_t{0};
}
inline int64_t GsWs_PlayerInfo::_internal_uiroleid() const {
  return uiroleid_;
}
inline int64_t GsWs_PlayerInfo::uiroleid() const {
  // @@protoc_insertion_point(field_get:XrPb.GsWs_PlayerInfo.uiRoleId)
  return _internal_uiroleid();
}
inline void GsWs_PlayerInfo::_internal_set_uiroleid(int64_t value) {
  
  uiroleid_ = value;
}
inline void GsWs_PlayerInfo::set_uiroleid(int64_t value) {
  _internal_set_uiroleid(value);
  // @@protoc_insertion_point(field_set:XrPb.GsWs_PlayerInfo.uiRoleId)
}

// optional string strRoleName = 3;
inline bool GsWs_PlayerInfo::_internal_has_strrolename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GsWs_PlayerInfo::has_strrolename() const {
  return _internal_has_strrolename();
}
inline void GsWs_PlayerInfo::clear_strrolename() {
  strrolename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GsWs_PlayerInfo::strrolename() const {
  // @@protoc_insertion_point(field_get:XrPb.GsWs_PlayerInfo.strRoleName)
  return _internal_strrolename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GsWs_PlayerInfo::set_strrolename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 strrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.GsWs_PlayerInfo.strRoleName)
}
inline std::string* GsWs_PlayerInfo::mutable_strrolename() {
  std::string* _s = _internal_mutable_strrolename();
  // @@protoc_insertion_point(field_mutable:XrPb.GsWs_PlayerInfo.strRoleName)
  return _s;
}
inline const std::string& GsWs_PlayerInfo::_internal_strrolename() const {
  return strrolename_.Get();
}
inline void GsWs_PlayerInfo::_internal_set_strrolename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  strrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GsWs_PlayerInfo::_internal_mutable_strrolename() {
  _has_bits_[0] |= 0x00000001u;
  return strrolename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GsWs_PlayerInfo::release_strrolename() {
  // @@protoc_insertion_point(field_release:XrPb.GsWs_PlayerInfo.strRoleName)
  if (!_internal_has_strrolename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = strrolename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strrolename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GsWs_PlayerInfo::set_allocated_strrolename(std::string* strrolename) {
  if (strrolename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  strrolename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strrolename,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (strrolename_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    strrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.GsWs_PlayerInfo.strRoleName)
}

// optional .XrPb.FormData form = 10;
inline bool GsWs_PlayerInfo::_internal_has_form() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || form_ != nullptr);
  return value;
}
inline bool GsWs_PlayerInfo::has_form() const {
  return _internal_has_form();
}
inline const ::XrPb::FormData& GsWs_PlayerInfo::_internal_form() const {
  const ::XrPb::FormData* p = form_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::FormData&>(
      ::XrPb::_FormData_default_instance_);
}
inline const ::XrPb::FormData& GsWs_PlayerInfo::form() const {
  // @@protoc_insertion_point(field_get:XrPb.GsWs_PlayerInfo.form)
  return _internal_form();
}
inline void GsWs_PlayerInfo::unsafe_arena_set_allocated_form(
    ::XrPb::FormData* form) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(form_);
  }
  form_ = form;
  if (form) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.GsWs_PlayerInfo.form)
}
inline ::XrPb::FormData* GsWs_PlayerInfo::release_form() {
  _has_bits_[0] &= ~0x00000004u;
  ::XrPb::FormData* temp = form_;
  form_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::FormData* GsWs_PlayerInfo::unsafe_arena_release_form() {
  // @@protoc_insertion_point(field_release:XrPb.GsWs_PlayerInfo.form)
  _has_bits_[0] &= ~0x00000004u;
  ::XrPb::FormData* temp = form_;
  form_ = nullptr;
  return temp;
}
inline ::XrPb::FormData* GsWs_PlayerInfo::_internal_mutable_form() {
  _has_bits_[0] |= 0x00000004u;
  if (form_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::FormData>(GetArenaForAllocation());
    form_ = p;
  }
  return form_;
}
inline ::XrPb::FormData* GsWs_PlayerInfo::mutable_form() {
  ::XrPb::FormData* _msg = _internal_mutable_form();
  // @@protoc_insertion_point(field_mutable:XrPb.GsWs_PlayerInfo.form)
  return _msg;
}
inline void GsWs_PlayerInfo::set_allocated_form(::XrPb::FormData* form) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(form_);
  }
  if (form) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(form));
    if (message_arena != submessage_arena) {
      form = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, form, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  form_ = form;
  // @@protoc_insertion_point(field_set_allocated:XrPb.GsWs_PlayerInfo.form)
}

// optional uint32 uiLevel = 11;
inline bool GsWs_PlayerInfo::_internal_has_uilevel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GsWs_PlayerInfo::has_uilevel() const {
  return _internal_has_uilevel();
}
inline void GsWs_PlayerInfo::clear_uilevel() {
  uilevel_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t GsWs_PlayerInfo::_internal_uilevel() const {
  return uilevel_;
}
inline uint32_t GsWs_PlayerInfo::uilevel() const {
  // @@protoc_insertion_point(field_get:XrPb.GsWs_PlayerInfo.uiLevel)
  return _internal_uilevel();
}
inline void GsWs_PlayerInfo::_internal_set_uilevel(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  uilevel_ = value;
}
inline void GsWs_PlayerInfo::set_uilevel(uint32_t value) {
  _internal_set_uilevel(value);
  // @@protoc_insertion_point(field_set:XrPb.GsWs_PlayerInfo.uiLevel)
}

// optional uint32 province = 14;
inline bool GsWs_PlayerInfo::_internal_has_province() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GsWs_PlayerInfo::has_province() const {
  return _internal_has_province();
}
inline void GsWs_PlayerInfo::clear_province() {
  province_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t GsWs_PlayerInfo::_internal_province() const {
  return province_;
}
inline uint32_t GsWs_PlayerInfo::province() const {
  // @@protoc_insertion_point(field_get:XrPb.GsWs_PlayerInfo.province)
  return _internal_province();
}
inline void GsWs_PlayerInfo::_internal_set_province(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  province_ = value;
}
inline void GsWs_PlayerInfo::set_province(uint32_t value) {
  _internal_set_province(value);
  // @@protoc_insertion_point(field_set:XrPb.GsWs_PlayerInfo.province)
}

// optional uint32 proarea = 15;
inline bool GsWs_PlayerInfo::_internal_has_proarea() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GsWs_PlayerInfo::has_proarea() const {
  return _internal_has_proarea();
}
inline void GsWs_PlayerInfo::clear_proarea() {
  proarea_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t GsWs_PlayerInfo::_internal_proarea() const {
  return proarea_;
}
inline uint32_t GsWs_PlayerInfo::proarea() const {
  // @@protoc_insertion_point(field_get:XrPb.GsWs_PlayerInfo.proarea)
  return _internal_proarea();
}
inline void GsWs_PlayerInfo::_internal_set_proarea(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  proarea_ = value;
}
inline void GsWs_PlayerInfo::set_proarea(uint32_t value) {
  _internal_set_proarea(value);
  // @@protoc_insertion_point(field_set:XrPb.GsWs_PlayerInfo.proarea)
}

// optional bool bNewServer = 17;
inline bool GsWs_PlayerInfo::_internal_has_bnewserver() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GsWs_PlayerInfo::has_bnewserver() const {
  return _internal_has_bnewserver();
}
inline void GsWs_PlayerInfo::clear_bnewserver() {
  bnewserver_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool GsWs_PlayerInfo::_internal_bnewserver() const {
  return bnewserver_;
}
inline bool GsWs_PlayerInfo::bnewserver() const {
  // @@protoc_insertion_point(field_get:XrPb.GsWs_PlayerInfo.bNewServer)
  return _internal_bnewserver();
}
inline void GsWs_PlayerInfo::_internal_set_bnewserver(bool value) {
  _has_bits_[0] |= 0x00000100u;
  bnewserver_ = value;
}
inline void GsWs_PlayerInfo::set_bnewserver(bool value) {
  _internal_set_bnewserver(value);
  // @@protoc_insertion_point(field_set:XrPb.GsWs_PlayerInfo.bNewServer)
}

// optional string channel = 24;
inline bool GsWs_PlayerInfo::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GsWs_PlayerInfo::has_channel() const {
  return _internal_has_channel();
}
inline void GsWs_PlayerInfo::clear_channel() {
  channel_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GsWs_PlayerInfo::channel() const {
  // @@protoc_insertion_point(field_get:XrPb.GsWs_PlayerInfo.channel)
  return _internal_channel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GsWs_PlayerInfo::set_channel(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.GsWs_PlayerInfo.channel)
}
inline std::string* GsWs_PlayerInfo::mutable_channel() {
  std::string* _s = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:XrPb.GsWs_PlayerInfo.channel)
  return _s;
}
inline const std::string& GsWs_PlayerInfo::_internal_channel() const {
  return channel_.Get();
}
inline void GsWs_PlayerInfo::_internal_set_channel(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  channel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GsWs_PlayerInfo::_internal_mutable_channel() {
  _has_bits_[0] |= 0x00000002u;
  return channel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GsWs_PlayerInfo::release_channel() {
  // @@protoc_insertion_point(field_release:XrPb.GsWs_PlayerInfo.channel)
  if (!_internal_has_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = channel_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (channel_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GsWs_PlayerInfo::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  channel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (channel_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.GsWs_PlayerInfo.channel)
}

// optional uint32 gm_level = 25;
inline bool GsWs_PlayerInfo::_internal_has_gm_level() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GsWs_PlayerInfo::has_gm_level() const {
  return _internal_has_gm_level();
}
inline void GsWs_PlayerInfo::clear_gm_level() {
  gm_level_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t GsWs_PlayerInfo::_internal_gm_level() const {
  return gm_level_;
}
inline uint32_t GsWs_PlayerInfo::gm_level() const {
  // @@protoc_insertion_point(field_get:XrPb.GsWs_PlayerInfo.gm_level)
  return _internal_gm_level();
}
inline void GsWs_PlayerInfo::_internal_set_gm_level(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  gm_level_ = value;
}
inline void GsWs_PlayerInfo::set_gm_level(uint32_t value) {
  _internal_set_gm_level(value);
  // @@protoc_insertion_point(field_set:XrPb.GsWs_PlayerInfo.gm_level)
}

// optional .XrPb.GameVersion gameversion = 28;
inline bool GsWs_PlayerInfo::_internal_has_gameversion() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || gameversion_ != nullptr);
  return value;
}
inline bool GsWs_PlayerInfo::has_gameversion() const {
  return _internal_has_gameversion();
}
inline const ::XrPb::GameVersion& GsWs_PlayerInfo::_internal_gameversion() const {
  const ::XrPb::GameVersion* p = gameversion_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::GameVersion&>(
      ::XrPb::_GameVersion_default_instance_);
}
inline const ::XrPb::GameVersion& GsWs_PlayerInfo::gameversion() const {
  // @@protoc_insertion_point(field_get:XrPb.GsWs_PlayerInfo.gameversion)
  return _internal_gameversion();
}
inline void GsWs_PlayerInfo::unsafe_arena_set_allocated_gameversion(
    ::XrPb::GameVersion* gameversion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameversion_);
  }
  gameversion_ = gameversion;
  if (gameversion) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.GsWs_PlayerInfo.gameversion)
}
inline ::XrPb::GameVersion* GsWs_PlayerInfo::release_gameversion() {
  _has_bits_[0] &= ~0x00000008u;
  ::XrPb::GameVersion* temp = gameversion_;
  gameversion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::GameVersion* GsWs_PlayerInfo::unsafe_arena_release_gameversion() {
  // @@protoc_insertion_point(field_release:XrPb.GsWs_PlayerInfo.gameversion)
  _has_bits_[0] &= ~0x00000008u;
  ::XrPb::GameVersion* temp = gameversion_;
  gameversion_ = nullptr;
  return temp;
}
inline ::XrPb::GameVersion* GsWs_PlayerInfo::_internal_mutable_gameversion() {
  _has_bits_[0] |= 0x00000008u;
  if (gameversion_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::GameVersion>(GetArenaForAllocation());
    gameversion_ = p;
  }
  return gameversion_;
}
inline ::XrPb::GameVersion* GsWs_PlayerInfo::mutable_gameversion() {
  ::XrPb::GameVersion* _msg = _internal_mutable_gameversion();
  // @@protoc_insertion_point(field_mutable:XrPb.GsWs_PlayerInfo.gameversion)
  return _msg;
}
inline void GsWs_PlayerInfo::set_allocated_gameversion(::XrPb::GameVersion* gameversion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameversion_);
  }
  if (gameversion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameversion));
    if (message_arena != submessage_arena) {
      gameversion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gameversion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  gameversion_ = gameversion;
  // @@protoc_insertion_point(field_set_allocated:XrPb.GsWs_PlayerInfo.gameversion)
}

// optional int64 llPunishTime = 32;
inline bool GsWs_PlayerInfo::_internal_has_llpunishtime() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool GsWs_PlayerInfo::has_llpunishtime() const {
  return _internal_has_llpunishtime();
}
inline void GsWs_PlayerInfo::clear_llpunishtime() {
  llpunishtime_ = int64_t{0};
  _has_bits_[0] &= ~0x00000200u;
}
inline int64_t GsWs_PlayerInfo::_internal_llpunishtime() const {
  return llpunishtime_;
}
inline int64_t GsWs_PlayerInfo::llpunishtime() const {
  // @@protoc_insertion_point(field_get:XrPb.GsWs_PlayerInfo.llPunishTime)
  return _internal_llpunishtime();
}
inline void GsWs_PlayerInfo::_internal_set_llpunishtime(int64_t value) {
  _has_bits_[0] |= 0x00000200u;
  llpunishtime_ = value;
}
inline void GsWs_PlayerInfo::set_llpunishtime(int64_t value) {
  _internal_set_llpunishtime(value);
  // @@protoc_insertion_point(field_set:XrPb.GsWs_PlayerInfo.llPunishTime)
}

// -------------------------------------------------------------------

// Msg_GsWs_ConfirmEnter_CS

// -------------------------------------------------------------------

// Msg_GsWs_GetRoomInfo_CS

// -------------------------------------------------------------------

// Msg_GsWs_GetMatchInfo_CS

// -------------------------------------------------------------------

// Msg_GsWs_ExitRoom_PUSH

// -------------------------------------------------------------------

// Msg_GsWs_PlayerOnline_CS

// repeated uint32 passed_boss = 1;
inline int Msg_GsWs_PlayerOnline_CS::_internal_passed_boss_size() const {
  return passed_boss_.size();
}
inline int Msg_GsWs_PlayerOnline_CS::passed_boss_size() const {
  return _internal_passed_boss_size();
}
inline void Msg_GsWs_PlayerOnline_CS::clear_passed_boss() {
  passed_boss_.Clear();
}
inline uint32_t Msg_GsWs_PlayerOnline_CS::_internal_passed_boss(int index) const {
  return passed_boss_.Get(index);
}
inline uint32_t Msg_GsWs_PlayerOnline_CS::passed_boss(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GsWs_PlayerOnline_CS.passed_boss)
  return _internal_passed_boss(index);
}
inline void Msg_GsWs_PlayerOnline_CS::set_passed_boss(int index, uint32_t value) {
  passed_boss_.Set(index, value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GsWs_PlayerOnline_CS.passed_boss)
}
inline void Msg_GsWs_PlayerOnline_CS::_internal_add_passed_boss(uint32_t value) {
  passed_boss_.Add(value);
}
inline void Msg_GsWs_PlayerOnline_CS::add_passed_boss(uint32_t value) {
  _internal_add_passed_boss(value);
  // @@protoc_insertion_point(field_add:XrPb.Msg_GsWs_PlayerOnline_CS.passed_boss)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Msg_GsWs_PlayerOnline_CS::_internal_passed_boss() const {
  return passed_boss_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Msg_GsWs_PlayerOnline_CS::passed_boss() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_GsWs_PlayerOnline_CS.passed_boss)
  return _internal_passed_boss();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Msg_GsWs_PlayerOnline_CS::_internal_mutable_passed_boss() {
  return &passed_boss_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Msg_GsWs_PlayerOnline_CS::mutable_passed_boss() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_GsWs_PlayerOnline_CS.passed_boss)
  return _internal_mutable_passed_boss();
}

// -------------------------------------------------------------------

// Msg_GsWs_PlayerOffline_CS

// -------------------------------------------------------------------

// Msg_GsWs_SetRoomConfig_CS

// uint32 scene_time = 1;
inline void Msg_GsWs_SetRoomConfig_CS::clear_scene_time() {
  scene_time_ = 0u;
}
inline uint32_t Msg_GsWs_SetRoomConfig_CS::_internal_scene_time() const {
  return scene_time_;
}
inline uint32_t Msg_GsWs_SetRoomConfig_CS::scene_time() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GsWs_SetRoomConfig_CS.scene_time)
  return _internal_scene_time();
}
inline void Msg_GsWs_SetRoomConfig_CS::_internal_set_scene_time(uint32_t value) {
  
  scene_time_ = value;
}
inline void Msg_GsWs_SetRoomConfig_CS::set_scene_time(uint32_t value) {
  _internal_set_scene_time(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GsWs_SetRoomConfig_CS.scene_time)
}

// uint32 life_num = 2;
inline void Msg_GsWs_SetRoomConfig_CS::clear_life_num() {
  life_num_ = 0u;
}
inline uint32_t Msg_GsWs_SetRoomConfig_CS::_internal_life_num() const {
  return life_num_;
}
inline uint32_t Msg_GsWs_SetRoomConfig_CS::life_num() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GsWs_SetRoomConfig_CS.life_num)
  return _internal_life_num();
}
inline void Msg_GsWs_SetRoomConfig_CS::_internal_set_life_num(uint32_t value) {
  
  life_num_ = value;
}
inline void Msg_GsWs_SetRoomConfig_CS::set_life_num(uint32_t value) {
  _internal_set_life_num(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GsWs_SetRoomConfig_CS.life_num)
}

// -------------------------------------------------------------------

// Msg_GsWs_SetCustomRoomType_CS

// -------------------------------------------------------------------

// Msg_GsWs_SetCustomRoomMap_CS

// uint32 map_id = 1;
inline void Msg_GsWs_SetCustomRoomMap_CS::clear_map_id() {
  map_id_ = 0u;
}
inline uint32_t Msg_GsWs_SetCustomRoomMap_CS::_internal_map_id() const {
  return map_id_;
}
inline uint32_t Msg_GsWs_SetCustomRoomMap_CS::map_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GsWs_SetCustomRoomMap_CS.map_id)
  return _internal_map_id();
}
inline void Msg_GsWs_SetCustomRoomMap_CS::_internal_set_map_id(uint32_t value) {
  
  map_id_ = value;
}
inline void Msg_GsWs_SetCustomRoomMap_CS::set_map_id(uint32_t value) {
  _internal_set_map_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GsWs_SetCustomRoomMap_CS.map_id)
}

// -------------------------------------------------------------------

// Msg_GsWs_UpdatePlayerStatus

// int64 uiAccID = 1;
inline void Msg_GsWs_UpdatePlayerStatus::clear_uiaccid() {
  uiaccid_ = int64_t{0};
}
inline int64_t Msg_GsWs_UpdatePlayerStatus::_internal_uiaccid() const {
  return uiaccid_;
}
inline int64_t Msg_GsWs_UpdatePlayerStatus::uiaccid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GsWs_UpdatePlayerStatus.uiAccID)
  return _internal_uiaccid();
}
inline void Msg_GsWs_UpdatePlayerStatus::_internal_set_uiaccid(int64_t value) {
  
  uiaccid_ = value;
}
inline void Msg_GsWs_UpdatePlayerStatus::set_uiaccid(int64_t value) {
  _internal_set_uiaccid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GsWs_UpdatePlayerStatus.uiAccID)
}

// .XrPb.PlayerStatus status = 2;
inline void Msg_GsWs_UpdatePlayerStatus::clear_status() {
  status_ = 0;
}
inline ::XrPb::PlayerStatus Msg_GsWs_UpdatePlayerStatus::_internal_status() const {
  return static_cast< ::XrPb::PlayerStatus >(status_);
}
inline ::XrPb::PlayerStatus Msg_GsWs_UpdatePlayerStatus::status() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GsWs_UpdatePlayerStatus.status)
  return _internal_status();
}
inline void Msg_GsWs_UpdatePlayerStatus::_internal_set_status(::XrPb::PlayerStatus value) {
  
  status_ = value;
}
inline void Msg_GsWs_UpdatePlayerStatus::set_status(::XrPb::PlayerStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GsWs_UpdatePlayerStatus.status)
}

// string SceneLogid = 3;
inline void Msg_GsWs_UpdatePlayerStatus::clear_scenelogid() {
  scenelogid_.ClearToEmpty();
}
inline const std::string& Msg_GsWs_UpdatePlayerStatus::scenelogid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GsWs_UpdatePlayerStatus.SceneLogid)
  return _internal_scenelogid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_GsWs_UpdatePlayerStatus::set_scenelogid(ArgT0&& arg0, ArgT... args) {
 
 scenelogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_GsWs_UpdatePlayerStatus.SceneLogid)
}
inline std::string* Msg_GsWs_UpdatePlayerStatus::mutable_scenelogid() {
  std::string* _s = _internal_mutable_scenelogid();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GsWs_UpdatePlayerStatus.SceneLogid)
  return _s;
}
inline const std::string& Msg_GsWs_UpdatePlayerStatus::_internal_scenelogid() const {
  return scenelogid_.Get();
}
inline void Msg_GsWs_UpdatePlayerStatus::_internal_set_scenelogid(const std::string& value) {
  
  scenelogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_GsWs_UpdatePlayerStatus::_internal_mutable_scenelogid() {
  
  return scenelogid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_GsWs_UpdatePlayerStatus::release_scenelogid() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_GsWs_UpdatePlayerStatus.SceneLogid)
  return scenelogid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_GsWs_UpdatePlayerStatus::set_allocated_scenelogid(std::string* scenelogid) {
  if (scenelogid != nullptr) {
    
  } else {
    
  }
  scenelogid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenelogid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (scenelogid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    scenelogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_GsWs_UpdatePlayerStatus.SceneLogid)
}

// optional bool syserror = 4;
inline bool Msg_GsWs_UpdatePlayerStatus::_internal_has_syserror() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_GsWs_UpdatePlayerStatus::has_syserror() const {
  return _internal_has_syserror();
}
inline void Msg_GsWs_UpdatePlayerStatus::clear_syserror() {
  syserror_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Msg_GsWs_UpdatePlayerStatus::_internal_syserror() const {
  return syserror_;
}
inline bool Msg_GsWs_UpdatePlayerStatus::syserror() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GsWs_UpdatePlayerStatus.syserror)
  return _internal_syserror();
}
inline void Msg_GsWs_UpdatePlayerStatus::_internal_set_syserror(bool value) {
  _has_bits_[0] |= 0x00000001u;
  syserror_ = value;
}
inline void Msg_GsWs_UpdatePlayerStatus::set_syserror(bool value) {
  _internal_set_syserror(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GsWs_UpdatePlayerStatus.syserror)
}

// -------------------------------------------------------------------

// Msg_GsWs_AppResVer_Push

// string AppVer = 1;
inline void Msg_GsWs_AppResVer_Push::clear_appver() {
  appver_.ClearToEmpty();
}
inline const std::string& Msg_GsWs_AppResVer_Push::appver() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GsWs_AppResVer_Push.AppVer)
  return _internal_appver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_GsWs_AppResVer_Push::set_appver(ArgT0&& arg0, ArgT... args) {
 
 appver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_GsWs_AppResVer_Push.AppVer)
}
inline std::string* Msg_GsWs_AppResVer_Push::mutable_appver() {
  std::string* _s = _internal_mutable_appver();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GsWs_AppResVer_Push.AppVer)
  return _s;
}
inline const std::string& Msg_GsWs_AppResVer_Push::_internal_appver() const {
  return appver_.Get();
}
inline void Msg_GsWs_AppResVer_Push::_internal_set_appver(const std::string& value) {
  
  appver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_GsWs_AppResVer_Push::_internal_mutable_appver() {
  
  return appver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_GsWs_AppResVer_Push::release_appver() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_GsWs_AppResVer_Push.AppVer)
  return appver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_GsWs_AppResVer_Push::set_allocated_appver(std::string* appver) {
  if (appver != nullptr) {
    
  } else {
    
  }
  appver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appver,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (appver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    appver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_GsWs_AppResVer_Push.AppVer)
}

// string ResVer = 2;
inline void Msg_GsWs_AppResVer_Push::clear_resver() {
  resver_.ClearToEmpty();
}
inline const std::string& Msg_GsWs_AppResVer_Push::resver() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GsWs_AppResVer_Push.ResVer)
  return _internal_resver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_GsWs_AppResVer_Push::set_resver(ArgT0&& arg0, ArgT... args) {
 
 resver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_GsWs_AppResVer_Push.ResVer)
}
inline std::string* Msg_GsWs_AppResVer_Push::mutable_resver() {
  std::string* _s = _internal_mutable_resver();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GsWs_AppResVer_Push.ResVer)
  return _s;
}
inline const std::string& Msg_GsWs_AppResVer_Push::_internal_resver() const {
  return resver_.Get();
}
inline void Msg_GsWs_AppResVer_Push::_internal_set_resver(const std::string& value) {
  
  resver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_GsWs_AppResVer_Push::_internal_mutable_resver() {
  
  return resver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_GsWs_AppResVer_Push::release_resver() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_GsWs_AppResVer_Push.ResVer)
  return resver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_GsWs_AppResVer_Push::set_allocated_resver(std::string* resver) {
  if (resver != nullptr) {
    
  } else {
    
  }
  resver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resver,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (resver_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    resver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_GsWs_AppResVer_Push.ResVer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XrPb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::XrPb::MsgSvrMod_GsWs_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::MsgSvrMod_GsWs_MsgId>() {
  return ::XrPb::MsgSvrMod_GsWs_MsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_2fMsgGsWs_2eproto
