// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/MsgSvrModule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_2fMsgSvrModule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_2fMsgSvrModule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_2fMsgSvrModule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_2fMsgSvrModule_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fMsgSvrModule_2eproto;
namespace XrPb {
class MsgSvrMod;
struct MsgSvrModDefaultTypeInternal;
extern MsgSvrModDefaultTypeInternal _MsgSvrMod_default_instance_;
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> ::XrPb::MsgSvrMod* Arena::CreateMaybeMessage<::XrPb::MsgSvrMod>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XrPb {

enum MsgSvrMod_ModId : int {
  MsgSvrMod_ModId_NetSvrNone = 0,
  MsgSvrMod_ModId_NetSvrBegin = 100,
  MsgSvrMod_ModId_NetSvrCommon = 101,
  MsgSvrMod_ModId_NetSvrEnd = 255,
  MsgSvrMod_ModId_MsgSvrMod_ModId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgSvrMod_ModId_MsgSvrMod_ModId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgSvrMod_ModId_IsValid(int value);
constexpr MsgSvrMod_ModId MsgSvrMod_ModId_ModId_MIN = MsgSvrMod_ModId_NetSvrNone;
constexpr MsgSvrMod_ModId MsgSvrMod_ModId_ModId_MAX = MsgSvrMod_ModId_NetSvrEnd;
constexpr int MsgSvrMod_ModId_ModId_ARRAYSIZE = MsgSvrMod_ModId_ModId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgSvrMod_ModId_descriptor();
template<typename T>
inline const std::string& MsgSvrMod_ModId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgSvrMod_ModId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgSvrMod_ModId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgSvrMod_ModId_descriptor(), enum_t_value);
}
inline bool MsgSvrMod_ModId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgSvrMod_ModId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgSvrMod_ModId>(
    MsgSvrMod_ModId_descriptor(), name, value);
}
// ===================================================================

class MsgSvrMod final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.MsgSvrMod) */ {
 public:
  inline MsgSvrMod() : MsgSvrMod(nullptr) {}
  explicit constexpr MsgSvrMod(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSvrMod(const MsgSvrMod& from);
  MsgSvrMod(MsgSvrMod&& from) noexcept
    : MsgSvrMod() {
    *this = ::std::move(from);
  }

  inline MsgSvrMod& operator=(const MsgSvrMod& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSvrMod& operator=(MsgSvrMod&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSvrMod& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSvrMod* internal_default_instance() {
    return reinterpret_cast<const MsgSvrMod*>(
               &_MsgSvrMod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgSvrMod& a, MsgSvrMod& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSvrMod* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSvrMod* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSvrMod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSvrMod>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgSvrMod& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgSvrMod& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.MsgSvrMod";
  }
  protected:
  explicit MsgSvrMod(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgSvrMod_ModId ModId;
  static constexpr ModId NetSvrNone =
    MsgSvrMod_ModId_NetSvrNone;
  static constexpr ModId NetSvrBegin =
    MsgSvrMod_ModId_NetSvrBegin;
  static constexpr ModId NetSvrCommon =
    MsgSvrMod_ModId_NetSvrCommon;
  static constexpr ModId NetSvrEnd =
    MsgSvrMod_ModId_NetSvrEnd;
  static inline bool ModId_IsValid(int value) {
    return MsgSvrMod_ModId_IsValid(value);
  }
  static constexpr ModId ModId_MIN =
    MsgSvrMod_ModId_ModId_MIN;
  static constexpr ModId ModId_MAX =
    MsgSvrMod_ModId_ModId_MAX;
  static constexpr int ModId_ARRAYSIZE =
    MsgSvrMod_ModId_ModId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ModId_descriptor() {
    return MsgSvrMod_ModId_descriptor();
  }
  template<typename T>
  static inline const std::string& ModId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ModId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ModId_Name.");
    return MsgSvrMod_ModId_Name(enum_t_value);
  }
  static inline bool ModId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ModId* value) {
    return MsgSvrMod_ModId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.MsgSvrMod)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgSvrModule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgSvrMod

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace XrPb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::XrPb::MsgSvrMod_ModId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::MsgSvrMod_ModId>() {
  return ::XrPb::MsgSvrMod_ModId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_2fMsgSvrModule_2eproto
