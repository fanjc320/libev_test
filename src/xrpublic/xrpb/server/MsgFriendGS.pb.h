// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/MsgFriendGS.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_2fMsgFriendGS_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_2fMsgFriendGS_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "server/MsgSvrCommon.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_2fMsgFriendGS_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_2fMsgFriendGS_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fMsgFriendGS_2eproto;
namespace XrPb {
class MsgSvrMod_FriendGS;
struct MsgSvrMod_FriendGSDefaultTypeInternal;
extern MsgSvrMod_FriendGSDefaultTypeInternal _MsgSvrMod_FriendGS_default_instance_;
class Msg_FriendInviteCondition;
struct Msg_FriendInviteConditionDefaultTypeInternal;
extern Msg_FriendInviteConditionDefaultTypeInternal _Msg_FriendInviteCondition_default_instance_;
class Msg_FriendPlayerInfoUpdate;
struct Msg_FriendPlayerInfoUpdateDefaultTypeInternal;
extern Msg_FriendPlayerInfoUpdateDefaultTypeInternal _Msg_FriendPlayerInfoUpdate_default_instance_;
class Msg_GetOtherPlayerDataAck;
struct Msg_GetOtherPlayerDataAckDefaultTypeInternal;
extern Msg_GetOtherPlayerDataAckDefaultTypeInternal _Msg_GetOtherPlayerDataAck_default_instance_;
class Msg_GetOtherPlayerDataReq;
struct Msg_GetOtherPlayerDataReqDefaultTypeInternal;
extern Msg_GetOtherPlayerDataReqDefaultTypeInternal _Msg_GetOtherPlayerDataReq_default_instance_;
class Msg_LoginFriendServer;
struct Msg_LoginFriendServerDefaultTypeInternal;
extern Msg_LoginFriendServerDefaultTypeInternal _Msg_LoginFriendServer_default_instance_;
class Msg_LogoutFriendServer;
struct Msg_LogoutFriendServerDefaultTypeInternal;
extern Msg_LogoutFriendServerDefaultTypeInternal _Msg_LogoutFriendServer_default_instance_;
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> ::XrPb::MsgSvrMod_FriendGS* Arena::CreateMaybeMessage<::XrPb::MsgSvrMod_FriendGS>(Arena*);
template<> ::XrPb::Msg_FriendInviteCondition* Arena::CreateMaybeMessage<::XrPb::Msg_FriendInviteCondition>(Arena*);
template<> ::XrPb::Msg_FriendPlayerInfoUpdate* Arena::CreateMaybeMessage<::XrPb::Msg_FriendPlayerInfoUpdate>(Arena*);
template<> ::XrPb::Msg_GetOtherPlayerDataAck* Arena::CreateMaybeMessage<::XrPb::Msg_GetOtherPlayerDataAck>(Arena*);
template<> ::XrPb::Msg_GetOtherPlayerDataReq* Arena::CreateMaybeMessage<::XrPb::Msg_GetOtherPlayerDataReq>(Arena*);
template<> ::XrPb::Msg_LoginFriendServer* Arena::CreateMaybeMessage<::XrPb::Msg_LoginFriendServer>(Arena*);
template<> ::XrPb::Msg_LogoutFriendServer* Arena::CreateMaybeMessage<::XrPb::Msg_LogoutFriendServer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XrPb {

enum MsgSvrMod_FriendGS_MsgId : int {
  MsgSvrMod_FriendGS_MsgId_Msg_None = 0,
  MsgSvrMod_FriendGS_MsgId_Msg_LoginFriendServer = 1,
  MsgSvrMod_FriendGS_MsgId_Msg_LogoutFriendServer = 2,
  MsgSvrMod_FriendGS_MsgId_Msg_FriendPlayerInfoUpdate = 3,
  MsgSvrMod_FriendGS_MsgId_Msg_FriendInviteCondition = 4,
  MsgSvrMod_FriendGS_MsgId_Msg_GetOtherPlayerDataReq = 5,
  MsgSvrMod_FriendGS_MsgId_Msg_GetOtherPlayerDataAck = 6,
  MsgSvrMod_FriendGS_MsgId_MsgSvrMod_FriendGS_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgSvrMod_FriendGS_MsgId_MsgSvrMod_FriendGS_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgSvrMod_FriendGS_MsgId_IsValid(int value);
constexpr MsgSvrMod_FriendGS_MsgId MsgSvrMod_FriendGS_MsgId_MsgId_MIN = MsgSvrMod_FriendGS_MsgId_Msg_None;
constexpr MsgSvrMod_FriendGS_MsgId MsgSvrMod_FriendGS_MsgId_MsgId_MAX = MsgSvrMod_FriendGS_MsgId_Msg_GetOtherPlayerDataAck;
constexpr int MsgSvrMod_FriendGS_MsgId_MsgId_ARRAYSIZE = MsgSvrMod_FriendGS_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgSvrMod_FriendGS_MsgId_descriptor();
template<typename T>
inline const std::string& MsgSvrMod_FriendGS_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgSvrMod_FriendGS_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgSvrMod_FriendGS_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgSvrMod_FriendGS_MsgId_descriptor(), enum_t_value);
}
inline bool MsgSvrMod_FriendGS_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgSvrMod_FriendGS_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgSvrMod_FriendGS_MsgId>(
    MsgSvrMod_FriendGS_MsgId_descriptor(), name, value);
}
// ===================================================================

class MsgSvrMod_FriendGS final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.MsgSvrMod_FriendGS) */ {
 public:
  inline MsgSvrMod_FriendGS() : MsgSvrMod_FriendGS(nullptr) {}
  explicit constexpr MsgSvrMod_FriendGS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSvrMod_FriendGS(const MsgSvrMod_FriendGS& from);
  MsgSvrMod_FriendGS(MsgSvrMod_FriendGS&& from) noexcept
    : MsgSvrMod_FriendGS() {
    *this = ::std::move(from);
  }

  inline MsgSvrMod_FriendGS& operator=(const MsgSvrMod_FriendGS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSvrMod_FriendGS& operator=(MsgSvrMod_FriendGS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSvrMod_FriendGS& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSvrMod_FriendGS* internal_default_instance() {
    return reinterpret_cast<const MsgSvrMod_FriendGS*>(
               &_MsgSvrMod_FriendGS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgSvrMod_FriendGS& a, MsgSvrMod_FriendGS& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSvrMod_FriendGS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSvrMod_FriendGS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSvrMod_FriendGS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSvrMod_FriendGS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgSvrMod_FriendGS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgSvrMod_FriendGS& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.MsgSvrMod_FriendGS";
  }
  protected:
  explicit MsgSvrMod_FriendGS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgSvrMod_FriendGS_MsgId MsgId;
  static constexpr MsgId Msg_None =
    MsgSvrMod_FriendGS_MsgId_Msg_None;
  static constexpr MsgId Msg_LoginFriendServer =
    MsgSvrMod_FriendGS_MsgId_Msg_LoginFriendServer;
  static constexpr MsgId Msg_LogoutFriendServer =
    MsgSvrMod_FriendGS_MsgId_Msg_LogoutFriendServer;
  static constexpr MsgId Msg_FriendPlayerInfoUpdate =
    MsgSvrMod_FriendGS_MsgId_Msg_FriendPlayerInfoUpdate;
  static constexpr MsgId Msg_FriendInviteCondition =
    MsgSvrMod_FriendGS_MsgId_Msg_FriendInviteCondition;
  static constexpr MsgId Msg_GetOtherPlayerDataReq =
    MsgSvrMod_FriendGS_MsgId_Msg_GetOtherPlayerDataReq;
  static constexpr MsgId Msg_GetOtherPlayerDataAck =
    MsgSvrMod_FriendGS_MsgId_Msg_GetOtherPlayerDataAck;
  static inline bool MsgId_IsValid(int value) {
    return MsgSvrMod_FriendGS_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    MsgSvrMod_FriendGS_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    MsgSvrMod_FriendGS_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    MsgSvrMod_FriendGS_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return MsgSvrMod_FriendGS_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return MsgSvrMod_FriendGS_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return MsgSvrMod_FriendGS_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.MsgSvrMod_FriendGS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgFriendGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_LoginFriendServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_LoginFriendServer) */ {
 public:
  inline Msg_LoginFriendServer() : Msg_LoginFriendServer(nullptr) {}
  ~Msg_LoginFriendServer() override;
  explicit constexpr Msg_LoginFriendServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_LoginFriendServer(const Msg_LoginFriendServer& from);
  Msg_LoginFriendServer(Msg_LoginFriendServer&& from) noexcept
    : Msg_LoginFriendServer() {
    *this = ::std::move(from);
  }

  inline Msg_LoginFriendServer& operator=(const Msg_LoginFriendServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_LoginFriendServer& operator=(Msg_LoginFriendServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_LoginFriendServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_LoginFriendServer* internal_default_instance() {
    return reinterpret_cast<const Msg_LoginFriendServer*>(
               &_Msg_LoginFriendServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Msg_LoginFriendServer& a, Msg_LoginFriendServer& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_LoginFriendServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_LoginFriendServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_LoginFriendServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_LoginFriendServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_LoginFriendServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_LoginFriendServer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_LoginFriendServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_LoginFriendServer";
  }
  protected:
  explicit Msg_LoginFriendServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
  };
  // .XrPb.Svr_Role_Info role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::XrPb::Svr_Role_Info& role() const;
  PROTOBUF_NODISCARD ::XrPb::Svr_Role_Info* release_role();
  ::XrPb::Svr_Role_Info* mutable_role();
  void set_allocated_role(::XrPb::Svr_Role_Info* role);
  private:
  const ::XrPb::Svr_Role_Info& _internal_role() const;
  ::XrPb::Svr_Role_Info* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::XrPb::Svr_Role_Info* role);
  ::XrPb::Svr_Role_Info* unsafe_arena_release_role();

  // @@protoc_insertion_point(class_scope:XrPb.Msg_LoginFriendServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::XrPb::Svr_Role_Info* role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgFriendGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_LogoutFriendServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_LogoutFriendServer) */ {
 public:
  inline Msg_LogoutFriendServer() : Msg_LogoutFriendServer(nullptr) {}
  ~Msg_LogoutFriendServer() override;
  explicit constexpr Msg_LogoutFriendServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_LogoutFriendServer(const Msg_LogoutFriendServer& from);
  Msg_LogoutFriendServer(Msg_LogoutFriendServer&& from) noexcept
    : Msg_LogoutFriendServer() {
    *this = ::std::move(from);
  }

  inline Msg_LogoutFriendServer& operator=(const Msg_LogoutFriendServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_LogoutFriendServer& operator=(Msg_LogoutFriendServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_LogoutFriendServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_LogoutFriendServer* internal_default_instance() {
    return reinterpret_cast<const Msg_LogoutFriendServer*>(
               &_Msg_LogoutFriendServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Msg_LogoutFriendServer& a, Msg_LogoutFriendServer& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_LogoutFriendServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_LogoutFriendServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_LogoutFriendServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_LogoutFriendServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_LogoutFriendServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_LogoutFriendServer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_LogoutFriendServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_LogoutFriendServer";
  }
  protected:
  explicit Msg_LogoutFriendServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccIdFieldNumber = 1,
  };
  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_LogoutFriendServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t acc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgFriendGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_FriendPlayerInfoUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_FriendPlayerInfoUpdate) */ {
 public:
  inline Msg_FriendPlayerInfoUpdate() : Msg_FriendPlayerInfoUpdate(nullptr) {}
  ~Msg_FriendPlayerInfoUpdate() override;
  explicit constexpr Msg_FriendPlayerInfoUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_FriendPlayerInfoUpdate(const Msg_FriendPlayerInfoUpdate& from);
  Msg_FriendPlayerInfoUpdate(Msg_FriendPlayerInfoUpdate&& from) noexcept
    : Msg_FriendPlayerInfoUpdate() {
    *this = ::std::move(from);
  }

  inline Msg_FriendPlayerInfoUpdate& operator=(const Msg_FriendPlayerInfoUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_FriendPlayerInfoUpdate& operator=(Msg_FriendPlayerInfoUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_FriendPlayerInfoUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_FriendPlayerInfoUpdate* internal_default_instance() {
    return reinterpret_cast<const Msg_FriendPlayerInfoUpdate*>(
               &_Msg_FriendPlayerInfoUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Msg_FriendPlayerInfoUpdate& a, Msg_FriendPlayerInfoUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_FriendPlayerInfoUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_FriendPlayerInfoUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_FriendPlayerInfoUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_FriendPlayerInfoUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_FriendPlayerInfoUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_FriendPlayerInfoUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_FriendPlayerInfoUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_FriendPlayerInfoUpdate";
  }
  protected:
  explicit Msg_FriendPlayerInfoUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleFieldNumber = 1,
  };
  // .XrPb.Svr_Role_Info role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  const ::XrPb::Svr_Role_Info& role() const;
  PROTOBUF_NODISCARD ::XrPb::Svr_Role_Info* release_role();
  ::XrPb::Svr_Role_Info* mutable_role();
  void set_allocated_role(::XrPb::Svr_Role_Info* role);
  private:
  const ::XrPb::Svr_Role_Info& _internal_role() const;
  ::XrPb::Svr_Role_Info* _internal_mutable_role();
  public:
  void unsafe_arena_set_allocated_role(
      ::XrPb::Svr_Role_Info* role);
  ::XrPb::Svr_Role_Info* unsafe_arena_release_role();

  // @@protoc_insertion_point(class_scope:XrPb.Msg_FriendPlayerInfoUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::XrPb::Svr_Role_Info* role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgFriendGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_FriendInviteCondition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_FriendInviteCondition) */ {
 public:
  inline Msg_FriendInviteCondition() : Msg_FriendInviteCondition(nullptr) {}
  ~Msg_FriendInviteCondition() override;
  explicit constexpr Msg_FriendInviteCondition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_FriendInviteCondition(const Msg_FriendInviteCondition& from);
  Msg_FriendInviteCondition(Msg_FriendInviteCondition&& from) noexcept
    : Msg_FriendInviteCondition() {
    *this = ::std::move(from);
  }

  inline Msg_FriendInviteCondition& operator=(const Msg_FriendInviteCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_FriendInviteCondition& operator=(Msg_FriendInviteCondition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_FriendInviteCondition& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_FriendInviteCondition* internal_default_instance() {
    return reinterpret_cast<const Msg_FriendInviteCondition*>(
               &_Msg_FriendInviteCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Msg_FriendInviteCondition& a, Msg_FriendInviteCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_FriendInviteCondition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_FriendInviteCondition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_FriendInviteCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_FriendInviteCondition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_FriendInviteCondition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_FriendInviteCondition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_FriendInviteCondition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_FriendInviteCondition";
  }
  protected:
  explicit Msg_FriendInviteCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // int64 acc_id = 1;
  void clear_acc_id();
  int64_t acc_id() const;
  void set_acc_id(int64_t value);
  private:
  int64_t _internal_acc_id() const;
  void _internal_set_acc_id(int64_t value);
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // uint32 value = 3;
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_FriendInviteCondition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t acc_id_;
  int32_t type_;
  uint32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgFriendGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_GetOtherPlayerDataReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GetOtherPlayerDataReq) */ {
 public:
  inline Msg_GetOtherPlayerDataReq() : Msg_GetOtherPlayerDataReq(nullptr) {}
  ~Msg_GetOtherPlayerDataReq() override;
  explicit constexpr Msg_GetOtherPlayerDataReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GetOtherPlayerDataReq(const Msg_GetOtherPlayerDataReq& from);
  Msg_GetOtherPlayerDataReq(Msg_GetOtherPlayerDataReq&& from) noexcept
    : Msg_GetOtherPlayerDataReq() {
    *this = ::std::move(from);
  }

  inline Msg_GetOtherPlayerDataReq& operator=(const Msg_GetOtherPlayerDataReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GetOtherPlayerDataReq& operator=(Msg_GetOtherPlayerDataReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GetOtherPlayerDataReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GetOtherPlayerDataReq* internal_default_instance() {
    return reinterpret_cast<const Msg_GetOtherPlayerDataReq*>(
               &_Msg_GetOtherPlayerDataReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Msg_GetOtherPlayerDataReq& a, Msg_GetOtherPlayerDataReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GetOtherPlayerDataReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GetOtherPlayerDataReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GetOtherPlayerDataReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GetOtherPlayerDataReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GetOtherPlayerDataReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GetOtherPlayerDataReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GetOtherPlayerDataReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GetOtherPlayerDataReq";
  }
  protected:
  explicit Msg_GetOtherPlayerDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckIdFieldNumber = 1,
    kCheckedIdFieldNumber = 2,
    kProtoIdFieldNumber = 3,
    kSeqIdFieldNumber = 4,
    kIdFieldNumber = 5,
  };
  // int64 check_id = 1;
  void clear_check_id();
  int64_t check_id() const;
  void set_check_id(int64_t value);
  private:
  int64_t _internal_check_id() const;
  void _internal_set_check_id(int64_t value);
  public:

  // int64 checked_id = 2;
  void clear_checked_id();
  int64_t checked_id() const;
  void set_checked_id(int64_t value);
  private:
  int64_t _internal_checked_id() const;
  void _internal_set_checked_id(int64_t value);
  public:

  // uint32 proto_id = 3;
  void clear_proto_id();
  uint32_t proto_id() const;
  void set_proto_id(uint32_t value);
  private:
  uint32_t _internal_proto_id() const;
  void _internal_set_proto_id(uint32_t value);
  public:

  // uint32 seq_id = 4;
  void clear_seq_id();
  uint32_t seq_id() const;
  void set_seq_id(uint32_t value);
  private:
  uint32_t _internal_seq_id() const;
  void _internal_set_seq_id(uint32_t value);
  public:

  // optional uint32 id = 5;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GetOtherPlayerDataReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t check_id_;
  int64_t checked_id_;
  uint32_t proto_id_;
  uint32_t seq_id_;
  uint32_t id_;
  friend struct ::TableStruct_server_2fMsgFriendGS_2eproto;
};
// -------------------------------------------------------------------

class Msg_GetOtherPlayerDataAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_GetOtherPlayerDataAck) */ {
 public:
  inline Msg_GetOtherPlayerDataAck() : Msg_GetOtherPlayerDataAck(nullptr) {}
  ~Msg_GetOtherPlayerDataAck() override;
  explicit constexpr Msg_GetOtherPlayerDataAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_GetOtherPlayerDataAck(const Msg_GetOtherPlayerDataAck& from);
  Msg_GetOtherPlayerDataAck(Msg_GetOtherPlayerDataAck&& from) noexcept
    : Msg_GetOtherPlayerDataAck() {
    *this = ::std::move(from);
  }

  inline Msg_GetOtherPlayerDataAck& operator=(const Msg_GetOtherPlayerDataAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_GetOtherPlayerDataAck& operator=(Msg_GetOtherPlayerDataAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_GetOtherPlayerDataAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_GetOtherPlayerDataAck* internal_default_instance() {
    return reinterpret_cast<const Msg_GetOtherPlayerDataAck*>(
               &_Msg_GetOtherPlayerDataAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Msg_GetOtherPlayerDataAck& a, Msg_GetOtherPlayerDataAck& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_GetOtherPlayerDataAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_GetOtherPlayerDataAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_GetOtherPlayerDataAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_GetOtherPlayerDataAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_GetOtherPlayerDataAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_GetOtherPlayerDataAck& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_GetOtherPlayerDataAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_GetOtherPlayerDataAck";
  }
  protected:
  explicit Msg_GetOtherPlayerDataAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 7,
    kCheckIdFieldNumber = 1,
    kCheckedIdFieldNumber = 2,
    kProtoIdFieldNumber = 3,
    kSeqIdFieldNumber = 4,
    kIdFieldNumber = 5,
    kRetCodeFieldNumber = 6,
  };
  // optional bytes data = 7;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 check_id = 1;
  void clear_check_id();
  int64_t check_id() const;
  void set_check_id(int64_t value);
  private:
  int64_t _internal_check_id() const;
  void _internal_set_check_id(int64_t value);
  public:

  // int64 checked_id = 2;
  void clear_checked_id();
  int64_t checked_id() const;
  void set_checked_id(int64_t value);
  private:
  int64_t _internal_checked_id() const;
  void _internal_set_checked_id(int64_t value);
  public:

  // uint32 proto_id = 3;
  void clear_proto_id();
  uint32_t proto_id() const;
  void set_proto_id(uint32_t value);
  private:
  uint32_t _internal_proto_id() const;
  void _internal_set_proto_id(uint32_t value);
  public:

  // uint32 seq_id = 4;
  void clear_seq_id();
  uint32_t seq_id() const;
  void set_seq_id(uint32_t value);
  private:
  uint32_t _internal_seq_id() const;
  void _internal_set_seq_id(uint32_t value);
  public:

  // optional uint32 id = 5;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 ret_code = 6;
  void clear_ret_code();
  uint32_t ret_code() const;
  void set_ret_code(uint32_t value);
  private:
  uint32_t _internal_ret_code() const;
  void _internal_set_ret_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_GetOtherPlayerDataAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int64_t check_id_;
  int64_t checked_id_;
  uint32_t proto_id_;
  uint32_t seq_id_;
  uint32_t id_;
  uint32_t ret_code_;
  friend struct ::TableStruct_server_2fMsgFriendGS_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgSvrMod_FriendGS

// -------------------------------------------------------------------

// Msg_LoginFriendServer

// .XrPb.Svr_Role_Info role = 1;
inline bool Msg_LoginFriendServer::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool Msg_LoginFriendServer::has_role() const {
  return _internal_has_role();
}
inline const ::XrPb::Svr_Role_Info& Msg_LoginFriendServer::_internal_role() const {
  const ::XrPb::Svr_Role_Info* p = role_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::Svr_Role_Info&>(
      ::XrPb::_Svr_Role_Info_default_instance_);
}
inline const ::XrPb::Svr_Role_Info& Msg_LoginFriendServer::role() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_LoginFriendServer.role)
  return _internal_role();
}
inline void Msg_LoginFriendServer::unsafe_arena_set_allocated_role(
    ::XrPb::Svr_Role_Info* role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_LoginFriendServer.role)
}
inline ::XrPb::Svr_Role_Info* Msg_LoginFriendServer::release_role() {
  
  ::XrPb::Svr_Role_Info* temp = role_;
  role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::Svr_Role_Info* Msg_LoginFriendServer::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_LoginFriendServer.role)
  
  ::XrPb::Svr_Role_Info* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::XrPb::Svr_Role_Info* Msg_LoginFriendServer::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::Svr_Role_Info>(GetArenaForAllocation());
    role_ = p;
  }
  return role_;
}
inline ::XrPb::Svr_Role_Info* Msg_LoginFriendServer::mutable_role() {
  ::XrPb::Svr_Role_Info* _msg = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_LoginFriendServer.role)
  return _msg;
}
inline void Msg_LoginFriendServer::set_allocated_role(::XrPb::Svr_Role_Info* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role));
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_LoginFriendServer.role)
}

// -------------------------------------------------------------------

// Msg_LogoutFriendServer

// int64 acc_id = 1;
inline void Msg_LogoutFriendServer::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_LogoutFriendServer::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_LogoutFriendServer::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_LogoutFriendServer.acc_id)
  return _internal_acc_id();
}
inline void Msg_LogoutFriendServer::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_LogoutFriendServer::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_LogoutFriendServer.acc_id)
}

// -------------------------------------------------------------------

// Msg_FriendPlayerInfoUpdate

// .XrPb.Svr_Role_Info role = 1;
inline bool Msg_FriendPlayerInfoUpdate::_internal_has_role() const {
  return this != internal_default_instance() && role_ != nullptr;
}
inline bool Msg_FriendPlayerInfoUpdate::has_role() const {
  return _internal_has_role();
}
inline const ::XrPb::Svr_Role_Info& Msg_FriendPlayerInfoUpdate::_internal_role() const {
  const ::XrPb::Svr_Role_Info* p = role_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::Svr_Role_Info&>(
      ::XrPb::_Svr_Role_Info_default_instance_);
}
inline const ::XrPb::Svr_Role_Info& Msg_FriendPlayerInfoUpdate::role() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_FriendPlayerInfoUpdate.role)
  return _internal_role();
}
inline void Msg_FriendPlayerInfoUpdate::unsafe_arena_set_allocated_role(
    ::XrPb::Svr_Role_Info* role) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_FriendPlayerInfoUpdate.role)
}
inline ::XrPb::Svr_Role_Info* Msg_FriendPlayerInfoUpdate::release_role() {
  
  ::XrPb::Svr_Role_Info* temp = role_;
  role_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::Svr_Role_Info* Msg_FriendPlayerInfoUpdate::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_FriendPlayerInfoUpdate.role)
  
  ::XrPb::Svr_Role_Info* temp = role_;
  role_ = nullptr;
  return temp;
}
inline ::XrPb::Svr_Role_Info* Msg_FriendPlayerInfoUpdate::_internal_mutable_role() {
  
  if (role_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::Svr_Role_Info>(GetArenaForAllocation());
    role_ = p;
  }
  return role_;
}
inline ::XrPb::Svr_Role_Info* Msg_FriendPlayerInfoUpdate::mutable_role() {
  ::XrPb::Svr_Role_Info* _msg = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_FriendPlayerInfoUpdate.role)
  return _msg;
}
inline void Msg_FriendPlayerInfoUpdate::set_allocated_role(::XrPb::Svr_Role_Info* role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(role_);
  }
  if (role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(role));
    if (message_arena != submessage_arena) {
      role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, role, submessage_arena);
    }
    
  } else {
    
  }
  role_ = role;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_FriendPlayerInfoUpdate.role)
}

// -------------------------------------------------------------------

// Msg_FriendInviteCondition

// int64 acc_id = 1;
inline void Msg_FriendInviteCondition::clear_acc_id() {
  acc_id_ = int64_t{0};
}
inline int64_t Msg_FriendInviteCondition::_internal_acc_id() const {
  return acc_id_;
}
inline int64_t Msg_FriendInviteCondition::acc_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_FriendInviteCondition.acc_id)
  return _internal_acc_id();
}
inline void Msg_FriendInviteCondition::_internal_set_acc_id(int64_t value) {
  
  acc_id_ = value;
}
inline void Msg_FriendInviteCondition::set_acc_id(int64_t value) {
  _internal_set_acc_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_FriendInviteCondition.acc_id)
}

// int32 type = 2;
inline void Msg_FriendInviteCondition::clear_type() {
  type_ = 0;
}
inline int32_t Msg_FriendInviteCondition::_internal_type() const {
  return type_;
}
inline int32_t Msg_FriendInviteCondition::type() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_FriendInviteCondition.type)
  return _internal_type();
}
inline void Msg_FriendInviteCondition::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void Msg_FriendInviteCondition::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_FriendInviteCondition.type)
}

// uint32 value = 3;
inline void Msg_FriendInviteCondition::clear_value() {
  value_ = 0u;
}
inline uint32_t Msg_FriendInviteCondition::_internal_value() const {
  return value_;
}
inline uint32_t Msg_FriendInviteCondition::value() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_FriendInviteCondition.value)
  return _internal_value();
}
inline void Msg_FriendInviteCondition::_internal_set_value(uint32_t value) {
  
  value_ = value;
}
inline void Msg_FriendInviteCondition::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_FriendInviteCondition.value)
}

// -------------------------------------------------------------------

// Msg_GetOtherPlayerDataReq

// int64 check_id = 1;
inline void Msg_GetOtherPlayerDataReq::clear_check_id() {
  check_id_ = int64_t{0};
}
inline int64_t Msg_GetOtherPlayerDataReq::_internal_check_id() const {
  return check_id_;
}
inline int64_t Msg_GetOtherPlayerDataReq::check_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetOtherPlayerDataReq.check_id)
  return _internal_check_id();
}
inline void Msg_GetOtherPlayerDataReq::_internal_set_check_id(int64_t value) {
  
  check_id_ = value;
}
inline void Msg_GetOtherPlayerDataReq::set_check_id(int64_t value) {
  _internal_set_check_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetOtherPlayerDataReq.check_id)
}

// int64 checked_id = 2;
inline void Msg_GetOtherPlayerDataReq::clear_checked_id() {
  checked_id_ = int64_t{0};
}
inline int64_t Msg_GetOtherPlayerDataReq::_internal_checked_id() const {
  return checked_id_;
}
inline int64_t Msg_GetOtherPlayerDataReq::checked_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetOtherPlayerDataReq.checked_id)
  return _internal_checked_id();
}
inline void Msg_GetOtherPlayerDataReq::_internal_set_checked_id(int64_t value) {
  
  checked_id_ = value;
}
inline void Msg_GetOtherPlayerDataReq::set_checked_id(int64_t value) {
  _internal_set_checked_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetOtherPlayerDataReq.checked_id)
}

// uint32 proto_id = 3;
inline void Msg_GetOtherPlayerDataReq::clear_proto_id() {
  proto_id_ = 0u;
}
inline uint32_t Msg_GetOtherPlayerDataReq::_internal_proto_id() const {
  return proto_id_;
}
inline uint32_t Msg_GetOtherPlayerDataReq::proto_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetOtherPlayerDataReq.proto_id)
  return _internal_proto_id();
}
inline void Msg_GetOtherPlayerDataReq::_internal_set_proto_id(uint32_t value) {
  
  proto_id_ = value;
}
inline void Msg_GetOtherPlayerDataReq::set_proto_id(uint32_t value) {
  _internal_set_proto_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetOtherPlayerDataReq.proto_id)
}

// uint32 seq_id = 4;
inline void Msg_GetOtherPlayerDataReq::clear_seq_id() {
  seq_id_ = 0u;
}
inline uint32_t Msg_GetOtherPlayerDataReq::_internal_seq_id() const {
  return seq_id_;
}
inline uint32_t Msg_GetOtherPlayerDataReq::seq_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetOtherPlayerDataReq.seq_id)
  return _internal_seq_id();
}
inline void Msg_GetOtherPlayerDataReq::_internal_set_seq_id(uint32_t value) {
  
  seq_id_ = value;
}
inline void Msg_GetOtherPlayerDataReq::set_seq_id(uint32_t value) {
  _internal_set_seq_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetOtherPlayerDataReq.seq_id)
}

// optional uint32 id = 5;
inline bool Msg_GetOtherPlayerDataReq::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_GetOtherPlayerDataReq::has_id() const {
  return _internal_has_id();
}
inline void Msg_GetOtherPlayerDataReq::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Msg_GetOtherPlayerDataReq::_internal_id() const {
  return id_;
}
inline uint32_t Msg_GetOtherPlayerDataReq::id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetOtherPlayerDataReq.id)
  return _internal_id();
}
inline void Msg_GetOtherPlayerDataReq::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void Msg_GetOtherPlayerDataReq::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetOtherPlayerDataReq.id)
}

// -------------------------------------------------------------------

// Msg_GetOtherPlayerDataAck

// int64 check_id = 1;
inline void Msg_GetOtherPlayerDataAck::clear_check_id() {
  check_id_ = int64_t{0};
}
inline int64_t Msg_GetOtherPlayerDataAck::_internal_check_id() const {
  return check_id_;
}
inline int64_t Msg_GetOtherPlayerDataAck::check_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetOtherPlayerDataAck.check_id)
  return _internal_check_id();
}
inline void Msg_GetOtherPlayerDataAck::_internal_set_check_id(int64_t value) {
  
  check_id_ = value;
}
inline void Msg_GetOtherPlayerDataAck::set_check_id(int64_t value) {
  _internal_set_check_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetOtherPlayerDataAck.check_id)
}

// int64 checked_id = 2;
inline void Msg_GetOtherPlayerDataAck::clear_checked_id() {
  checked_id_ = int64_t{0};
}
inline int64_t Msg_GetOtherPlayerDataAck::_internal_checked_id() const {
  return checked_id_;
}
inline int64_t Msg_GetOtherPlayerDataAck::checked_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetOtherPlayerDataAck.checked_id)
  return _internal_checked_id();
}
inline void Msg_GetOtherPlayerDataAck::_internal_set_checked_id(int64_t value) {
  
  checked_id_ = value;
}
inline void Msg_GetOtherPlayerDataAck::set_checked_id(int64_t value) {
  _internal_set_checked_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetOtherPlayerDataAck.checked_id)
}

// uint32 proto_id = 3;
inline void Msg_GetOtherPlayerDataAck::clear_proto_id() {
  proto_id_ = 0u;
}
inline uint32_t Msg_GetOtherPlayerDataAck::_internal_proto_id() const {
  return proto_id_;
}
inline uint32_t Msg_GetOtherPlayerDataAck::proto_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetOtherPlayerDataAck.proto_id)
  return _internal_proto_id();
}
inline void Msg_GetOtherPlayerDataAck::_internal_set_proto_id(uint32_t value) {
  
  proto_id_ = value;
}
inline void Msg_GetOtherPlayerDataAck::set_proto_id(uint32_t value) {
  _internal_set_proto_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetOtherPlayerDataAck.proto_id)
}

// uint32 seq_id = 4;
inline void Msg_GetOtherPlayerDataAck::clear_seq_id() {
  seq_id_ = 0u;
}
inline uint32_t Msg_GetOtherPlayerDataAck::_internal_seq_id() const {
  return seq_id_;
}
inline uint32_t Msg_GetOtherPlayerDataAck::seq_id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetOtherPlayerDataAck.seq_id)
  return _internal_seq_id();
}
inline void Msg_GetOtherPlayerDataAck::_internal_set_seq_id(uint32_t value) {
  
  seq_id_ = value;
}
inline void Msg_GetOtherPlayerDataAck::set_seq_id(uint32_t value) {
  _internal_set_seq_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetOtherPlayerDataAck.seq_id)
}

// optional uint32 id = 5;
inline bool Msg_GetOtherPlayerDataAck::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_GetOtherPlayerDataAck::has_id() const {
  return _internal_has_id();
}
inline void Msg_GetOtherPlayerDataAck::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Msg_GetOtherPlayerDataAck::_internal_id() const {
  return id_;
}
inline uint32_t Msg_GetOtherPlayerDataAck::id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetOtherPlayerDataAck.id)
  return _internal_id();
}
inline void Msg_GetOtherPlayerDataAck::_internal_set_id(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void Msg_GetOtherPlayerDataAck::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetOtherPlayerDataAck.id)
}

// uint32 ret_code = 6;
inline void Msg_GetOtherPlayerDataAck::clear_ret_code() {
  ret_code_ = 0u;
}
inline uint32_t Msg_GetOtherPlayerDataAck::_internal_ret_code() const {
  return ret_code_;
}
inline uint32_t Msg_GetOtherPlayerDataAck::ret_code() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetOtherPlayerDataAck.ret_code)
  return _internal_ret_code();
}
inline void Msg_GetOtherPlayerDataAck::_internal_set_ret_code(uint32_t value) {
  
  ret_code_ = value;
}
inline void Msg_GetOtherPlayerDataAck::set_ret_code(uint32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetOtherPlayerDataAck.ret_code)
}

// optional bytes data = 7;
inline bool Msg_GetOtherPlayerDataAck::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_GetOtherPlayerDataAck::has_data() const {
  return _internal_has_data();
}
inline void Msg_GetOtherPlayerDataAck::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Msg_GetOtherPlayerDataAck::data() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_GetOtherPlayerDataAck.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_GetOtherPlayerDataAck::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_GetOtherPlayerDataAck.data)
}
inline std::string* Msg_GetOtherPlayerDataAck::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_GetOtherPlayerDataAck.data)
  return _s;
}
inline const std::string& Msg_GetOtherPlayerDataAck::_internal_data() const {
  return data_.Get();
}
inline void Msg_GetOtherPlayerDataAck::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_GetOtherPlayerDataAck::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_GetOtherPlayerDataAck::release_data() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_GetOtherPlayerDataAck.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_GetOtherPlayerDataAck::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_GetOtherPlayerDataAck.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XrPb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::XrPb::MsgSvrMod_FriendGS_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::MsgSvrMod_FriendGS_MsgId>() {
  return ::XrPb::MsgSvrMod_FriendGS_MsgId_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_2fMsgFriendGS_2eproto
