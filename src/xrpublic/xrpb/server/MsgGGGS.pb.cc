// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/MsgGGGS.proto

#include "server/MsgGGGS.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace XrPb {
constexpr MsgSvrMod_GGGS::MsgSvrMod_GGGS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MsgSvrMod_GGGSDefaultTypeInternal {
  constexpr MsgSvrMod_GGGSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgSvrMod_GGGSDefaultTypeInternal() {}
  union {
    MsgSvrMod_GGGS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgSvrMod_GGGSDefaultTypeInternal _MsgSvrMod_GGGS_default_instance_;
constexpr Msg_GG_Login_CS::Msg_GG_Login_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strusername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , strsession_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , provincename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_version_(nullptr)
  , uiaccid_(int64_t{0})
  , uisdk_(0u)
  , uiclientip_(0u)
  , uirelogin_(0u)
  , gateid_(0u)
  , province_(0)
  , gmlevel_(0u)
  , proarea_(0u){}
struct Msg_GG_Login_CSDefaultTypeInternal {
  constexpr Msg_GG_Login_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_GG_Login_CSDefaultTypeInternal() {}
  union {
    Msg_GG_Login_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_GG_Login_CSDefaultTypeInternal _Msg_GG_Login_CS_default_instance_;
constexpr Msg_GG_Login_SC::Msg_GG_Login_SC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strrolename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uiaccid_(int64_t{0})
  , uiroleid_(int64_t{0})
  , estate_(0)
{}
struct Msg_GG_Login_SCDefaultTypeInternal {
  constexpr Msg_GG_Login_SCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_GG_Login_SCDefaultTypeInternal() {}
  union {
    Msg_GG_Login_SC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_GG_Login_SCDefaultTypeInternal _Msg_GG_Login_SC_default_instance_;
constexpr Msg_GG_CreateRole_CS::Msg_GG_CreateRole_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strrolename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uiaccid_(int64_t{0})
  , icareerid_(0)
  , uigender_(0u)
  , uiiconid_(0u){}
struct Msg_GG_CreateRole_CSDefaultTypeInternal {
  constexpr Msg_GG_CreateRole_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_GG_CreateRole_CSDefaultTypeInternal() {}
  union {
    Msg_GG_CreateRole_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_GG_CreateRole_CSDefaultTypeInternal _Msg_GG_CreateRole_CS_default_instance_;
constexpr Msg_GG_CreateRole_SC::Msg_GG_CreateRole_SC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strrolename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , uiaccid_(int64_t{0})
  , uiroleid_(int64_t{0})
  , llcreatetime_(int64_t{0})
  , uilevel_(0u)
  , nretcode_(0){}
struct Msg_GG_CreateRole_SCDefaultTypeInternal {
  constexpr Msg_GG_CreateRole_SCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_GG_CreateRole_SCDefaultTypeInternal() {}
  union {
    Msg_GG_CreateRole_SC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_GG_CreateRole_SCDefaultTypeInternal _Msg_GG_CreateRole_SC_default_instance_;
constexpr Msg_GG_SavePlayer_CS::Msg_GG_SavePlayer_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uiaccid_(int64_t{0})
  , gateid_(0u){}
struct Msg_GG_SavePlayer_CSDefaultTypeInternal {
  constexpr Msg_GG_SavePlayer_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_GG_SavePlayer_CSDefaultTypeInternal() {}
  union {
    Msg_GG_SavePlayer_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_GG_SavePlayer_CSDefaultTypeInternal _Msg_GG_SavePlayer_CS_default_instance_;
constexpr Msg_GG_KickPlayer_CS::Msg_GG_KickPlayer_CS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uiaccid_(int64_t{0})
  , code_(0)
{}
struct Msg_GG_KickPlayer_CSDefaultTypeInternal {
  constexpr Msg_GG_KickPlayer_CSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_GG_KickPlayer_CSDefaultTypeInternal() {}
  union {
    Msg_GG_KickPlayer_CS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_GG_KickPlayer_CSDefaultTypeInternal _Msg_GG_KickPlayer_CS_default_instance_;
constexpr Msg_GG_Notice_PUSH::Msg_GG_Notice_PUSH(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_lst_()
  , _acc_lst_cached_byte_size_(0)
  , proto_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mod_id_(0u)
  , proto_id_(0u)
  , interval_(0u){}
struct Msg_GG_Notice_PUSHDefaultTypeInternal {
  constexpr Msg_GG_Notice_PUSHDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_GG_Notice_PUSHDefaultTypeInternal() {}
  union {
    Msg_GG_Notice_PUSH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_GG_Notice_PUSHDefaultTypeInternal _Msg_GG_Notice_PUSH_default_instance_;
}  // namespace XrPb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_server_2fMsgGGGS_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_server_2fMsgGGGS_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_server_2fMsgGGGS_2eproto = nullptr;

const uint32_t TableStruct_server_2fMsgGGGS_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::XrPb::MsgSvrMod_GGGS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_CS, uiaccid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_CS, strusername_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_CS, strsession_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_CS, uisdk_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_CS, uiclientip_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_CS, uirelogin_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_CS, gateid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_CS, province_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_CS, provincename_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_CS, gmlevel_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_CS, deviceid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_CS, proarea_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_CS, game_version_),
  5,
  0,
  1,
  6,
  7,
  8,
  9,
  10,
  2,
  11,
  3,
  12,
  4,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_SC, uiaccid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_SC, uiroleid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_SC, estate_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Login_SC, strrolename_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_CreateRole_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_CreateRole_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_CreateRole_CS, uiaccid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_CreateRole_CS, icareerid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_CreateRole_CS, uigender_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_CreateRole_CS, strrolename_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_CreateRole_CS, uiiconid_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_CreateRole_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_CreateRole_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_CreateRole_SC, uiaccid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_CreateRole_SC, uiroleid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_CreateRole_SC, strrolename_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_CreateRole_SC, uilevel_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_CreateRole_SC, llcreatetime_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_CreateRole_SC, nretcode_),
  1,
  2,
  0,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_SavePlayer_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_SavePlayer_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_SavePlayer_CS, uiaccid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_SavePlayer_CS, gateid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_KickPlayer_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_KickPlayer_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_KickPlayer_CS, uiaccid_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_KickPlayer_CS, code_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Notice_PUSH, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Notice_PUSH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Notice_PUSH, acc_lst_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Notice_PUSH, proto_msg_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Notice_PUSH, mod_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Notice_PUSH, proto_id_),
  PROTOBUF_FIELD_OFFSET(::XrPb::Msg_GG_Notice_PUSH, interval_),
  ~0u,
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::XrPb::MsgSvrMod_GGGS)},
  { 6, 25, -1, sizeof(::XrPb::Msg_GG_Login_CS)},
  { 38, 48, -1, sizeof(::XrPb::Msg_GG_Login_SC)},
  { 52, 63, -1, sizeof(::XrPb::Msg_GG_CreateRole_CS)},
  { 68, 80, -1, sizeof(::XrPb::Msg_GG_CreateRole_SC)},
  { 86, 94, -1, sizeof(::XrPb::Msg_GG_SavePlayer_CS)},
  { 96, 104, -1, sizeof(::XrPb::Msg_GG_KickPlayer_CS)},
  { 106, 117, -1, sizeof(::XrPb::Msg_GG_Notice_PUSH)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_MsgSvrMod_GGGS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_GG_Login_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_GG_Login_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_GG_CreateRole_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_GG_CreateRole_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_GG_SavePlayer_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_GG_KickPlayer_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::XrPb::_Msg_GG_Notice_PUSH_default_instance_),
};

const char descriptor_table_protodef_server_2fMsgGGGS_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024server/MsgGGGS.proto\022\004XrPb\032\023client/Com"
  "mon.proto\"\325\001\n\016MsgSvrMod_GGGS\"\302\001\n\005MsgId\022\017"
  "\n\013Msg_GG_None\020\000\022\023\n\017Msg_GG_Login_CS\020\001\022\023\n\017"
  "Msg_GG_Login_SC\020\002\022\030\n\024Msg_GG_CreateRole_C"
  "S\020\003\022\030\n\024Msg_GG_CreateRole_SC\020\004\022\030\n\024Msg_GG_"
  "SavePlayer_CS\020\005\022\030\n\024Msg_GG_KickPlayer_CS\020"
  "\006\022\026\n\022Msg_GG_Notice_PUSH\020\007\"\210\004\n\017Msg_GG_Log"
  "in_CS\022\024\n\007uiAccID\030\001 \001(\003H\000\210\001\001\022\030\n\013strUserna"
  "me\030\002 \001(\tH\001\210\001\001\022\027\n\nstrSession\030\003 \001(\tH\002\210\001\001\022\022"
  "\n\005uiSdk\030\004 \001(\rH\003\210\001\001\022\027\n\nuiClientIp\030\005 \001(\rH\004"
  "\210\001\001\022\026\n\tuiReLogin\030\006 \001(\rH\005\210\001\001\022\023\n\006gateid\030\007 "
  "\001(\rH\006\210\001\001\022\025\n\010province\030\010 \001(\005H\007\210\001\001\022\031\n\014provi"
  "ncename\030\t \001(\tH\010\210\001\001\022\024\n\007gmlevel\030\n \001(\rH\t\210\001\001"
  "\022\025\n\010deviceid\030\013 \001(\tH\n\210\001\001\022\024\n\007proarea\030\014 \001(\r"
  "H\013\210\001\001\022,\n\014game_version\030\r \001(\0132\021.XrPb.GameV"
  "ersionH\014\210\001\001B\n\n\010_uiAccIDB\016\n\014_strUsernameB"
  "\r\n\013_strSessionB\010\n\006_uiSdkB\r\n\013_uiClientIpB"
  "\014\n\n_uiReLoginB\t\n\007_gateidB\013\n\t_provinceB\017\n"
  "\r_provincenameB\n\n\010_gmlevelB\013\n\t_deviceidB"
  "\n\n\010_proareaB\017\n\r_game_version\"\265\001\n\017Msg_GG_"
  "Login_SC\022\024\n\007uiAccID\030\001 \001(\003H\000\210\001\001\022\025\n\010uiRole"
  "ID\030\002 \001(\003H\001\210\001\001\022\'\n\006eState\030\003 \001(\0162\022.XrPb.Pla"
  "yerStatusH\002\210\001\001\022\030\n\013strRoleName\030\004 \001(\tH\003\210\001\001"
  "B\n\n\010_uiAccIDB\013\n\t_uiRoleIDB\t\n\007_eStateB\016\n\014"
  "_strRoleName\"\320\001\n\024Msg_GG_CreateRole_CS\022\024\n"
  "\007uiAccID\030\001 \001(\003H\000\210\001\001\022\026\n\tiCareerId\030\002 \001(\005H\001"
  "\210\001\001\022\025\n\010uiGender\030\003 \001(\rH\002\210\001\001\022\030\n\013strRoleNam"
  "e\030\004 \001(\tH\003\210\001\001\022\025\n\010uiIconId\030\005 \001(\rH\004\210\001\001B\n\n\010_"
  "uiAccIDB\014\n\n_iCareerIdB\013\n\t_uiGenderB\016\n\014_s"
  "trRoleNameB\013\n\t_uiIconId\"\370\001\n\024Msg_GG_Creat"
  "eRole_SC\022\024\n\007uiAccID\030\001 \001(\003H\000\210\001\001\022\025\n\010uiRole"
  "ID\030\002 \001(\003H\001\210\001\001\022\030\n\013strRoleName\030\003 \001(\tH\002\210\001\001\022"
  "\024\n\007uiLevel\030\004 \001(\rH\003\210\001\001\022\031\n\014llCreateTime\030\005 "
  "\001(\003H\004\210\001\001\022\025\n\010nRetCode\030\006 \001(\005H\005\210\001\001B\n\n\010_uiAc"
  "cIDB\013\n\t_uiRoleIDB\016\n\014_strRoleNameB\n\n\010_uiL"
  "evelB\017\n\r_llCreateTimeB\013\n\t_nRetCode\"X\n\024Ms"
  "g_GG_SavePlayer_CS\022\024\n\007uiAccID\030\001 \001(\003H\000\210\001\001"
  "\022\023\n\006GateID\030\002 \001(\rH\001\210\001\001B\n\n\010_uiAccIDB\t\n\007_Ga"
  "teID\"f\n\024Msg_GG_KickPlayer_CS\022\024\n\007uiAccID\030"
  "\001 \001(\003H\000\210\001\001\022#\n\004code\030\002 \001(\0162\020.XrPb.ResultCo"
  "deH\001\210\001\001B\n\n\010_uiAccIDB\007\n\005_code\"\263\001\n\022Msg_GG_"
  "Notice_PUSH\022\017\n\007acc_lst\030\001 \003(\003\022\026\n\tproto_ms"
  "g\030\002 \001(\014H\000\210\001\001\022\023\n\006mod_id\030\003 \001(\rH\001\210\001\001\022\025\n\010pro"
  "to_id\030\004 \001(\rH\002\210\001\001\022\025\n\010interval\030\005 \001(\rH\003\210\001\001B"
  "\014\n\n_proto_msgB\t\n\007_mod_idB\013\n\t_proto_idB\013\n"
  "\t_intervalb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_server_2fMsgGGGS_2eproto_deps[1] = {
  &::descriptor_table_client_2fCommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_server_2fMsgGGGS_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fMsgGGGS_2eproto = {
  false, false, 1818, descriptor_table_protodef_server_2fMsgGGGS_2eproto, "server/MsgGGGS.proto", 
  &descriptor_table_server_2fMsgGGGS_2eproto_once, descriptor_table_server_2fMsgGGGS_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_server_2fMsgGGGS_2eproto::offsets,
  file_level_metadata_server_2fMsgGGGS_2eproto, file_level_enum_descriptors_server_2fMsgGGGS_2eproto, file_level_service_descriptors_server_2fMsgGGGS_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_server_2fMsgGGGS_2eproto_getter() {
  return &descriptor_table_server_2fMsgGGGS_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_server_2fMsgGGGS_2eproto(&descriptor_table_server_2fMsgGGGS_2eproto);
namespace XrPb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgSvrMod_GGGS_MsgId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_2fMsgGGGS_2eproto);
  return file_level_enum_descriptors_server_2fMsgGGGS_2eproto[0];
}
bool MsgSvrMod_GGGS_MsgId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MsgSvrMod_GGGS_MsgId MsgSvrMod_GGGS::Msg_GG_None;
constexpr MsgSvrMod_GGGS_MsgId MsgSvrMod_GGGS::Msg_GG_Login_CS;
constexpr MsgSvrMod_GGGS_MsgId MsgSvrMod_GGGS::Msg_GG_Login_SC;
constexpr MsgSvrMod_GGGS_MsgId MsgSvrMod_GGGS::Msg_GG_CreateRole_CS;
constexpr MsgSvrMod_GGGS_MsgId MsgSvrMod_GGGS::Msg_GG_CreateRole_SC;
constexpr MsgSvrMod_GGGS_MsgId MsgSvrMod_GGGS::Msg_GG_SavePlayer_CS;
constexpr MsgSvrMod_GGGS_MsgId MsgSvrMod_GGGS::Msg_GG_KickPlayer_CS;
constexpr MsgSvrMod_GGGS_MsgId MsgSvrMod_GGGS::Msg_GG_Notice_PUSH;
constexpr MsgSvrMod_GGGS_MsgId MsgSvrMod_GGGS::MsgId_MIN;
constexpr MsgSvrMod_GGGS_MsgId MsgSvrMod_GGGS::MsgId_MAX;
constexpr int MsgSvrMod_GGGS::MsgId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MsgSvrMod_GGGS::_Internal {
 public:
};

MsgSvrMod_GGGS::MsgSvrMod_GGGS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:XrPb.MsgSvrMod_GGGS)
}
MsgSvrMod_GGGS::MsgSvrMod_GGGS(const MsgSvrMod_GGGS& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:XrPb.MsgSvrMod_GGGS)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgSvrMod_GGGS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgSvrMod_GGGS::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgSvrMod_GGGS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgGGGS_2eproto_getter, &descriptor_table_server_2fMsgGGGS_2eproto_once,
      file_level_metadata_server_2fMsgGGGS_2eproto[0]);
}

// ===================================================================

class Msg_GG_Login_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_GG_Login_CS>()._has_bits_);
  static void set_has_uiaccid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_strusername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strsession(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uisdk(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_uiclientip(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_uirelogin(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gateid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_province(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_provincename(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gmlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_proarea(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::XrPb::GameVersion& game_version(const Msg_GG_Login_CS* msg);
  static void set_has_game_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::XrPb::GameVersion&
Msg_GG_Login_CS::_Internal::game_version(const Msg_GG_Login_CS* msg) {
  return *msg->game_version_;
}
void Msg_GG_Login_CS::clear_game_version() {
  if (game_version_ != nullptr) game_version_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
Msg_GG_Login_CS::Msg_GG_Login_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_GG_Login_CS)
}
Msg_GG_Login_CS::Msg_GG_Login_CS(const Msg_GG_Login_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_strusername()) {
    strusername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strusername(), 
      GetArenaForAllocation());
  }
  strsession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strsession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_strsession()) {
    strsession_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strsession(), 
      GetArenaForAllocation());
  }
  provincename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    provincename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_provincename()) {
    provincename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provincename(), 
      GetArenaForAllocation());
  }
  deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_deviceid()) {
    deviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_deviceid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_game_version()) {
    game_version_ = new ::XrPb::GameVersion(*from.game_version_);
  } else {
    game_version_ = nullptr;
  }
  ::memcpy(&uiaccid_, &from.uiaccid_,
    static_cast<size_t>(reinterpret_cast<char*>(&proarea_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(proarea_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_GG_Login_CS)
}

inline void Msg_GG_Login_CS::SharedCtor() {
strusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
strsession_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strsession_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
provincename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  provincename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
deviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  deviceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&proarea_) -
    reinterpret_cast<char*>(&game_version_)) + sizeof(proarea_));
}

Msg_GG_Login_CS::~Msg_GG_Login_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_GG_Login_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_GG_Login_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strusername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strsession_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provincename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete game_version_;
}

void Msg_GG_Login_CS::ArenaDtor(void* object) {
  Msg_GG_Login_CS* _this = reinterpret_cast< Msg_GG_Login_CS* >(object);
  (void)_this;
}
void Msg_GG_Login_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_GG_Login_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_GG_Login_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_GG_Login_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      strusername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      strsession_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      provincename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      deviceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(game_version_ != nullptr);
      game_version_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&uiaccid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uiclientip_) -
        reinterpret_cast<char*>(&uiaccid_)) + sizeof(uiclientip_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&uirelogin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&proarea_) -
        reinterpret_cast<char*>(&uirelogin_)) + sizeof(proarea_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GG_Login_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 uiAccID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_uiaccid(&has_bits);
          uiaccid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string strUsername = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strusername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_GG_Login_CS.strUsername"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string strSession = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_strsession();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_GG_Login_CS.strSession"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uiSdk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_uisdk(&has_bits);
          uisdk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uiClientIp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_uiclientip(&has_bits);
          uiclientip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uiReLogin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_uirelogin(&has_bits);
          uirelogin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gateid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_gateid(&has_bits);
          gateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 province = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_province(&has_bits);
          province_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string provincename = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_provincename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_GG_Login_CS.provincename"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gmlevel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_gmlevel(&has_bits);
          gmlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string deviceid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_GG_Login_CS.deviceid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 proarea = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_proarea(&has_bits);
          proarea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.GameVersion game_version = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_GG_Login_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_GG_Login_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 uiAccID = 1;
  if (_internal_has_uiaccid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uiaccid(), target);
  }

  // optional string strUsername = 2;
  if (_internal_has_strusername()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strusername().data(), static_cast<int>(this->_internal_strusername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_GG_Login_CS.strUsername");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strusername(), target);
  }

  // optional string strSession = 3;
  if (_internal_has_strsession()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strsession().data(), static_cast<int>(this->_internal_strsession().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_GG_Login_CS.strSession");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strsession(), target);
  }

  // optional uint32 uiSdk = 4;
  if (_internal_has_uisdk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uisdk(), target);
  }

  // optional uint32 uiClientIp = 5;
  if (_internal_has_uiclientip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uiclientip(), target);
  }

  // optional uint32 uiReLogin = 6;
  if (_internal_has_uirelogin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_uirelogin(), target);
  }

  // optional uint32 gateid = 7;
  if (_internal_has_gateid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_gateid(), target);
  }

  // optional int32 province = 8;
  if (_internal_has_province()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_province(), target);
  }

  // optional string provincename = 9;
  if (_internal_has_provincename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provincename().data(), static_cast<int>(this->_internal_provincename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_GG_Login_CS.provincename");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_provincename(), target);
  }

  // optional uint32 gmlevel = 10;
  if (_internal_has_gmlevel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_gmlevel(), target);
  }

  // optional string deviceid = 11;
  if (_internal_has_deviceid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_GG_Login_CS.deviceid");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_deviceid(), target);
  }

  // optional uint32 proarea = 12;
  if (_internal_has_proarea()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_proarea(), target);
  }

  // optional .XrPb.GameVersion game_version = 13;
  if (_internal_has_game_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::game_version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_GG_Login_CS)
  return target;
}

size_t Msg_GG_Login_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_GG_Login_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string strUsername = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strusername());
    }

    // optional string strSession = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strsession());
    }

    // optional string provincename = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_provincename());
    }

    // optional string deviceid = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_deviceid());
    }

    // optional .XrPb.GameVersion game_version = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_version_);
    }

    // optional int64 uiAccID = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiaccid());
    }

    // optional uint32 uiSdk = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uisdk());
    }

    // optional uint32 uiClientIp = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uiclientip());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 uiReLogin = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uirelogin());
    }

    // optional uint32 gateid = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gateid());
    }

    // optional int32 province = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_province());
    }

    // optional uint32 gmlevel = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gmlevel());
    }

    // optional uint32 proarea = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_proarea());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_GG_Login_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_GG_Login_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_GG_Login_CS::GetClassData() const { return &_class_data_; }

void Msg_GG_Login_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_GG_Login_CS *>(to)->MergeFrom(
      static_cast<const Msg_GG_Login_CS &>(from));
}


void Msg_GG_Login_CS::MergeFrom(const Msg_GG_Login_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_GG_Login_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strusername(from._internal_strusername());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_strsession(from._internal_strsession());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_provincename(from._internal_provincename());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_deviceid(from._internal_deviceid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_game_version()->::XrPb::GameVersion::MergeFrom(from._internal_game_version());
    }
    if (cached_has_bits & 0x00000020u) {
      uiaccid_ = from.uiaccid_;
    }
    if (cached_has_bits & 0x00000040u) {
      uisdk_ = from.uisdk_;
    }
    if (cached_has_bits & 0x00000080u) {
      uiclientip_ = from.uiclientip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      uirelogin_ = from.uirelogin_;
    }
    if (cached_has_bits & 0x00000200u) {
      gateid_ = from.gateid_;
    }
    if (cached_has_bits & 0x00000400u) {
      province_ = from.province_;
    }
    if (cached_has_bits & 0x00000800u) {
      gmlevel_ = from.gmlevel_;
    }
    if (cached_has_bits & 0x00001000u) {
      proarea_ = from.proarea_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_GG_Login_CS::CopyFrom(const Msg_GG_Login_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_GG_Login_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GG_Login_CS::IsInitialized() const {
  return true;
}

void Msg_GG_Login_CS::InternalSwap(Msg_GG_Login_CS* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strusername_, lhs_arena,
      &other->strusername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strsession_, lhs_arena,
      &other->strsession_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &provincename_, lhs_arena,
      &other->provincename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &deviceid_, lhs_arena,
      &other->deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_GG_Login_CS, proarea_)
      + sizeof(Msg_GG_Login_CS::proarea_)
      - PROTOBUF_FIELD_OFFSET(Msg_GG_Login_CS, game_version_)>(
          reinterpret_cast<char*>(&game_version_),
          reinterpret_cast<char*>(&other->game_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GG_Login_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgGGGS_2eproto_getter, &descriptor_table_server_2fMsgGGGS_2eproto_once,
      file_level_metadata_server_2fMsgGGGS_2eproto[1]);
}

// ===================================================================

class Msg_GG_Login_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_GG_Login_SC>()._has_bits_);
  static void set_has_uiaccid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uiroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_estate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_strrolename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Msg_GG_Login_SC::Msg_GG_Login_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_GG_Login_SC)
}
Msg_GG_Login_SC::Msg_GG_Login_SC(const Msg_GG_Login_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strrolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_strrolename()) {
    strrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strrolename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&uiaccid_, &from.uiaccid_,
    static_cast<size_t>(reinterpret_cast<char*>(&estate_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(estate_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_GG_Login_SC)
}

inline void Msg_GG_Login_SC::SharedCtor() {
strrolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiaccid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&estate_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(estate_));
}

Msg_GG_Login_SC::~Msg_GG_Login_SC() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_GG_Login_SC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_GG_Login_SC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strrolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_GG_Login_SC::ArenaDtor(void* object) {
  Msg_GG_Login_SC* _this = reinterpret_cast< Msg_GG_Login_SC* >(object);
  (void)_this;
}
void Msg_GG_Login_SC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_GG_Login_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_GG_Login_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_GG_Login_SC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strrolename_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&uiaccid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&estate_) -
        reinterpret_cast<char*>(&uiaccid_)) + sizeof(estate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GG_Login_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 uiAccID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_uiaccid(&has_bits);
          uiaccid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 uiRoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_uiroleid(&has_bits);
          uiroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.PlayerStatus eState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_estate(static_cast<::XrPb::PlayerStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string strRoleName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_strrolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_GG_Login_SC.strRoleName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_GG_Login_SC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_GG_Login_SC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 uiAccID = 1;
  if (_internal_has_uiaccid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uiaccid(), target);
  }

  // optional int64 uiRoleID = 2;
  if (_internal_has_uiroleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_uiroleid(), target);
  }

  // optional .XrPb.PlayerStatus eState = 3;
  if (_internal_has_estate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_estate(), target);
  }

  // optional string strRoleName = 4;
  if (_internal_has_strrolename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strrolename().data(), static_cast<int>(this->_internal_strrolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_GG_Login_SC.strRoleName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_strrolename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_GG_Login_SC)
  return target;
}

size_t Msg_GG_Login_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_GG_Login_SC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string strRoleName = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strrolename());
    }

    // optional int64 uiAccID = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiaccid());
    }

    // optional int64 uiRoleID = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiroleid());
    }

    // optional .XrPb.PlayerStatus eState = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_estate());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_GG_Login_SC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_GG_Login_SC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_GG_Login_SC::GetClassData() const { return &_class_data_; }

void Msg_GG_Login_SC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_GG_Login_SC *>(to)->MergeFrom(
      static_cast<const Msg_GG_Login_SC &>(from));
}


void Msg_GG_Login_SC::MergeFrom(const Msg_GG_Login_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_GG_Login_SC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strrolename(from._internal_strrolename());
    }
    if (cached_has_bits & 0x00000002u) {
      uiaccid_ = from.uiaccid_;
    }
    if (cached_has_bits & 0x00000004u) {
      uiroleid_ = from.uiroleid_;
    }
    if (cached_has_bits & 0x00000008u) {
      estate_ = from.estate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_GG_Login_SC::CopyFrom(const Msg_GG_Login_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_GG_Login_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GG_Login_SC::IsInitialized() const {
  return true;
}

void Msg_GG_Login_SC::InternalSwap(Msg_GG_Login_SC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strrolename_, lhs_arena,
      &other->strrolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_GG_Login_SC, estate_)
      + sizeof(Msg_GG_Login_SC::estate_)
      - PROTOBUF_FIELD_OFFSET(Msg_GG_Login_SC, uiaccid_)>(
          reinterpret_cast<char*>(&uiaccid_),
          reinterpret_cast<char*>(&other->uiaccid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GG_Login_SC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgGGGS_2eproto_getter, &descriptor_table_server_2fMsgGGGS_2eproto_once,
      file_level_metadata_server_2fMsgGGGS_2eproto[2]);
}

// ===================================================================

class Msg_GG_CreateRole_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_GG_CreateRole_CS>()._has_bits_);
  static void set_has_uiaccid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icareerid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uigender(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_strrolename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uiiconid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Msg_GG_CreateRole_CS::Msg_GG_CreateRole_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_GG_CreateRole_CS)
}
Msg_GG_CreateRole_CS::Msg_GG_CreateRole_CS(const Msg_GG_CreateRole_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strrolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_strrolename()) {
    strrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strrolename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&uiaccid_, &from.uiaccid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uiiconid_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(uiiconid_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_GG_CreateRole_CS)
}

inline void Msg_GG_CreateRole_CS::SharedCtor() {
strrolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiaccid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uiiconid_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(uiiconid_));
}

Msg_GG_CreateRole_CS::~Msg_GG_CreateRole_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_GG_CreateRole_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_GG_CreateRole_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strrolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_GG_CreateRole_CS::ArenaDtor(void* object) {
  Msg_GG_CreateRole_CS* _this = reinterpret_cast< Msg_GG_CreateRole_CS* >(object);
  (void)_this;
}
void Msg_GG_CreateRole_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_GG_CreateRole_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_GG_CreateRole_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_GG_CreateRole_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strrolename_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&uiaccid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uiiconid_) -
        reinterpret_cast<char*>(&uiaccid_)) + sizeof(uiiconid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GG_CreateRole_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 uiAccID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_uiaccid(&has_bits);
          uiaccid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 iCareerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_icareerid(&has_bits);
          icareerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uiGender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_uigender(&has_bits);
          uigender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string strRoleName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_strrolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_GG_CreateRole_CS.strRoleName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uiIconId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_uiiconid(&has_bits);
          uiiconid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_GG_CreateRole_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_GG_CreateRole_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 uiAccID = 1;
  if (_internal_has_uiaccid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uiaccid(), target);
  }

  // optional int32 iCareerId = 2;
  if (_internal_has_icareerid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_icareerid(), target);
  }

  // optional uint32 uiGender = 3;
  if (_internal_has_uigender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uigender(), target);
  }

  // optional string strRoleName = 4;
  if (_internal_has_strrolename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strrolename().data(), static_cast<int>(this->_internal_strrolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_GG_CreateRole_CS.strRoleName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_strrolename(), target);
  }

  // optional uint32 uiIconId = 5;
  if (_internal_has_uiiconid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uiiconid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_GG_CreateRole_CS)
  return target;
}

size_t Msg_GG_CreateRole_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_GG_CreateRole_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string strRoleName = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strrolename());
    }

    // optional int64 uiAccID = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiaccid());
    }

    // optional int32 iCareerId = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_icareerid());
    }

    // optional uint32 uiGender = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uigender());
    }

    // optional uint32 uiIconId = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uiiconid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_GG_CreateRole_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_GG_CreateRole_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_GG_CreateRole_CS::GetClassData() const { return &_class_data_; }

void Msg_GG_CreateRole_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_GG_CreateRole_CS *>(to)->MergeFrom(
      static_cast<const Msg_GG_CreateRole_CS &>(from));
}


void Msg_GG_CreateRole_CS::MergeFrom(const Msg_GG_CreateRole_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_GG_CreateRole_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strrolename(from._internal_strrolename());
    }
    if (cached_has_bits & 0x00000002u) {
      uiaccid_ = from.uiaccid_;
    }
    if (cached_has_bits & 0x00000004u) {
      icareerid_ = from.icareerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      uigender_ = from.uigender_;
    }
    if (cached_has_bits & 0x00000010u) {
      uiiconid_ = from.uiiconid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_GG_CreateRole_CS::CopyFrom(const Msg_GG_CreateRole_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_GG_CreateRole_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GG_CreateRole_CS::IsInitialized() const {
  return true;
}

void Msg_GG_CreateRole_CS::InternalSwap(Msg_GG_CreateRole_CS* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strrolename_, lhs_arena,
      &other->strrolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_GG_CreateRole_CS, uiiconid_)
      + sizeof(Msg_GG_CreateRole_CS::uiiconid_)
      - PROTOBUF_FIELD_OFFSET(Msg_GG_CreateRole_CS, uiaccid_)>(
          reinterpret_cast<char*>(&uiaccid_),
          reinterpret_cast<char*>(&other->uiaccid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GG_CreateRole_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgGGGS_2eproto_getter, &descriptor_table_server_2fMsgGGGS_2eproto_once,
      file_level_metadata_server_2fMsgGGGS_2eproto[3]);
}

// ===================================================================

class Msg_GG_CreateRole_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_GG_CreateRole_SC>()._has_bits_);
  static void set_has_uiaccid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uiroleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strrolename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uilevel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_llcreatetime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nretcode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Msg_GG_CreateRole_SC::Msg_GG_CreateRole_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_GG_CreateRole_SC)
}
Msg_GG_CreateRole_SC::Msg_GG_CreateRole_SC(const Msg_GG_CreateRole_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strrolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_strrolename()) {
    strrolename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strrolename(), 
      GetArenaForAllocation());
  }
  ::memcpy(&uiaccid_, &from.uiaccid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nretcode_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(nretcode_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_GG_CreateRole_SC)
}

inline void Msg_GG_CreateRole_SC::SharedCtor() {
strrolename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strrolename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiaccid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nretcode_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(nretcode_));
}

Msg_GG_CreateRole_SC::~Msg_GG_CreateRole_SC() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_GG_CreateRole_SC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_GG_CreateRole_SC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strrolename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_GG_CreateRole_SC::ArenaDtor(void* object) {
  Msg_GG_CreateRole_SC* _this = reinterpret_cast< Msg_GG_CreateRole_SC* >(object);
  (void)_this;
}
void Msg_GG_CreateRole_SC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_GG_CreateRole_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_GG_CreateRole_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_GG_CreateRole_SC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strrolename_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&uiaccid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nretcode_) -
        reinterpret_cast<char*>(&uiaccid_)) + sizeof(nretcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GG_CreateRole_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 uiAccID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_uiaccid(&has_bits);
          uiaccid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 uiRoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_uiroleid(&has_bits);
          uiroleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string strRoleName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_strrolename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "XrPb.Msg_GG_CreateRole_SC.strRoleName"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uiLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_uilevel(&has_bits);
          uilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 llCreateTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_llcreatetime(&has_bits);
          llcreatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 nRetCode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_nretcode(&has_bits);
          nretcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_GG_CreateRole_SC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_GG_CreateRole_SC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 uiAccID = 1;
  if (_internal_has_uiaccid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uiaccid(), target);
  }

  // optional int64 uiRoleID = 2;
  if (_internal_has_uiroleid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_uiroleid(), target);
  }

  // optional string strRoleName = 3;
  if (_internal_has_strrolename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strrolename().data(), static_cast<int>(this->_internal_strrolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "XrPb.Msg_GG_CreateRole_SC.strRoleName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strrolename(), target);
  }

  // optional uint32 uiLevel = 4;
  if (_internal_has_uilevel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uilevel(), target);
  }

  // optional int64 llCreateTime = 5;
  if (_internal_has_llcreatetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_llcreatetime(), target);
  }

  // optional int32 nRetCode = 6;
  if (_internal_has_nretcode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_nretcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_GG_CreateRole_SC)
  return target;
}

size_t Msg_GG_CreateRole_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_GG_CreateRole_SC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string strRoleName = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strrolename());
    }

    // optional int64 uiAccID = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiaccid());
    }

    // optional int64 uiRoleID = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiroleid());
    }

    // optional int64 llCreateTime = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_llcreatetime());
    }

    // optional uint32 uiLevel = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uilevel());
    }

    // optional int32 nRetCode = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nretcode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_GG_CreateRole_SC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_GG_CreateRole_SC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_GG_CreateRole_SC::GetClassData() const { return &_class_data_; }

void Msg_GG_CreateRole_SC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_GG_CreateRole_SC *>(to)->MergeFrom(
      static_cast<const Msg_GG_CreateRole_SC &>(from));
}


void Msg_GG_CreateRole_SC::MergeFrom(const Msg_GG_CreateRole_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_GG_CreateRole_SC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strrolename(from._internal_strrolename());
    }
    if (cached_has_bits & 0x00000002u) {
      uiaccid_ = from.uiaccid_;
    }
    if (cached_has_bits & 0x00000004u) {
      uiroleid_ = from.uiroleid_;
    }
    if (cached_has_bits & 0x00000008u) {
      llcreatetime_ = from.llcreatetime_;
    }
    if (cached_has_bits & 0x00000010u) {
      uilevel_ = from.uilevel_;
    }
    if (cached_has_bits & 0x00000020u) {
      nretcode_ = from.nretcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_GG_CreateRole_SC::CopyFrom(const Msg_GG_CreateRole_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_GG_CreateRole_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GG_CreateRole_SC::IsInitialized() const {
  return true;
}

void Msg_GG_CreateRole_SC::InternalSwap(Msg_GG_CreateRole_SC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strrolename_, lhs_arena,
      &other->strrolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_GG_CreateRole_SC, nretcode_)
      + sizeof(Msg_GG_CreateRole_SC::nretcode_)
      - PROTOBUF_FIELD_OFFSET(Msg_GG_CreateRole_SC, uiaccid_)>(
          reinterpret_cast<char*>(&uiaccid_),
          reinterpret_cast<char*>(&other->uiaccid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GG_CreateRole_SC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgGGGS_2eproto_getter, &descriptor_table_server_2fMsgGGGS_2eproto_once,
      file_level_metadata_server_2fMsgGGGS_2eproto[4]);
}

// ===================================================================

class Msg_GG_SavePlayer_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_GG_SavePlayer_CS>()._has_bits_);
  static void set_has_uiaccid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gateid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Msg_GG_SavePlayer_CS::Msg_GG_SavePlayer_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_GG_SavePlayer_CS)
}
Msg_GG_SavePlayer_CS::Msg_GG_SavePlayer_CS(const Msg_GG_SavePlayer_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uiaccid_, &from.uiaccid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gateid_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(gateid_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_GG_SavePlayer_CS)
}

inline void Msg_GG_SavePlayer_CS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiaccid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gateid_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(gateid_));
}

Msg_GG_SavePlayer_CS::~Msg_GG_SavePlayer_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_GG_SavePlayer_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_GG_SavePlayer_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_GG_SavePlayer_CS::ArenaDtor(void* object) {
  Msg_GG_SavePlayer_CS* _this = reinterpret_cast< Msg_GG_SavePlayer_CS* >(object);
  (void)_this;
}
void Msg_GG_SavePlayer_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_GG_SavePlayer_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_GG_SavePlayer_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_GG_SavePlayer_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&uiaccid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gateid_) -
        reinterpret_cast<char*>(&uiaccid_)) + sizeof(gateid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GG_SavePlayer_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 uiAccID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_uiaccid(&has_bits);
          uiaccid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 GateID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gateid(&has_bits);
          gateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_GG_SavePlayer_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_GG_SavePlayer_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 uiAccID = 1;
  if (_internal_has_uiaccid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uiaccid(), target);
  }

  // optional uint32 GateID = 2;
  if (_internal_has_gateid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gateid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_GG_SavePlayer_CS)
  return target;
}

size_t Msg_GG_SavePlayer_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_GG_SavePlayer_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 uiAccID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiaccid());
    }

    // optional uint32 GateID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gateid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_GG_SavePlayer_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_GG_SavePlayer_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_GG_SavePlayer_CS::GetClassData() const { return &_class_data_; }

void Msg_GG_SavePlayer_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_GG_SavePlayer_CS *>(to)->MergeFrom(
      static_cast<const Msg_GG_SavePlayer_CS &>(from));
}


void Msg_GG_SavePlayer_CS::MergeFrom(const Msg_GG_SavePlayer_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_GG_SavePlayer_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      uiaccid_ = from.uiaccid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gateid_ = from.gateid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_GG_SavePlayer_CS::CopyFrom(const Msg_GG_SavePlayer_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_GG_SavePlayer_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GG_SavePlayer_CS::IsInitialized() const {
  return true;
}

void Msg_GG_SavePlayer_CS::InternalSwap(Msg_GG_SavePlayer_CS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_GG_SavePlayer_CS, gateid_)
      + sizeof(Msg_GG_SavePlayer_CS::gateid_)
      - PROTOBUF_FIELD_OFFSET(Msg_GG_SavePlayer_CS, uiaccid_)>(
          reinterpret_cast<char*>(&uiaccid_),
          reinterpret_cast<char*>(&other->uiaccid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GG_SavePlayer_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgGGGS_2eproto_getter, &descriptor_table_server_2fMsgGGGS_2eproto_once,
      file_level_metadata_server_2fMsgGGGS_2eproto[5]);
}

// ===================================================================

class Msg_GG_KickPlayer_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_GG_KickPlayer_CS>()._has_bits_);
  static void set_has_uiaccid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Msg_GG_KickPlayer_CS::Msg_GG_KickPlayer_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_GG_KickPlayer_CS)
}
Msg_GG_KickPlayer_CS::Msg_GG_KickPlayer_CS(const Msg_GG_KickPlayer_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uiaccid_, &from.uiaccid_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_GG_KickPlayer_CS)
}

inline void Msg_GG_KickPlayer_CS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uiaccid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&uiaccid_)) + sizeof(code_));
}

Msg_GG_KickPlayer_CS::~Msg_GG_KickPlayer_CS() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_GG_KickPlayer_CS)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_GG_KickPlayer_CS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_GG_KickPlayer_CS::ArenaDtor(void* object) {
  Msg_GG_KickPlayer_CS* _this = reinterpret_cast< Msg_GG_KickPlayer_CS* >(object);
  (void)_this;
}
void Msg_GG_KickPlayer_CS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_GG_KickPlayer_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_GG_KickPlayer_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_GG_KickPlayer_CS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&uiaccid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&code_) -
        reinterpret_cast<char*>(&uiaccid_)) + sizeof(code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GG_KickPlayer_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 uiAccID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_uiaccid(&has_bits);
          uiaccid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .XrPb.ResultCode code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::XrPb::ResultCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_GG_KickPlayer_CS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_GG_KickPlayer_CS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 uiAccID = 1;
  if (_internal_has_uiaccid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uiaccid(), target);
  }

  // optional .XrPb.ResultCode code = 2;
  if (_internal_has_code()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_GG_KickPlayer_CS)
  return target;
}

size_t Msg_GG_KickPlayer_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_GG_KickPlayer_CS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 uiAccID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uiaccid());
    }

    // optional .XrPb.ResultCode code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_GG_KickPlayer_CS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_GG_KickPlayer_CS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_GG_KickPlayer_CS::GetClassData() const { return &_class_data_; }

void Msg_GG_KickPlayer_CS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_GG_KickPlayer_CS *>(to)->MergeFrom(
      static_cast<const Msg_GG_KickPlayer_CS &>(from));
}


void Msg_GG_KickPlayer_CS::MergeFrom(const Msg_GG_KickPlayer_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_GG_KickPlayer_CS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      uiaccid_ = from.uiaccid_;
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_GG_KickPlayer_CS::CopyFrom(const Msg_GG_KickPlayer_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_GG_KickPlayer_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GG_KickPlayer_CS::IsInitialized() const {
  return true;
}

void Msg_GG_KickPlayer_CS::InternalSwap(Msg_GG_KickPlayer_CS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_GG_KickPlayer_CS, code_)
      + sizeof(Msg_GG_KickPlayer_CS::code_)
      - PROTOBUF_FIELD_OFFSET(Msg_GG_KickPlayer_CS, uiaccid_)>(
          reinterpret_cast<char*>(&uiaccid_),
          reinterpret_cast<char*>(&other->uiaccid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GG_KickPlayer_CS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgGGGS_2eproto_getter, &descriptor_table_server_2fMsgGGGS_2eproto_once,
      file_level_metadata_server_2fMsgGGGS_2eproto[6]);
}

// ===================================================================

class Msg_GG_Notice_PUSH::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_GG_Notice_PUSH>()._has_bits_);
  static void set_has_proto_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mod_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_proto_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Msg_GG_Notice_PUSH::Msg_GG_Notice_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  acc_lst_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:XrPb.Msg_GG_Notice_PUSH)
}
Msg_GG_Notice_PUSH::Msg_GG_Notice_PUSH(const Msg_GG_Notice_PUSH& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      acc_lst_(from.acc_lst_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  proto_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    proto_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_proto_msg()) {
    proto_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proto_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mod_id_, &from.mod_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&mod_id_)) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:XrPb.Msg_GG_Notice_PUSH)
}

inline void Msg_GG_Notice_PUSH::SharedCtor() {
proto_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  proto_msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mod_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&mod_id_)) + sizeof(interval_));
}

Msg_GG_Notice_PUSH::~Msg_GG_Notice_PUSH() {
  // @@protoc_insertion_point(destructor:XrPb.Msg_GG_Notice_PUSH)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_GG_Notice_PUSH::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  proto_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Msg_GG_Notice_PUSH::ArenaDtor(void* object) {
  Msg_GG_Notice_PUSH* _this = reinterpret_cast< Msg_GG_Notice_PUSH* >(object);
  (void)_this;
}
void Msg_GG_Notice_PUSH::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_GG_Notice_PUSH::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_GG_Notice_PUSH::Clear() {
// @@protoc_insertion_point(message_clear_start:XrPb.Msg_GG_Notice_PUSH)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acc_lst_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    proto_msg_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&mod_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&interval_) -
        reinterpret_cast<char*>(&mod_id_)) + sizeof(interval_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GG_Notice_PUSH::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 acc_lst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_acc_lst(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_acc_lst(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes proto_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proto_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mod_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mod_id(&has_bits);
          mod_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 proto_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_proto_id(&has_bits);
          proto_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 interval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_interval(&has_bits);
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_GG_Notice_PUSH::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:XrPb.Msg_GG_Notice_PUSH)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 acc_lst = 1;
  {
    int byte_size = _acc_lst_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_acc_lst(), byte_size, target);
    }
  }

  // optional bytes proto_msg = 2;
  if (_internal_has_proto_msg()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_proto_msg(), target);
  }

  // optional uint32 mod_id = 3;
  if (_internal_has_mod_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mod_id(), target);
  }

  // optional uint32 proto_id = 4;
  if (_internal_has_proto_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_proto_id(), target);
  }

  // optional uint32 interval = 5;
  if (_internal_has_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XrPb.Msg_GG_Notice_PUSH)
  return target;
}

size_t Msg_GG_Notice_PUSH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XrPb.Msg_GG_Notice_PUSH)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 acc_lst = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->acc_lst_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _acc_lst_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes proto_msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_proto_msg());
    }

    // optional uint32 mod_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mod_id());
    }

    // optional uint32 proto_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_proto_id());
    }

    // optional uint32 interval = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_interval());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_GG_Notice_PUSH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_GG_Notice_PUSH::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_GG_Notice_PUSH::GetClassData() const { return &_class_data_; }

void Msg_GG_Notice_PUSH::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Msg_GG_Notice_PUSH *>(to)->MergeFrom(
      static_cast<const Msg_GG_Notice_PUSH &>(from));
}


void Msg_GG_Notice_PUSH::MergeFrom(const Msg_GG_Notice_PUSH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XrPb.Msg_GG_Notice_PUSH)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  acc_lst_.MergeFrom(from.acc_lst_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_proto_msg(from._internal_proto_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      mod_id_ = from.mod_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      proto_id_ = from.proto_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      interval_ = from.interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_GG_Notice_PUSH::CopyFrom(const Msg_GG_Notice_PUSH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XrPb.Msg_GG_Notice_PUSH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GG_Notice_PUSH::IsInitialized() const {
  return true;
}

void Msg_GG_Notice_PUSH::InternalSwap(Msg_GG_Notice_PUSH* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  acc_lst_.InternalSwap(&other->acc_lst_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proto_msg_, lhs_arena,
      &other->proto_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_GG_Notice_PUSH, interval_)
      + sizeof(Msg_GG_Notice_PUSH::interval_)
      - PROTOBUF_FIELD_OFFSET(Msg_GG_Notice_PUSH, mod_id_)>(
          reinterpret_cast<char*>(&mod_id_),
          reinterpret_cast<char*>(&other->mod_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GG_Notice_PUSH::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_server_2fMsgGGGS_2eproto_getter, &descriptor_table_server_2fMsgGGGS_2eproto_once,
      file_level_metadata_server_2fMsgGGGS_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::XrPb::MsgSvrMod_GGGS* Arena::CreateMaybeMessage< ::XrPb::MsgSvrMod_GGGS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::MsgSvrMod_GGGS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_GG_Login_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_GG_Login_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_GG_Login_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_GG_Login_SC* Arena::CreateMaybeMessage< ::XrPb::Msg_GG_Login_SC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_GG_Login_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_GG_CreateRole_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_GG_CreateRole_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_GG_CreateRole_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_GG_CreateRole_SC* Arena::CreateMaybeMessage< ::XrPb::Msg_GG_CreateRole_SC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_GG_CreateRole_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_GG_SavePlayer_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_GG_SavePlayer_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_GG_SavePlayer_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_GG_KickPlayer_CS* Arena::CreateMaybeMessage< ::XrPb::Msg_GG_KickPlayer_CS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_GG_KickPlayer_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::XrPb::Msg_GG_Notice_PUSH* Arena::CreateMaybeMessage< ::XrPb::Msg_GG_Notice_PUSH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::XrPb::Msg_GG_Notice_PUSH >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
