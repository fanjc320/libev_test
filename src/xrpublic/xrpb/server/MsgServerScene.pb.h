// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server/MsgServerScene.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_2fMsgServerScene_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_2fMsgServerScene_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client/Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_2fMsgServerScene_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_2fMsgServerScene_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_2fMsgServerScene_2eproto;
namespace XrPb {
class MsgSvrMod_Scene;
struct MsgSvrMod_SceneDefaultTypeInternal;
extern MsgSvrMod_SceneDefaultTypeInternal _MsgSvrMod_Scene_default_instance_;
class Msg_SvrScene_CreateRoom_CS;
struct Msg_SvrScene_CreateRoom_CSDefaultTypeInternal;
extern Msg_SvrScene_CreateRoom_CSDefaultTypeInternal _Msg_SvrScene_CreateRoom_CS_default_instance_;
class Msg_SvrScene_CreateRoom_SC;
struct Msg_SvrScene_CreateRoom_SCDefaultTypeInternal;
extern Msg_SvrScene_CreateRoom_SCDefaultTypeInternal _Msg_SvrScene_CreateRoom_SC_default_instance_;
class Msg_SvrScene_EnterRoom_CS;
struct Msg_SvrScene_EnterRoom_CSDefaultTypeInternal;
extern Msg_SvrScene_EnterRoom_CSDefaultTypeInternal _Msg_SvrScene_EnterRoom_CS_default_instance_;
class Msg_SvrScene_EnterRoom_PUSH;
struct Msg_SvrScene_EnterRoom_PUSHDefaultTypeInternal;
extern Msg_SvrScene_EnterRoom_PUSHDefaultTypeInternal _Msg_SvrScene_EnterRoom_PUSH_default_instance_;
class Msg_SvrScene_PlayerInfo_Submit;
struct Msg_SvrScene_PlayerInfo_SubmitDefaultTypeInternal;
extern Msg_SvrScene_PlayerInfo_SubmitDefaultTypeInternal _Msg_SvrScene_PlayerInfo_Submit_default_instance_;
class Msg_SvrScene_Register_CS;
struct Msg_SvrScene_Register_CSDefaultTypeInternal;
extern Msg_SvrScene_Register_CSDefaultTypeInternal _Msg_SvrScene_Register_CS_default_instance_;
class Msg_SvrScene_Register_SC;
struct Msg_SvrScene_Register_SCDefaultTypeInternal;
extern Msg_SvrScene_Register_SCDefaultTypeInternal _Msg_SvrScene_Register_SC_default_instance_;
class Msg_SvrScene_ReportInfo_Submit;
struct Msg_SvrScene_ReportInfo_SubmitDefaultTypeInternal;
extern Msg_SvrScene_ReportInfo_SubmitDefaultTypeInternal _Msg_SvrScene_ReportInfo_Submit_default_instance_;
class Msg_SvrScene_Result_PUSH;
struct Msg_SvrScene_Result_PUSHDefaultTypeInternal;
extern Msg_SvrScene_Result_PUSHDefaultTypeInternal _Msg_SvrScene_Result_PUSH_default_instance_;
class Msg_SvrScene_RoomInfo_Submit;
struct Msg_SvrScene_RoomInfo_SubmitDefaultTypeInternal;
extern Msg_SvrScene_RoomInfo_SubmitDefaultTypeInternal _Msg_SvrScene_RoomInfo_Submit_default_instance_;
class Msg_SvrScene_RoomNum_Push;
struct Msg_SvrScene_RoomNum_PushDefaultTypeInternal;
extern Msg_SvrScene_RoomNum_PushDefaultTypeInternal _Msg_SvrScene_RoomNum_Push_default_instance_;
class Msg_SvrScene_Verify_EnterRoom_CS;
struct Msg_SvrScene_Verify_EnterRoom_CSDefaultTypeInternal;
extern Msg_SvrScene_Verify_EnterRoom_CSDefaultTypeInternal _Msg_SvrScene_Verify_EnterRoom_CS_default_instance_;
class Msg_SvrScene_Verify_LeaveRoom_CS;
struct Msg_SvrScene_Verify_LeaveRoom_CSDefaultTypeInternal;
extern Msg_SvrScene_Verify_LeaveRoom_CSDefaultTypeInternal _Msg_SvrScene_Verify_LeaveRoom_CS_default_instance_;
class Msg_SvrScene_Verify_OrderData_CS;
struct Msg_SvrScene_Verify_OrderData_CSDefaultTypeInternal;
extern Msg_SvrScene_Verify_OrderData_CSDefaultTypeInternal _Msg_SvrScene_Verify_OrderData_CS_default_instance_;
class Msg_SvrScene_heart_cs;
struct Msg_SvrScene_heart_csDefaultTypeInternal;
extern Msg_SvrScene_heart_csDefaultTypeInternal _Msg_SvrScene_heart_cs_default_instance_;
class PlayerConvID;
struct PlayerConvIDDefaultTypeInternal;
extern PlayerConvIDDefaultTypeInternal _PlayerConvID_default_instance_;
class RoomResState;
struct RoomResStateDefaultTypeInternal;
extern RoomResStateDefaultTypeInternal _RoomResState_default_instance_;
}  // namespace XrPb
PROTOBUF_NAMESPACE_OPEN
template<> ::XrPb::MsgSvrMod_Scene* Arena::CreateMaybeMessage<::XrPb::MsgSvrMod_Scene>(Arena*);
template<> ::XrPb::Msg_SvrScene_CreateRoom_CS* Arena::CreateMaybeMessage<::XrPb::Msg_SvrScene_CreateRoom_CS>(Arena*);
template<> ::XrPb::Msg_SvrScene_CreateRoom_SC* Arena::CreateMaybeMessage<::XrPb::Msg_SvrScene_CreateRoom_SC>(Arena*);
template<> ::XrPb::Msg_SvrScene_EnterRoom_CS* Arena::CreateMaybeMessage<::XrPb::Msg_SvrScene_EnterRoom_CS>(Arena*);
template<> ::XrPb::Msg_SvrScene_EnterRoom_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_SvrScene_EnterRoom_PUSH>(Arena*);
template<> ::XrPb::Msg_SvrScene_PlayerInfo_Submit* Arena::CreateMaybeMessage<::XrPb::Msg_SvrScene_PlayerInfo_Submit>(Arena*);
template<> ::XrPb::Msg_SvrScene_Register_CS* Arena::CreateMaybeMessage<::XrPb::Msg_SvrScene_Register_CS>(Arena*);
template<> ::XrPb::Msg_SvrScene_Register_SC* Arena::CreateMaybeMessage<::XrPb::Msg_SvrScene_Register_SC>(Arena*);
template<> ::XrPb::Msg_SvrScene_ReportInfo_Submit* Arena::CreateMaybeMessage<::XrPb::Msg_SvrScene_ReportInfo_Submit>(Arena*);
template<> ::XrPb::Msg_SvrScene_Result_PUSH* Arena::CreateMaybeMessage<::XrPb::Msg_SvrScene_Result_PUSH>(Arena*);
template<> ::XrPb::Msg_SvrScene_RoomInfo_Submit* Arena::CreateMaybeMessage<::XrPb::Msg_SvrScene_RoomInfo_Submit>(Arena*);
template<> ::XrPb::Msg_SvrScene_RoomNum_Push* Arena::CreateMaybeMessage<::XrPb::Msg_SvrScene_RoomNum_Push>(Arena*);
template<> ::XrPb::Msg_SvrScene_Verify_EnterRoom_CS* Arena::CreateMaybeMessage<::XrPb::Msg_SvrScene_Verify_EnterRoom_CS>(Arena*);
template<> ::XrPb::Msg_SvrScene_Verify_LeaveRoom_CS* Arena::CreateMaybeMessage<::XrPb::Msg_SvrScene_Verify_LeaveRoom_CS>(Arena*);
template<> ::XrPb::Msg_SvrScene_Verify_OrderData_CS* Arena::CreateMaybeMessage<::XrPb::Msg_SvrScene_Verify_OrderData_CS>(Arena*);
template<> ::XrPb::Msg_SvrScene_heart_cs* Arena::CreateMaybeMessage<::XrPb::Msg_SvrScene_heart_cs>(Arena*);
template<> ::XrPb::PlayerConvID* Arena::CreateMaybeMessage<::XrPb::PlayerConvID>(Arena*);
template<> ::XrPb::RoomResState* Arena::CreateMaybeMessage<::XrPb::RoomResState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XrPb {

enum MsgSvrMod_Scene_MsgId : int {
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_None = 0,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_Register_CS = 1,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_Register_SC = 2,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_CreateRoom_CS = 3,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_CreateRoom_SC = 4,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_heart_cs = 5,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_heart_sc = 6,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_RoomInfo_Submit = 7,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_ReportInfo_Submit = 8,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_Result_PUSH = 9,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_RoomNum_Push = 10,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_PlayerInfo_PUSH = 101,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_EnterRoom_CS = 102,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_EnterRoom_PUSH = 103,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_Verify_EnterRoom_CS = 105,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_Verify_LeaveRoom_CS = 106,
  MsgSvrMod_Scene_MsgId_Msg_SvrScene_Verify_OrderData_CS = 107,
  MsgSvrMod_Scene_MsgId_MsgSvrMod_Scene_MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgSvrMod_Scene_MsgId_MsgSvrMod_Scene_MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgSvrMod_Scene_MsgId_IsValid(int value);
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene_MsgId_MsgId_MIN = MsgSvrMod_Scene_MsgId_Msg_SvrScene_None;
constexpr MsgSvrMod_Scene_MsgId MsgSvrMod_Scene_MsgId_MsgId_MAX = MsgSvrMod_Scene_MsgId_Msg_SvrScene_Verify_OrderData_CS;
constexpr int MsgSvrMod_Scene_MsgId_MsgId_ARRAYSIZE = MsgSvrMod_Scene_MsgId_MsgId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgSvrMod_Scene_MsgId_descriptor();
template<typename T>
inline const std::string& MsgSvrMod_Scene_MsgId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgSvrMod_Scene_MsgId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgSvrMod_Scene_MsgId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgSvrMod_Scene_MsgId_descriptor(), enum_t_value);
}
inline bool MsgSvrMod_Scene_MsgId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgSvrMod_Scene_MsgId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgSvrMod_Scene_MsgId>(
    MsgSvrMod_Scene_MsgId_descriptor(), name, value);
}
enum RoomStatus : int {
  RS_None = 0,
  RS_Start = 1,
  RS_Run = 2,
  RS_End = 3,
  RoomStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RoomStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RoomStatus_IsValid(int value);
constexpr RoomStatus RoomStatus_MIN = RS_None;
constexpr RoomStatus RoomStatus_MAX = RS_End;
constexpr int RoomStatus_ARRAYSIZE = RoomStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomStatus_descriptor();
template<typename T>
inline const std::string& RoomStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoomStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoomStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoomStatus_descriptor(), enum_t_value);
}
inline bool RoomStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoomStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoomStatus>(
    RoomStatus_descriptor(), name, value);
}
enum RoomPlayerStatus : int {
  RPS_None = 0,
  RPS_Connected = 1,
  RPS_Loading = 2,
  RPS_Scening = 3,
  RPS_Disconnect = 4,
  RoomPlayerStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RoomPlayerStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RoomPlayerStatus_IsValid(int value);
constexpr RoomPlayerStatus RoomPlayerStatus_MIN = RPS_None;
constexpr RoomPlayerStatus RoomPlayerStatus_MAX = RPS_Disconnect;
constexpr int RoomPlayerStatus_ARRAYSIZE = RoomPlayerStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomPlayerStatus_descriptor();
template<typename T>
inline const std::string& RoomPlayerStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoomPlayerStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoomPlayerStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoomPlayerStatus_descriptor(), enum_t_value);
}
inline bool RoomPlayerStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoomPlayerStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoomPlayerStatus>(
    RoomPlayerStatus_descriptor(), name, value);
}
// ===================================================================

class MsgSvrMod_Scene final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.MsgSvrMod_Scene) */ {
 public:
  inline MsgSvrMod_Scene() : MsgSvrMod_Scene(nullptr) {}
  explicit constexpr MsgSvrMod_Scene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSvrMod_Scene(const MsgSvrMod_Scene& from);
  MsgSvrMod_Scene(MsgSvrMod_Scene&& from) noexcept
    : MsgSvrMod_Scene() {
    *this = ::std::move(from);
  }

  inline MsgSvrMod_Scene& operator=(const MsgSvrMod_Scene& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSvrMod_Scene& operator=(MsgSvrMod_Scene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSvrMod_Scene& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSvrMod_Scene* internal_default_instance() {
    return reinterpret_cast<const MsgSvrMod_Scene*>(
               &_MsgSvrMod_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgSvrMod_Scene& a, MsgSvrMod_Scene& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSvrMod_Scene* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSvrMod_Scene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSvrMod_Scene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSvrMod_Scene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgSvrMod_Scene& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgSvrMod_Scene& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.MsgSvrMod_Scene";
  }
  protected:
  explicit MsgSvrMod_Scene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgSvrMod_Scene_MsgId MsgId;
  static constexpr MsgId Msg_SvrScene_None =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_None;
  static constexpr MsgId Msg_SvrScene_Register_CS =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_Register_CS;
  static constexpr MsgId Msg_SvrScene_Register_SC =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_Register_SC;
  static constexpr MsgId Msg_SvrScene_CreateRoom_CS =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_CreateRoom_CS;
  static constexpr MsgId Msg_SvrScene_CreateRoom_SC =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_CreateRoom_SC;
  static constexpr MsgId Msg_SvrScene_heart_cs =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_heart_cs;
  static constexpr MsgId Msg_SvrScene_heart_sc =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_heart_sc;
  static constexpr MsgId Msg_SvrScene_RoomInfo_Submit =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_RoomInfo_Submit;
  static constexpr MsgId Msg_SvrScene_ReportInfo_Submit =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_ReportInfo_Submit;
  static constexpr MsgId Msg_SvrScene_Result_PUSH =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_Result_PUSH;
  static constexpr MsgId Msg_SvrScene_RoomNum_Push =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_RoomNum_Push;
  static constexpr MsgId Msg_SvrScene_PlayerInfo_PUSH =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_PlayerInfo_PUSH;
  static constexpr MsgId Msg_SvrScene_EnterRoom_CS =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_EnterRoom_CS;
  static constexpr MsgId Msg_SvrScene_EnterRoom_PUSH =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_EnterRoom_PUSH;
  static constexpr MsgId Msg_SvrScene_Verify_EnterRoom_CS =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_Verify_EnterRoom_CS;
  static constexpr MsgId Msg_SvrScene_Verify_LeaveRoom_CS =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_Verify_LeaveRoom_CS;
  static constexpr MsgId Msg_SvrScene_Verify_OrderData_CS =
    MsgSvrMod_Scene_MsgId_Msg_SvrScene_Verify_OrderData_CS;
  static inline bool MsgId_IsValid(int value) {
    return MsgSvrMod_Scene_MsgId_IsValid(value);
  }
  static constexpr MsgId MsgId_MIN =
    MsgSvrMod_Scene_MsgId_MsgId_MIN;
  static constexpr MsgId MsgId_MAX =
    MsgSvrMod_Scene_MsgId_MsgId_MAX;
  static constexpr int MsgId_ARRAYSIZE =
    MsgSvrMod_Scene_MsgId_MsgId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MsgId_descriptor() {
    return MsgSvrMod_Scene_MsgId_descriptor();
  }
  template<typename T>
  static inline const std::string& MsgId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MsgId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MsgId_Name.");
    return MsgSvrMod_Scene_MsgId_Name(enum_t_value);
  }
  static inline bool MsgId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MsgId* value) {
    return MsgSvrMod_Scene_MsgId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.MsgSvrMod_Scene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class RoomResState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.RoomResState) */ {
 public:
  inline RoomResState() : RoomResState(nullptr) {}
  ~RoomResState() override;
  explicit constexpr RoomResState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomResState(const RoomResState& from);
  RoomResState(RoomResState&& from) noexcept
    : RoomResState() {
    *this = ::std::move(from);
  }

  inline RoomResState& operator=(const RoomResState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomResState& operator=(RoomResState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomResState& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomResState* internal_default_instance() {
    return reinterpret_cast<const RoomResState*>(
               &_RoomResState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoomResState& a, RoomResState& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomResState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomResState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomResState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomResState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomResState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoomResState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomResState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.RoomResState";
  }
  protected:
  explicit RoomResState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomStatusFieldNumber = 1,
    kSceneSecFieldNumber = 2,
    kRoomAreanIdFieldNumber = 3,
  };
  // .XrPb.RoomStatus roomStatus = 1;
  void clear_roomstatus();
  ::XrPb::RoomStatus roomstatus() const;
  void set_roomstatus(::XrPb::RoomStatus value);
  private:
  ::XrPb::RoomStatus _internal_roomstatus() const;
  void _internal_set_roomstatus(::XrPb::RoomStatus value);
  public:

  // optional uint32 sceneSec = 2;
  bool has_scenesec() const;
  private:
  bool _internal_has_scenesec() const;
  public:
  void clear_scenesec();
  uint32_t scenesec() const;
  void set_scenesec(uint32_t value);
  private:
  uint32_t _internal_scenesec() const;
  void _internal_set_scenesec(uint32_t value);
  public:

  // optional uint32 roomAreanId = 3;
  bool has_roomareanid() const;
  private:
  bool _internal_has_roomareanid() const;
  public:
  void clear_roomareanid();
  uint32_t roomareanid() const;
  void set_roomareanid(uint32_t value);
  private:
  uint32_t _internal_roomareanid() const;
  void _internal_set_roomareanid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.RoomResState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int roomstatus_;
  uint32_t scenesec_;
  uint32_t roomareanid_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SvrScene_Register_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_SvrScene_Register_CS) */ {
 public:
  inline Msg_SvrScene_Register_CS() : Msg_SvrScene_Register_CS(nullptr) {}
  ~Msg_SvrScene_Register_CS() override;
  explicit constexpr Msg_SvrScene_Register_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SvrScene_Register_CS(const Msg_SvrScene_Register_CS& from);
  Msg_SvrScene_Register_CS(Msg_SvrScene_Register_CS&& from) noexcept
    : Msg_SvrScene_Register_CS() {
    *this = ::std::move(from);
  }

  inline Msg_SvrScene_Register_CS& operator=(const Msg_SvrScene_Register_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SvrScene_Register_CS& operator=(Msg_SvrScene_Register_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SvrScene_Register_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SvrScene_Register_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_SvrScene_Register_CS*>(
               &_Msg_SvrScene_Register_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Msg_SvrScene_Register_CS& a, Msg_SvrScene_Register_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SvrScene_Register_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SvrScene_Register_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SvrScene_Register_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SvrScene_Register_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_SvrScene_Register_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_SvrScene_Register_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SvrScene_Register_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SvrScene_Register_CS";
  }
  protected:
  explicit Msg_SvrScene_Register_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kLinkipFieldNumber = 9,
    kPortFieldNumber = 2,
    kMaxRoomNumFieldNumber = 3,
    kIdFieldNumber = 4,
    kServerAreaFieldNumber = 5,
    kMaxplayernumFieldNumber = 6,
    kCurPlayerNumFieldNumber = 7,
    kCurRoomNumFieldNumber = 8,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional string linkip = 9;
  bool has_linkip() const;
  private:
  bool _internal_has_linkip() const;
  public:
  void clear_linkip();
  const std::string& linkip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_linkip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_linkip();
  PROTOBUF_NODISCARD std::string* release_linkip();
  void set_allocated_linkip(std::string* linkip);
  private:
  const std::string& _internal_linkip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_linkip(const std::string& value);
  std::string* _internal_mutable_linkip();
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // uint32 maxRoomNum = 3;
  void clear_maxroomnum();
  uint32_t maxroomnum() const;
  void set_maxroomnum(uint32_t value);
  private:
  uint32_t _internal_maxroomnum() const;
  void _internal_set_maxroomnum(uint32_t value);
  public:

  // uint32 id = 4;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 serverArea = 5;
  void clear_serverarea();
  uint32_t serverarea() const;
  void set_serverarea(uint32_t value);
  private:
  uint32_t _internal_serverarea() const;
  void _internal_set_serverarea(uint32_t value);
  public:

  // uint32 maxplayernum = 6;
  void clear_maxplayernum();
  uint32_t maxplayernum() const;
  void set_maxplayernum(uint32_t value);
  private:
  uint32_t _internal_maxplayernum() const;
  void _internal_set_maxplayernum(uint32_t value);
  public:

  // uint32 curPlayerNum = 7;
  void clear_curplayernum();
  uint32_t curplayernum() const;
  void set_curplayernum(uint32_t value);
  private:
  uint32_t _internal_curplayernum() const;
  void _internal_set_curplayernum(uint32_t value);
  public:

  // uint32 curRoomNum = 8;
  void clear_curroomnum();
  uint32_t curroomnum() const;
  void set_curroomnum(uint32_t value);
  private:
  uint32_t _internal_curroomnum() const;
  void _internal_set_curroomnum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SvrScene_Register_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr linkip_;
  uint32_t port_;
  uint32_t maxroomnum_;
  uint32_t id_;
  uint32_t serverarea_;
  uint32_t maxplayernum_;
  uint32_t curplayernum_;
  uint32_t curroomnum_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SvrScene_Register_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_SvrScene_Register_SC) */ {
 public:
  inline Msg_SvrScene_Register_SC() : Msg_SvrScene_Register_SC(nullptr) {}
  ~Msg_SvrScene_Register_SC() override;
  explicit constexpr Msg_SvrScene_Register_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SvrScene_Register_SC(const Msg_SvrScene_Register_SC& from);
  Msg_SvrScene_Register_SC(Msg_SvrScene_Register_SC&& from) noexcept
    : Msg_SvrScene_Register_SC() {
    *this = ::std::move(from);
  }

  inline Msg_SvrScene_Register_SC& operator=(const Msg_SvrScene_Register_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SvrScene_Register_SC& operator=(Msg_SvrScene_Register_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SvrScene_Register_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SvrScene_Register_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_SvrScene_Register_SC*>(
               &_Msg_SvrScene_Register_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Msg_SvrScene_Register_SC& a, Msg_SvrScene_Register_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SvrScene_Register_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SvrScene_Register_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SvrScene_Register_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SvrScene_Register_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_SvrScene_Register_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_SvrScene_Register_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SvrScene_Register_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SvrScene_Register_SC";
  }
  protected:
  explicit Msg_SvrScene_Register_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint32 serverId = 1;
  void clear_serverid();
  uint32_t serverid() const;
  void set_serverid(uint32_t value);
  private:
  uint32_t _internal_serverid() const;
  void _internal_set_serverid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SvrScene_Register_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t serverid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SvrScene_CreateRoom_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_SvrScene_CreateRoom_CS) */ {
 public:
  inline Msg_SvrScene_CreateRoom_CS() : Msg_SvrScene_CreateRoom_CS(nullptr) {}
  ~Msg_SvrScene_CreateRoom_CS() override;
  explicit constexpr Msg_SvrScene_CreateRoom_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SvrScene_CreateRoom_CS(const Msg_SvrScene_CreateRoom_CS& from);
  Msg_SvrScene_CreateRoom_CS(Msg_SvrScene_CreateRoom_CS&& from) noexcept
    : Msg_SvrScene_CreateRoom_CS() {
    *this = ::std::move(from);
  }

  inline Msg_SvrScene_CreateRoom_CS& operator=(const Msg_SvrScene_CreateRoom_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SvrScene_CreateRoom_CS& operator=(Msg_SvrScene_CreateRoom_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SvrScene_CreateRoom_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SvrScene_CreateRoom_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_SvrScene_CreateRoom_CS*>(
               &_Msg_SvrScene_CreateRoom_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Msg_SvrScene_CreateRoom_CS& a, Msg_SvrScene_CreateRoom_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SvrScene_CreateRoom_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SvrScene_CreateRoom_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SvrScene_CreateRoom_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SvrScene_CreateRoom_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_SvrScene_CreateRoom_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_SvrScene_CreateRoom_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SvrScene_CreateRoom_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SvrScene_CreateRoom_CS";
  }
  protected:
  explicit Msg_SvrScene_CreateRoom_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDataFieldNumber = 6,
    kMapNameFieldNumber = 3,
    kRoomLogIDFieldNumber = 7,
    kGameVersionFieldNumber = 8,
    kRoomIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kMapIdFieldNumber = 4,
    kMapsecFieldNumber = 5,
    kInitAreaIDFieldNumber = 9,
    kPlayerNumFieldNumber = 10,
  };
  // repeated .XrPb.ScenePlayerData playerData = 6;
  int playerdata_size() const;
  private:
  int _internal_playerdata_size() const;
  public:
  void clear_playerdata();
  ::XrPb::ScenePlayerData* mutable_playerdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ScenePlayerData >*
      mutable_playerdata();
  private:
  const ::XrPb::ScenePlayerData& _internal_playerdata(int index) const;
  ::XrPb::ScenePlayerData* _internal_add_playerdata();
  public:
  const ::XrPb::ScenePlayerData& playerdata(int index) const;
  ::XrPb::ScenePlayerData* add_playerdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ScenePlayerData >&
      playerdata() const;

  // string mapName = 3;
  void clear_mapname();
  const std::string& mapname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapname();
  PROTOBUF_NODISCARD std::string* release_mapname();
  void set_allocated_mapname(std::string* mapname);
  private:
  const std::string& _internal_mapname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapname(const std::string& value);
  std::string* _internal_mutable_mapname();
  public:

  // string roomLogID = 7;
  void clear_roomlogid();
  const std::string& roomlogid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomlogid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomlogid();
  PROTOBUF_NODISCARD std::string* release_roomlogid();
  void set_allocated_roomlogid(std::string* roomlogid);
  private:
  const std::string& _internal_roomlogid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomlogid(const std::string& value);
  std::string* _internal_mutable_roomlogid();
  public:

  // .XrPb.GameVersion game_version = 8;
  bool has_game_version() const;
  private:
  bool _internal_has_game_version() const;
  public:
  void clear_game_version();
  const ::XrPb::GameVersion& game_version() const;
  PROTOBUF_NODISCARD ::XrPb::GameVersion* release_game_version();
  ::XrPb::GameVersion* mutable_game_version();
  void set_allocated_game_version(::XrPb::GameVersion* game_version);
  private:
  const ::XrPb::GameVersion& _internal_game_version() const;
  ::XrPb::GameVersion* _internal_mutable_game_version();
  public:
  void unsafe_arena_set_allocated_game_version(
      ::XrPb::GameVersion* game_version);
  ::XrPb::GameVersion* unsafe_arena_release_game_version();

  // int64 roomId = 1;
  void clear_roomid();
  int64_t roomid() const;
  void set_roomid(int64_t value);
  private:
  int64_t _internal_roomid() const;
  void _internal_set_roomid(int64_t value);
  public:

  // .XrPb.RoomType type = 2;
  void clear_type();
  ::XrPb::RoomType type() const;
  void set_type(::XrPb::RoomType value);
  private:
  ::XrPb::RoomType _internal_type() const;
  void _internal_set_type(::XrPb::RoomType value);
  public:

  // uint32 mapId = 4;
  void clear_mapid();
  uint32_t mapid() const;
  void set_mapid(uint32_t value);
  private:
  uint32_t _internal_mapid() const;
  void _internal_set_mapid(uint32_t value);
  public:

  // uint32 mapsec = 5;
  void clear_mapsec();
  uint32_t mapsec() const;
  void set_mapsec(uint32_t value);
  private:
  uint32_t _internal_mapsec() const;
  void _internal_set_mapsec(uint32_t value);
  public:

  // uint32 initAreaID = 9;
  void clear_initareaid();
  uint32_t initareaid() const;
  void set_initareaid(uint32_t value);
  private:
  uint32_t _internal_initareaid() const;
  void _internal_set_initareaid(uint32_t value);
  public:

  // uint32 playerNum = 10;
  void clear_playernum();
  uint32_t playernum() const;
  void set_playernum(uint32_t value);
  private:
  uint32_t _internal_playernum() const;
  void _internal_set_playernum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SvrScene_CreateRoom_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ScenePlayerData > playerdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomlogid_;
  ::XrPb::GameVersion* game_version_;
  int64_t roomid_;
  int type_;
  uint32_t mapid_;
  uint32_t mapsec_;
  uint32_t initareaid_;
  uint32_t playernum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class PlayerConvID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.PlayerConvID) */ {
 public:
  inline PlayerConvID() : PlayerConvID(nullptr) {}
  ~PlayerConvID() override;
  explicit constexpr PlayerConvID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerConvID(const PlayerConvID& from);
  PlayerConvID(PlayerConvID&& from) noexcept
    : PlayerConvID() {
    *this = ::std::move(from);
  }

  inline PlayerConvID& operator=(const PlayerConvID& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerConvID& operator=(PlayerConvID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerConvID& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerConvID* internal_default_instance() {
    return reinterpret_cast<const PlayerConvID*>(
               &_PlayerConvID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlayerConvID& a, PlayerConvID& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerConvID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerConvID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerConvID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerConvID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerConvID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerConvID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerConvID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.PlayerConvID";
  }
  protected:
  explicit PlayerConvID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayeridFieldNumber = 1,
    kConvidFieldNumber = 2,
  };
  // optional int64 playerid = 1;
  bool has_playerid() const;
  private:
  bool _internal_has_playerid() const;
  public:
  void clear_playerid();
  int64_t playerid() const;
  void set_playerid(int64_t value);
  private:
  int64_t _internal_playerid() const;
  void _internal_set_playerid(int64_t value);
  public:

  // optional uint32 convid = 2;
  bool has_convid() const;
  private:
  bool _internal_has_convid() const;
  public:
  void clear_convid();
  uint32_t convid() const;
  void set_convid(uint32_t value);
  private:
  uint32_t _internal_convid() const;
  void _internal_set_convid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.PlayerConvID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t playerid_;
  uint32_t convid_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SvrScene_CreateRoom_SC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_SvrScene_CreateRoom_SC) */ {
 public:
  inline Msg_SvrScene_CreateRoom_SC() : Msg_SvrScene_CreateRoom_SC(nullptr) {}
  ~Msg_SvrScene_CreateRoom_SC() override;
  explicit constexpr Msg_SvrScene_CreateRoom_SC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SvrScene_CreateRoom_SC(const Msg_SvrScene_CreateRoom_SC& from);
  Msg_SvrScene_CreateRoom_SC(Msg_SvrScene_CreateRoom_SC&& from) noexcept
    : Msg_SvrScene_CreateRoom_SC() {
    *this = ::std::move(from);
  }

  inline Msg_SvrScene_CreateRoom_SC& operator=(const Msg_SvrScene_CreateRoom_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SvrScene_CreateRoom_SC& operator=(Msg_SvrScene_CreateRoom_SC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SvrScene_CreateRoom_SC& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SvrScene_CreateRoom_SC* internal_default_instance() {
    return reinterpret_cast<const Msg_SvrScene_CreateRoom_SC*>(
               &_Msg_SvrScene_CreateRoom_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Msg_SvrScene_CreateRoom_SC& a, Msg_SvrScene_CreateRoom_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SvrScene_CreateRoom_SC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SvrScene_CreateRoom_SC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SvrScene_CreateRoom_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SvrScene_CreateRoom_SC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_SvrScene_CreateRoom_SC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_SvrScene_CreateRoom_SC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SvrScene_CreateRoom_SC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SvrScene_CreateRoom_SC";
  }
  protected:
  explicit Msg_SvrScene_CreateRoom_SC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerconvFieldNumber = 8,
    kIpFieldNumber = 2,
    kRoomLogIDFieldNumber = 5,
    kOldlogIDFieldNumber = 6,
    kLinkipFieldNumber = 11,
    kRoomIdFieldNumber = 1,
    kPortFieldNumber = 3,
    kCodeFieldNumber = 4,
    kRoomareanidFieldNumber = 7,
    kUdpFieldNumber = 9,
    kCreatemsFieldNumber = 10,
  };
  // repeated .XrPb.PlayerConvID playerconv = 8;
  int playerconv_size() const;
  private:
  int _internal_playerconv_size() const;
  public:
  void clear_playerconv();
  ::XrPb::PlayerConvID* mutable_playerconv(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::PlayerConvID >*
      mutable_playerconv();
  private:
  const ::XrPb::PlayerConvID& _internal_playerconv(int index) const;
  ::XrPb::PlayerConvID* _internal_add_playerconv();
  public:
  const ::XrPb::PlayerConvID& playerconv(int index) const;
  ::XrPb::PlayerConvID* add_playerconv();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::PlayerConvID >&
      playerconv() const;

  // optional string ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string roomLogID = 5;
  void clear_roomlogid();
  const std::string& roomlogid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomlogid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomlogid();
  PROTOBUF_NODISCARD std::string* release_roomlogid();
  void set_allocated_roomlogid(std::string* roomlogid);
  private:
  const std::string& _internal_roomlogid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomlogid(const std::string& value);
  std::string* _internal_mutable_roomlogid();
  public:

  // string oldlogID = 6;
  void clear_oldlogid();
  const std::string& oldlogid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oldlogid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oldlogid();
  PROTOBUF_NODISCARD std::string* release_oldlogid();
  void set_allocated_oldlogid(std::string* oldlogid);
  private:
  const std::string& _internal_oldlogid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oldlogid(const std::string& value);
  std::string* _internal_mutable_oldlogid();
  public:

  // optional string linkip = 11;
  bool has_linkip() const;
  private:
  bool _internal_has_linkip() const;
  public:
  void clear_linkip();
  const std::string& linkip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_linkip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_linkip();
  PROTOBUF_NODISCARD std::string* release_linkip();
  void set_allocated_linkip(std::string* linkip);
  private:
  const std::string& _internal_linkip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_linkip(const std::string& value);
  std::string* _internal_mutable_linkip();
  public:

  // int64 roomId = 1;
  void clear_roomid();
  int64_t roomid() const;
  void set_roomid(int64_t value);
  private:
  int64_t _internal_roomid() const;
  void _internal_set_roomid(int64_t value);
  public:

  // optional uint32 port = 3;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // .XrPb.ResultCode code = 4;
  void clear_code();
  ::XrPb::ResultCode code() const;
  void set_code(::XrPb::ResultCode value);
  private:
  ::XrPb::ResultCode _internal_code() const;
  void _internal_set_code(::XrPb::ResultCode value);
  public:

  // optional uint32 roomareanid = 7;
  bool has_roomareanid() const;
  private:
  bool _internal_has_roomareanid() const;
  public:
  void clear_roomareanid();
  uint32_t roomareanid() const;
  void set_roomareanid(uint32_t value);
  private:
  uint32_t _internal_roomareanid() const;
  void _internal_set_roomareanid(uint32_t value);
  public:

  // optional bool udp = 9;
  bool has_udp() const;
  private:
  bool _internal_has_udp() const;
  public:
  void clear_udp();
  bool udp() const;
  void set_udp(bool value);
  private:
  bool _internal_udp() const;
  void _internal_set_udp(bool value);
  public:

  // optional int64 createms = 10;
  bool has_createms() const;
  private:
  bool _internal_has_createms() const;
  public:
  void clear_createms();
  int64_t createms() const;
  void set_createms(int64_t value);
  private:
  int64_t _internal_createms() const;
  void _internal_set_createms(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SvrScene_CreateRoom_SC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::PlayerConvID > playerconv_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomlogid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oldlogid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr linkip_;
  int64_t roomid_;
  uint32_t port_;
  int code_;
  uint32_t roomareanid_;
  bool udp_;
  int64_t createms_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SvrScene_heart_cs final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_SvrScene_heart_cs) */ {
 public:
  inline Msg_SvrScene_heart_cs() : Msg_SvrScene_heart_cs(nullptr) {}
  explicit constexpr Msg_SvrScene_heart_cs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SvrScene_heart_cs(const Msg_SvrScene_heart_cs& from);
  Msg_SvrScene_heart_cs(Msg_SvrScene_heart_cs&& from) noexcept
    : Msg_SvrScene_heart_cs() {
    *this = ::std::move(from);
  }

  inline Msg_SvrScene_heart_cs& operator=(const Msg_SvrScene_heart_cs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SvrScene_heart_cs& operator=(Msg_SvrScene_heart_cs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SvrScene_heart_cs& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SvrScene_heart_cs* internal_default_instance() {
    return reinterpret_cast<const Msg_SvrScene_heart_cs*>(
               &_Msg_SvrScene_heart_cs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Msg_SvrScene_heart_cs& a, Msg_SvrScene_heart_cs& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SvrScene_heart_cs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SvrScene_heart_cs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SvrScene_heart_cs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SvrScene_heart_cs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_SvrScene_heart_cs& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_SvrScene_heart_cs& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SvrScene_heart_cs";
  }
  protected:
  explicit Msg_SvrScene_heart_cs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SvrScene_heart_cs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SvrScene_RoomInfo_Submit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_SvrScene_RoomInfo_Submit) */ {
 public:
  inline Msg_SvrScene_RoomInfo_Submit() : Msg_SvrScene_RoomInfo_Submit(nullptr) {}
  ~Msg_SvrScene_RoomInfo_Submit() override;
  explicit constexpr Msg_SvrScene_RoomInfo_Submit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SvrScene_RoomInfo_Submit(const Msg_SvrScene_RoomInfo_Submit& from);
  Msg_SvrScene_RoomInfo_Submit(Msg_SvrScene_RoomInfo_Submit&& from) noexcept
    : Msg_SvrScene_RoomInfo_Submit() {
    *this = ::std::move(from);
  }

  inline Msg_SvrScene_RoomInfo_Submit& operator=(const Msg_SvrScene_RoomInfo_Submit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SvrScene_RoomInfo_Submit& operator=(Msg_SvrScene_RoomInfo_Submit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SvrScene_RoomInfo_Submit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SvrScene_RoomInfo_Submit* internal_default_instance() {
    return reinterpret_cast<const Msg_SvrScene_RoomInfo_Submit*>(
               &_Msg_SvrScene_RoomInfo_Submit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Msg_SvrScene_RoomInfo_Submit& a, Msg_SvrScene_RoomInfo_Submit& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SvrScene_RoomInfo_Submit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SvrScene_RoomInfo_Submit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SvrScene_RoomInfo_Submit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SvrScene_RoomInfo_Submit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_SvrScene_RoomInfo_Submit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_SvrScene_RoomInfo_Submit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SvrScene_RoomInfo_Submit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SvrScene_RoomInfo_Submit";
  }
  protected:
  explicit Msg_SvrScene_RoomInfo_Submit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomLogIDFieldNumber = 4,
    kRoomIdFieldNumber = 1,
    kRoomStatusFieldNumber = 2,
    kPlayerNumFieldNumber = 3,
  };
  // string roomLogID = 4;
  void clear_roomlogid();
  const std::string& roomlogid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomlogid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomlogid();
  PROTOBUF_NODISCARD std::string* release_roomlogid();
  void set_allocated_roomlogid(std::string* roomlogid);
  private:
  const std::string& _internal_roomlogid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomlogid(const std::string& value);
  std::string* _internal_mutable_roomlogid();
  public:

  // int64 roomId = 1;
  void clear_roomid();
  int64_t roomid() const;
  void set_roomid(int64_t value);
  private:
  int64_t _internal_roomid() const;
  void _internal_set_roomid(int64_t value);
  public:

  // .XrPb.RoomStatus roomStatus = 2;
  void clear_roomstatus();
  ::XrPb::RoomStatus roomstatus() const;
  void set_roomstatus(::XrPb::RoomStatus value);
  private:
  ::XrPb::RoomStatus _internal_roomstatus() const;
  void _internal_set_roomstatus(::XrPb::RoomStatus value);
  public:

  // uint32 PlayerNum = 3;
  void clear_playernum();
  uint32_t playernum() const;
  void set_playernum(uint32_t value);
  private:
  uint32_t _internal_playernum() const;
  void _internal_set_playernum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SvrScene_RoomInfo_Submit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomlogid_;
  int64_t roomid_;
  int roomstatus_;
  uint32_t playernum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SvrScene_ReportInfo_Submit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_SvrScene_ReportInfo_Submit) */ {
 public:
  inline Msg_SvrScene_ReportInfo_Submit() : Msg_SvrScene_ReportInfo_Submit(nullptr) {}
  ~Msg_SvrScene_ReportInfo_Submit() override;
  explicit constexpr Msg_SvrScene_ReportInfo_Submit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SvrScene_ReportInfo_Submit(const Msg_SvrScene_ReportInfo_Submit& from);
  Msg_SvrScene_ReportInfo_Submit(Msg_SvrScene_ReportInfo_Submit&& from) noexcept
    : Msg_SvrScene_ReportInfo_Submit() {
    *this = ::std::move(from);
  }

  inline Msg_SvrScene_ReportInfo_Submit& operator=(const Msg_SvrScene_ReportInfo_Submit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SvrScene_ReportInfo_Submit& operator=(Msg_SvrScene_ReportInfo_Submit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SvrScene_ReportInfo_Submit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SvrScene_ReportInfo_Submit* internal_default_instance() {
    return reinterpret_cast<const Msg_SvrScene_ReportInfo_Submit*>(
               &_Msg_SvrScene_ReportInfo_Submit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Msg_SvrScene_ReportInfo_Submit& a, Msg_SvrScene_ReportInfo_Submit& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SvrScene_ReportInfo_Submit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SvrScene_ReportInfo_Submit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SvrScene_ReportInfo_Submit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SvrScene_ReportInfo_Submit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_SvrScene_ReportInfo_Submit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_SvrScene_ReportInfo_Submit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SvrScene_ReportInfo_Submit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SvrScene_ReportInfo_Submit";
  }
  protected:
  explicit Msg_SvrScene_ReportInfo_Submit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNumFieldNumber = 1,
    kPlayerNumFieldNumber = 2,
  };
  // uint32 roomNum = 1;
  void clear_roomnum();
  uint32_t roomnum() const;
  void set_roomnum(uint32_t value);
  private:
  uint32_t _internal_roomnum() const;
  void _internal_set_roomnum(uint32_t value);
  public:

  // uint32 PlayerNum = 2;
  void clear_playernum();
  uint32_t playernum() const;
  void set_playernum(uint32_t value);
  private:
  uint32_t _internal_playernum() const;
  void _internal_set_playernum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SvrScene_ReportInfo_Submit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t roomnum_;
  uint32_t playernum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SvrScene_EnterRoom_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_SvrScene_EnterRoom_CS) */ {
 public:
  inline Msg_SvrScene_EnterRoom_CS() : Msg_SvrScene_EnterRoom_CS(nullptr) {}
  ~Msg_SvrScene_EnterRoom_CS() override;
  explicit constexpr Msg_SvrScene_EnterRoom_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SvrScene_EnterRoom_CS(const Msg_SvrScene_EnterRoom_CS& from);
  Msg_SvrScene_EnterRoom_CS(Msg_SvrScene_EnterRoom_CS&& from) noexcept
    : Msg_SvrScene_EnterRoom_CS() {
    *this = ::std::move(from);
  }

  inline Msg_SvrScene_EnterRoom_CS& operator=(const Msg_SvrScene_EnterRoom_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SvrScene_EnterRoom_CS& operator=(Msg_SvrScene_EnterRoom_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SvrScene_EnterRoom_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SvrScene_EnterRoom_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_SvrScene_EnterRoom_CS*>(
               &_Msg_SvrScene_EnterRoom_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Msg_SvrScene_EnterRoom_CS& a, Msg_SvrScene_EnterRoom_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SvrScene_EnterRoom_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SvrScene_EnterRoom_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SvrScene_EnterRoom_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SvrScene_EnterRoom_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_SvrScene_EnterRoom_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_SvrScene_EnterRoom_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SvrScene_EnterRoom_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SvrScene_EnterRoom_CS";
  }
  protected:
  explicit Msg_SvrScene_EnterRoom_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiRoleIdFieldNumber = 1,
    kUiRoomIdFieldNumber = 2,
  };
  // int64 uiRoleId = 1;
  void clear_uiroleid();
  int64_t uiroleid() const;
  void set_uiroleid(int64_t value);
  private:
  int64_t _internal_uiroleid() const;
  void _internal_set_uiroleid(int64_t value);
  public:

  // int64 uiRoomId = 2;
  void clear_uiroomid();
  int64_t uiroomid() const;
  void set_uiroomid(int64_t value);
  private:
  int64_t _internal_uiroomid() const;
  void _internal_set_uiroomid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SvrScene_EnterRoom_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t uiroleid_;
  int64_t uiroomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SvrScene_EnterRoom_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:XrPb.Msg_SvrScene_EnterRoom_PUSH) */ {
 public:
  inline Msg_SvrScene_EnterRoom_PUSH() : Msg_SvrScene_EnterRoom_PUSH(nullptr) {}
  explicit constexpr Msg_SvrScene_EnterRoom_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SvrScene_EnterRoom_PUSH(const Msg_SvrScene_EnterRoom_PUSH& from);
  Msg_SvrScene_EnterRoom_PUSH(Msg_SvrScene_EnterRoom_PUSH&& from) noexcept
    : Msg_SvrScene_EnterRoom_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_SvrScene_EnterRoom_PUSH& operator=(const Msg_SvrScene_EnterRoom_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SvrScene_EnterRoom_PUSH& operator=(Msg_SvrScene_EnterRoom_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SvrScene_EnterRoom_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SvrScene_EnterRoom_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_SvrScene_EnterRoom_PUSH*>(
               &_Msg_SvrScene_EnterRoom_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Msg_SvrScene_EnterRoom_PUSH& a, Msg_SvrScene_EnterRoom_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SvrScene_EnterRoom_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SvrScene_EnterRoom_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SvrScene_EnterRoom_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SvrScene_EnterRoom_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Msg_SvrScene_EnterRoom_PUSH& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Msg_SvrScene_EnterRoom_PUSH& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SvrScene_EnterRoom_PUSH";
  }
  protected:
  explicit Msg_SvrScene_EnterRoom_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SvrScene_EnterRoom_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SvrScene_PlayerInfo_Submit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_SvrScene_PlayerInfo_Submit) */ {
 public:
  inline Msg_SvrScene_PlayerInfo_Submit() : Msg_SvrScene_PlayerInfo_Submit(nullptr) {}
  ~Msg_SvrScene_PlayerInfo_Submit() override;
  explicit constexpr Msg_SvrScene_PlayerInfo_Submit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SvrScene_PlayerInfo_Submit(const Msg_SvrScene_PlayerInfo_Submit& from);
  Msg_SvrScene_PlayerInfo_Submit(Msg_SvrScene_PlayerInfo_Submit&& from) noexcept
    : Msg_SvrScene_PlayerInfo_Submit() {
    *this = ::std::move(from);
  }

  inline Msg_SvrScene_PlayerInfo_Submit& operator=(const Msg_SvrScene_PlayerInfo_Submit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SvrScene_PlayerInfo_Submit& operator=(Msg_SvrScene_PlayerInfo_Submit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SvrScene_PlayerInfo_Submit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SvrScene_PlayerInfo_Submit* internal_default_instance() {
    return reinterpret_cast<const Msg_SvrScene_PlayerInfo_Submit*>(
               &_Msg_SvrScene_PlayerInfo_Submit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Msg_SvrScene_PlayerInfo_Submit& a, Msg_SvrScene_PlayerInfo_Submit& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SvrScene_PlayerInfo_Submit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SvrScene_PlayerInfo_Submit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SvrScene_PlayerInfo_Submit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SvrScene_PlayerInfo_Submit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_SvrScene_PlayerInfo_Submit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_SvrScene_PlayerInfo_Submit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SvrScene_PlayerInfo_Submit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SvrScene_PlayerInfo_Submit";
  }
  protected:
  explicit Msg_SvrScene_PlayerInfo_Submit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // int64 playerId = 1;
  void clear_playerid();
  int64_t playerid() const;
  void set_playerid(int64_t value);
  private:
  int64_t _internal_playerid() const;
  void _internal_set_playerid(int64_t value);
  public:

  // int64 roomId = 2;
  void clear_roomid();
  int64_t roomid() const;
  void set_roomid(int64_t value);
  private:
  int64_t _internal_roomid() const;
  void _internal_set_roomid(int64_t value);
  public:

  // .XrPb.RoomPlayerStatus Status = 3;
  void clear_status();
  ::XrPb::RoomPlayerStatus status() const;
  void set_status(::XrPb::RoomPlayerStatus value);
  private:
  ::XrPb::RoomPlayerStatus _internal_status() const;
  void _internal_set_status(::XrPb::RoomPlayerStatus value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SvrScene_PlayerInfo_Submit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t playerid_;
  int64_t roomid_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SvrScene_Verify_EnterRoom_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_SvrScene_Verify_EnterRoom_CS) */ {
 public:
  inline Msg_SvrScene_Verify_EnterRoom_CS() : Msg_SvrScene_Verify_EnterRoom_CS(nullptr) {}
  ~Msg_SvrScene_Verify_EnterRoom_CS() override;
  explicit constexpr Msg_SvrScene_Verify_EnterRoom_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SvrScene_Verify_EnterRoom_CS(const Msg_SvrScene_Verify_EnterRoom_CS& from);
  Msg_SvrScene_Verify_EnterRoom_CS(Msg_SvrScene_Verify_EnterRoom_CS&& from) noexcept
    : Msg_SvrScene_Verify_EnterRoom_CS() {
    *this = ::std::move(from);
  }

  inline Msg_SvrScene_Verify_EnterRoom_CS& operator=(const Msg_SvrScene_Verify_EnterRoom_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SvrScene_Verify_EnterRoom_CS& operator=(Msg_SvrScene_Verify_EnterRoom_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SvrScene_Verify_EnterRoom_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SvrScene_Verify_EnterRoom_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_SvrScene_Verify_EnterRoom_CS*>(
               &_Msg_SvrScene_Verify_EnterRoom_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Msg_SvrScene_Verify_EnterRoom_CS& a, Msg_SvrScene_Verify_EnterRoom_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SvrScene_Verify_EnterRoom_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SvrScene_Verify_EnterRoom_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SvrScene_Verify_EnterRoom_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SvrScene_Verify_EnterRoom_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_SvrScene_Verify_EnterRoom_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_SvrScene_Verify_EnterRoom_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SvrScene_Verify_EnterRoom_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SvrScene_Verify_EnterRoom_CS";
  }
  protected:
  explicit Msg_SvrScene_Verify_EnterRoom_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 3,
    kMapNameFieldNumber = 2,
    kUiRoomIdFieldNumber = 1,
  };
  // repeated .XrPb.ScenePlayerData players = 3;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::XrPb::ScenePlayerData* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ScenePlayerData >*
      mutable_players();
  private:
  const ::XrPb::ScenePlayerData& _internal_players(int index) const;
  ::XrPb::ScenePlayerData* _internal_add_players();
  public:
  const ::XrPb::ScenePlayerData& players(int index) const;
  ::XrPb::ScenePlayerData* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ScenePlayerData >&
      players() const;

  // string mapName = 2;
  void clear_mapname();
  const std::string& mapname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mapname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mapname();
  PROTOBUF_NODISCARD std::string* release_mapname();
  void set_allocated_mapname(std::string* mapname);
  private:
  const std::string& _internal_mapname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mapname(const std::string& value);
  std::string* _internal_mutable_mapname();
  public:

  // int64 uiRoomId = 1;
  void clear_uiroomid();
  int64_t uiroomid() const;
  void set_uiroomid(int64_t value);
  private:
  int64_t _internal_uiroomid() const;
  void _internal_set_uiroomid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SvrScene_Verify_EnterRoom_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ScenePlayerData > players_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapname_;
  int64_t uiroomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SvrScene_Verify_OrderData_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_SvrScene_Verify_OrderData_CS) */ {
 public:
  inline Msg_SvrScene_Verify_OrderData_CS() : Msg_SvrScene_Verify_OrderData_CS(nullptr) {}
  ~Msg_SvrScene_Verify_OrderData_CS() override;
  explicit constexpr Msg_SvrScene_Verify_OrderData_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SvrScene_Verify_OrderData_CS(const Msg_SvrScene_Verify_OrderData_CS& from);
  Msg_SvrScene_Verify_OrderData_CS(Msg_SvrScene_Verify_OrderData_CS&& from) noexcept
    : Msg_SvrScene_Verify_OrderData_CS() {
    *this = ::std::move(from);
  }

  inline Msg_SvrScene_Verify_OrderData_CS& operator=(const Msg_SvrScene_Verify_OrderData_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SvrScene_Verify_OrderData_CS& operator=(Msg_SvrScene_Verify_OrderData_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SvrScene_Verify_OrderData_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SvrScene_Verify_OrderData_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_SvrScene_Verify_OrderData_CS*>(
               &_Msg_SvrScene_Verify_OrderData_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Msg_SvrScene_Verify_OrderData_CS& a, Msg_SvrScene_Verify_OrderData_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SvrScene_Verify_OrderData_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SvrScene_Verify_OrderData_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SvrScene_Verify_OrderData_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SvrScene_Verify_OrderData_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_SvrScene_Verify_OrderData_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_SvrScene_Verify_OrderData_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SvrScene_Verify_OrderData_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SvrScene_Verify_OrderData_CS";
  }
  protected:
  explicit Msg_SvrScene_Verify_OrderData_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiRoomIdFieldNumber = 1,
    kRoomTimeFieldNumber = 2,
    kServerTimeFieldNumber = 3,
  };
  // int64 uiRoomId = 1;
  void clear_uiroomid();
  int64_t uiroomid() const;
  void set_uiroomid(int64_t value);
  private:
  int64_t _internal_uiroomid() const;
  void _internal_set_uiroomid(int64_t value);
  public:

  // uint32 roomTime = 2;
  void clear_roomtime();
  uint32_t roomtime() const;
  void set_roomtime(uint32_t value);
  private:
  uint32_t _internal_roomtime() const;
  void _internal_set_roomtime(uint32_t value);
  public:

  // uint32 serverTime = 3;
  void clear_servertime();
  uint32_t servertime() const;
  void set_servertime(uint32_t value);
  private:
  uint32_t _internal_servertime() const;
  void _internal_set_servertime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SvrScene_Verify_OrderData_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t uiroomid_;
  uint32_t roomtime_;
  uint32_t servertime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SvrScene_Verify_LeaveRoom_CS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_SvrScene_Verify_LeaveRoom_CS) */ {
 public:
  inline Msg_SvrScene_Verify_LeaveRoom_CS() : Msg_SvrScene_Verify_LeaveRoom_CS(nullptr) {}
  ~Msg_SvrScene_Verify_LeaveRoom_CS() override;
  explicit constexpr Msg_SvrScene_Verify_LeaveRoom_CS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SvrScene_Verify_LeaveRoom_CS(const Msg_SvrScene_Verify_LeaveRoom_CS& from);
  Msg_SvrScene_Verify_LeaveRoom_CS(Msg_SvrScene_Verify_LeaveRoom_CS&& from) noexcept
    : Msg_SvrScene_Verify_LeaveRoom_CS() {
    *this = ::std::move(from);
  }

  inline Msg_SvrScene_Verify_LeaveRoom_CS& operator=(const Msg_SvrScene_Verify_LeaveRoom_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SvrScene_Verify_LeaveRoom_CS& operator=(Msg_SvrScene_Verify_LeaveRoom_CS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SvrScene_Verify_LeaveRoom_CS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SvrScene_Verify_LeaveRoom_CS* internal_default_instance() {
    return reinterpret_cast<const Msg_SvrScene_Verify_LeaveRoom_CS*>(
               &_Msg_SvrScene_Verify_LeaveRoom_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Msg_SvrScene_Verify_LeaveRoom_CS& a, Msg_SvrScene_Verify_LeaveRoom_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SvrScene_Verify_LeaveRoom_CS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SvrScene_Verify_LeaveRoom_CS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SvrScene_Verify_LeaveRoom_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SvrScene_Verify_LeaveRoom_CS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_SvrScene_Verify_LeaveRoom_CS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_SvrScene_Verify_LeaveRoom_CS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SvrScene_Verify_LeaveRoom_CS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SvrScene_Verify_LeaveRoom_CS";
  }
  protected:
  explicit Msg_SvrScene_Verify_LeaveRoom_CS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUiRoomIdFieldNumber = 1,
  };
  // int64 uiRoomId = 1;
  void clear_uiroomid();
  int64_t uiroomid() const;
  void set_uiroomid(int64_t value);
  private:
  int64_t _internal_uiroomid() const;
  void _internal_set_uiroomid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SvrScene_Verify_LeaveRoom_CS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t uiroomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SvrScene_Result_PUSH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_SvrScene_Result_PUSH) */ {
 public:
  inline Msg_SvrScene_Result_PUSH() : Msg_SvrScene_Result_PUSH(nullptr) {}
  ~Msg_SvrScene_Result_PUSH() override;
  explicit constexpr Msg_SvrScene_Result_PUSH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SvrScene_Result_PUSH(const Msg_SvrScene_Result_PUSH& from);
  Msg_SvrScene_Result_PUSH(Msg_SvrScene_Result_PUSH&& from) noexcept
    : Msg_SvrScene_Result_PUSH() {
    *this = ::std::move(from);
  }

  inline Msg_SvrScene_Result_PUSH& operator=(const Msg_SvrScene_Result_PUSH& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SvrScene_Result_PUSH& operator=(Msg_SvrScene_Result_PUSH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SvrScene_Result_PUSH& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SvrScene_Result_PUSH* internal_default_instance() {
    return reinterpret_cast<const Msg_SvrScene_Result_PUSH*>(
               &_Msg_SvrScene_Result_PUSH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Msg_SvrScene_Result_PUSH& a, Msg_SvrScene_Result_PUSH& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SvrScene_Result_PUSH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SvrScene_Result_PUSH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SvrScene_Result_PUSH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SvrScene_Result_PUSH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_SvrScene_Result_PUSH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_SvrScene_Result_PUSH& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SvrScene_Result_PUSH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SvrScene_Result_PUSH";
  }
  protected:
  explicit Msg_SvrScene_Result_PUSH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOSceneResultFieldNumber = 2,
    kRoomLogIDFieldNumber = 4,
    kRoomStatusFieldNumber = 3,
    kUiRoomIdFieldNumber = 1,
  };
  // repeated .XrPb.SceneResultPlayerData oSceneResult = 2;
  int osceneresult_size() const;
  private:
  int _internal_osceneresult_size() const;
  public:
  void clear_osceneresult();
  ::XrPb::SceneResultPlayerData* mutable_osceneresult(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::SceneResultPlayerData >*
      mutable_osceneresult();
  private:
  const ::XrPb::SceneResultPlayerData& _internal_osceneresult(int index) const;
  ::XrPb::SceneResultPlayerData* _internal_add_osceneresult();
  public:
  const ::XrPb::SceneResultPlayerData& osceneresult(int index) const;
  ::XrPb::SceneResultPlayerData* add_osceneresult();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::SceneResultPlayerData >&
      osceneresult() const;

  // string roomLogID = 4;
  void clear_roomlogid();
  const std::string& roomlogid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomlogid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomlogid();
  PROTOBUF_NODISCARD std::string* release_roomlogid();
  void set_allocated_roomlogid(std::string* roomlogid);
  private:
  const std::string& _internal_roomlogid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomlogid(const std::string& value);
  std::string* _internal_mutable_roomlogid();
  public:

  // .XrPb.RoomResState roomStatus = 3;
  bool has_roomstatus() const;
  private:
  bool _internal_has_roomstatus() const;
  public:
  void clear_roomstatus();
  const ::XrPb::RoomResState& roomstatus() const;
  PROTOBUF_NODISCARD ::XrPb::RoomResState* release_roomstatus();
  ::XrPb::RoomResState* mutable_roomstatus();
  void set_allocated_roomstatus(::XrPb::RoomResState* roomstatus);
  private:
  const ::XrPb::RoomResState& _internal_roomstatus() const;
  ::XrPb::RoomResState* _internal_mutable_roomstatus();
  public:
  void unsafe_arena_set_allocated_roomstatus(
      ::XrPb::RoomResState* roomstatus);
  ::XrPb::RoomResState* unsafe_arena_release_roomstatus();

  // int64 uiRoomId = 1;
  void clear_uiroomid();
  int64_t uiroomid() const;
  void set_uiroomid(int64_t value);
  private:
  int64_t _internal_uiroomid() const;
  void _internal_set_uiroomid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SvrScene_Result_PUSH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::SceneResultPlayerData > osceneresult_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomlogid_;
  ::XrPb::RoomResState* roomstatus_;
  int64_t uiroomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// -------------------------------------------------------------------

class Msg_SvrScene_RoomNum_Push final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XrPb.Msg_SvrScene_RoomNum_Push) */ {
 public:
  inline Msg_SvrScene_RoomNum_Push() : Msg_SvrScene_RoomNum_Push(nullptr) {}
  ~Msg_SvrScene_RoomNum_Push() override;
  explicit constexpr Msg_SvrScene_RoomNum_Push(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_SvrScene_RoomNum_Push(const Msg_SvrScene_RoomNum_Push& from);
  Msg_SvrScene_RoomNum_Push(Msg_SvrScene_RoomNum_Push&& from) noexcept
    : Msg_SvrScene_RoomNum_Push() {
    *this = ::std::move(from);
  }

  inline Msg_SvrScene_RoomNum_Push& operator=(const Msg_SvrScene_RoomNum_Push& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SvrScene_RoomNum_Push& operator=(Msg_SvrScene_RoomNum_Push&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_SvrScene_RoomNum_Push& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_SvrScene_RoomNum_Push* internal_default_instance() {
    return reinterpret_cast<const Msg_SvrScene_RoomNum_Push*>(
               &_Msg_SvrScene_RoomNum_Push_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Msg_SvrScene_RoomNum_Push& a, Msg_SvrScene_RoomNum_Push& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SvrScene_RoomNum_Push* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SvrScene_RoomNum_Push* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_SvrScene_RoomNum_Push* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_SvrScene_RoomNum_Push>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_SvrScene_RoomNum_Push& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Msg_SvrScene_RoomNum_Push& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SvrScene_RoomNum_Push* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XrPb.Msg_SvrScene_RoomNum_Push";
  }
  protected:
  explicit Msg_SvrScene_RoomNum_Push(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxroomFieldNumber = 1,
    kRoomsumFieldNumber = 2,
  };
  // optional uint32 maxroom = 1;
  bool has_maxroom() const;
  private:
  bool _internal_has_maxroom() const;
  public:
  void clear_maxroom();
  uint32_t maxroom() const;
  void set_maxroom(uint32_t value);
  private:
  uint32_t _internal_maxroom() const;
  void _internal_set_maxroom(uint32_t value);
  public:

  // optional uint32 roomsum = 2;
  bool has_roomsum() const;
  private:
  bool _internal_has_roomsum() const;
  public:
  void clear_roomsum();
  uint32_t roomsum() const;
  void set_roomsum(uint32_t value);
  private:
  uint32_t _internal_roomsum() const;
  void _internal_set_roomsum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:XrPb.Msg_SvrScene_RoomNum_Push)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t maxroom_;
  uint32_t roomsum_;
  friend struct ::TableStruct_server_2fMsgServerScene_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgSvrMod_Scene

// -------------------------------------------------------------------

// RoomResState

// .XrPb.RoomStatus roomStatus = 1;
inline void RoomResState::clear_roomstatus() {
  roomstatus_ = 0;
}
inline ::XrPb::RoomStatus RoomResState::_internal_roomstatus() const {
  return static_cast< ::XrPb::RoomStatus >(roomstatus_);
}
inline ::XrPb::RoomStatus RoomResState::roomstatus() const {
  // @@protoc_insertion_point(field_get:XrPb.RoomResState.roomStatus)
  return _internal_roomstatus();
}
inline void RoomResState::_internal_set_roomstatus(::XrPb::RoomStatus value) {
  
  roomstatus_ = value;
}
inline void RoomResState::set_roomstatus(::XrPb::RoomStatus value) {
  _internal_set_roomstatus(value);
  // @@protoc_insertion_point(field_set:XrPb.RoomResState.roomStatus)
}

// optional uint32 sceneSec = 2;
inline bool RoomResState::_internal_has_scenesec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoomResState::has_scenesec() const {
  return _internal_has_scenesec();
}
inline void RoomResState::clear_scenesec() {
  scenesec_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t RoomResState::_internal_scenesec() const {
  return scenesec_;
}
inline uint32_t RoomResState::scenesec() const {
  // @@protoc_insertion_point(field_get:XrPb.RoomResState.sceneSec)
  return _internal_scenesec();
}
inline void RoomResState::_internal_set_scenesec(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  scenesec_ = value;
}
inline void RoomResState::set_scenesec(uint32_t value) {
  _internal_set_scenesec(value);
  // @@protoc_insertion_point(field_set:XrPb.RoomResState.sceneSec)
}

// optional uint32 roomAreanId = 3;
inline bool RoomResState::_internal_has_roomareanid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoomResState::has_roomareanid() const {
  return _internal_has_roomareanid();
}
inline void RoomResState::clear_roomareanid() {
  roomareanid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RoomResState::_internal_roomareanid() const {
  return roomareanid_;
}
inline uint32_t RoomResState::roomareanid() const {
  // @@protoc_insertion_point(field_get:XrPb.RoomResState.roomAreanId)
  return _internal_roomareanid();
}
inline void RoomResState::_internal_set_roomareanid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  roomareanid_ = value;
}
inline void RoomResState::set_roomareanid(uint32_t value) {
  _internal_set_roomareanid(value);
  // @@protoc_insertion_point(field_set:XrPb.RoomResState.roomAreanId)
}

// -------------------------------------------------------------------

// Msg_SvrScene_Register_CS

// string ip = 1;
inline void Msg_SvrScene_Register_CS::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& Msg_SvrScene_Register_CS::ip() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Register_CS.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_SvrScene_Register_CS::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Register_CS.ip)
}
inline std::string* Msg_SvrScene_Register_CS::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_Register_CS.ip)
  return _s;
}
inline const std::string& Msg_SvrScene_Register_CS::_internal_ip() const {
  return ip_.Get();
}
inline void Msg_SvrScene_Register_CS::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_Register_CS::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_Register_CS::release_ip() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_SvrScene_Register_CS.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_SvrScene_Register_CS::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_SvrScene_Register_CS.ip)
}

// uint32 port = 2;
inline void Msg_SvrScene_Register_CS::clear_port() {
  port_ = 0u;
}
inline uint32_t Msg_SvrScene_Register_CS::_internal_port() const {
  return port_;
}
inline uint32_t Msg_SvrScene_Register_CS::port() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Register_CS.port)
  return _internal_port();
}
inline void Msg_SvrScene_Register_CS::_internal_set_port(uint32_t value) {
  
  port_ = value;
}
inline void Msg_SvrScene_Register_CS::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Register_CS.port)
}

// uint32 maxRoomNum = 3;
inline void Msg_SvrScene_Register_CS::clear_maxroomnum() {
  maxroomnum_ = 0u;
}
inline uint32_t Msg_SvrScene_Register_CS::_internal_maxroomnum() const {
  return maxroomnum_;
}
inline uint32_t Msg_SvrScene_Register_CS::maxroomnum() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Register_CS.maxRoomNum)
  return _internal_maxroomnum();
}
inline void Msg_SvrScene_Register_CS::_internal_set_maxroomnum(uint32_t value) {
  
  maxroomnum_ = value;
}
inline void Msg_SvrScene_Register_CS::set_maxroomnum(uint32_t value) {
  _internal_set_maxroomnum(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Register_CS.maxRoomNum)
}

// uint32 id = 4;
inline void Msg_SvrScene_Register_CS::clear_id() {
  id_ = 0u;
}
inline uint32_t Msg_SvrScene_Register_CS::_internal_id() const {
  return id_;
}
inline uint32_t Msg_SvrScene_Register_CS::id() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Register_CS.id)
  return _internal_id();
}
inline void Msg_SvrScene_Register_CS::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void Msg_SvrScene_Register_CS::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Register_CS.id)
}

// uint32 serverArea = 5;
inline void Msg_SvrScene_Register_CS::clear_serverarea() {
  serverarea_ = 0u;
}
inline uint32_t Msg_SvrScene_Register_CS::_internal_serverarea() const {
  return serverarea_;
}
inline uint32_t Msg_SvrScene_Register_CS::serverarea() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Register_CS.serverArea)
  return _internal_serverarea();
}
inline void Msg_SvrScene_Register_CS::_internal_set_serverarea(uint32_t value) {
  
  serverarea_ = value;
}
inline void Msg_SvrScene_Register_CS::set_serverarea(uint32_t value) {
  _internal_set_serverarea(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Register_CS.serverArea)
}

// uint32 maxplayernum = 6;
inline void Msg_SvrScene_Register_CS::clear_maxplayernum() {
  maxplayernum_ = 0u;
}
inline uint32_t Msg_SvrScene_Register_CS::_internal_maxplayernum() const {
  return maxplayernum_;
}
inline uint32_t Msg_SvrScene_Register_CS::maxplayernum() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Register_CS.maxplayernum)
  return _internal_maxplayernum();
}
inline void Msg_SvrScene_Register_CS::_internal_set_maxplayernum(uint32_t value) {
  
  maxplayernum_ = value;
}
inline void Msg_SvrScene_Register_CS::set_maxplayernum(uint32_t value) {
  _internal_set_maxplayernum(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Register_CS.maxplayernum)
}

// uint32 curPlayerNum = 7;
inline void Msg_SvrScene_Register_CS::clear_curplayernum() {
  curplayernum_ = 0u;
}
inline uint32_t Msg_SvrScene_Register_CS::_internal_curplayernum() const {
  return curplayernum_;
}
inline uint32_t Msg_SvrScene_Register_CS::curplayernum() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Register_CS.curPlayerNum)
  return _internal_curplayernum();
}
inline void Msg_SvrScene_Register_CS::_internal_set_curplayernum(uint32_t value) {
  
  curplayernum_ = value;
}
inline void Msg_SvrScene_Register_CS::set_curplayernum(uint32_t value) {
  _internal_set_curplayernum(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Register_CS.curPlayerNum)
}

// uint32 curRoomNum = 8;
inline void Msg_SvrScene_Register_CS::clear_curroomnum() {
  curroomnum_ = 0u;
}
inline uint32_t Msg_SvrScene_Register_CS::_internal_curroomnum() const {
  return curroomnum_;
}
inline uint32_t Msg_SvrScene_Register_CS::curroomnum() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Register_CS.curRoomNum)
  return _internal_curroomnum();
}
inline void Msg_SvrScene_Register_CS::_internal_set_curroomnum(uint32_t value) {
  
  curroomnum_ = value;
}
inline void Msg_SvrScene_Register_CS::set_curroomnum(uint32_t value) {
  _internal_set_curroomnum(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Register_CS.curRoomNum)
}

// optional string linkip = 9;
inline bool Msg_SvrScene_Register_CS::_internal_has_linkip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_SvrScene_Register_CS::has_linkip() const {
  return _internal_has_linkip();
}
inline void Msg_SvrScene_Register_CS::clear_linkip() {
  linkip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Msg_SvrScene_Register_CS::linkip() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Register_CS.linkip)
  return _internal_linkip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_SvrScene_Register_CS::set_linkip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 linkip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Register_CS.linkip)
}
inline std::string* Msg_SvrScene_Register_CS::mutable_linkip() {
  std::string* _s = _internal_mutable_linkip();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_Register_CS.linkip)
  return _s;
}
inline const std::string& Msg_SvrScene_Register_CS::_internal_linkip() const {
  return linkip_.Get();
}
inline void Msg_SvrScene_Register_CS::_internal_set_linkip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  linkip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_Register_CS::_internal_mutable_linkip() {
  _has_bits_[0] |= 0x00000001u;
  return linkip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_Register_CS::release_linkip() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_SvrScene_Register_CS.linkip)
  if (!_internal_has_linkip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = linkip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (linkip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    linkip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_SvrScene_Register_CS::set_allocated_linkip(std::string* linkip) {
  if (linkip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  linkip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), linkip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (linkip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    linkip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_SvrScene_Register_CS.linkip)
}

// -------------------------------------------------------------------

// Msg_SvrScene_Register_SC

// uint32 serverId = 1;
inline void Msg_SvrScene_Register_SC::clear_serverid() {
  serverid_ = 0u;
}
inline uint32_t Msg_SvrScene_Register_SC::_internal_serverid() const {
  return serverid_;
}
inline uint32_t Msg_SvrScene_Register_SC::serverid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Register_SC.serverId)
  return _internal_serverid();
}
inline void Msg_SvrScene_Register_SC::_internal_set_serverid(uint32_t value) {
  
  serverid_ = value;
}
inline void Msg_SvrScene_Register_SC::set_serverid(uint32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Register_SC.serverId)
}

// -------------------------------------------------------------------

// Msg_SvrScene_CreateRoom_CS

// int64 roomId = 1;
inline void Msg_SvrScene_CreateRoom_CS::clear_roomid() {
  roomid_ = int64_t{0};
}
inline int64_t Msg_SvrScene_CreateRoom_CS::_internal_roomid() const {
  return roomid_;
}
inline int64_t Msg_SvrScene_CreateRoom_CS::roomid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_CS.roomId)
  return _internal_roomid();
}
inline void Msg_SvrScene_CreateRoom_CS::_internal_set_roomid(int64_t value) {
  
  roomid_ = value;
}
inline void Msg_SvrScene_CreateRoom_CS::set_roomid(int64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_CS.roomId)
}

// .XrPb.RoomType type = 2;
inline void Msg_SvrScene_CreateRoom_CS::clear_type() {
  type_ = 0;
}
inline ::XrPb::RoomType Msg_SvrScene_CreateRoom_CS::_internal_type() const {
  return static_cast< ::XrPb::RoomType >(type_);
}
inline ::XrPb::RoomType Msg_SvrScene_CreateRoom_CS::type() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_CS.type)
  return _internal_type();
}
inline void Msg_SvrScene_CreateRoom_CS::_internal_set_type(::XrPb::RoomType value) {
  
  type_ = value;
}
inline void Msg_SvrScene_CreateRoom_CS::set_type(::XrPb::RoomType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_CS.type)
}

// string mapName = 3;
inline void Msg_SvrScene_CreateRoom_CS::clear_mapname() {
  mapname_.ClearToEmpty();
}
inline const std::string& Msg_SvrScene_CreateRoom_CS::mapname() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_CS.mapName)
  return _internal_mapname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_SvrScene_CreateRoom_CS::set_mapname(ArgT0&& arg0, ArgT... args) {
 
 mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_CS.mapName)
}
inline std::string* Msg_SvrScene_CreateRoom_CS::mutable_mapname() {
  std::string* _s = _internal_mutable_mapname();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_CreateRoom_CS.mapName)
  return _s;
}
inline const std::string& Msg_SvrScene_CreateRoom_CS::_internal_mapname() const {
  return mapname_.Get();
}
inline void Msg_SvrScene_CreateRoom_CS::_internal_set_mapname(const std::string& value) {
  
  mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_CreateRoom_CS::_internal_mutable_mapname() {
  
  return mapname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_CreateRoom_CS::release_mapname() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_SvrScene_CreateRoom_CS.mapName)
  return mapname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_SvrScene_CreateRoom_CS::set_allocated_mapname(std::string* mapname) {
  if (mapname != nullptr) {
    
  } else {
    
  }
  mapname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mapname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_SvrScene_CreateRoom_CS.mapName)
}

// uint32 mapId = 4;
inline void Msg_SvrScene_CreateRoom_CS::clear_mapid() {
  mapid_ = 0u;
}
inline uint32_t Msg_SvrScene_CreateRoom_CS::_internal_mapid() const {
  return mapid_;
}
inline uint32_t Msg_SvrScene_CreateRoom_CS::mapid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_CS.mapId)
  return _internal_mapid();
}
inline void Msg_SvrScene_CreateRoom_CS::_internal_set_mapid(uint32_t value) {
  
  mapid_ = value;
}
inline void Msg_SvrScene_CreateRoom_CS::set_mapid(uint32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_CS.mapId)
}

// uint32 mapsec = 5;
inline void Msg_SvrScene_CreateRoom_CS::clear_mapsec() {
  mapsec_ = 0u;
}
inline uint32_t Msg_SvrScene_CreateRoom_CS::_internal_mapsec() const {
  return mapsec_;
}
inline uint32_t Msg_SvrScene_CreateRoom_CS::mapsec() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_CS.mapsec)
  return _internal_mapsec();
}
inline void Msg_SvrScene_CreateRoom_CS::_internal_set_mapsec(uint32_t value) {
  
  mapsec_ = value;
}
inline void Msg_SvrScene_CreateRoom_CS::set_mapsec(uint32_t value) {
  _internal_set_mapsec(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_CS.mapsec)
}

// repeated .XrPb.ScenePlayerData playerData = 6;
inline int Msg_SvrScene_CreateRoom_CS::_internal_playerdata_size() const {
  return playerdata_.size();
}
inline int Msg_SvrScene_CreateRoom_CS::playerdata_size() const {
  return _internal_playerdata_size();
}
inline ::XrPb::ScenePlayerData* Msg_SvrScene_CreateRoom_CS::mutable_playerdata(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_CreateRoom_CS.playerData)
  return playerdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ScenePlayerData >*
Msg_SvrScene_CreateRoom_CS::mutable_playerdata() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_SvrScene_CreateRoom_CS.playerData)
  return &playerdata_;
}
inline const ::XrPb::ScenePlayerData& Msg_SvrScene_CreateRoom_CS::_internal_playerdata(int index) const {
  return playerdata_.Get(index);
}
inline const ::XrPb::ScenePlayerData& Msg_SvrScene_CreateRoom_CS::playerdata(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_CS.playerData)
  return _internal_playerdata(index);
}
inline ::XrPb::ScenePlayerData* Msg_SvrScene_CreateRoom_CS::_internal_add_playerdata() {
  return playerdata_.Add();
}
inline ::XrPb::ScenePlayerData* Msg_SvrScene_CreateRoom_CS::add_playerdata() {
  ::XrPb::ScenePlayerData* _add = _internal_add_playerdata();
  // @@protoc_insertion_point(field_add:XrPb.Msg_SvrScene_CreateRoom_CS.playerData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ScenePlayerData >&
Msg_SvrScene_CreateRoom_CS::playerdata() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_SvrScene_CreateRoom_CS.playerData)
  return playerdata_;
}

// string roomLogID = 7;
inline void Msg_SvrScene_CreateRoom_CS::clear_roomlogid() {
  roomlogid_.ClearToEmpty();
}
inline const std::string& Msg_SvrScene_CreateRoom_CS::roomlogid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_CS.roomLogID)
  return _internal_roomlogid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_SvrScene_CreateRoom_CS::set_roomlogid(ArgT0&& arg0, ArgT... args) {
 
 roomlogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_CS.roomLogID)
}
inline std::string* Msg_SvrScene_CreateRoom_CS::mutable_roomlogid() {
  std::string* _s = _internal_mutable_roomlogid();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_CreateRoom_CS.roomLogID)
  return _s;
}
inline const std::string& Msg_SvrScene_CreateRoom_CS::_internal_roomlogid() const {
  return roomlogid_.Get();
}
inline void Msg_SvrScene_CreateRoom_CS::_internal_set_roomlogid(const std::string& value) {
  
  roomlogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_CreateRoom_CS::_internal_mutable_roomlogid() {
  
  return roomlogid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_CreateRoom_CS::release_roomlogid() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_SvrScene_CreateRoom_CS.roomLogID)
  return roomlogid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_SvrScene_CreateRoom_CS::set_allocated_roomlogid(std::string* roomlogid) {
  if (roomlogid != nullptr) {
    
  } else {
    
  }
  roomlogid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomlogid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomlogid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomlogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_SvrScene_CreateRoom_CS.roomLogID)
}

// .XrPb.GameVersion game_version = 8;
inline bool Msg_SvrScene_CreateRoom_CS::_internal_has_game_version() const {
  return this != internal_default_instance() && game_version_ != nullptr;
}
inline bool Msg_SvrScene_CreateRoom_CS::has_game_version() const {
  return _internal_has_game_version();
}
inline const ::XrPb::GameVersion& Msg_SvrScene_CreateRoom_CS::_internal_game_version() const {
  const ::XrPb::GameVersion* p = game_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::GameVersion&>(
      ::XrPb::_GameVersion_default_instance_);
}
inline const ::XrPb::GameVersion& Msg_SvrScene_CreateRoom_CS::game_version() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_CS.game_version)
  return _internal_game_version();
}
inline void Msg_SvrScene_CreateRoom_CS::unsafe_arena_set_allocated_game_version(
    ::XrPb::GameVersion* game_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_version_);
  }
  game_version_ = game_version;
  if (game_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_SvrScene_CreateRoom_CS.game_version)
}
inline ::XrPb::GameVersion* Msg_SvrScene_CreateRoom_CS::release_game_version() {
  
  ::XrPb::GameVersion* temp = game_version_;
  game_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::GameVersion* Msg_SvrScene_CreateRoom_CS::unsafe_arena_release_game_version() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_SvrScene_CreateRoom_CS.game_version)
  
  ::XrPb::GameVersion* temp = game_version_;
  game_version_ = nullptr;
  return temp;
}
inline ::XrPb::GameVersion* Msg_SvrScene_CreateRoom_CS::_internal_mutable_game_version() {
  
  if (game_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::GameVersion>(GetArenaForAllocation());
    game_version_ = p;
  }
  return game_version_;
}
inline ::XrPb::GameVersion* Msg_SvrScene_CreateRoom_CS::mutable_game_version() {
  ::XrPb::GameVersion* _msg = _internal_mutable_game_version();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_CreateRoom_CS.game_version)
  return _msg;
}
inline void Msg_SvrScene_CreateRoom_CS::set_allocated_game_version(::XrPb::GameVersion* game_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_version_);
  }
  if (game_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_version));
    if (message_arena != submessage_arena) {
      game_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_version, submessage_arena);
    }
    
  } else {
    
  }
  game_version_ = game_version;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_SvrScene_CreateRoom_CS.game_version)
}

// uint32 initAreaID = 9;
inline void Msg_SvrScene_CreateRoom_CS::clear_initareaid() {
  initareaid_ = 0u;
}
inline uint32_t Msg_SvrScene_CreateRoom_CS::_internal_initareaid() const {
  return initareaid_;
}
inline uint32_t Msg_SvrScene_CreateRoom_CS::initareaid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_CS.initAreaID)
  return _internal_initareaid();
}
inline void Msg_SvrScene_CreateRoom_CS::_internal_set_initareaid(uint32_t value) {
  
  initareaid_ = value;
}
inline void Msg_SvrScene_CreateRoom_CS::set_initareaid(uint32_t value) {
  _internal_set_initareaid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_CS.initAreaID)
}

// uint32 playerNum = 10;
inline void Msg_SvrScene_CreateRoom_CS::clear_playernum() {
  playernum_ = 0u;
}
inline uint32_t Msg_SvrScene_CreateRoom_CS::_internal_playernum() const {
  return playernum_;
}
inline uint32_t Msg_SvrScene_CreateRoom_CS::playernum() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_CS.playerNum)
  return _internal_playernum();
}
inline void Msg_SvrScene_CreateRoom_CS::_internal_set_playernum(uint32_t value) {
  
  playernum_ = value;
}
inline void Msg_SvrScene_CreateRoom_CS::set_playernum(uint32_t value) {
  _internal_set_playernum(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_CS.playerNum)
}

// -------------------------------------------------------------------

// PlayerConvID

// optional int64 playerid = 1;
inline bool PlayerConvID::_internal_has_playerid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerConvID::has_playerid() const {
  return _internal_has_playerid();
}
inline void PlayerConvID::clear_playerid() {
  playerid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t PlayerConvID::_internal_playerid() const {
  return playerid_;
}
inline int64_t PlayerConvID::playerid() const {
  // @@protoc_insertion_point(field_get:XrPb.PlayerConvID.playerid)
  return _internal_playerid();
}
inline void PlayerConvID::_internal_set_playerid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  playerid_ = value;
}
inline void PlayerConvID::set_playerid(int64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:XrPb.PlayerConvID.playerid)
}

// optional uint32 convid = 2;
inline bool PlayerConvID::_internal_has_convid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerConvID::has_convid() const {
  return _internal_has_convid();
}
inline void PlayerConvID::clear_convid() {
  convid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PlayerConvID::_internal_convid() const {
  return convid_;
}
inline uint32_t PlayerConvID::convid() const {
  // @@protoc_insertion_point(field_get:XrPb.PlayerConvID.convid)
  return _internal_convid();
}
inline void PlayerConvID::_internal_set_convid(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  convid_ = value;
}
inline void PlayerConvID::set_convid(uint32_t value) {
  _internal_set_convid(value);
  // @@protoc_insertion_point(field_set:XrPb.PlayerConvID.convid)
}

// -------------------------------------------------------------------

// Msg_SvrScene_CreateRoom_SC

// int64 roomId = 1;
inline void Msg_SvrScene_CreateRoom_SC::clear_roomid() {
  roomid_ = int64_t{0};
}
inline int64_t Msg_SvrScene_CreateRoom_SC::_internal_roomid() const {
  return roomid_;
}
inline int64_t Msg_SvrScene_CreateRoom_SC::roomid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_SC.roomId)
  return _internal_roomid();
}
inline void Msg_SvrScene_CreateRoom_SC::_internal_set_roomid(int64_t value) {
  
  roomid_ = value;
}
inline void Msg_SvrScene_CreateRoom_SC::set_roomid(int64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_SC.roomId)
}

// optional string ip = 2;
inline bool Msg_SvrScene_CreateRoom_SC::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_SvrScene_CreateRoom_SC::has_ip() const {
  return _internal_has_ip();
}
inline void Msg_SvrScene_CreateRoom_SC::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Msg_SvrScene_CreateRoom_SC::ip() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_SC.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_SvrScene_CreateRoom_SC::set_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_SC.ip)
}
inline std::string* Msg_SvrScene_CreateRoom_SC::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_CreateRoom_SC.ip)
  return _s;
}
inline const std::string& Msg_SvrScene_CreateRoom_SC::_internal_ip() const {
  return ip_.Get();
}
inline void Msg_SvrScene_CreateRoom_SC::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_CreateRoom_SC::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_CreateRoom_SC::release_ip() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_SvrScene_CreateRoom_SC.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_SvrScene_CreateRoom_SC::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_SvrScene_CreateRoom_SC.ip)
}

// optional uint32 port = 3;
inline bool Msg_SvrScene_CreateRoom_SC::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Msg_SvrScene_CreateRoom_SC::has_port() const {
  return _internal_has_port();
}
inline void Msg_SvrScene_CreateRoom_SC::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Msg_SvrScene_CreateRoom_SC::_internal_port() const {
  return port_;
}
inline uint32_t Msg_SvrScene_CreateRoom_SC::port() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_SC.port)
  return _internal_port();
}
inline void Msg_SvrScene_CreateRoom_SC::_internal_set_port(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  port_ = value;
}
inline void Msg_SvrScene_CreateRoom_SC::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_SC.port)
}

// .XrPb.ResultCode code = 4;
inline void Msg_SvrScene_CreateRoom_SC::clear_code() {
  code_ = 0;
}
inline ::XrPb::ResultCode Msg_SvrScene_CreateRoom_SC::_internal_code() const {
  return static_cast< ::XrPb::ResultCode >(code_);
}
inline ::XrPb::ResultCode Msg_SvrScene_CreateRoom_SC::code() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_SC.code)
  return _internal_code();
}
inline void Msg_SvrScene_CreateRoom_SC::_internal_set_code(::XrPb::ResultCode value) {
  
  code_ = value;
}
inline void Msg_SvrScene_CreateRoom_SC::set_code(::XrPb::ResultCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_SC.code)
}

// string roomLogID = 5;
inline void Msg_SvrScene_CreateRoom_SC::clear_roomlogid() {
  roomlogid_.ClearToEmpty();
}
inline const std::string& Msg_SvrScene_CreateRoom_SC::roomlogid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_SC.roomLogID)
  return _internal_roomlogid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_SvrScene_CreateRoom_SC::set_roomlogid(ArgT0&& arg0, ArgT... args) {
 
 roomlogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_SC.roomLogID)
}
inline std::string* Msg_SvrScene_CreateRoom_SC::mutable_roomlogid() {
  std::string* _s = _internal_mutable_roomlogid();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_CreateRoom_SC.roomLogID)
  return _s;
}
inline const std::string& Msg_SvrScene_CreateRoom_SC::_internal_roomlogid() const {
  return roomlogid_.Get();
}
inline void Msg_SvrScene_CreateRoom_SC::_internal_set_roomlogid(const std::string& value) {
  
  roomlogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_CreateRoom_SC::_internal_mutable_roomlogid() {
  
  return roomlogid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_CreateRoom_SC::release_roomlogid() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_SvrScene_CreateRoom_SC.roomLogID)
  return roomlogid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_SvrScene_CreateRoom_SC::set_allocated_roomlogid(std::string* roomlogid) {
  if (roomlogid != nullptr) {
    
  } else {
    
  }
  roomlogid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomlogid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomlogid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomlogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_SvrScene_CreateRoom_SC.roomLogID)
}

// string oldlogID = 6;
inline void Msg_SvrScene_CreateRoom_SC::clear_oldlogid() {
  oldlogid_.ClearToEmpty();
}
inline const std::string& Msg_SvrScene_CreateRoom_SC::oldlogid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_SC.oldlogID)
  return _internal_oldlogid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_SvrScene_CreateRoom_SC::set_oldlogid(ArgT0&& arg0, ArgT... args) {
 
 oldlogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_SC.oldlogID)
}
inline std::string* Msg_SvrScene_CreateRoom_SC::mutable_oldlogid() {
  std::string* _s = _internal_mutable_oldlogid();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_CreateRoom_SC.oldlogID)
  return _s;
}
inline const std::string& Msg_SvrScene_CreateRoom_SC::_internal_oldlogid() const {
  return oldlogid_.Get();
}
inline void Msg_SvrScene_CreateRoom_SC::_internal_set_oldlogid(const std::string& value) {
  
  oldlogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_CreateRoom_SC::_internal_mutable_oldlogid() {
  
  return oldlogid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_CreateRoom_SC::release_oldlogid() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_SvrScene_CreateRoom_SC.oldlogID)
  return oldlogid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_SvrScene_CreateRoom_SC::set_allocated_oldlogid(std::string* oldlogid) {
  if (oldlogid != nullptr) {
    
  } else {
    
  }
  oldlogid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oldlogid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (oldlogid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    oldlogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_SvrScene_CreateRoom_SC.oldlogID)
}

// optional uint32 roomareanid = 7;
inline bool Msg_SvrScene_CreateRoom_SC::_internal_has_roomareanid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Msg_SvrScene_CreateRoom_SC::has_roomareanid() const {
  return _internal_has_roomareanid();
}
inline void Msg_SvrScene_CreateRoom_SC::clear_roomareanid() {
  roomareanid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t Msg_SvrScene_CreateRoom_SC::_internal_roomareanid() const {
  return roomareanid_;
}
inline uint32_t Msg_SvrScene_CreateRoom_SC::roomareanid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_SC.roomareanid)
  return _internal_roomareanid();
}
inline void Msg_SvrScene_CreateRoom_SC::_internal_set_roomareanid(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  roomareanid_ = value;
}
inline void Msg_SvrScene_CreateRoom_SC::set_roomareanid(uint32_t value) {
  _internal_set_roomareanid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_SC.roomareanid)
}

// repeated .XrPb.PlayerConvID playerconv = 8;
inline int Msg_SvrScene_CreateRoom_SC::_internal_playerconv_size() const {
  return playerconv_.size();
}
inline int Msg_SvrScene_CreateRoom_SC::playerconv_size() const {
  return _internal_playerconv_size();
}
inline void Msg_SvrScene_CreateRoom_SC::clear_playerconv() {
  playerconv_.Clear();
}
inline ::XrPb::PlayerConvID* Msg_SvrScene_CreateRoom_SC::mutable_playerconv(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_CreateRoom_SC.playerconv)
  return playerconv_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::PlayerConvID >*
Msg_SvrScene_CreateRoom_SC::mutable_playerconv() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_SvrScene_CreateRoom_SC.playerconv)
  return &playerconv_;
}
inline const ::XrPb::PlayerConvID& Msg_SvrScene_CreateRoom_SC::_internal_playerconv(int index) const {
  return playerconv_.Get(index);
}
inline const ::XrPb::PlayerConvID& Msg_SvrScene_CreateRoom_SC::playerconv(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_SC.playerconv)
  return _internal_playerconv(index);
}
inline ::XrPb::PlayerConvID* Msg_SvrScene_CreateRoom_SC::_internal_add_playerconv() {
  return playerconv_.Add();
}
inline ::XrPb::PlayerConvID* Msg_SvrScene_CreateRoom_SC::add_playerconv() {
  ::XrPb::PlayerConvID* _add = _internal_add_playerconv();
  // @@protoc_insertion_point(field_add:XrPb.Msg_SvrScene_CreateRoom_SC.playerconv)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::PlayerConvID >&
Msg_SvrScene_CreateRoom_SC::playerconv() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_SvrScene_CreateRoom_SC.playerconv)
  return playerconv_;
}

// optional bool udp = 9;
inline bool Msg_SvrScene_CreateRoom_SC::_internal_has_udp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Msg_SvrScene_CreateRoom_SC::has_udp() const {
  return _internal_has_udp();
}
inline void Msg_SvrScene_CreateRoom_SC::clear_udp() {
  udp_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Msg_SvrScene_CreateRoom_SC::_internal_udp() const {
  return udp_;
}
inline bool Msg_SvrScene_CreateRoom_SC::udp() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_SC.udp)
  return _internal_udp();
}
inline void Msg_SvrScene_CreateRoom_SC::_internal_set_udp(bool value) {
  _has_bits_[0] |= 0x00000010u;
  udp_ = value;
}
inline void Msg_SvrScene_CreateRoom_SC::set_udp(bool value) {
  _internal_set_udp(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_SC.udp)
}

// optional int64 createms = 10;
inline bool Msg_SvrScene_CreateRoom_SC::_internal_has_createms() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Msg_SvrScene_CreateRoom_SC::has_createms() const {
  return _internal_has_createms();
}
inline void Msg_SvrScene_CreateRoom_SC::clear_createms() {
  createms_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t Msg_SvrScene_CreateRoom_SC::_internal_createms() const {
  return createms_;
}
inline int64_t Msg_SvrScene_CreateRoom_SC::createms() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_SC.createms)
  return _internal_createms();
}
inline void Msg_SvrScene_CreateRoom_SC::_internal_set_createms(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  createms_ = value;
}
inline void Msg_SvrScene_CreateRoom_SC::set_createms(int64_t value) {
  _internal_set_createms(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_SC.createms)
}

// optional string linkip = 11;
inline bool Msg_SvrScene_CreateRoom_SC::_internal_has_linkip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_SvrScene_CreateRoom_SC::has_linkip() const {
  return _internal_has_linkip();
}
inline void Msg_SvrScene_CreateRoom_SC::clear_linkip() {
  linkip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Msg_SvrScene_CreateRoom_SC::linkip() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_CreateRoom_SC.linkip)
  return _internal_linkip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_SvrScene_CreateRoom_SC::set_linkip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 linkip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_CreateRoom_SC.linkip)
}
inline std::string* Msg_SvrScene_CreateRoom_SC::mutable_linkip() {
  std::string* _s = _internal_mutable_linkip();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_CreateRoom_SC.linkip)
  return _s;
}
inline const std::string& Msg_SvrScene_CreateRoom_SC::_internal_linkip() const {
  return linkip_.Get();
}
inline void Msg_SvrScene_CreateRoom_SC::_internal_set_linkip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  linkip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_CreateRoom_SC::_internal_mutable_linkip() {
  _has_bits_[0] |= 0x00000002u;
  return linkip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_CreateRoom_SC::release_linkip() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_SvrScene_CreateRoom_SC.linkip)
  if (!_internal_has_linkip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = linkip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (linkip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    linkip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Msg_SvrScene_CreateRoom_SC::set_allocated_linkip(std::string* linkip) {
  if (linkip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  linkip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), linkip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (linkip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    linkip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_SvrScene_CreateRoom_SC.linkip)
}

// -------------------------------------------------------------------

// Msg_SvrScene_heart_cs

// -------------------------------------------------------------------

// Msg_SvrScene_RoomInfo_Submit

// int64 roomId = 1;
inline void Msg_SvrScene_RoomInfo_Submit::clear_roomid() {
  roomid_ = int64_t{0};
}
inline int64_t Msg_SvrScene_RoomInfo_Submit::_internal_roomid() const {
  return roomid_;
}
inline int64_t Msg_SvrScene_RoomInfo_Submit::roomid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_RoomInfo_Submit.roomId)
  return _internal_roomid();
}
inline void Msg_SvrScene_RoomInfo_Submit::_internal_set_roomid(int64_t value) {
  
  roomid_ = value;
}
inline void Msg_SvrScene_RoomInfo_Submit::set_roomid(int64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_RoomInfo_Submit.roomId)
}

// .XrPb.RoomStatus roomStatus = 2;
inline void Msg_SvrScene_RoomInfo_Submit::clear_roomstatus() {
  roomstatus_ = 0;
}
inline ::XrPb::RoomStatus Msg_SvrScene_RoomInfo_Submit::_internal_roomstatus() const {
  return static_cast< ::XrPb::RoomStatus >(roomstatus_);
}
inline ::XrPb::RoomStatus Msg_SvrScene_RoomInfo_Submit::roomstatus() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_RoomInfo_Submit.roomStatus)
  return _internal_roomstatus();
}
inline void Msg_SvrScene_RoomInfo_Submit::_internal_set_roomstatus(::XrPb::RoomStatus value) {
  
  roomstatus_ = value;
}
inline void Msg_SvrScene_RoomInfo_Submit::set_roomstatus(::XrPb::RoomStatus value) {
  _internal_set_roomstatus(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_RoomInfo_Submit.roomStatus)
}

// uint32 PlayerNum = 3;
inline void Msg_SvrScene_RoomInfo_Submit::clear_playernum() {
  playernum_ = 0u;
}
inline uint32_t Msg_SvrScene_RoomInfo_Submit::_internal_playernum() const {
  return playernum_;
}
inline uint32_t Msg_SvrScene_RoomInfo_Submit::playernum() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_RoomInfo_Submit.PlayerNum)
  return _internal_playernum();
}
inline void Msg_SvrScene_RoomInfo_Submit::_internal_set_playernum(uint32_t value) {
  
  playernum_ = value;
}
inline void Msg_SvrScene_RoomInfo_Submit::set_playernum(uint32_t value) {
  _internal_set_playernum(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_RoomInfo_Submit.PlayerNum)
}

// string roomLogID = 4;
inline void Msg_SvrScene_RoomInfo_Submit::clear_roomlogid() {
  roomlogid_.ClearToEmpty();
}
inline const std::string& Msg_SvrScene_RoomInfo_Submit::roomlogid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_RoomInfo_Submit.roomLogID)
  return _internal_roomlogid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_SvrScene_RoomInfo_Submit::set_roomlogid(ArgT0&& arg0, ArgT... args) {
 
 roomlogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_RoomInfo_Submit.roomLogID)
}
inline std::string* Msg_SvrScene_RoomInfo_Submit::mutable_roomlogid() {
  std::string* _s = _internal_mutable_roomlogid();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_RoomInfo_Submit.roomLogID)
  return _s;
}
inline const std::string& Msg_SvrScene_RoomInfo_Submit::_internal_roomlogid() const {
  return roomlogid_.Get();
}
inline void Msg_SvrScene_RoomInfo_Submit::_internal_set_roomlogid(const std::string& value) {
  
  roomlogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_RoomInfo_Submit::_internal_mutable_roomlogid() {
  
  return roomlogid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_RoomInfo_Submit::release_roomlogid() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_SvrScene_RoomInfo_Submit.roomLogID)
  return roomlogid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_SvrScene_RoomInfo_Submit::set_allocated_roomlogid(std::string* roomlogid) {
  if (roomlogid != nullptr) {
    
  } else {
    
  }
  roomlogid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomlogid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomlogid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomlogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_SvrScene_RoomInfo_Submit.roomLogID)
}

// -------------------------------------------------------------------

// Msg_SvrScene_ReportInfo_Submit

// uint32 roomNum = 1;
inline void Msg_SvrScene_ReportInfo_Submit::clear_roomnum() {
  roomnum_ = 0u;
}
inline uint32_t Msg_SvrScene_ReportInfo_Submit::_internal_roomnum() const {
  return roomnum_;
}
inline uint32_t Msg_SvrScene_ReportInfo_Submit::roomnum() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_ReportInfo_Submit.roomNum)
  return _internal_roomnum();
}
inline void Msg_SvrScene_ReportInfo_Submit::_internal_set_roomnum(uint32_t value) {
  
  roomnum_ = value;
}
inline void Msg_SvrScene_ReportInfo_Submit::set_roomnum(uint32_t value) {
  _internal_set_roomnum(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_ReportInfo_Submit.roomNum)
}

// uint32 PlayerNum = 2;
inline void Msg_SvrScene_ReportInfo_Submit::clear_playernum() {
  playernum_ = 0u;
}
inline uint32_t Msg_SvrScene_ReportInfo_Submit::_internal_playernum() const {
  return playernum_;
}
inline uint32_t Msg_SvrScene_ReportInfo_Submit::playernum() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_ReportInfo_Submit.PlayerNum)
  return _internal_playernum();
}
inline void Msg_SvrScene_ReportInfo_Submit::_internal_set_playernum(uint32_t value) {
  
  playernum_ = value;
}
inline void Msg_SvrScene_ReportInfo_Submit::set_playernum(uint32_t value) {
  _internal_set_playernum(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_ReportInfo_Submit.PlayerNum)
}

// -------------------------------------------------------------------

// Msg_SvrScene_EnterRoom_CS

// int64 uiRoleId = 1;
inline void Msg_SvrScene_EnterRoom_CS::clear_uiroleid() {
  uiroleid_ = int64_t{0};
}
inline int64_t Msg_SvrScene_EnterRoom_CS::_internal_uiroleid() const {
  return uiroleid_;
}
inline int64_t Msg_SvrScene_EnterRoom_CS::uiroleid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_EnterRoom_CS.uiRoleId)
  return _internal_uiroleid();
}
inline void Msg_SvrScene_EnterRoom_CS::_internal_set_uiroleid(int64_t value) {
  
  uiroleid_ = value;
}
inline void Msg_SvrScene_EnterRoom_CS::set_uiroleid(int64_t value) {
  _internal_set_uiroleid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_EnterRoom_CS.uiRoleId)
}

// int64 uiRoomId = 2;
inline void Msg_SvrScene_EnterRoom_CS::clear_uiroomid() {
  uiroomid_ = int64_t{0};
}
inline int64_t Msg_SvrScene_EnterRoom_CS::_internal_uiroomid() const {
  return uiroomid_;
}
inline int64_t Msg_SvrScene_EnterRoom_CS::uiroomid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_EnterRoom_CS.uiRoomId)
  return _internal_uiroomid();
}
inline void Msg_SvrScene_EnterRoom_CS::_internal_set_uiroomid(int64_t value) {
  
  uiroomid_ = value;
}
inline void Msg_SvrScene_EnterRoom_CS::set_uiroomid(int64_t value) {
  _internal_set_uiroomid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_EnterRoom_CS.uiRoomId)
}

// -------------------------------------------------------------------

// Msg_SvrScene_EnterRoom_PUSH

// -------------------------------------------------------------------

// Msg_SvrScene_PlayerInfo_Submit

// int64 playerId = 1;
inline void Msg_SvrScene_PlayerInfo_Submit::clear_playerid() {
  playerid_ = int64_t{0};
}
inline int64_t Msg_SvrScene_PlayerInfo_Submit::_internal_playerid() const {
  return playerid_;
}
inline int64_t Msg_SvrScene_PlayerInfo_Submit::playerid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_PlayerInfo_Submit.playerId)
  return _internal_playerid();
}
inline void Msg_SvrScene_PlayerInfo_Submit::_internal_set_playerid(int64_t value) {
  
  playerid_ = value;
}
inline void Msg_SvrScene_PlayerInfo_Submit::set_playerid(int64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_PlayerInfo_Submit.playerId)
}

// int64 roomId = 2;
inline void Msg_SvrScene_PlayerInfo_Submit::clear_roomid() {
  roomid_ = int64_t{0};
}
inline int64_t Msg_SvrScene_PlayerInfo_Submit::_internal_roomid() const {
  return roomid_;
}
inline int64_t Msg_SvrScene_PlayerInfo_Submit::roomid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_PlayerInfo_Submit.roomId)
  return _internal_roomid();
}
inline void Msg_SvrScene_PlayerInfo_Submit::_internal_set_roomid(int64_t value) {
  
  roomid_ = value;
}
inline void Msg_SvrScene_PlayerInfo_Submit::set_roomid(int64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_PlayerInfo_Submit.roomId)
}

// .XrPb.RoomPlayerStatus Status = 3;
inline void Msg_SvrScene_PlayerInfo_Submit::clear_status() {
  status_ = 0;
}
inline ::XrPb::RoomPlayerStatus Msg_SvrScene_PlayerInfo_Submit::_internal_status() const {
  return static_cast< ::XrPb::RoomPlayerStatus >(status_);
}
inline ::XrPb::RoomPlayerStatus Msg_SvrScene_PlayerInfo_Submit::status() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_PlayerInfo_Submit.Status)
  return _internal_status();
}
inline void Msg_SvrScene_PlayerInfo_Submit::_internal_set_status(::XrPb::RoomPlayerStatus value) {
  
  status_ = value;
}
inline void Msg_SvrScene_PlayerInfo_Submit::set_status(::XrPb::RoomPlayerStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_PlayerInfo_Submit.Status)
}

// -------------------------------------------------------------------

// Msg_SvrScene_Verify_EnterRoom_CS

// int64 uiRoomId = 1;
inline void Msg_SvrScene_Verify_EnterRoom_CS::clear_uiroomid() {
  uiroomid_ = int64_t{0};
}
inline int64_t Msg_SvrScene_Verify_EnterRoom_CS::_internal_uiroomid() const {
  return uiroomid_;
}
inline int64_t Msg_SvrScene_Verify_EnterRoom_CS::uiroomid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Verify_EnterRoom_CS.uiRoomId)
  return _internal_uiroomid();
}
inline void Msg_SvrScene_Verify_EnterRoom_CS::_internal_set_uiroomid(int64_t value) {
  
  uiroomid_ = value;
}
inline void Msg_SvrScene_Verify_EnterRoom_CS::set_uiroomid(int64_t value) {
  _internal_set_uiroomid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Verify_EnterRoom_CS.uiRoomId)
}

// string mapName = 2;
inline void Msg_SvrScene_Verify_EnterRoom_CS::clear_mapname() {
  mapname_.ClearToEmpty();
}
inline const std::string& Msg_SvrScene_Verify_EnterRoom_CS::mapname() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Verify_EnterRoom_CS.mapName)
  return _internal_mapname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_SvrScene_Verify_EnterRoom_CS::set_mapname(ArgT0&& arg0, ArgT... args) {
 
 mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Verify_EnterRoom_CS.mapName)
}
inline std::string* Msg_SvrScene_Verify_EnterRoom_CS::mutable_mapname() {
  std::string* _s = _internal_mutable_mapname();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_Verify_EnterRoom_CS.mapName)
  return _s;
}
inline const std::string& Msg_SvrScene_Verify_EnterRoom_CS::_internal_mapname() const {
  return mapname_.Get();
}
inline void Msg_SvrScene_Verify_EnterRoom_CS::_internal_set_mapname(const std::string& value) {
  
  mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_Verify_EnterRoom_CS::_internal_mutable_mapname() {
  
  return mapname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_Verify_EnterRoom_CS::release_mapname() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_SvrScene_Verify_EnterRoom_CS.mapName)
  return mapname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_SvrScene_Verify_EnterRoom_CS::set_allocated_mapname(std::string* mapname) {
  if (mapname != nullptr) {
    
  } else {
    
  }
  mapname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mapname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mapname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_SvrScene_Verify_EnterRoom_CS.mapName)
}

// repeated .XrPb.ScenePlayerData players = 3;
inline int Msg_SvrScene_Verify_EnterRoom_CS::_internal_players_size() const {
  return players_.size();
}
inline int Msg_SvrScene_Verify_EnterRoom_CS::players_size() const {
  return _internal_players_size();
}
inline ::XrPb::ScenePlayerData* Msg_SvrScene_Verify_EnterRoom_CS::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_Verify_EnterRoom_CS.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ScenePlayerData >*
Msg_SvrScene_Verify_EnterRoom_CS::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_SvrScene_Verify_EnterRoom_CS.players)
  return &players_;
}
inline const ::XrPb::ScenePlayerData& Msg_SvrScene_Verify_EnterRoom_CS::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::XrPb::ScenePlayerData& Msg_SvrScene_Verify_EnterRoom_CS::players(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Verify_EnterRoom_CS.players)
  return _internal_players(index);
}
inline ::XrPb::ScenePlayerData* Msg_SvrScene_Verify_EnterRoom_CS::_internal_add_players() {
  return players_.Add();
}
inline ::XrPb::ScenePlayerData* Msg_SvrScene_Verify_EnterRoom_CS::add_players() {
  ::XrPb::ScenePlayerData* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:XrPb.Msg_SvrScene_Verify_EnterRoom_CS.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::ScenePlayerData >&
Msg_SvrScene_Verify_EnterRoom_CS::players() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_SvrScene_Verify_EnterRoom_CS.players)
  return players_;
}

// -------------------------------------------------------------------

// Msg_SvrScene_Verify_OrderData_CS

// int64 uiRoomId = 1;
inline void Msg_SvrScene_Verify_OrderData_CS::clear_uiroomid() {
  uiroomid_ = int64_t{0};
}
inline int64_t Msg_SvrScene_Verify_OrderData_CS::_internal_uiroomid() const {
  return uiroomid_;
}
inline int64_t Msg_SvrScene_Verify_OrderData_CS::uiroomid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Verify_OrderData_CS.uiRoomId)
  return _internal_uiroomid();
}
inline void Msg_SvrScene_Verify_OrderData_CS::_internal_set_uiroomid(int64_t value) {
  
  uiroomid_ = value;
}
inline void Msg_SvrScene_Verify_OrderData_CS::set_uiroomid(int64_t value) {
  _internal_set_uiroomid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Verify_OrderData_CS.uiRoomId)
}

// uint32 roomTime = 2;
inline void Msg_SvrScene_Verify_OrderData_CS::clear_roomtime() {
  roomtime_ = 0u;
}
inline uint32_t Msg_SvrScene_Verify_OrderData_CS::_internal_roomtime() const {
  return roomtime_;
}
inline uint32_t Msg_SvrScene_Verify_OrderData_CS::roomtime() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Verify_OrderData_CS.roomTime)
  return _internal_roomtime();
}
inline void Msg_SvrScene_Verify_OrderData_CS::_internal_set_roomtime(uint32_t value) {
  
  roomtime_ = value;
}
inline void Msg_SvrScene_Verify_OrderData_CS::set_roomtime(uint32_t value) {
  _internal_set_roomtime(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Verify_OrderData_CS.roomTime)
}

// uint32 serverTime = 3;
inline void Msg_SvrScene_Verify_OrderData_CS::clear_servertime() {
  servertime_ = 0u;
}
inline uint32_t Msg_SvrScene_Verify_OrderData_CS::_internal_servertime() const {
  return servertime_;
}
inline uint32_t Msg_SvrScene_Verify_OrderData_CS::servertime() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Verify_OrderData_CS.serverTime)
  return _internal_servertime();
}
inline void Msg_SvrScene_Verify_OrderData_CS::_internal_set_servertime(uint32_t value) {
  
  servertime_ = value;
}
inline void Msg_SvrScene_Verify_OrderData_CS::set_servertime(uint32_t value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Verify_OrderData_CS.serverTime)
}

// -------------------------------------------------------------------

// Msg_SvrScene_Verify_LeaveRoom_CS

// int64 uiRoomId = 1;
inline void Msg_SvrScene_Verify_LeaveRoom_CS::clear_uiroomid() {
  uiroomid_ = int64_t{0};
}
inline int64_t Msg_SvrScene_Verify_LeaveRoom_CS::_internal_uiroomid() const {
  return uiroomid_;
}
inline int64_t Msg_SvrScene_Verify_LeaveRoom_CS::uiroomid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Verify_LeaveRoom_CS.uiRoomId)
  return _internal_uiroomid();
}
inline void Msg_SvrScene_Verify_LeaveRoom_CS::_internal_set_uiroomid(int64_t value) {
  
  uiroomid_ = value;
}
inline void Msg_SvrScene_Verify_LeaveRoom_CS::set_uiroomid(int64_t value) {
  _internal_set_uiroomid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Verify_LeaveRoom_CS.uiRoomId)
}

// -------------------------------------------------------------------

// Msg_SvrScene_Result_PUSH

// int64 uiRoomId = 1;
inline void Msg_SvrScene_Result_PUSH::clear_uiroomid() {
  uiroomid_ = int64_t{0};
}
inline int64_t Msg_SvrScene_Result_PUSH::_internal_uiroomid() const {
  return uiroomid_;
}
inline int64_t Msg_SvrScene_Result_PUSH::uiroomid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Result_PUSH.uiRoomId)
  return _internal_uiroomid();
}
inline void Msg_SvrScene_Result_PUSH::_internal_set_uiroomid(int64_t value) {
  
  uiroomid_ = value;
}
inline void Msg_SvrScene_Result_PUSH::set_uiroomid(int64_t value) {
  _internal_set_uiroomid(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Result_PUSH.uiRoomId)
}

// repeated .XrPb.SceneResultPlayerData oSceneResult = 2;
inline int Msg_SvrScene_Result_PUSH::_internal_osceneresult_size() const {
  return osceneresult_.size();
}
inline int Msg_SvrScene_Result_PUSH::osceneresult_size() const {
  return _internal_osceneresult_size();
}
inline ::XrPb::SceneResultPlayerData* Msg_SvrScene_Result_PUSH::mutable_osceneresult(int index) {
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_Result_PUSH.oSceneResult)
  return osceneresult_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::SceneResultPlayerData >*
Msg_SvrScene_Result_PUSH::mutable_osceneresult() {
  // @@protoc_insertion_point(field_mutable_list:XrPb.Msg_SvrScene_Result_PUSH.oSceneResult)
  return &osceneresult_;
}
inline const ::XrPb::SceneResultPlayerData& Msg_SvrScene_Result_PUSH::_internal_osceneresult(int index) const {
  return osceneresult_.Get(index);
}
inline const ::XrPb::SceneResultPlayerData& Msg_SvrScene_Result_PUSH::osceneresult(int index) const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Result_PUSH.oSceneResult)
  return _internal_osceneresult(index);
}
inline ::XrPb::SceneResultPlayerData* Msg_SvrScene_Result_PUSH::_internal_add_osceneresult() {
  return osceneresult_.Add();
}
inline ::XrPb::SceneResultPlayerData* Msg_SvrScene_Result_PUSH::add_osceneresult() {
  ::XrPb::SceneResultPlayerData* _add = _internal_add_osceneresult();
  // @@protoc_insertion_point(field_add:XrPb.Msg_SvrScene_Result_PUSH.oSceneResult)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::XrPb::SceneResultPlayerData >&
Msg_SvrScene_Result_PUSH::osceneresult() const {
  // @@protoc_insertion_point(field_list:XrPb.Msg_SvrScene_Result_PUSH.oSceneResult)
  return osceneresult_;
}

// .XrPb.RoomResState roomStatus = 3;
inline bool Msg_SvrScene_Result_PUSH::_internal_has_roomstatus() const {
  return this != internal_default_instance() && roomstatus_ != nullptr;
}
inline bool Msg_SvrScene_Result_PUSH::has_roomstatus() const {
  return _internal_has_roomstatus();
}
inline void Msg_SvrScene_Result_PUSH::clear_roomstatus() {
  if (GetArenaForAllocation() == nullptr && roomstatus_ != nullptr) {
    delete roomstatus_;
  }
  roomstatus_ = nullptr;
}
inline const ::XrPb::RoomResState& Msg_SvrScene_Result_PUSH::_internal_roomstatus() const {
  const ::XrPb::RoomResState* p = roomstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::XrPb::RoomResState&>(
      ::XrPb::_RoomResState_default_instance_);
}
inline const ::XrPb::RoomResState& Msg_SvrScene_Result_PUSH::roomstatus() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Result_PUSH.roomStatus)
  return _internal_roomstatus();
}
inline void Msg_SvrScene_Result_PUSH::unsafe_arena_set_allocated_roomstatus(
    ::XrPb::RoomResState* roomstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roomstatus_);
  }
  roomstatus_ = roomstatus;
  if (roomstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:XrPb.Msg_SvrScene_Result_PUSH.roomStatus)
}
inline ::XrPb::RoomResState* Msg_SvrScene_Result_PUSH::release_roomstatus() {
  
  ::XrPb::RoomResState* temp = roomstatus_;
  roomstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::XrPb::RoomResState* Msg_SvrScene_Result_PUSH::unsafe_arena_release_roomstatus() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_SvrScene_Result_PUSH.roomStatus)
  
  ::XrPb::RoomResState* temp = roomstatus_;
  roomstatus_ = nullptr;
  return temp;
}
inline ::XrPb::RoomResState* Msg_SvrScene_Result_PUSH::_internal_mutable_roomstatus() {
  
  if (roomstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::XrPb::RoomResState>(GetArenaForAllocation());
    roomstatus_ = p;
  }
  return roomstatus_;
}
inline ::XrPb::RoomResState* Msg_SvrScene_Result_PUSH::mutable_roomstatus() {
  ::XrPb::RoomResState* _msg = _internal_mutable_roomstatus();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_Result_PUSH.roomStatus)
  return _msg;
}
inline void Msg_SvrScene_Result_PUSH::set_allocated_roomstatus(::XrPb::RoomResState* roomstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete roomstatus_;
  }
  if (roomstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::XrPb::RoomResState>::GetOwningArena(roomstatus);
    if (message_arena != submessage_arena) {
      roomstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roomstatus, submessage_arena);
    }
    
  } else {
    
  }
  roomstatus_ = roomstatus;
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_SvrScene_Result_PUSH.roomStatus)
}

// string roomLogID = 4;
inline void Msg_SvrScene_Result_PUSH::clear_roomlogid() {
  roomlogid_.ClearToEmpty();
}
inline const std::string& Msg_SvrScene_Result_PUSH::roomlogid() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_Result_PUSH.roomLogID)
  return _internal_roomlogid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_SvrScene_Result_PUSH::set_roomlogid(ArgT0&& arg0, ArgT... args) {
 
 roomlogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_Result_PUSH.roomLogID)
}
inline std::string* Msg_SvrScene_Result_PUSH::mutable_roomlogid() {
  std::string* _s = _internal_mutable_roomlogid();
  // @@protoc_insertion_point(field_mutable:XrPb.Msg_SvrScene_Result_PUSH.roomLogID)
  return _s;
}
inline const std::string& Msg_SvrScene_Result_PUSH::_internal_roomlogid() const {
  return roomlogid_.Get();
}
inline void Msg_SvrScene_Result_PUSH::_internal_set_roomlogid(const std::string& value) {
  
  roomlogid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_Result_PUSH::_internal_mutable_roomlogid() {
  
  return roomlogid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Msg_SvrScene_Result_PUSH::release_roomlogid() {
  // @@protoc_insertion_point(field_release:XrPb.Msg_SvrScene_Result_PUSH.roomLogID)
  return roomlogid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Msg_SvrScene_Result_PUSH::set_allocated_roomlogid(std::string* roomlogid) {
  if (roomlogid != nullptr) {
    
  } else {
    
  }
  roomlogid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomlogid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomlogid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    roomlogid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:XrPb.Msg_SvrScene_Result_PUSH.roomLogID)
}

// -------------------------------------------------------------------

// Msg_SvrScene_RoomNum_Push

// optional uint32 maxroom = 1;
inline bool Msg_SvrScene_RoomNum_Push::_internal_has_maxroom() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg_SvrScene_RoomNum_Push::has_maxroom() const {
  return _internal_has_maxroom();
}
inline void Msg_SvrScene_RoomNum_Push::clear_maxroom() {
  maxroom_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Msg_SvrScene_RoomNum_Push::_internal_maxroom() const {
  return maxroom_;
}
inline uint32_t Msg_SvrScene_RoomNum_Push::maxroom() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_RoomNum_Push.maxroom)
  return _internal_maxroom();
}
inline void Msg_SvrScene_RoomNum_Push::_internal_set_maxroom(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  maxroom_ = value;
}
inline void Msg_SvrScene_RoomNum_Push::set_maxroom(uint32_t value) {
  _internal_set_maxroom(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_RoomNum_Push.maxroom)
}

// optional uint32 roomsum = 2;
inline bool Msg_SvrScene_RoomNum_Push::_internal_has_roomsum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg_SvrScene_RoomNum_Push::has_roomsum() const {
  return _internal_has_roomsum();
}
inline void Msg_SvrScene_RoomNum_Push::clear_roomsum() {
  roomsum_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Msg_SvrScene_RoomNum_Push::_internal_roomsum() const {
  return roomsum_;
}
inline uint32_t Msg_SvrScene_RoomNum_Push::roomsum() const {
  // @@protoc_insertion_point(field_get:XrPb.Msg_SvrScene_RoomNum_Push.roomsum)
  return _internal_roomsum();
}
inline void Msg_SvrScene_RoomNum_Push::_internal_set_roomsum(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  roomsum_ = value;
}
inline void Msg_SvrScene_RoomNum_Push::set_roomsum(uint32_t value) {
  _internal_set_roomsum(value);
  // @@protoc_insertion_point(field_set:XrPb.Msg_SvrScene_RoomNum_Push.roomsum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XrPb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::XrPb::MsgSvrMod_Scene_MsgId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::MsgSvrMod_Scene_MsgId>() {
  return ::XrPb::MsgSvrMod_Scene_MsgId_descriptor();
}
template <> struct is_proto_enum< ::XrPb::RoomStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::RoomStatus>() {
  return ::XrPb::RoomStatus_descriptor();
}
template <> struct is_proto_enum< ::XrPb::RoomPlayerStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::XrPb::RoomPlayerStatus>() {
  return ::XrPb::RoomPlayerStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_2fMsgServerScene_2eproto
